{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/A-Missing-Semester-of-Your-CS-Education.md","hash":"987d9d9e4c7909760a046b5f604136ddba8976df","modified":1695187459761},{"_id":"source/_posts/CSS记录.md","hash":"1bf5c6b043598db779e2b906bf83fd438feb344b","modified":1694071248354},{"_id":"source/_posts/JavaScript基础.md","hash":"bd234e6a6c54ccaa6ef73e73dbe63ed2f5abb816","modified":1694071263297},{"_id":"source/_posts/JavaScript进阶.md","hash":"8d8d0bc5e48c8faca2db72f6078fc4e5ec682f42","modified":1694071256658},{"_id":"source/_posts/hello-world.md","hash":"9faabdf571be9d6bf7c2738b590bbab042c7f0d1","modified":1692780531055},{"_id":"source/_posts/hexo-blog-instruction-list.md","hash":"b6eb924c19c69127e021ce584492dea35ec711cf","modified":1692788317791},{"_id":"source/_posts/matlab记录.md","hash":"bfa36016491828a13c72301ac0dd4baa8048786f","modified":1693118803957},{"_id":"source/_posts/log.md","hash":"ea4d94a0abea3d7b72a8a98818906679a15a7cb9","modified":1699786338693},{"_id":"source/_posts/公共关系实务.md","hash":"4880ddec4b16c159220586d034fdb1f5abdbc271","modified":1695784119111},{"_id":"source/_posts/python-数学建模与实验.md","hash":"34b74f0fc6ef311abd808b6aec435dcc29ea3d0c","modified":1693200912666},{"_id":"source/_posts/二叉树遍历.md","hash":"9b06c99aa867a3ea8a4cd0225dbd22967ca04f57","modified":1695744100102},{"_id":"source/_posts/test.md","hash":"99a37037d981e98999ec0adc8477718903e65c6a","modified":1692788276015},{"_id":"source/_posts/python爬虫.md","hash":"616d6f889dab2b45479b6687953d82734ce0fe67","modified":1694880278678},{"_id":"source/_posts/博弈论及其应用.md","hash":"0599c909d04dee8d47d554413375cb5f2d87f9be","modified":1696559189039},{"_id":"source/_posts/二项式反演.md","hash":"67a8858c3195d6696112b42dceb8e04b29572987","modified":1699786385672},{"_id":"source/_posts/二项堆.md","hash":"736b00d195e51a89e72f27173c91fee67251fd8e","modified":1697678215148},{"_id":"source/_posts/回归分析与时间序列方法.md","hash":"639dd005ada7ed3db390f61414894acadc2f799b","modified":1692878115103},{"_id":"source/_posts/差分方程模型.md","hash":"6f0689c80e07e66dc54f6d31f4095acb88888eeb","modified":1692866505605},{"_id":"source/_posts/左偏树.md","hash":"fa943817ab645cce9d58736f805b80c2d43e1576","modified":1699786316933},{"_id":"source/_posts/决策分析方法.md","hash":"6ce38975c223ce1da2b01622c6f82f756767ec36","modified":1692963896197},{"_id":"source/_posts/插值与拟合建模.md","hash":"c258908e6c7b86584821509fba496eea583d220a","modified":1692944462883},{"_id":"source/_posts/微分方程模型.md","hash":"46bd664dfd18be71c36c5498ef0efcef989a7bcd","modified":1693011049453},{"_id":"source/_posts/快速排序的几种实现.md","hash":"284d7c62acf124c4dcecbef7bb6f262b401d80df","modified":1699786448850},{"_id":"source/_posts/数据结构关键记录.md","hash":"f6d8298888969ab1981f193efe0d9bb6b19b3c34","modified":1699235445120},{"_id":"source/_posts/抢课脚本.md","hash":"60290e55434888a3907edd4ce6d8d22c4dfdd8d2","modified":1694448558291},{"_id":"source/_posts/斐波那契堆.md","hash":"f139b37a4bb1a040b90d6a16088d47d1e9567116","modified":1697600112933},{"_id":"source/_posts/现代优化算法.md","hash":"0a0b4298c6d57d5fd64b8b7817bdfc989482168f","modified":1692954372906},{"_id":"source/_posts/登录实现.md","hash":"3461ae09384373e6d6980150f28545b2a984a18a","modified":1694071282992},{"_id":"source/_posts/数据结构关键记录2.md","hash":"5afc910a2df015938c9a8c8fa7da76d8fbfede5d","modified":1699786065673},{"_id":"source/_posts/矩阵求导.md","hash":"079d0d82de6317e902426c92b1cf8e251f9fd039","modified":1693889584729},{"_id":"source/_posts/网管会.md","hash":"a27c037fefb0918a23e1edbb27faa3425d7596ef","modified":1699786549895},{"_id":"source/_posts/杂记.md","hash":"ea5bd6ed232cec877ad9f7ccb169c18eb51225e4","modified":1698647868441},{"_id":"source/_posts/组合优化与随机性模型.md","hash":"e74a11053965887631ee060f52323312da3ffe21","modified":1692924185213},{"_id":"source/_posts/概率论中各种分布.md","hash":"a89a29568298ad8936f6168174dcfc7177f1de32","modified":1699784736530},{"_id":"source/_posts/莫队算法.md","hash":"f2902fbc4ff108978fe95aea509fa7a2db05ca96","modified":1692777115119},{"_id":"source/_posts/计算机组成原理.md","hash":"54cf89d9dd6b701dccaa23df19e5814d0066ab32","modified":1695985070845},{"_id":"source/_posts/规划论模型.md","hash":"35353d828049206d623a3a76c459bc3dd23fda7e","modified":1693113294678},{"_id":"source/_posts/跳表-skiplist.md","hash":"ea81469299c421b0c5832bbe3cf3d55928db22a7","modified":1699786149509},{"_id":"source/_drafts/一维随机游走常返性证明.md","hash":"650556c160ae26af49d85098511780d00c41272f","modified":1692855730568},{"_id":"source/_posts/随机数.md","hash":"0c43afebe41142545044f16b42943dbc9ee22524","modified":1696661625168},{"_id":"source/_drafts/图解机器学习.md","hash":"edcb79098463100fce66aa1c58237bbc1fdc07e4","modified":1692805494097},{"_id":"source/_drafts/奇异值分解.md","hash":"721eb0adc973572c0e4a9118247663a3af8586fd","modified":1692804995224},{"_id":"source/_posts/matlab记录/meshgrid生成网格.png","hash":"e4b5df005c377ba74a4675e79d45159e9cc6e550","modified":1693015932088},{"_id":"source/_posts/matlab记录/subs函数.png","hash":"1190aed5bb38506efb28cedc68cb50b634bf4823","modified":1693016996661},{"_id":"source/_posts/JavaScript基础/对象.png","hash":"855c20e8b13f2b9f52624cf571d34210224f3674","modified":1693219914749},{"_id":"source/_posts/CSS记录/练习1.png","hash":"c4e0965c1135b173f44d8b13905553abb2efc071","modified":1678063006000},{"_id":"source/_posts/插值与拟合建模/拉格朗日插值公式.png","hash":"5c53d443d36d2f20ba4d66c22b3b7a1fc77c83b4","modified":1692931211045},{"_id":"source/_posts/JavaScript基础/自结束标签.png","hash":"b5b1a5af51e547b4ec991011afa73dde3f91d0ca","modified":1693231597091},{"_id":"source/_posts/抢课脚本/fiddler.png","hash":"58c9a8d954af1eef32a932049a5fc93c91401316","modified":1694425797021},{"_id":"source/_posts/抢课脚本/selectCourseInfo.png","hash":"7f6cadabf170bec3573bbcadd1b5c0b5e1e706e2","modified":1694447387233},{"_id":"source/_posts/python-数学建模与实验/join函数.png","hash":"c25b65ea7a06e5e3b94aa72a7a5b4a8bfec5d0a9","modified":1693194357685},{"_id":"source/_posts/python爬虫/selenium定位元素.png","hash":"d9bf611cf528ba30d0682f764bfc800d4e409033","modified":1693903579211},{"_id":"source/_posts/python爬虫/os模块.png","hash":"4c5003e1c314bea992bf074dda84c70019c69029","modified":1693908218156},{"_id":"source/_posts/python爬虫/xpath.png","hash":"c62e8823cbb96b0fa018e64a8a0e5b508987f1fb","modified":1693906401189},{"_id":"source/_posts/python爬虫/未知节点.png","hash":"80039448dd9b478fb5fce2e0e38aca9272e70058","modified":1693922545870},{"_id":"source/_posts/python爬虫/量词.png","hash":"5864026c6752977727079189ce4735ffd6713fd7","modified":1693826189254},{"_id":"source/_posts/python爬虫/转义字符.png","hash":"136e8752be6c3820c29bab5f8c3496f4203741cd","modified":1693825770260},{"_id":"source/_posts/组合优化与随机性模型/报童问题.png","hash":"7ed9af684e635a4a96c4ad4e0ccfe7aa081ba048","modified":1692862316231},{"_id":"source/_posts/矩阵求导/矩阵变元求导公式.png","hash":"89c72bc761d9ca74cc4686f4a8f5454124b38700","modified":1692893742956},{"_id":"source/_posts/矩阵求导/矩阵求导.png","hash":"d1368399b81d2992f51cb7a67c6cf41174ae0752","modified":1692888642210},{"_id":"source/_posts/python爬虫/鼠标操作.png","hash":"1e45dd110d93beff7c23a5b276b946ce1f118276","modified":1693919937500},{"_id":"source/_posts/python爬虫/键盘操作.png","hash":"2e0cbce200adf7233cc92d64f580ffde99bbc186","modified":1693920012579},{"_id":"source/_posts/杂记/lambda表达式.png","hash":"ff87995809e477a1ab7a0213728cb83c41e88da3","modified":1694853321075},{"_id":"source/_posts/数据结构关键记录/分治时间复杂度.png","hash":"533d032396f54382f668fb8f1bacba24eb5f73df","modified":1693982775280},{"_id":"source/_posts/杂记/实体字符.png","hash":"1ab3202ab50a28198730fced80d50d6ed6cb92ea","modified":1693723789592},{"_id":"source/_posts/数据结构关键记录/入环点.png","hash":"23730f0ba9db297815316ad9428f79cc447b19b2","modified":1694003689382},{"_id":"source/_posts/数据结构关键记录/快速排序算法.png","hash":"4448a1ca0cf951a4606c3584b793856b359cd0a1","modified":1694011834816},{"_id":"source/_posts/数据结构关键记录/排序法极大点.png","hash":"6bec75ff161c17f798600a127ac5773e58a622ef","modified":1694013504512},{"_id":"source/_posts/计算机组成原理/动态RAM和静态RAM比较.png","hash":"928c0d1853f996de1e3bc8fd9d8a34975168dab6","modified":1695344530116},{"_id":"source/_posts/计算机组成原理/字扩展.png","hash":"20843a6e5a7c380f13472cf524a02c00ccc45e5b","modified":1695351074992},{"_id":"source/_posts/计算机组成原理/存储器组成.png","hash":"d6467efb47e78be9ccbbe47078999d3e94ac45f9","modified":1695187215726},{"_id":"source/_posts/计算机组成原理/存储器层次.png","hash":"c79bdb110d642cb524c7d449ef19646ab66e299a","modified":1695291869656},{"_id":"source/_posts/规划论模型/模型.png","hash":"5123ef742c41acd090868e381340f02c5f13aec3","modified":1693031095814},{"_id":"source/_posts/规划论模型/等式.png","hash":"7666fd09594404a516a5ed1acd98b6c936b02e3c","modified":1693030951388},{"_id":"source/_posts/规划论模型/股票.png","hash":"df46c4bb9eae8f988fb8d6cc7fa82eb47fb23189","modified":1693030785318},{"_id":"source/_posts/matlab记录/matlab点乘点除.png","hash":"00b6aa0f475bd4b8fbde12c0f54c57faa8aae717","modified":1693012088966},{"_id":"source/_posts/CSS记录/开发者模式.png","hash":"9c2bf58a266b72bfbcfbae851cfcf919d40ad9dc","modified":1693637674822},{"_id":"source/_posts/JavaScript基础/document和window.png","hash":"f4a6cd600f952f0430faffad25b09607cba680c1","modified":1693294995265},{"_id":"source/_posts/JavaScript基础/childnodes缺陷.png","hash":"844ffd19b427891943287d0cdcd95b739dd7c076","modified":1693234440280},{"_id":"source/_posts/JavaScript基础/节点.png","hash":"678f1b66a8a39bd9b1f5e35904d2f84f829ce96b","modified":1693220705157},{"_id":"source/_posts/二项式反演/引理.png","hash":"adcfe3b5759432a586b077650ddb0b9581b78258","modified":1695106467268},{"_id":"source/_posts/回归分析与时间序列方法/显著性检验.png","hash":"3a3f5f1f70884045324af8a1e22f00c017e3a4d1","modified":1692874563035},{"_id":"source/_posts/python-数学建模与实验/文本读取.png","hash":"34d22435c02e75d06bdf410e585462da9c2f3598","modified":1693190535282},{"_id":"source/_posts/python爬虫/cookie存储信息.png","hash":"90c9829f612717770e6cff444262285499135d1a","modified":1693920609414},{"_id":"source/_posts/python爬虫/常用文件操作.png","hash":"f4e335b4b39604dd797b7fd91a786ad03687c219","modified":1693814869456},{"_id":"source/_posts/杂记/OSI模型.png","hash":"a03b28739450cf767111b5f15870031d281bbad1","modified":1694513565633},{"_id":"source/_posts/杂记/endl与n.png","hash":"212e5d71b13c6c6e47f3a3f57d151731b4223f21","modified":1695018243522},{"_id":"source/_posts/杂记/http和tcp关系.png","hash":"f48b311eb6ec22ba5f21ca1f0e679ff03bae4d52","modified":1694521332264},{"_id":"source/_posts/杂记/OSI与TCPIP关联.png","hash":"e346f6e9218b2953accf3cc9f941b70cb7fe2d1f","modified":1694514660163},{"_id":"source/_posts/杂记/h和hpp.png","hash":"8b9acf7fff3a7d1959f3068b737542ee22cce281","modified":1694795185406},{"_id":"source/_posts/杂记/字符串面值的赋值.png","hash":"166a424ce2014242de1b6ddf0f19610331ac6b2c","modified":1694961936722},{"_id":"source/_posts/杂记/非递归扩展欧几里得.png","hash":"15b7caea53ca985926d44e770ba8225917d0e972","modified":1695027744774},{"_id":"source/_posts/杂记/new构造.png","hash":"879de411a0a3bd91639f3708178e288ea225ddcd","modified":1694871238428},{"_id":"source/_posts/杂记/strdup使用.png","hash":"15ef99d61c14d1a67da62997add9584fddb8a858","modified":1694969866345},{"_id":"source/_posts/数据结构关键记录/归并排序时间复杂度.png","hash":"12e6603095d3d0b2c12f3b8e07cee24b1b49199e","modified":1694011314542},{"_id":"source/_posts/数据结构关键记录/分治法极大点.png","hash":"5d62164033b0226f449e68fd51f3da1b808f6cec","modified":1694013588626},{"_id":"source/_posts/数据结构关键记录/快速排序时间复杂度.png","hash":"3646cd1c480febf00c3c6e989c26103447e53b40","modified":1694012013235},{"_id":"source/_posts/数据结构关键记录/线索二叉树.png","hash":"b156efe066459f7a6e1d6fccf7612266fc798db1","modified":1695797214365},{"_id":"source/_posts/计算机组成原理/乘法操作.png","hash":"cea03c5354425cacb300828a7e73dcc1c90c54ce","modified":1695220454259},{"_id":"source/_posts/数据结构关键记录/快速排序平均时间复杂度.png","hash":"12f86ce39f54aa0819ccc12abb1fdfa07eb3b869","modified":1694012137283},{"_id":"source/_posts/计算机组成原理/位扩展.png","hash":"ca829177e1d2ae21ea5978bd8dd31d5eee937e7c","modified":1695350944922},{"_id":"source/_posts/计算机组成原理/冯诺伊曼计算机硬件框架.png","hash":"989c063e7c2bbe3ed1f6ac5b27a3f1ff9b4b5710","modified":1695178385192},{"_id":"source/_posts/计算机组成原理/语言发展.png","hash":"fbef439c0c250ef7d093fd38bcb480841fc83987","modified":1695176398290},{"_id":"source/_posts/计算机组成原理/以存储器为中心的总线结构.png","hash":"cfc3b610a1686b8b53df007ad8cff16ff5cf6455","modified":1695225744447},{"_id":"source/_posts/计算机组成原理/总线特性.png","hash":"08d55d1af682ab71853a5241fbc3549fbf60f47c","modified":1695226965179},{"_id":"source/_posts/计算机组成原理/控制器结构.png","hash":"8c17be0f75914e378b47c71c24a6c4f7f43cfe24","modified":1695221008875},{"_id":"source/_posts/计算机组成原理/除法操作.png","hash":"498d366fe672d75de17094a8caccd9a370973739","modified":1695220582912},{"_id":"source/_posts/计算机组成原理/运算器基本组成及操作.png","hash":"2a044900a2775bffe374edbbf237874c609e1cf2","modified":1695188393747},{"_id":"source/_posts/规划论模型/整数规划.png","hash":"d6b236b3eb04601ef3d6648be51ed7b36156b915","modified":1693037259577},{"_id":"source/_posts/计算机组成原理/面向CPU的总线结构.png","hash":"25dd7dd98942c68b08e5ff03c2759d00b204b6bf","modified":1695225597751},{"_id":"source/_posts/matlab记录/灰度图.png","hash":"babff3a8c89f556178ffe5ac6027e3aa7d18975b","modified":1693114651916},{"_id":"source/_posts/matlab记录/矩阵操作.jpg","hash":"98d59872576d8e3ac954224d62f1150d82b16e16","modified":1693046066112},{"_id":"source/_posts/CSS记录/常见布局名词.png","hash":"fd41f57ff747d3acd3a843efbdbba902040dff5b","modified":1693657614517},{"_id":"source/_posts/JavaScript基础/获取元素节点.png","hash":"adb7328734c1fec46bcc3f12d23428add8362ef1","modified":1693229997029},{"_id":"source/_posts/插值与拟合建模/插值条件非齐次方程组.jpg","hash":"5932f8498b470d1384b5d8c2c8234b4a9c90824d","modified":1692930682282},{"_id":"source/_posts/python-数学建模与实验/二进制文件读取.png","hash":"31a6ab20c6a708b35253b8e96fa8c96131d2892c","modified":1693190748968},{"_id":"source/_posts/python-数学建模与实验/数组创建.png","hash":"1994c8e16ceac178f17bd883af5964681b91c6c3","modified":1693189318984},{"_id":"source/_posts/python-数学建模与实验/常见样式颜色.png","hash":"b8e280b2e9996bbd0bf0217328ba2fbd3c983d9d","modified":1693194944057},{"_id":"source/_posts/杂记/strcpy和strdup.png","hash":"4e578d09fcb95e63dc105cce6d8e7495e4c60356","modified":1694969602561},{"_id":"source/_posts/计算机组成原理/主机架构.png","hash":"ee86ef02a90e6ed0ece36bd557207832ffc35ae8","modified":1695221553108},{"_id":"source/_posts/计算机组成原理/单总线结构.png","hash":"1b192d7d18a2e2e4609004302e7624b2e60c7404","modified":1695225523297},{"_id":"source/_posts/计算机组成原理/取数操作.png","hash":"d446d06bd5af7f2f95898d488d6cd003281b224c","modified":1695221961721},{"_id":"source/_posts/JavaScript进阶/原型链.png","hash":"6e8c5a700eea09a4be3a56bc1485454728b1583d","modified":1693552904902},{"_id":"source/_posts/CSS记录/色相环.png","hash":"be0011670d72b5ef02eb6ee9790d944608ca1d22","modified":1693582298790},{"_id":"source/_posts/JavaScript基础/节点的属性.png","hash":"879d7814eb1ef2f2da6534e50280ef6423418344","modified":1693220905709},{"_id":"source/_posts/JavaScript基础/执行顺序.png","hash":"0e872ec43428892ac661c5dc152608fad93f47ba","modified":1693275125109},{"_id":"source/_posts/JavaScript基础/获取兄弟节点.png","hash":"66e83f371009b1406467541cdabb22ca318a2160","modified":1693237493288},{"_id":"source/_posts/python-数学建模与实验/文件操作方式.png","hash":"f4dc77996f64180022c89505b5d438016ffd80f7","modified":1693191150525},{"_id":"source/_posts/python爬虫/html代码.png","hash":"b65d3ac3874182ea8e127f7ffa8f3b7d8f9eff5e","modified":1693817180372},{"_id":"source/_posts/python爬虫/读取操作类型.png","hash":"43528a81e29ed1bfb6fc4b814fadc54f8b52ea6e","modified":1693814834695},{"_id":"source/_posts/杂记/FTP工作流程.png","hash":"bd088724661af97bdad24944b6822b32b97607db","modified":1694528073719},{"_id":"source/_posts/计算机组成原理/字和位扩展.png","hash":"e2fb8db632df04e0b9978debc0014c43bbc11730","modified":1695351612865},{"_id":"source/_posts/规划论模型/linprog.png","hash":"b591344e7f2bc1951385f46cc65f1e35955aa815","modified":1693018175427},{"_id":"source/_posts/规划论模型/problem1.jpg","hash":"2af89aa60187fdcf632ae0c6c38e996fefa035a4","modified":1693018747540},{"_id":"source/_posts/CSS记录/各元素显示模式.png","hash":"3ff3dd61c9803eeb2c8ae538cc3a741e7908a101","modified":1693634851926},{"_id":"source/_posts/JavaScript基础/bom对象.png","hash":"3758de4de1ff1bf51fca0db4154d00ee5e84de0d","modified":1693456498556},{"_id":"source/_posts/JavaScript基础/查找子节点.png","hash":"525d1258fd3e1f09a7c08aa99402bc7dd831017e","modified":1693233869661},{"_id":"source/_posts/test/machine_learning.jpg","hash":"4679d758497a192db97b9ceb0476faeef1d16cbb","modified":1692786546485},{"_id":"source/_posts/博弈论及其应用/非合作博弈划分.png","hash":"0915075e6f41c65a137475978600b42854129db1","modified":1696521462479},{"_id":"source/_posts/python-数学建模与实验/一般索引.png","hash":"d6e09b988f40f09b1462be6e538b9521a7adfc3b","modified":1693189668973},{"_id":"source/_posts/JavaScript进阶/原型.png","hash":"511618caff4ae31cf2e6d3bfd5f9906ea1920b06","modified":1693545362781},{"_id":"source/_posts/CSS记录/像素.png","hash":"b42a45aac609ab30760caf8b6b140c3d6285136b","modified":1693579544612},{"_id":"source/_posts/插值与拟合建模/插值条件非齐次方程组.png","hash":"3c9284c7ae77d11c0f92954636319e2da7889919","modified":1692930810848},{"_id":"source/_posts/规划论模型/指派问题.png","hash":"81841879a5e14662ee9f8dfeb723cb64b86fd0c1","modified":1693038041738},{"_id":"source/_posts/CSS记录/布局技巧.png","hash":"7b5ac6242f0542c6c26694d42655b374fdf4c588","modified":1693643204964},{"_id":"source/_posts/计算机组成原理/计算机的多样性.png","hash":"40d57bc4e5e28739983b948839ca77f433532487","modified":1695174374057},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1692775807218},{"_id":"themes/next/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1692775807218},{"_id":"themes/next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1692775807218},{"_id":"themes/next/_vendors.yml","hash":"7fa5fce5ae11760a636213044d42be17a47fbc0e","modified":1692775807223},{"_id":"themes/next/package.json","hash":"287b491c45d35075f57d3f8caae5f0937265c8aa","modified":1692775807237},{"_id":"themes/next/.gitignore","hash":"417520c4dbbeab9c7e3ab10d944da0886366a0ee","modified":1692775807222},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1692775807223},{"_id":"themes/next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1692775807222},{"_id":"themes/next/.stylelintrc","hash":"9346cca6a24256a79f433670da634e8329f9a2a9","modified":1692775807222},{"_id":"themes/next/README.md","hash":"7dfee02792f98c73ff0da7e8efc9a7c55ef52fa0","modified":1692775807222},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1692775807237},{"_id":"themes/next/.githooks/install.js","hash":"0977cb57c8b91ea166b5bbc481e4ddeaf77e9b18","modified":1693968543994},{"_id":"themes/next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1692775807223},{"_id":"themes/next/.githooks/pre-commit","hash":"f473eac1aaaa96c947d67988bbed140bbab1a821","modified":1692775807219},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1692775807225},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1692775807225},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1692775807223},{"_id":"themes/next/_config.yml","hash":"1c8f8369448a2a5ac0f61ac181c00bb48dda7dbe","modified":1692806085366},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1692775807223},{"_id":"themes/next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1692775807225},{"_id":"themes/next/languages/bn.yml","hash":"9f791494afa263c3e31f14b8a5fa2996dfc834c0","modified":1692775807225},{"_id":"themes/next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1692775807225},{"_id":"themes/next/languages/eo.yml","hash":"e34bb33ae827bf2f0727088599a73bc64bdad1b0","modified":1692775807226},{"_id":"themes/next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1692775807226},{"_id":"themes/next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1692775807226},{"_id":"themes/next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1692775807226},{"_id":"themes/next/languages/fr.yml","hash":"44cd26479f503751329f6da2ed80cce1bbf18117","modified":1692775807226},{"_id":"themes/next/languages/pt.yml","hash":"70de366e10ea584ba039d40d6b35ac97f93454ad","modified":1692775807227},{"_id":"themes/next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1692775807227},{"_id":"themes/next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1692775807225},{"_id":"themes/next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1692775807227},{"_id":"themes/next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1692775807227},{"_id":"themes/next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1692775807226},{"_id":"themes/next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1692775807227},{"_id":"themes/next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1692775807227},{"_id":"themes/next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1692775807227},{"_id":"themes/next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1692775807227},{"_id":"themes/next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1692775807227},{"_id":"themes/next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1692775807227},{"_id":"themes/next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1692775807226},{"_id":"themes/next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1692775807227},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"330656d93b6c03df9fb1f2f0e3534c971969473b","modified":1692775807219},{"_id":"themes/next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1692775807227},{"_id":"themes/next/.github/release.yml","hash":"112310b81f959747f8eaafc2ca2150e1dcf916d8","modified":1692775807221},{"_id":"themes/next/languages/zh-TW.yml","hash":"4695c87d6b81b3a23d16ad6513d9eaa925f8d8ad","modified":1692775807227},{"_id":"themes/next/languages/zh-HK.yml","hash":"88ea50eeb9097ab4a87a44981a102d8594feb064","modified":1692775807227},{"_id":"themes/next/.github/config.yml","hash":"7984e665e9de481a0e0e51fca5668337713f810b","modified":1692775807220},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"fa76760856429b6421abc54e63b2d3c815372900","modified":1692775807220},{"_id":"themes/next/.github/labeler.yml","hash":"5c4bc2bd561e6d9b33ee118cc12218c5de46f72d","modified":1692775807221},{"_id":"themes/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1692775807263},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"e78ec4eb6ce49a44ec321c49424ee0a0c1846537","modified":1692775807219},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1692775807220},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"5fd78aaaf3e6bb4811abde0cc5d75a3174ce4882","modified":1692775807220},{"_id":"themes/next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1692775807236},{"_id":"themes/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1692775807236},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1692775807239},{"_id":"themes/next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1692775807236},{"_id":"themes/next/scripts/filters/minify.js","hash":"447db39d17775b2bd18d8af9c9d65b7b8449f751","modified":1692775807239},{"_id":"themes/next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1692775807228},{"_id":"themes/next/layout/page.njk","hash":"b0660b2af0ac7d3fda14ca4d9f2c9e79ef06c6f9","modified":1692775807236},{"_id":"themes/next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1692775807236},{"_id":"themes/next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1692775807237},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"ead37e9167b682f1fa34b5401c3050e18c7ee4a3","modified":1692775807240},{"_id":"themes/next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1692775807239},{"_id":"themes/next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1692775807239},{"_id":"themes/next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1692775807237},{"_id":"themes/next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1692775807240},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"957241c28796ff352de7f4cffba7bb289b043586","modified":1692775807241},{"_id":"themes/next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1692775807240},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"6281d47c1de98eb38f3aa0f6df29bbb19d412173","modified":1692775807240},{"_id":"themes/next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1692775807240},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1692775807241},{"_id":"themes/next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1692775807240},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1692775807241},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1692775807241},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1692775807241},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1692775807242},{"_id":"themes/next/docs/ru/README.md","hash":"ca3088a27b9890402ffb18c4b6c4bedaff8d575b","modified":1692775807223},{"_id":"themes/next/scripts/tags/index.js","hash":"1f6aba7820f1fb58b61969485148db21846e1aa9","modified":1692775807241},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1692775807241},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1692775807242},{"_id":"themes/next/scripts/tags/wavedrom.js","hash":"b44dfeeb58b41945d469141787f3dbce4b117d08","modified":1692775807243},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1692775807225},{"_id":"themes/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1692775807242},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1692775807242},{"_id":"themes/next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1692775807242},{"_id":"themes/next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1692775807242},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.yml","hash":"3f19cbf0c2b2fee6bf3788870b842c9ccc1425ca","modified":1692775807219},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"12a6631617695504d5cf2a94b57d87bd331bef6f","modified":1692775807223},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.yml","hash":"fbc3062cd4591c8329fab9db72803746f0d11920","modified":1692775807219},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"c40ae7903b6cc99f94c9d45ac7ba8c2850bb1309","modified":1692775807219},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"7ec04b4b70ea28f88495c5562bd9ea15528d36b5","modified":1692775807221},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"ee2292c5a9d99f06b62f9cc80e88068e6756982c","modified":1692775807221},{"_id":"themes/next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1692775807257},{"_id":"themes/next/.github/workflows/codeql.yml","hash":"8da13d7c325addb6b7c1d9ac3683dafd43e3709a","modified":1692775807221},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8ae85453051faa7ed3b332ee488ff5eea8ddaa08","modified":1692775807225},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.yml","hash":"10eca518b91a19984f6a5a912d41222042f61d63","modified":1692775807219},{"_id":"themes/next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1692775807257},{"_id":"themes/next/.github/workflows/lock.yml","hash":"f1bf7f86c11419b63323bd21e388e6bdaf24d27d","modified":1692775807221},{"_id":"themes/next/source/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1692775807258},{"_id":"themes/next/.github/workflows/linter.yml","hash":"2ab8720e4b9534e48ba324b73b0b58cb54df689f","modified":1692775807221},{"_id":"themes/next/source/js/next-boot.js","hash":"f5db08098c7b7942bd5d18203751d64c2110fab0","modified":1692775807258},{"_id":"themes/next/source/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1692775807257},{"_id":"themes/next/.github/workflows/tester.yml","hash":"80a20c3a7522249f051a48239db41d1317e9b552","modified":1692775807221},{"_id":"themes/next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1692775807257},{"_id":"themes/next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1692775807243},{"_id":"themes/next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1692775807257},{"_id":"themes/next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1692775807255},{"_id":"themes/next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1692775807256},{"_id":"themes/next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1692775807258},{"_id":"themes/next/source/js/utils.js","hash":"64cea5c05465b0809170f34f19a28a4b666991a8","modified":1692775807262},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1692775807256},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1692775807256},{"_id":"themes/next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1692775807257},{"_id":"themes/next/source/css/_mixins.styl","hash":"83647a6207333b9609ba90b0946b3fa9548e6381","modified":1692775807251},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1692775807256},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1692775807256},{"_id":"themes/next/test/helpers/next-url.js","hash":"64412f60b4be51371fa9752d8bd288ae90bafdcc","modified":1692775807263},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1692775807232},{"_id":"themes/next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1692775807232},{"_id":"themes/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1692775807263},{"_id":"themes/next/test/validate/index.js","hash":"5a95ccc8598667535bd022e988055c0e019f3670","modified":1692775807265},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"abda600685ee972e1f6b7a2dcc56f13e2daa6263","modified":1692775807228},{"_id":"themes/next/test/helpers/font.js","hash":"342ef3c6fd2dcca2a8802a516ed6d7f389fd2ca2","modified":1692775807263},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1692775807228},{"_id":"themes/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1692775807263},{"_id":"themes/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1692775807263},{"_id":"themes/next/layout/_macro/post.njk","hash":"65e9112fb7eb26d2880db624554a99aca028140b","modified":1692775807228},{"_id":"themes/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1692775807263},{"_id":"themes/next/test/tags/group-pictures.js","hash":"5c68ae0184f9da6e00ba199f2554d503d8e6da71","modified":1692775807263},{"_id":"themes/next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1692775807264},{"_id":"themes/next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1692775807264},{"_id":"themes/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1692775807263},{"_id":"themes/next/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1692775807264},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1692775807230},{"_id":"themes/next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1692775807229},{"_id":"themes/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1692775807264},{"_id":"themes/next/test/tags/mermaid.js","hash":"ab77be5f3c6d9a57c7b9dda6decf1906a736fef9","modified":1692775807264},{"_id":"themes/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1692775807263},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1692775807234},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1692775807235},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1692775807238},{"_id":"themes/next/test/tags/link-grid.js","hash":"43d298fafb7c45a874b766d443843bd26346e689","modified":1692775807264},{"_id":"themes/next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1692775807228},{"_id":"themes/next/layout/_third-party/index.njk","hash":"dfd7cdd6ba89f8c3deabc27726c7a350cadafd11","modified":1692775807234},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"e7f988ecddb2159313699a00827a45eca5622bd4","modified":1692775807232},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1692775807235},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1692775807238},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1692775807238},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1692775807239},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1692775807238},{"_id":"themes/next/layout/_partials/footer.njk","hash":"6fca18ed4234cf54146c2b3b97b0a6a3606ab33d","modified":1692775807228},{"_id":"themes/next/layout/_third-party/addtoany.njk","hash":"ef64c6bfb8540cd874701236b9be47db2496e98e","modified":1692775807232},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1692775807239},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1692775807238},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1692775807239},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1692775807238},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1692775807237},{"_id":"themes/next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1692775807238},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"464db1e7182e5b9cdbd32e8b5368d5e683b1d9c7","modified":1692775807238},{"_id":"themes/next/source/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1692775807258},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1692775807254},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a1418c9dc8c0f1a0ad4ded0f4627c45bf0db1a10","modified":1692775807254},{"_id":"themes/next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1692775807237},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1692775807254},{"_id":"themes/next/source/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1692775807259},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"48f4f277946a168d0db1ea02804e85c22ca2c7db","modified":1692775807254},{"_id":"themes/next/source/css/_variables/base.styl","hash":"c4fc4e862d09221265ab1466085f057be2ad2e4d","modified":1692775807255},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1692775807261},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1692775807260},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1692775807261},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"6853e5433e3eaa19ea43fa20b08d956ba4cec4ac","modified":1692775807238},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1692775807237},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1692775807229},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1692775807230},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1692775807229},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1692775807229},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1692775807230},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1692775807228},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1692775807229},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1692775807228},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1692775807229},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1692775807234},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1692775807233},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1692775807229},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1692775807229},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1692775807233},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1692775807235},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1692775807232},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1692775807233},{"_id":"themes/next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1692775807233},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1692775807233},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1692775807233},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1692775807233},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1692775807234},{"_id":"themes/next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1692775807233},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1692775807232},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1692775807235},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1692775807235},{"_id":"themes/next/layout/_third-party/analytics/umami.njk","hash":"3343750682fbd8535e50f8129be3003ad26015b4","modified":1692775807233},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1692775807232},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1692775807235},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1692775807232},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1692775807235},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1692775807235},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1692775807235},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1692775807235},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1692775807230},{"_id":"themes/next/layout/_partials/post/post-share.njk","hash":"16696990e4ce65fc8db18c4635082a5d5d06ff07","modified":1692775807232},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"bfff923526d6800218f08dba6ce0bbf5c17755fd","modified":1692775807230},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1692775807230},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1692775807236},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1692775807236},{"_id":"themes/next/layout/_third-party/tags/wavedrom.njk","hash":"02202bf563fb5eedde2ccad4d6c5b9109d30a703","modified":1692775807236},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1692775807230},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1692775807234},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1692775807234},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1692775807230},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1692775807234},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1692775807234},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1692775807229},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1692775807234},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1692775807234},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1692775807234},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1692775807246},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1692775807243},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1692775807245},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"bc5708e38b6070dff0cab6bf9480971017ce4dda","modified":1692775807232},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"7664491542046df9a3887cf40a06e00c0b4086a9","modified":1692775807243},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1692775807259},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1692775807248},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1692775807248},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1692775807249},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"1dbf2c339adcd27026c3a2ded32ee91ce08cea26","modified":1692775807246},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1692775807259},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"782ee1fc5e669d3ddbfeb82b73ad7fe561f1a4fb","modified":1692775807251},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1692775807259},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1692775807259},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1692775807249},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1692775807250},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1692775807260},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1692775807259},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1692775807259},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1692775807249},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1692775807259},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1692775807260},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1692775807259},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1692775807261},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1692775807260},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1692775807260},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1692775807260},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1692775807250},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1692775807262},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1692775807261},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1692775807261},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1692775807261},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"6bf821310342c5b87a631873e7650a475a0765f1","modified":1692775807262},{"_id":"themes/next/source/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1692775807262},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"ac2dc0ce9c775a83ef7132ae957b54539366ac9c","modified":1692775807253},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1692775807261},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1692775807260},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1692775807254},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1692775807254},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9dfe853c901bdc52fc950bacdf15484dbb9bf140","modified":1692775807252},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1692775807252},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1692775807252},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1692775807254},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"91dbf3ca5c3a613d4e30618c120da535bf2d0336","modified":1692775807254},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1692775807252},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"26a0cba1eee5de45a45a5e14e17707f905390512","modified":1692775807253},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82cda756f5b7092df2eee6641b9786df71623bdb","modified":1692775807253},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1692775807252},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1692775807253},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"547c0b5cd5e7ea10d21863d13a6b16579a49396c","modified":1692775807253},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1692775807253},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1692775807252},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1692775807253},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1692775807253},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1692775807243},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1692775807243},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1692775807245},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1692775807243},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1692775807245},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1692775807245},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1692775807243},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1692775807245},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"54d12e2c5d9982f7b9e5b23be5133954a8514e9d","modified":1692775807245},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1692775807246},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1692775807245},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"7369928305330c73ae0b3f063a681a8384d8fde4","modified":1692775807244},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"56d5b7ff73f466c9ae54f7204ae899281295d749","modified":1692775807244},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1692775807243},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1692775807244},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1692775807244},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1692775807244},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1692775807243},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"da5e88f8debd5ac8d7af5c6ba6240df66104955f","modified":1692775807247},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"ebfba158a0a4af3d1dabcacbc58986664de52140","modified":1692775807245},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"1191f1bfa5c43e54be8e5b3cc0d802984e161747","modified":1692775807244},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"04cf4a69537fc14d3b8904f965d283356853847f","modified":1692775807245},{"_id":"themes/next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1692775807247},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"c6a27beb3f741211a14576026f3b4cfc44cc6407","modified":1692775807247},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1692775807247},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"46eece42510c2c89bb9209afb0262ad76a4b0b36","modified":1692775807248},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1692775807244},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"0847400d8579b0a2dd1bf662c78954c10adf2680","modified":1692775807247},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"9a7c71560fbdc936ad4e736fe15063ea3e8a644b","modified":1692775807248},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1692775807248},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1692775807246},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1692775807248},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1692775807248},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1692775807246},{"_id":"themes/next/source/css/_common/scaffolding/highlight/fold.styl","hash":"42a0b65491ad85438596b3fe0b7f23973e4cef34","modified":1692775807249},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1692775807246},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1692775807246},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"bbbc40b03cb299d2a6a568f329b2ce98e1cdc430","modified":1692775807246},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"138f78147bc6bd6005f329ada34dc79b7625542d","modified":1692775807249},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1692775807246},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1692775807250},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1692775807250},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1692775807251},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"22cd37bd5df9972d5074710896aba4424ad5161c","modified":1692775807250},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f634f94828620e88c3f5a8db56f7944f6ba232b0","modified":1692775807249},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1692775807251},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"33dd6ad015dde65fd46f34961655442e8e82b52e","modified":1692775807251},{"_id":"themes/next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"af113411ad9cca7674177be36af8dd399680834d","modified":1692775807251},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1692775807250},{"_id":"source/_posts/微分方程模型/liuliangxishu.jpg","hash":"e7ef92fcde562b1fa78a6f60cae4c5a0b0eeafca","modified":1692838894142},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"98d4c20aff0f0fcfe1824017fb06ab21ef0d218e","modified":1692775807251},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1692775807250},{"_id":"themes/next/source/images/avatar.jpg","hash":"05fc620b7f9486e73041731d67fda2009b39d8e4","modified":1668837697612},{"_id":"source/_posts/CSS记录/分区.png","hash":"8119f633eb2d8d683215a9e29f23940163385506","modified":1693635352239},{"_id":"public/search.xml","hash":"b594707ec2c11c69fc52af481aa9a4294043d2a7","modified":1699786519302},{"_id":"public/2023/11/08/数据结构关键记录2/index.html","hash":"2b06bae8cdb561f730c74a55618414b8e5d7fe0b","modified":1699786519302},{"_id":"public/2023/10/07/随机数/index.html","hash":"4dab0ceea18b2d05a939e6087bd4f845db328415","modified":1699786519302},{"_id":"public/2023/10/05/博弈论及其应用/index.html","hash":"bcb6fdfa8f0b077b9e85c2e81524a180ca155d87","modified":1699786519302},{"_id":"public/2023/09/20/A-Missing-Semester-of-Your-CS-Education/index.html","hash":"da1f499968c756dee5d83dca6edcae17f66b6480","modified":1699786519302},{"_id":"public/2023/09/18/公共关系实务/index.html","hash":"26c4b0dc7f1b70324239458fe3848a4c7fe5a44b","modified":1699786519302},{"_id":"public/2023/09/18/log/index.html","hash":"b3ebe1da9dd1719290f705eff4b07556312443c1","modified":1699786519302},{"_id":"public/2023/09/18/二项式反演/index.html","hash":"86af85cb83c75bfb76f86747c7f4e78f8287445a","modified":1699786519302},{"_id":"public/2023/09/07/登录实现/index.html","hash":"bb492dde72c12445e633325c554fc2ba92c668e9","modified":1699786519302},{"_id":"public/2023/08/25/现代优化算法/index.html","hash":"70ade6a0f52571ebfd9b890604ce29a91007421e","modified":1699786519302},{"_id":"public/2023/08/23/test/index.html","hash":"c3661024858bc043f38afb9a03fc221bb4be5edf","modified":1699786519302},{"_id":"public/2023/08/23/hello-world/index.html","hash":"9cf878488c0e008aa5da4d78bf5f7aa34333cb34","modified":1699786519302},{"_id":"public/2023/08/23/hexo-blog-instruction-list/index.html","hash":"a88d38f766b3cd9759241237a955eb1566ed2780","modified":1699786519302},{"_id":"public/archives/index.html","hash":"70b231f5eaa0bac7ef5f661c0dd92dc81226e808","modified":1699786519302},{"_id":"public/archives/page/2/index.html","hash":"e1431141d9b291b48ea46dbf8cc95b30103c96fd","modified":1699786519302},{"_id":"public/archives/page/3/index.html","hash":"cbab851bf907d4e382caf1c3c362bce4d783cce2","modified":1699786519302},{"_id":"public/archives/page/4/index.html","hash":"5d5901ab182329f1d034169e7f3aeec2e3756290","modified":1699786519302},{"_id":"public/archives/2023/index.html","hash":"1543529ff09b43d7b8131ddf7586ce6f1eab012a","modified":1699786519302},{"_id":"public/archives/2023/page/2/index.html","hash":"948df8f3c08b730c832a167859504ef317ac5d04","modified":1699786519302},{"_id":"public/archives/2023/page/3/index.html","hash":"394ea74298459a40b741fd465d1b5db9a7389532","modified":1699786519302},{"_id":"public/archives/2023/page/4/index.html","hash":"21fe91edfc7804783a275cf933c6f28f9578423e","modified":1699786519302},{"_id":"public/archives/2023/08/index.html","hash":"0babf42dd24b3a524fdad5562ab7e614fff30b9d","modified":1699786519302},{"_id":"public/archives/2023/08/page/2/index.html","hash":"bffd60b0742b13f6e4e13970991ad01c8608d6aa","modified":1699786519302},{"_id":"public/archives/2023/09/index.html","hash":"7ba32724804e865554fe4b8f0eb6eef262d7d40d","modified":1699786519302},{"_id":"public/archives/2023/09/page/2/index.html","hash":"f65363a1f738831935790a827f9304e1906a17ae","modified":1699786519302},{"_id":"public/archives/2023/10/index.html","hash":"a7be5a193ed59bee490b79f4720718e27d040534","modified":1699786519302},{"_id":"public/archives/2023/11/index.html","hash":"15d824d8f48b44215b38b09c564034307adfda61","modified":1699786519302},{"_id":"public/tags/CSS-WEB/index.html","hash":"a50d130b707040f3528265c53dab74f15bd6f302","modified":1699786519302},{"_id":"public/tags/JavaScript-WEB/index.html","hash":"54ae4bc7f7938b6d46b8de2d7e4ece489ac6843b","modified":1699786519302},{"_id":"public/tags/matlab/index.html","hash":"9248679d080201859b547b2e3d90d1c6966d54a4","modified":1699786519302},{"_id":"public/tags/python/index.html","hash":"d0afc049927e6b344eb0459ae7df7019356d07f4","modified":1699786519302},{"_id":"public/tags/Just-record-some-learning-experiences/index.html","hash":"c7aa857a0abe1142c013f5b4a8a9590581b1691d","modified":1699784512703},{"_id":"public/tags/Math-Algorithm/index.html","hash":"78cde80499b000a5f0b7b1da21857e47a0e00f6c","modified":1699786519302},{"_id":"public/tags/GameTheory/index.html","hash":"a97cfd1cb6e724f42c97f539e4f59f71da893438","modified":1699786519302},{"_id":"public/tags/Mathematic/index.html","hash":"89e31e284fb5187844a252febf3509c69c899fab","modified":1699786519302},{"_id":"public/tags/JavaScript/index.html","hash":"51047fd1ce50adf26887f2676f73c3d6657b1e3b","modified":1699786519302},{"_id":"public/tags/DataStructure/index.html","hash":"91419e3f76d817e34d5d924e4af43db4207c2b30","modified":1699786519302},{"_id":"public/tags/Data-Structure/index.html","hash":"a02575cde207bdab6c86b60dcb15d8cf10f54faf","modified":1699786519302},{"_id":"public/tags/web/index.html","hash":"b85ae7d01302374374c35ecf9c01e5f2b5c73238","modified":1699786519302},{"_id":"public/tags/ComputerScience/index.html","hash":"bec2f9f0eca7830b7240039875a94051e04e83df","modified":1699786519302},{"_id":"public/tags/Miscellaneous/index.html","hash":"4cab845bcfc2edf2dede21e6e2616cb0e359d58a","modified":1699786519302},{"_id":"public/2023/10/30/跳表-skiplist/index.html","hash":"4de437c63437f06e8785359d2416d5c052180bb3","modified":1699786519302},{"_id":"public/2023/10/28/网管会/index.html","hash":"81ba0fd617764b5ebc29669c5d9f13d04352b758","modified":1699786519302},{"_id":"public/2023/10/24/概率论中各种分布/index.html","hash":"b7b7301001e716731aec34dbefc5045f6f4412d1","modified":1699786519302},{"_id":"public/2023/10/11/左偏树/index.html","hash":"805f66ca72d33c5cfd951263f608d2b9a13fc161","modified":1699786519302},{"_id":"public/2023/10/09/斐波那契堆/index.html","hash":"133e1039ffb91fd3f22092f0f9a2aefb17e4f3aa","modified":1699786519302},{"_id":"public/2023/10/09/二项堆/index.html","hash":"d8aac88544f35945dc8ee700b013afab184e5ab1","modified":1699786519302},{"_id":"public/2023/09/26/二叉树遍历/index.html","hash":"ba376d4ecd90f1e38b66398423217a2b1ebda896","modified":1699786519302},{"_id":"public/2023/09/20/计算机组成原理/index.html","hash":"9e4bc4b0a6991463ed9b4e932cf4c08d9b7361da","modified":1699786519302},{"_id":"public/2023/09/17/快速排序的几种实现/index.html","hash":"9a2298b77111d951b9b6a6769ac3bd1f3cd2dba3","modified":1699786519302},{"_id":"public/2023/09/11/抢课脚本/index.html","hash":"8949bd28442901b932a9849cd3009df69ce01b90","modified":1699786519302},{"_id":"public/2023/09/06/数据结构关键记录/index.html","hash":"9862bfb80951d45d768410bd43a143bf1350da95","modified":1699786519302},{"_id":"public/2023/09/04/python爬虫/index.html","hash":"8ab401dd9655f47d91450147da805bcfeebb8988","modified":1699786519302},{"_id":"public/2023/09/01/CSS记录/index.html","hash":"7a7f55718b9a9323988c5c41a89a8a40f3dcf5f2","modified":1699786519302},{"_id":"public/2023/08/31/杂记/index.html","hash":"bc352f4fba4d813c0d89e46c2c065dbc063fa106","modified":1699786519302},{"_id":"public/2023/08/31/JavaScript进阶/index.html","hash":"82e6f4a1e6332f1dc8b008e27ce486297fdd2165","modified":1699786519302},{"_id":"public/2023/08/28/JavaScript基础/index.html","hash":"2dff234a7b9e3c4d5295b4a9d20cbc4acfc9f341","modified":1699786519302},{"_id":"public/2023/08/28/python-数学建模与实验/index.html","hash":"dcdedf7bb2506c889782b1340ea6623d4cbadf7e","modified":1699786519302},{"_id":"public/2023/08/26/规划论模型/index.html","hash":"8d24ccd6713c33eda788494b61241d45fb546b15","modified":1699786519302},{"_id":"public/2023/08/26/matlab记录/index.html","hash":"1f0bd708ae45e61d35396a02153817a2b8fc32f4","modified":1699786519302},{"_id":"public/2023/08/25/决策分析方法/index.html","hash":"f4f73d7ac323339a99d3dbc328f1dcedd65b9ff8","modified":1699786519302},{"_id":"public/2023/08/25/插值与拟合建模/index.html","hash":"1039530ffb9f532fd1cf0e6f18e6ceb92ad1320e","modified":1699786519302},{"_id":"public/2023/08/24/矩阵求导/index.html","hash":"373bc3ead25c121af12330a8226d8a9ca605f193","modified":1699786519302},{"_id":"public/2023/08/24/回归分析与时间序列方法/index.html","hash":"bfdb375b5fbd8eee37f142cbff7bb82dd1cc5834","modified":1699786519302},{"_id":"public/2023/08/24/组合优化与随机性模型/index.html","hash":"b412ecd4c05afc121256c1dda79ce8e1189b6965","modified":1699786519302},{"_id":"public/2023/08/24/差分方程模型/index.html","hash":"64ca7254a1cd1afd6c90818e280d1b8578f4c672","modified":1699786519302},{"_id":"public/2023/08/24/微分方程模型/index.html","hash":"7d76c7de9962c4c5bb018a96addeeb218977734a","modified":1699786519302},{"_id":"public/index.html","hash":"55bf2da7844022d5bc063212db85a56ac727bb83","modified":1699786519302},{"_id":"public/2023/08/23/莫队算法/index.html","hash":"917b9ea0b7f54d0324c1d53b49a967b638ceb17a","modified":1699786519302},{"_id":"public/page/2/index.html","hash":"cbc3b1da4a3d0e19f076009a9eb58307a466603d","modified":1699786519302},{"_id":"public/page/3/index.html","hash":"f44905eace63990e95bec340382d8139aa6518fa","modified":1699786519302},{"_id":"public/page/4/index.html","hash":"0310dc183476260606ed2374f17e7f039969bcad","modified":1699786519302},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1699777789444},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1699777789444},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1699777789444},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1699777789444},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1699777789444},{"_id":"public/2023/09/01/CSS记录/练习1.png","hash":"c4e0965c1135b173f44d8b13905553abb2efc071","modified":1699777789444},{"_id":"public/2023/08/28/JavaScript基础/对象.png","hash":"855c20e8b13f2b9f52624cf571d34210224f3674","modified":1699777789444},{"_id":"public/2023/08/28/JavaScript基础/自结束标签.png","hash":"b5b1a5af51e547b4ec991011afa73dde3f91d0ca","modified":1699777789444},{"_id":"public/2023/08/26/matlab记录/meshgrid生成网格.png","hash":"e4b5df005c377ba74a4675e79d45159e9cc6e550","modified":1699777789444},{"_id":"public/2023/08/26/matlab记录/subs函数.png","hash":"1190aed5bb38506efb28cedc68cb50b634bf4823","modified":1699777789444},{"_id":"public/2023/08/28/python-数学建模与实验/join函数.png","hash":"c25b65ea7a06e5e3b94aa72a7a5b4a8bfec5d0a9","modified":1699777789444},{"_id":"public/2023/09/04/python爬虫/os模块.png","hash":"4c5003e1c314bea992bf074dda84c70019c69029","modified":1699777789444},{"_id":"public/2023/09/04/python爬虫/selenium定位元素.png","hash":"d9bf611cf528ba30d0682f764bfc800d4e409033","modified":1699777789444},{"_id":"public/2023/09/04/python爬虫/转义字符.png","hash":"136e8752be6c3820c29bab5f8c3496f4203741cd","modified":1699777789444},{"_id":"public/2023/09/04/python爬虫/未知节点.png","hash":"80039448dd9b478fb5fce2e0e38aca9272e70058","modified":1699777789444},{"_id":"public/2023/09/04/python爬虫/量词.png","hash":"5864026c6752977727079189ce4735ffd6713fd7","modified":1699777789444},{"_id":"public/2023/09/04/python爬虫/键盘操作.png","hash":"2e0cbce200adf7233cc92d64f580ffde99bbc186","modified":1699777789444},{"_id":"public/2023/09/04/python爬虫/鼠标操作.png","hash":"1e45dd110d93beff7c23a5b276b946ce1f118276","modified":1699777789444},{"_id":"public/2023/09/04/python爬虫/xpath.png","hash":"c62e8823cbb96b0fa018e64a8a0e5b508987f1fb","modified":1699777789444},{"_id":"public/2023/08/25/插值与拟合建模/拉格朗日插值公式.png","hash":"5c53d443d36d2f20ba4d66c22b3b7a1fc77c83b4","modified":1699777789444},{"_id":"public/2023/09/11/抢课脚本/fiddler.png","hash":"58c9a8d954af1eef32a932049a5fc93c91401316","modified":1699777789444},{"_id":"public/2023/09/06/数据结构关键记录/入环点.png","hash":"23730f0ba9db297815316ad9428f79cc447b19b2","modified":1699777789444},{"_id":"public/2023/09/11/抢课脚本/selectCourseInfo.png","hash":"7f6cadabf170bec3573bbcadd1b5c0b5e1e706e2","modified":1699777789444},{"_id":"public/2023/09/06/数据结构关键记录/分治时间复杂度.png","hash":"533d032396f54382f668fb8f1bacba24eb5f73df","modified":1699777789444},{"_id":"public/2023/09/06/数据结构关键记录/快速排序算法.png","hash":"4448a1ca0cf951a4606c3584b793856b359cd0a1","modified":1699777789444},{"_id":"public/2023/09/06/数据结构关键记录/排序法极大点.png","hash":"6bec75ff161c17f798600a127ac5773e58a622ef","modified":1699777789444},{"_id":"public/2023/08/24/矩阵求导/矩阵求导.png","hash":"d1368399b81d2992f51cb7a67c6cf41174ae0752","modified":1699777789444},{"_id":"public/2023/08/24/组合优化与随机性模型/报童问题.png","hash":"7ed9af684e635a4a96c4ad4e0ccfe7aa081ba048","modified":1699777789444},{"_id":"public/2023/08/24/矩阵求导/矩阵变元求导公式.png","hash":"89c72bc761d9ca74cc4686f4a8f5454124b38700","modified":1699777789444},{"_id":"public/2023/08/26/规划论模型/模型.png","hash":"5123ef742c41acd090868e381340f02c5f13aec3","modified":1699777789444},{"_id":"public/2023/08/26/规划论模型/等式.png","hash":"7666fd09594404a516a5ed1acd98b6c936b02e3c","modified":1699777789444},{"_id":"public/images/avatar.jpg","hash":"05fc620b7f9486e73041731d67fda2009b39d8e4","modified":1699777789444},{"_id":"public/2023/09/01/CSS记录/开发者模式.png","hash":"9c2bf58a266b72bfbcfbae851cfcf919d40ad9dc","modified":1699777789444},{"_id":"public/2023/08/28/JavaScript基础/childnodes缺陷.png","hash":"844ffd19b427891943287d0cdcd95b739dd7c076","modified":1699777789444},{"_id":"public/2023/08/28/JavaScript基础/document和window.png","hash":"f4a6cd600f952f0430faffad25b09607cba680c1","modified":1699777789444},{"_id":"public/2023/08/28/JavaScript基础/节点.png","hash":"678f1b66a8a39bd9b1f5e35904d2f84f829ce96b","modified":1699777789444},{"_id":"public/2023/08/26/matlab记录/matlab点乘点除.png","hash":"00b6aa0f475bd4b8fbde12c0f54c57faa8aae717","modified":1699777789444},{"_id":"public/2023/08/28/python-数学建模与实验/文本读取.png","hash":"34d22435c02e75d06bdf410e585462da9c2f3598","modified":1699777789444},{"_id":"public/2023/09/04/python爬虫/cookie存储信息.png","hash":"90c9829f612717770e6cff444262285499135d1a","modified":1699777789444},{"_id":"public/2023/09/04/python爬虫/常用文件操作.png","hash":"f4e335b4b39604dd797b7fd91a786ad03687c219","modified":1699777789444},{"_id":"public/2023/09/18/二项式反演/引理.png","hash":"adcfe3b5759432a586b077650ddb0b9581b78258","modified":1699777789444},{"_id":"public/2023/08/24/回归分析与时间序列方法/显著性检验.png","hash":"3a3f5f1f70884045324af8a1e22f00c017e3a4d1","modified":1699777789444},{"_id":"public/2023/09/06/数据结构关键记录/分治法极大点.png","hash":"5d62164033b0226f449e68fd51f3da1b808f6cec","modified":1699777789444},{"_id":"public/2023/09/06/数据结构关键记录/归并排序时间复杂度.png","hash":"12e6603095d3d0b2c12f3b8e07cee24b1b49199e","modified":1699777789444},{"_id":"public/2023/09/06/数据结构关键记录/快速排序时间复杂度.png","hash":"3646cd1c480febf00c3c6e989c26103447e53b40","modified":1699777789444},{"_id":"public/2023/09/06/数据结构关键记录/快速排序平均时间复杂度.png","hash":"12f86ce39f54aa0819ccc12abb1fdfa07eb3b869","modified":1699777789444},{"_id":"public/2023/09/06/数据结构关键记录/线索二叉树.png","hash":"b156efe066459f7a6e1d6fccf7612266fc798db1","modified":1699777789444},{"_id":"public/2023/08/26/规划论模型/股票.png","hash":"df46c4bb9eae8f988fb8d6cc7fa82eb47fb23189","modified":1699777789444},{"_id":"public/2023/09/20/计算机组成原理/动态RAM和静态RAM比较.png","hash":"928c0d1853f996de1e3bc8fd9d8a34975168dab6","modified":1699777789444},{"_id":"public/2023/09/20/计算机组成原理/存储器层次.png","hash":"c79bdb110d642cb524c7d449ef19646ab66e299a","modified":1699777789444},{"_id":"public/2023/09/20/计算机组成原理/存储器组成.png","hash":"d6467efb47e78be9ccbbe47078999d3e94ac45f9","modified":1699777789444},{"_id":"public/2023/09/20/计算机组成原理/字扩展.png","hash":"20843a6e5a7c380f13472cf524a02c00ccc45e5b","modified":1699777789444},{"_id":"public/2023/08/31/杂记/lambda表达式.png","hash":"ff87995809e477a1ab7a0213728cb83c41e88da3","modified":1699777789444},{"_id":"public/2023/08/31/杂记/实体字符.png","hash":"1ab3202ab50a28198730fced80d50d6ed6cb92ea","modified":1699777789444},{"_id":"public/live2dw/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1699777789444},{"_id":"public/live2dw/assets/exp/f03.exp.json","hash":"fbf7729e504f14f83f976827fcf62301a6579a34","modified":1699777789444},{"_id":"public/live2dw/assets/exp/f02.exp.json","hash":"241b6afafa2e25c6d7a54692a8b5aa060a137ab1","modified":1699777789444},{"_id":"public/live2dw/assets/exp/f04.exp.json","hash":"35e746ede62e7090e7dfb08561d77772f58b4153","modified":1699777789444},{"_id":"public/live2dw/assets/mtn/flickHead_02.mtn","hash":"d3c9c0acb4dc25a2274f3b9faa71e5ce60ad92e4","modified":1699777789444},{"_id":"public/live2dw/assets/mtn/flickHead_00.mtn","hash":"f64c79c9171660db5c440bef229ac2e35a1597d5","modified":1699777789444},{"_id":"public/live2dw/assets/mtn/idle_02.mtn","hash":"7f5d2cf8706007c8659938eba132a68c470a4c26","modified":1699777789444},{"_id":"public/live2dw/assets/mtn/idle_01.mtn","hash":"88c2494655dbb712b842f03232b619f381753d52","modified":1699777789444},{"_id":"public/live2dw/assets/mtn/idle_00.mtn","hash":"378b4577217c604c9d28ab4edf8b707c8d8c2fbb","modified":1699777789444},{"_id":"public/live2dw/assets/mtn/flickHead_01.mtn","hash":"a1011d6bf397bcd3c3c968d9616f88fe1ffbc83c","modified":1699777789444},{"_id":"public/live2dw/assets/mtn/pinchIn_00.mtn","hash":"70978b4c983f6a9fd6d3d9c24571586f7d6eac30","modified":1699777789444},{"_id":"public/live2dw/assets/mtn/pinchIn_01.mtn","hash":"a5fefb45115695db72b9499e627a51b2b9394f2c","modified":1699777789444},{"_id":"public/live2dw/assets/mtn/pinchIn_02.mtn","hash":"aa0d66ca9b06c374577fd7e64e89756de1e1f2ae","modified":1699777789444},{"_id":"public/live2dw/assets/mtn/pinchOut_00.mtn","hash":"e07fe8fd8c2810e3c1d28b730bd49c8c25849bad","modified":1699777789444},{"_id":"public/live2dw/assets/mtn/pinchOut_01.mtn","hash":"e05df948d08b17f34c993a9c1f901190509d5db0","modified":1699777789444},{"_id":"public/live2dw/assets/mtn/pinchOut_02.mtn","hash":"b323fd350d334b33bbdfb31194ae664089986c27","modified":1699777789444},{"_id":"public/live2dw/assets/mtn/shake_00.mtn","hash":"5185d02c7ab9f0bec3d4a890b54b2378e553373d","modified":1699777789444},{"_id":"public/live2dw/assets/mtn/shake_01.mtn","hash":"e812985a56796e122018f9d57d1606a4866ff7d1","modified":1699777789444},{"_id":"public/live2dw/assets/mtn/tapBody_00.mtn","hash":"835aa3d4a8fbd26c0bb66b164a19464fa3f17a99","modified":1699777789444},{"_id":"public/live2dw/assets/mtn/shake_02.mtn","hash":"2702970805e07777974c383613e631730982bcff","modified":1699777789444},{"_id":"public/live2dw/assets/mtn/tapBody_02.mtn","hash":"a75acb51c1191ce5050d3ee1af6f2dcc787c7c5e","modified":1699777789444},{"_id":"public/live2dw/assets/shizuku.physics.json","hash":"6484d646e79a44c83784c6ae434cf7349746c5c8","modified":1699777789444},{"_id":"public/live2dw/assets/shizuku.model.json","hash":"19a05bd41b806a935cea42c2000626fc82da2536","modified":1699777789444},{"_id":"public/live2dw/assets/shizuku.pose.json","hash":"ac5505efbf80ba0a2e5783d67fe232bc5c6f1f80","modified":1699777789444},{"_id":"public/live2dw/assets/mtn/tapBody_01.mtn","hash":"78fca17436ab5e065e27f419f135aa6c0a0b52ef","modified":1699777789444},{"_id":"public/live2dw/assets/snd/flickHead_00.mp3","hash":"356388d939006b03cf9e6158c603b58d4800bec1","modified":1699777789444},{"_id":"public/live2dw/assets/snd/flickHead_02.mp3","hash":"5f63477ce63f2073e24d68fea906fe136fe6349e","modified":1699777789444},{"_id":"public/live2dw/assets/snd/flickHead_01.mp3","hash":"436d0bbccf6e7a2744447554947eee4563608970","modified":1699777789444},{"_id":"public/live2dw/assets/snd/pinchIn_01.mp3","hash":"d5c8cc6f61b56222a83a5174f75006f83c3b88da","modified":1699777789444},{"_id":"public/live2dw/assets/snd/pinchIn_00.mp3","hash":"f9baa3b7cadec20b714135fc49cfab3ff6adeeb4","modified":1699777789444},{"_id":"public/live2dw/assets/snd/shake_00.mp3","hash":"f65dd58e7b44ec5c865d13c190316070b625b5fe","modified":1699777789444},{"_id":"public/live2dw/assets/snd/shake_01.mp3","hash":"c1e0e8a07ff268ee06c2b7825d1b645e193f21b9","modified":1699777789444},{"_id":"public/live2dw/assets/snd/tapBody_00.mp3","hash":"003e68a59a9c8392e230f34c91860efbd946277a","modified":1699777789444},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1699777789444},{"_id":"public/live2dw/assets/snd/shake_02.mp3","hash":"8882b94bce00f09232588b7301badb105fa8acab","modified":1699777789444},{"_id":"public/live2dw/assets/snd/tapBody_01.mp3","hash":"5314b50f153df71559e51e2586581c006df00722","modified":1699777789444},{"_id":"public/live2dw/assets/snd/tapBody_02.mp3","hash":"15e7815ed0a0e5164e18e0c53b97aedc742a134d","modified":1699777789444},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1699777789444},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1699777789444},{"_id":"public/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1699777789444},{"_id":"public/js/next-boot.js","hash":"f5db08098c7b7942bd5d18203751d64c2110fab0","modified":1699777789444},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1699777789444},{"_id":"public/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1699777789444},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1699777789444},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1699777789444},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1699777789444},{"_id":"public/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1699777789444},{"_id":"public/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1699777789444},{"_id":"public/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1699777789444},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1699777789444},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1699777789444},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1699777789444},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1699777789444},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1699777789444},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1699777789444},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1699777789444},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1699777789444},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1699777789444},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1699777789444},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1699777789444},{"_id":"public/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1699777789444},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1699777789444},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1699777789444},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1699777789444},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1699777789444},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1699777789444},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1699777789444},{"_id":"public/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1699777789444},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1699777789444},{"_id":"public/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1699777789444},{"_id":"public/js/third-party/tags/mermaid.js","hash":"6bf821310342c5b87a631873e7650a475a0765f1","modified":1699777789444},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1699777789444},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1699777789444},{"_id":"public/js/utils.js","hash":"64cea5c05465b0809170f34f19a28a4b666991a8","modified":1699777789444},{"_id":"public/css/main.css","hash":"3c69fb91aaca6a6c43d6288ecc20f81856abc0ee","modified":1699777789444},{"_id":"public/2023/08/26/规划论模型/整数规划.png","hash":"d6b236b3eb04601ef3d6648be51ed7b36156b915","modified":1699777789444},{"_id":"public/2023/09/01/CSS记录/常见布局名词.png","hash":"fd41f57ff747d3acd3a843efbdbba902040dff5b","modified":1699777789444},{"_id":"public/2023/08/28/JavaScript基础/获取元素节点.png","hash":"adb7328734c1fec46bcc3f12d23428add8362ef1","modified":1699777789444},{"_id":"public/2023/08/26/matlab记录/矩阵操作.jpg","hash":"98d59872576d8e3ac954224d62f1150d82b16e16","modified":1699777789444},{"_id":"public/2023/08/26/matlab记录/灰度图.png","hash":"babff3a8c89f556178ffe5ac6027e3aa7d18975b","modified":1699777789444},{"_id":"public/2023/08/28/python-数学建模与实验/二进制文件读取.png","hash":"31a6ab20c6a708b35253b8e96fa8c96131d2892c","modified":1699777789444},{"_id":"public/2023/08/28/python-数学建模与实验/常见样式颜色.png","hash":"b8e280b2e9996bbd0bf0217328ba2fbd3c983d9d","modified":1699777789444},{"_id":"public/2023/08/28/python-数学建模与实验/数组创建.png","hash":"1994c8e16ceac178f17bd883af5964681b91c6c3","modified":1699777789444},{"_id":"public/2023/08/25/插值与拟合建模/插值条件非齐次方程组.jpg","hash":"5932f8498b470d1384b5d8c2c8234b4a9c90824d","modified":1699777789444},{"_id":"public/2023/09/20/计算机组成原理/以存储器为中心的总线结构.png","hash":"cfc3b610a1686b8b53df007ad8cff16ff5cf6455","modified":1699777789444},{"_id":"public/2023/09/20/计算机组成原理/乘法操作.png","hash":"cea03c5354425cacb300828a7e73dcc1c90c54ce","modified":1699777789444},{"_id":"public/2023/09/20/计算机组成原理/冯诺伊曼计算机硬件框架.png","hash":"989c063e7c2bbe3ed1f6ac5b27a3f1ff9b4b5710","modified":1699777789444},{"_id":"public/2023/09/20/计算机组成原理/位扩展.png","hash":"ca829177e1d2ae21ea5978bd8dd31d5eee937e7c","modified":1699777789444},{"_id":"public/2023/09/20/计算机组成原理/控制器结构.png","hash":"8c17be0f75914e378b47c71c24a6c4f7f43cfe24","modified":1699777789444},{"_id":"public/2023/09/20/计算机组成原理/总线特性.png","hash":"08d55d1af682ab71853a5241fbc3549fbf60f47c","modified":1699777789444},{"_id":"public/2023/09/20/计算机组成原理/语言发展.png","hash":"fbef439c0c250ef7d093fd38bcb480841fc83987","modified":1699777789444},{"_id":"public/2023/09/20/计算机组成原理/除法操作.png","hash":"498d366fe672d75de17094a8caccd9a370973739","modified":1699777789444},{"_id":"public/2023/08/31/杂记/endl与n.png","hash":"212e5d71b13c6c6e47f3a3f57d151731b4223f21","modified":1699777789444},{"_id":"public/2023/09/20/计算机组成原理/面向CPU的总线结构.png","hash":"25dd7dd98942c68b08e5ff03c2759d00b204b6bf","modified":1699777789444},{"_id":"public/2023/08/31/杂记/http和tcp关系.png","hash":"f48b311eb6ec22ba5f21ca1f0e679ff03bae4d52","modified":1699777789444},{"_id":"public/2023/08/31/杂记/new构造.png","hash":"879de411a0a3bd91639f3708178e288ea225ddcd","modified":1699777789444},{"_id":"public/2023/08/31/杂记/OSI与TCPIP关联.png","hash":"e346f6e9218b2953accf3cc9f941b70cb7fe2d1f","modified":1699777789444},{"_id":"public/2023/08/31/杂记/OSI模型.png","hash":"a03b28739450cf767111b5f15870031d281bbad1","modified":1699777789444},{"_id":"public/2023/08/31/杂记/h和hpp.png","hash":"8b9acf7fff3a7d1959f3068b737542ee22cce281","modified":1699777789444},{"_id":"public/2023/09/20/计算机组成原理/运算器基本组成及操作.png","hash":"2a044900a2775bffe374edbbf237874c609e1cf2","modified":1699777789444},{"_id":"public/2023/08/31/杂记/strdup使用.png","hash":"15ef99d61c14d1a67da62997add9584fddb8a858","modified":1699777789444},{"_id":"public/2023/08/31/杂记/字符串面值的赋值.png","hash":"166a424ce2014242de1b6ddf0f19610331ac6b2c","modified":1699777789444},{"_id":"public/2023/08/31/杂记/非递归扩展欧几里得.png","hash":"15b7caea53ca985926d44e770ba8225917d0e972","modified":1699777789444},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_00.png","hash":"21bdb28b31783e23b26b3aa061e90be4088665aa","modified":1699777789444},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_05.png","hash":"0cd00007fb8bff62a2eb08e1d7c43abab8722224","modified":1699777789444},{"_id":"public/live2dw/assets/snd/pinchIn_02.mp3","hash":"5b63e02607571ac601c500995e836e6c861b1c62","modified":1699777789444},{"_id":"public/live2dw/assets/snd/pinchOut_02.mp3","hash":"554edb2f3838cbdc27d1a9c6b8a9cb6eb465cbdd","modified":1699777789444},{"_id":"public/live2dw/assets/snd/pinchOut_00.mp3","hash":"0654f38f6e9fd623eaf8be11b5d58c9d12991949","modified":1699777789444},{"_id":"public/live2dw/assets/snd/pinchOut_01.mp3","hash":"8a081030fd53c07bffe3edd48f87a371ca77296b","modified":1699777789444},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_03.png","hash":"07f568a2bb8045b6bdff7783fb4daf62c821f9ab","modified":1699777789444},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1699777789444},{"_id":"public/2023/09/01/CSS记录/色相环.png","hash":"be0011670d72b5ef02eb6ee9790d944608ca1d22","modified":1699777789444},{"_id":"public/2023/08/28/JavaScript基础/执行顺序.png","hash":"0e872ec43428892ac661c5dc152608fad93f47ba","modified":1699777789444},{"_id":"public/2023/08/28/JavaScript基础/节点的属性.png","hash":"879d7814eb1ef2f2da6534e50280ef6423418344","modified":1699777789444},{"_id":"public/2023/08/28/JavaScript基础/获取兄弟节点.png","hash":"66e83f371009b1406467541cdabb22ca318a2160","modified":1699777789444},{"_id":"public/2023/08/31/JavaScript进阶/原型链.png","hash":"6e8c5a700eea09a4be3a56bc1485454728b1583d","modified":1699777789444},{"_id":"public/2023/08/28/python-数学建模与实验/文件操作方式.png","hash":"f4dc77996f64180022c89505b5d438016ffd80f7","modified":1699777789444},{"_id":"public/2023/09/04/python爬虫/读取操作类型.png","hash":"43528a81e29ed1bfb6fc4b814fadc54f8b52ea6e","modified":1699777789444},{"_id":"public/2023/09/04/python爬虫/html代码.png","hash":"b65d3ac3874182ea8e127f7ffa8f3b7d8f9eff5e","modified":1699777789444},{"_id":"public/2023/08/26/规划论模型/linprog.png","hash":"b591344e7f2bc1951385f46cc65f1e35955aa815","modified":1699777789444},{"_id":"public/2023/08/26/规划论模型/problem1.jpg","hash":"2af89aa60187fdcf632ae0c6c38e996fefa035a4","modified":1699777789444},{"_id":"public/2023/09/20/计算机组成原理/主机架构.png","hash":"ee86ef02a90e6ed0ece36bd557207832ffc35ae8","modified":1699777789444},{"_id":"public/2023/09/20/计算机组成原理/单总线结构.png","hash":"1b192d7d18a2e2e4609004302e7624b2e60c7404","modified":1699777789444},{"_id":"public/2023/09/20/计算机组成原理/取数操作.png","hash":"d446d06bd5af7f2f95898d488d6cd003281b224c","modified":1699777789444},{"_id":"public/2023/08/31/杂记/strcpy和strdup.png","hash":"4e578d09fcb95e63dc105cce6d8e7495e4c60356","modified":1699777789444},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_04.png","hash":"f764d594841905db8b2998dd61c329866125ad97","modified":1699777789444},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_01.png","hash":"3d0e745f3e560071ee08beeecde186e5ea35d99e","modified":1699777789444},{"_id":"public/2023/09/01/CSS记录/各元素显示模式.png","hash":"3ff3dd61c9803eeb2c8ae538cc3a741e7908a101","modified":1699777789444},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1699777789444},{"_id":"public/2023/08/28/JavaScript基础/bom对象.png","hash":"3758de4de1ff1bf51fca0db4154d00ee5e84de0d","modified":1699777789444},{"_id":"public/2023/08/28/JavaScript基础/查找子节点.png","hash":"525d1258fd3e1f09a7c08aa99402bc7dd831017e","modified":1699777789444},{"_id":"public/2023/08/28/python-数学建模与实验/一般索引.png","hash":"d6e09b988f40f09b1462be6e538b9521a7adfc3b","modified":1699777789444},{"_id":"public/2023/08/23/test/machine_learning.jpg","hash":"4679d758497a192db97b9ceb0476faeef1d16cbb","modified":1699777789444},{"_id":"public/2023/10/05/博弈论及其应用/非合作博弈划分.png","hash":"0915075e6f41c65a137475978600b42854129db1","modified":1699777789444},{"_id":"public/2023/09/20/计算机组成原理/字和位扩展.png","hash":"e2fb8db632df04e0b9978debc0014c43bbc11730","modified":1699777789444},{"_id":"public/2023/08/31/杂记/FTP工作流程.png","hash":"bd088724661af97bdad24944b6822b32b97607db","modified":1699777789444},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_02.png","hash":"055eb2da9c13e9116be93a1e60c0ea2b660af864","modified":1699777789444},{"_id":"public/2023/09/01/CSS记录/像素.png","hash":"b42a45aac609ab30760caf8b6b140c3d6285136b","modified":1699777789444},{"_id":"public/2023/08/25/插值与拟合建模/插值条件非齐次方程组.png","hash":"3c9284c7ae77d11c0f92954636319e2da7889919","modified":1699777789444},{"_id":"public/2023/08/31/JavaScript进阶/原型.png","hash":"511618caff4ae31cf2e6d3bfd5f9906ea1920b06","modified":1699777789444},{"_id":"public/2023/08/26/规划论模型/指派问题.png","hash":"81841879a5e14662ee9f8dfeb723cb64b86fd0c1","modified":1699777789444},{"_id":"public/2023/09/01/CSS记录/布局技巧.png","hash":"7b5ac6242f0542c6c26694d42655b374fdf4c588","modified":1699777789444},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1699777789444},{"_id":"public/2023/09/20/计算机组成原理/计算机的多样性.png","hash":"40d57bc4e5e28739983b948839ca77f433532487","modified":1699777789444},{"_id":"public/live2dw/assets/moc/shizuku.moc","hash":"c2670a0f75830edc89d7fe6d074de4ee67e8dc5d","modified":1699777789444},{"_id":"public/2023/08/24/微分方程模型/liuliangxishu.jpg","hash":"e7ef92fcde562b1fa78a6f60cae4c5a0b0eeafca","modified":1699777789444},{"_id":"public/2023/09/01/CSS记录/分区.png","hash":"8119f633eb2d8d683215a9e29f23940163385506","modified":1699777789444},{"_id":"source/_posts/杂记2.md","hash":"20d066294ab69d41d3e87d87b3ae8139b86d93d8","modified":1699784438727},{"_id":"public/2023/11/12/杂记2/index.html","hash":"467c70acf4b2f49c1c5864f12e55164db79a12e6","modified":1699786519302}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"A Missing Semester of Your CS Education","date":"2023-09-20T05:23:42.000Z","_content":"见 \"E:\\Notes\\A Missing Semester of Your CS Education\\关键记录.md\"","source":"_posts/A-Missing-Semester-of-Your-CS-Education.md","raw":"---\ntitle: A Missing Semester of Your CS Education\ndate: 2023-09-20 13:23:42\ntags:\n---\n见 \"E:\\Notes\\A Missing Semester of Your CS Education\\关键记录.md\"","slug":"A-Missing-Semester-of-Your-CS-Education","published":1,"updated":"2023-09-20T05:24:19.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7sznw00005oog9mukcz1k","content":"<p>见 “E:\\Notes\\A Missing Semester of Your CS Education\\关键记录.md”</p>\n","site":{"data":{}},"excerpt":"","more":"<p>见 “E:\\Notes\\A Missing Semester of Your CS Education\\关键记录.md”</p>\n"},{"title":"CSS记录","date":"2023-09-01T11:27:33.000Z","description":"The key record of CSS.","_content":"#### 行内样式\n`style` 是 CSS 的属性名\n在 CSS 中名-值对中间用 `:`\n`font-size: xx px;` 可以设置字体大小\n一般不推荐使用行内样式，不能复用并且不利于维护。\n```\n<h1 style=\"color: red; font-size: 50px;\">Hello World</h1>\n```\n\n#### 内部样式\n在 `<head>` 标签或者 `<body>` 标签中加一个 `<style>` 标签(不过一般都是写在 `head` 里面)。\n\n#### 外部样式\n可以新建一个 `xxx.css` 文件，然后在 HTML 文件的 `<head>` 标签中加一个 `<link>` 标签\n```\n<link rel=\"stylesheet\" href=\"./xxx.css\">\n```\n其中 `rel` 是 `relation` 的缩写，就是说 `href` 的文件和当前 HTML 文件的关系。\n\n#### 样式优先级 \n行内样式的优先级 > 内部样式\n对于内部样式和外部样式，它俩平级，但是后来者居上，也就是说，谁写在后面，就是展现谁的样式。\n\n#### 选择器\n1. 通配选择器：\n```\n* {\n\n}\n```\n\n2. 类选择器：在标签中添加属性 `class=\"xxx\"`，注意在 `style` 中的格式，需要在 `xxx` 前面加一个 `.`，来区分类名和标签名。\n```\n.xxx {\n\n}\n```\n要是一个标签属于两个 `class` 的话，写成 `class=\"xxx yyy\"` 的格式，而不是分开写两个 `class`，那样的话后一个 `class` 会被忽略。\n\n3. ID 选择器：\n```\n# xxx {\n\n}\n```\n\n4. 交集选择器：\n就是将两个选择器紧紧的写在一起。如果交集选择器中有元素，元素必须在开头(因为字母放在最后会引起单词的歧义)，并且我们交集的条件可以是多个。\n`id` 选择器理论上可以作为交集选择器，但是我们的 `id` 是唯一的，已经可以唯一定义了，所以一般就是 `class` 和标签一起写。\n同时也不存在两个元素同时在标签选择器中。\n```\np.xxx {\n\n}\n```\n\n5. 并集选择器\n就是在不同选择器之间加上逗号 `,`\n```\n.rich,.beauty,.dog,.pig {\n\n}\n```\n不过这样写的话，逗号和点写在一起看起来有些乱，我们一般竖着写：\n```\n.rich,\n.beauty,\n.dog,\n.pig {\n\n}\n```\n\n6. 后代选择器\n比如说 `ul` 中的所有 `li`，中间直接空格就可以。但是除了选择了儿子以外，孙子 `li` 也被选择了。\n```\nul li {\n\n}\n```\n\n7. 子代选择器\n`div` 标签中的子代 `a` 标签(排除了孙子等标签，只有儿子)\n```\ndiv>a {\n\n}\n```\n\n8. 兄弟选择器\n用 `+` 连接，只有紧紧相邻的兄弟，如果 `div` 紧紧相邻的没有 `p`，但是有 `p` 中间隔了别的标签，也不不起作用的。(睡在我下铺的兄弟) 相邻兄弟选择器\n```\ndiv+p {\n\n}\n```\n如果是 `div~p {}` 就是 `div` 的所有兄弟 `p`，而不是紧紧相邻的了。\n\n9. 属性选择器\n`[title] {}` 选择具有 `title` 属性的标签\n`[title=\"xxx\"] {}` 选择具有 `title` 属性并且属性内容是 `xxx` 的标签。\n`[title^=\"a\"] {}` 选择具有 `title` 属性并且属性内容是以 `a` 开头的标签。\n`[title$=\"a\"] {}` 选择具有 `title` 属性并且属性内容是以 `a` 结尾的标签。\n`[title*=\"a\"] {}` 选择具有 `title` 属性并且属性内容中含有 `a` 的标签\n\n#### 伪类选择器\n可以理解为是对于元素的状态的一种描述。比如，已经访问过的超链接和未访问过的超链接，就是加一个冒号，后面就是元素的状态\n```\na:link {\n\n}\na:visited {\n\n}\n```\n\n#### 三大特性\n1. 层叠性\n如果样式发生了冲突，就会根据一定的规则(选择器优先级)，进行样式层叠(覆盖)。(当权重一样的时候，我们才考虑在代码中的顺序)\n2. 继承性\n元素会自动拥有其父元素、或者祖先元素上设置的**某些样式**，优先继承离得最近的。\n常见的可继承属性：`test-?? font-?? line-?? color`\n3. 优先级\n`!important > 行内样式 > ID 选择器 > 类选择器 > 元素选择器 > * > 继承的样式`\n\n#### 像素 Pixel\n虽然 `cm` 和 `mm` 这两个单位也可以用在网页中，但是对于网页来说，这两个单位不够精细。所以我们就是用 `px` 这个单位(是 Pixel 的缩写)，因为它很小，所以很精细。\n{%asset_img 像素.png%}\n可以看出来，虽然电脑屏幕一般大小，但是右边的像素多，所以每一个像素的大小就小。所以像素我们不确定多么大，需要看屏幕，它是一个相对单位。\n像素点越小，呈现出来的图片就越细腻，越清晰\n\n#### 颜色\n1. 颜色名\n但是它太有限了，并且不是很精确，所以开发的时候一般不用。\n2. RGB 或者 RGBA\nRGB 中三个字母分别是 RED GREEN BLUE(范围都是从 0 到 255)\n`rgb(xx, xx, xx);`\n`rgba(xx, xx, xx, xx);` 前三位和 `rgb` 相同，最后一位是透明度，范围是 0 - 1。\n3. HEX 或者 HEXA\n`#xxxxxx` 井号后面一共六位，每一位都是十六进制的数字，每两位组合起来分别表示红、绿、蓝\n然后 HEXA 就像 RGBA，就是添加了一个透明度，它也是用两位十六进制来表示，也就是说一共八位。\n4. HSL 或者 HSLA\n这两个东西用的不是很多。\n`hsl(hue, saturation, lightness);` 色相、饱和度、亮度\n`Hue` 在这里是用角度表示的，写为 `xxdeg`\nHELA 就是 `hsl(hue, saturation, lightness, xx);` 最后一位 0 - 1 表示透明度。\n{%asset_img 色相环.png%}\n\n#### 字体属性\n\n`font-family: \"xxx\";` 字体族，其实就是字体样式。通常情况下，把字体分为两大类。第一类是衬线字体，第二类是非衬线字体。衬线字体的横竖撇捺特别有棱角，目前写网页还是非衬线字体比较多。\n\n`font-style: xxx;` 字体风格。默认为 `normal`，斜体是 `italic`\n\n`font-weight:xxx;` 字体粗细，参数为 `lighter normal bold bolder`，或者写 100 - 1000 的数字，数字越大越粗。\n\n#### 文本属性\n`letter-spacing:xxx px;` 字母间距(汉字被认为是字母)\n`word-spacing:xxx px;` 词间距\n`text-decoration:xxx;` 文本修饰 `overline underline line-through` 还可以改为波浪线等形式，并且也可以改颜色。\n`text-indent:xx;` 文本缩进\n`text-align:xxx;` `xxx` 可以是 `left center right` 就是靠哪里对齐。\n`line-height:xxx;` 调整行高，就是上下之间的距离变大，但是字体的大小不变。其中 `xxx` 可以为像素、也可以写一个数字，表示是 `font-size` 的多少倍，也可以写成百分比，表示是 `font-size` 的多少倍。\n`vertical-align:xxx;` `xxx` 可以是 `top baseline bottom middle` \n\n#### 列表属性\n`list-style-type:xxx;` `xxx` 可以是 `none square lower-roman upper-roman decimal`\n`list-style-position:xxx;` 可以是 `inside outside`\n`list-style-image:xxx;` 找一个图片，自定义前面的点。\n\n#### 表格属性\n`border-width:xxx px;` 宽度 \n`border-color:xxx;` 颜色\n`border-style:xxx;` 样式\n边框的相关属性，不仅仅是表格可以使用，其他元素如 `h1 p` 也可以使用。\n`table-layout:fixed;` 可以控制表格的列宽。\n`border-spacing:xxx px;` 控制单元格之间的距离。\n`borer-collapse: collapse;` 合并相邻单元格的标签。写了合并以后，上面的 `border-spacing:xxx;` 无论 `xx` 是多少都失效了。\n`empty-cells: show / hide;` 隐藏没有内容的单元格。\n`caption-side:xxx;` 设置表格标题的位置，可以是 `top bottom`\n\n#### 背景属性\n`background-color:xxx;`\n`background-repeat:repeat / no-repeat / repeat-y / repeat-x;` 如果图片较小，是否重复显示\n`background-image:xxx;`\n`background-position:xxx;` 可以控制背景图片的位置。`xxx` 可以是 `left top / left bottom / left center / xx px xx px`\n\n#### 鼠标属性\n`cursor:xxx;` 参数可以为 `pointer / move / wait / crosshair / help `\n`cursor: url(\"xxx\"),pointer;` 其中 `xx` 是一个图片的地址，此时鼠标的样式就变为了图片的样子。\n\n#### CSS 常用的长度单位\n1. `px`\n2. `em` 相当于当前元素的 `font-size` 的倍数。如果自己没有就沿着父元素一直网上找，如果都没有，就是用默认的。\n3. `rem` r 是 root 的意思。相对于根元素的 `font-size` 的倍数，如果没有，就使用默认的。\n4. `%` 相对于父元素计算。\n\n#### 盒子模型\n1. 块元素 block\n在页面中独占一行，不会与任何元素共占一行，是从上到下排列的。\n默认宽度就是撑满父级元素，高度由内容决定。\n2. 行内元素 inline\n在页面中不是独占一行，一行中不能容下的行内元素，会在下一行继续从左到右排列。\n默认宽度和高度都是由内容决定。\n但是 **无法通过 CSS 设置宽和高。**\n最具有代表性的其实就是 `<span>`\n3. 行内块元素 inline-block\n又叫做内联块元素。在页面中不独占一行，会在下一行继续从左到右排列。\n默认宽度和高度都是由内容决定。\n**可以通过 CSS 设置宽和高。**\n最具代表性的其实是 `<img>`\n{%asset_img 各元素显示模式.png%}\n\n##### 修改元素的显示模式\n上面是各种元素的默认显示形式，不过我们可以在 CSS 中修改 `display` 属性来调整它的显示形式。\n`display: block / inline-block / inline;` 如果是 `display: none;` 那么这个元素就直接不显示了，并且也不会占用网页的空间。\n\n##### 盒子模型的组成部分\n我们设置的背景颜色会填充内边距区域，也会填充边框区域。\n外边距不会影响盒子大小，只会影响其位置。\n{%asset_img 分区.png%}\n\n`width-min width-max height-min height-max padding-left padding-top padding-bottom padding-right`\n\n`border` 的属性同样也可以是 `border-left-width border-left-style ... `\n\n`margin` 的属性可以同 `padding` 一样修改。\n\n#### 处理溢出\n`overflow: hidden;` 直接隐藏，还可以写 `scroll auto` 默认是 `visible`，也可以 x y 方向分开处理，就是写成 `overflow-x` 和 `overflow-y`\n\n#### 隐藏元素的方式\n1. 就是 `display: none;` 通过这种方式隐藏的元素不会再去占据页面的位置。\n2. 有一个属性专门控制元素的显示 `visibility: show;` 默认是 `show`，如果想隐藏就改为 `hidden`。不过通过这种方式隐藏的仍然会占位。\n\n一个关于开发者模式四个分区作用的说明。\n{%asset_img 开发者模式.png%}\n{%asset_img 布局技巧.png%}\n\n#### 浮动 float\n浮动最早期设计出来是为了实现文字环绕图片或者说文字环绕文字。现在浮动是主流的页面布局方式之一。\n1. 给第一个子元素设置 `margin-top` 会被父元素抢走，但是如果这个子元素浮动以后，就不会这样了。\n2. 浮动后的元素不会被当作文本处理了(行内和行内块都会被当作文本处理)\n3. 脱离文档流\n4. 不会独占一行，可以共用一行\n\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>\n            this is a test.\n        </title>\n        <style>\n            .outer {\n                background-color: gray;\n                border: black 1px solid;\n            }\n            .box {\n                margin: 10px;\n                width: 100px;\n                height: 100px;\n                background-color: skyblue;\n                border: solid black 1px;\n            }\n            .box1 {\n                float: right;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"outer\">\n            <div class=\"box box1\">1</div>\n            <div class=\"box box2\">2</div>\n            <div class=\"box box3\">3</div>\n        </div>\n    </body>\n</html>\n```\n\n浮动之后，盒子因为脱离了标准文档流，它撑不起父盒子的高度，导致父盒子高度塌陷\n##### 清除浮动带来影响的方式\n1. 父盒子设置固定高度\n虽然，给父盒子设置了固定高度能暂时解决我们的问题，但是它的使用不灵活，如果未来子盒子的高度需求发生了改变(网页的多处地方)，那么我们得手动需要更改父盒子的高度。后期不易维护。\n2. 内墙法\n所谓内墙法,有一个规则:在浮动元素的后面加一个空的块级元素(通常是div),并且该元素设置clear:both；属性。\nclear属性，字面意思就是清除，那么both,就是清除浮动元素对我左右两边的影响。\n3. 伪元素清除法\nhttps://juejin.cn/post/6886247611318140942\n在最后补加一个没有实际意义的块元素 `div`，然后添加 `div` 的 CSS 属性 `clear: both;`，这个块元素没有高，没有宽，没有内容，就是专门用来撑起父元素。\n或者更加优雅写成\n```\nxxx::after {\n    content: '';\n    display: block;\n    clear: both;\n}\n```\n其中 `content: ''` 表示元素为空，`display: block` 才能撑起父元素(因为另起一行了)，`clear: both;` 就是消除之前的浮动带来的所有影响。\n4. `overflow: hidden;`\n\n#### 定位\n开启相对定位的元素并未脱离文档流。\n如果一个元素开启了定位，那么它的层级就比普通元素的层级高。\n相对定位：\n1. 对于元素的位置进行微调。\n2. 配合绝对定位\n\n绝对定位：\n1. 一旦开启绝对定位，就脱离了文档流。\n2. 绝对定位参考的点是它的包含块。\n    对于没有脱离文档流的元素，它的父元素就是它的包含块。\n    对于脱离文档流的元素，它的第一个开启定位的祖先元素就是它的包含块。\n3. 不论是块元素、行内元素还是行内块元素，只要进行了绝对定位，就变成了**定位元素**\n    定位元素：\n    1. 默认被内容撑开。\n    2. 但是也是可以进行设置的。\n\n固定定位：\n就是直接对于视口定位。\n1. 并且元素变成了定位元素。\n2. 脱离了文档流。\n\n粘性定位：\n`position: sticky;`\n参考点是离它最近的拥有滚动行为的祖先元素。包含粘性定位元素的父容器也不在视图上时，胶水就失效了。\n\n这几个定位的层级是平等的。\n\n#### z-index\n属性 `z-index`(纯数值，没有单位) 就相当于 `z` 轴上的坐标，`z` 越大，层级越高，所以在屏幕上显示的优先级越高。\n\n#### 布局\n版心的大小一般是 900 - 1200 px\n{%asset_img 常见布局名词.png%}\n\n#### 重置默认样式\n1. 使用全局选择器\n在简单的案例中，我们可能使用这种方式，但是实际开发中我们不会使用。\n```\n* { padding: 0px; margin: 0px; }\n```\n2. 使用 `reset.css` 可以是自己一直以来的一个标准模板，也可以是使用一些公司开源的自己的 `reset.css`(比如小米、阿里...)\n3. `Normalize.css` 是一种最新方案，它再清楚默认样式的基础上，保留了一些有价值的默认样式。\n这是一个标准化的东西，有很多的网站和用户去维护这个东西。\nhttp://necolas.github.io/normalize.css/\n\n#### 练习\n{%asset_img 练习1.png%}\n```\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    <style>\n        * {\n            margin: 0px;\n            padding: 0px;\n        }\n        .leftfix {\n            float: left;\n        }\n        .rightfix {\n            float: right;\n        }\n        .clearfix {\n            overflow: hidden;\n        }\n        .container {\n            margin: 0 auto;\n            width: 960px;\n            text-align: center;\n        }\n        .top-header {\n            width: 960px;\n            height: 80px; \n        }\n        .logo,\n        .banner1,\n        .banner2 {\n            background-color: gray;\n            height: 80px;\n            line-height: 80px;\n        }\n        .logo {\n            width: 200px;\n        }\n        .banner2 {\n            width: 200px;\n        }\n        .banner1 {\n            width: 540px;\n            margin: 0 10px;\n        }\n        .menu {\n            background-color: gray;\n            height: 30px;\n            margin: 10px auto;\n            line-height: 30px;\n        }\n        .item1,\n        .item2 {\n            height: 198px;\n            width: 368px;\n            border: solid black 1px;\n            line-height: 198px;\n        }\n        .item2 {\n            margin-left: 10px;\n            margin-right: 10px;\n        }\n        .item3,\n        .item4,\n        .item5,\n        .item6 {\n            width: 178px;\n            height: 198px;\n            border: 1px solid black;\n            margin-top: 10px;\n            line-height: 198px;\n            margin-bottom: 10px;\n        }\n        .item4,\n        .item5,\n        .item6 {\n            margin-left: 10px;\n        }\n        .item7,\n        .item8,\n        .item9 {\n            width: 198px;\n            height: 128px;\n            border: 1px solid black;\n            margin-bottom: 10px;\n            line-height: 128px;\n        }\n        .footer {\n            background-color: gray;\n            width: 960px;\n            height: 60px;\n            line-height: 60px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <!--header-->\n        <div class=\"top-header clearfix\">\n            <div class=\"logo leftfix\">\n                logo\n            </div>\n            <div class=\"banner1 leftfix\">\n                banner1\n            </div>\n            <div class=\"banner2 leftfix\">\n                banner2\n            </div>\n        </div>\n        <!--menu-->\n        <div class=\"menu\">\n            菜单\n        </div>\n        <!--content-->\n        <div class=\"content clearfix\">\n            <!--left-->\n            <div class=\"left-content leftfix\">\n                <!--top-->\n                <div class=\"top-content clearfix\">\n                    <div class=\"item1 leftfix\">\n                        栏目一\n                    </div>\n                    <div class=\"item2 leftfix\">\n                        栏目二\n                    </div>\n                </div>\n                <!--bottom-->\n                <div class=\"bottom-content clearfix\">\n                    <div class=\"item3 leftfix\">栏目三</div>\n                    <div class=\"item4 leftfix\">栏目四</div>\n                    <div class=\"item5 leftfix\">栏目五</div>\n                    <div class=\"item6 leftfix\">栏目六</div>\n                </div>\n            </div>\n            <!--right-->\n            <div class=\"right-content leftfix\">\n                <div class=\"item7\">栏目七</div>\n                <div class=\"item8\">栏目八</div>\n                <div class=\"item9\">栏目九</div>\n            </div>\n        </div>\n        <!--footer-->\n        <div class=\"footer\">\n            页脚\n        </div>\n    </div>\n</body>\n</html>\n```\n调整背景图的位置用 `background-position:xxx;`\n\n布局里面，一堆东西横向排列一堆东西纵向排列，而且这一堆东西还很相似，往往我们都用 ul li\n\n大多数情况都是给子元素开启固定定位，给父元素开启相对定位。\n\nimg 方式引入图片的话，我们不需要给出宽和高，就是图片默认的宽和高。但是 `div` 设置图片背景的时候，`div` 必须先有宽和高，才能显示图片。","source":"_posts/CSS记录.md","raw":"---\ntitle: CSS记录\ndate: 2023-09-01 19:27:33\ntags: CSS, WEB\ndescription: The key record of CSS. \n---\n#### 行内样式\n`style` 是 CSS 的属性名\n在 CSS 中名-值对中间用 `:`\n`font-size: xx px;` 可以设置字体大小\n一般不推荐使用行内样式，不能复用并且不利于维护。\n```\n<h1 style=\"color: red; font-size: 50px;\">Hello World</h1>\n```\n\n#### 内部样式\n在 `<head>` 标签或者 `<body>` 标签中加一个 `<style>` 标签(不过一般都是写在 `head` 里面)。\n\n#### 外部样式\n可以新建一个 `xxx.css` 文件，然后在 HTML 文件的 `<head>` 标签中加一个 `<link>` 标签\n```\n<link rel=\"stylesheet\" href=\"./xxx.css\">\n```\n其中 `rel` 是 `relation` 的缩写，就是说 `href` 的文件和当前 HTML 文件的关系。\n\n#### 样式优先级 \n行内样式的优先级 > 内部样式\n对于内部样式和外部样式，它俩平级，但是后来者居上，也就是说，谁写在后面，就是展现谁的样式。\n\n#### 选择器\n1. 通配选择器：\n```\n* {\n\n}\n```\n\n2. 类选择器：在标签中添加属性 `class=\"xxx\"`，注意在 `style` 中的格式，需要在 `xxx` 前面加一个 `.`，来区分类名和标签名。\n```\n.xxx {\n\n}\n```\n要是一个标签属于两个 `class` 的话，写成 `class=\"xxx yyy\"` 的格式，而不是分开写两个 `class`，那样的话后一个 `class` 会被忽略。\n\n3. ID 选择器：\n```\n# xxx {\n\n}\n```\n\n4. 交集选择器：\n就是将两个选择器紧紧的写在一起。如果交集选择器中有元素，元素必须在开头(因为字母放在最后会引起单词的歧义)，并且我们交集的条件可以是多个。\n`id` 选择器理论上可以作为交集选择器，但是我们的 `id` 是唯一的，已经可以唯一定义了，所以一般就是 `class` 和标签一起写。\n同时也不存在两个元素同时在标签选择器中。\n```\np.xxx {\n\n}\n```\n\n5. 并集选择器\n就是在不同选择器之间加上逗号 `,`\n```\n.rich,.beauty,.dog,.pig {\n\n}\n```\n不过这样写的话，逗号和点写在一起看起来有些乱，我们一般竖着写：\n```\n.rich,\n.beauty,\n.dog,\n.pig {\n\n}\n```\n\n6. 后代选择器\n比如说 `ul` 中的所有 `li`，中间直接空格就可以。但是除了选择了儿子以外，孙子 `li` 也被选择了。\n```\nul li {\n\n}\n```\n\n7. 子代选择器\n`div` 标签中的子代 `a` 标签(排除了孙子等标签，只有儿子)\n```\ndiv>a {\n\n}\n```\n\n8. 兄弟选择器\n用 `+` 连接，只有紧紧相邻的兄弟，如果 `div` 紧紧相邻的没有 `p`，但是有 `p` 中间隔了别的标签，也不不起作用的。(睡在我下铺的兄弟) 相邻兄弟选择器\n```\ndiv+p {\n\n}\n```\n如果是 `div~p {}` 就是 `div` 的所有兄弟 `p`，而不是紧紧相邻的了。\n\n9. 属性选择器\n`[title] {}` 选择具有 `title` 属性的标签\n`[title=\"xxx\"] {}` 选择具有 `title` 属性并且属性内容是 `xxx` 的标签。\n`[title^=\"a\"] {}` 选择具有 `title` 属性并且属性内容是以 `a` 开头的标签。\n`[title$=\"a\"] {}` 选择具有 `title` 属性并且属性内容是以 `a` 结尾的标签。\n`[title*=\"a\"] {}` 选择具有 `title` 属性并且属性内容中含有 `a` 的标签\n\n#### 伪类选择器\n可以理解为是对于元素的状态的一种描述。比如，已经访问过的超链接和未访问过的超链接，就是加一个冒号，后面就是元素的状态\n```\na:link {\n\n}\na:visited {\n\n}\n```\n\n#### 三大特性\n1. 层叠性\n如果样式发生了冲突，就会根据一定的规则(选择器优先级)，进行样式层叠(覆盖)。(当权重一样的时候，我们才考虑在代码中的顺序)\n2. 继承性\n元素会自动拥有其父元素、或者祖先元素上设置的**某些样式**，优先继承离得最近的。\n常见的可继承属性：`test-?? font-?? line-?? color`\n3. 优先级\n`!important > 行内样式 > ID 选择器 > 类选择器 > 元素选择器 > * > 继承的样式`\n\n#### 像素 Pixel\n虽然 `cm` 和 `mm` 这两个单位也可以用在网页中，但是对于网页来说，这两个单位不够精细。所以我们就是用 `px` 这个单位(是 Pixel 的缩写)，因为它很小，所以很精细。\n{%asset_img 像素.png%}\n可以看出来，虽然电脑屏幕一般大小，但是右边的像素多，所以每一个像素的大小就小。所以像素我们不确定多么大，需要看屏幕，它是一个相对单位。\n像素点越小，呈现出来的图片就越细腻，越清晰\n\n#### 颜色\n1. 颜色名\n但是它太有限了，并且不是很精确，所以开发的时候一般不用。\n2. RGB 或者 RGBA\nRGB 中三个字母分别是 RED GREEN BLUE(范围都是从 0 到 255)\n`rgb(xx, xx, xx);`\n`rgba(xx, xx, xx, xx);` 前三位和 `rgb` 相同，最后一位是透明度，范围是 0 - 1。\n3. HEX 或者 HEXA\n`#xxxxxx` 井号后面一共六位，每一位都是十六进制的数字，每两位组合起来分别表示红、绿、蓝\n然后 HEXA 就像 RGBA，就是添加了一个透明度，它也是用两位十六进制来表示，也就是说一共八位。\n4. HSL 或者 HSLA\n这两个东西用的不是很多。\n`hsl(hue, saturation, lightness);` 色相、饱和度、亮度\n`Hue` 在这里是用角度表示的，写为 `xxdeg`\nHELA 就是 `hsl(hue, saturation, lightness, xx);` 最后一位 0 - 1 表示透明度。\n{%asset_img 色相环.png%}\n\n#### 字体属性\n\n`font-family: \"xxx\";` 字体族，其实就是字体样式。通常情况下，把字体分为两大类。第一类是衬线字体，第二类是非衬线字体。衬线字体的横竖撇捺特别有棱角，目前写网页还是非衬线字体比较多。\n\n`font-style: xxx;` 字体风格。默认为 `normal`，斜体是 `italic`\n\n`font-weight:xxx;` 字体粗细，参数为 `lighter normal bold bolder`，或者写 100 - 1000 的数字，数字越大越粗。\n\n#### 文本属性\n`letter-spacing:xxx px;` 字母间距(汉字被认为是字母)\n`word-spacing:xxx px;` 词间距\n`text-decoration:xxx;` 文本修饰 `overline underline line-through` 还可以改为波浪线等形式，并且也可以改颜色。\n`text-indent:xx;` 文本缩进\n`text-align:xxx;` `xxx` 可以是 `left center right` 就是靠哪里对齐。\n`line-height:xxx;` 调整行高，就是上下之间的距离变大，但是字体的大小不变。其中 `xxx` 可以为像素、也可以写一个数字，表示是 `font-size` 的多少倍，也可以写成百分比，表示是 `font-size` 的多少倍。\n`vertical-align:xxx;` `xxx` 可以是 `top baseline bottom middle` \n\n#### 列表属性\n`list-style-type:xxx;` `xxx` 可以是 `none square lower-roman upper-roman decimal`\n`list-style-position:xxx;` 可以是 `inside outside`\n`list-style-image:xxx;` 找一个图片，自定义前面的点。\n\n#### 表格属性\n`border-width:xxx px;` 宽度 \n`border-color:xxx;` 颜色\n`border-style:xxx;` 样式\n边框的相关属性，不仅仅是表格可以使用，其他元素如 `h1 p` 也可以使用。\n`table-layout:fixed;` 可以控制表格的列宽。\n`border-spacing:xxx px;` 控制单元格之间的距离。\n`borer-collapse: collapse;` 合并相邻单元格的标签。写了合并以后，上面的 `border-spacing:xxx;` 无论 `xx` 是多少都失效了。\n`empty-cells: show / hide;` 隐藏没有内容的单元格。\n`caption-side:xxx;` 设置表格标题的位置，可以是 `top bottom`\n\n#### 背景属性\n`background-color:xxx;`\n`background-repeat:repeat / no-repeat / repeat-y / repeat-x;` 如果图片较小，是否重复显示\n`background-image:xxx;`\n`background-position:xxx;` 可以控制背景图片的位置。`xxx` 可以是 `left top / left bottom / left center / xx px xx px`\n\n#### 鼠标属性\n`cursor:xxx;` 参数可以为 `pointer / move / wait / crosshair / help `\n`cursor: url(\"xxx\"),pointer;` 其中 `xx` 是一个图片的地址，此时鼠标的样式就变为了图片的样子。\n\n#### CSS 常用的长度单位\n1. `px`\n2. `em` 相当于当前元素的 `font-size` 的倍数。如果自己没有就沿着父元素一直网上找，如果都没有，就是用默认的。\n3. `rem` r 是 root 的意思。相对于根元素的 `font-size` 的倍数，如果没有，就使用默认的。\n4. `%` 相对于父元素计算。\n\n#### 盒子模型\n1. 块元素 block\n在页面中独占一行，不会与任何元素共占一行，是从上到下排列的。\n默认宽度就是撑满父级元素，高度由内容决定。\n2. 行内元素 inline\n在页面中不是独占一行，一行中不能容下的行内元素，会在下一行继续从左到右排列。\n默认宽度和高度都是由内容决定。\n但是 **无法通过 CSS 设置宽和高。**\n最具有代表性的其实就是 `<span>`\n3. 行内块元素 inline-block\n又叫做内联块元素。在页面中不独占一行，会在下一行继续从左到右排列。\n默认宽度和高度都是由内容决定。\n**可以通过 CSS 设置宽和高。**\n最具代表性的其实是 `<img>`\n{%asset_img 各元素显示模式.png%}\n\n##### 修改元素的显示模式\n上面是各种元素的默认显示形式，不过我们可以在 CSS 中修改 `display` 属性来调整它的显示形式。\n`display: block / inline-block / inline;` 如果是 `display: none;` 那么这个元素就直接不显示了，并且也不会占用网页的空间。\n\n##### 盒子模型的组成部分\n我们设置的背景颜色会填充内边距区域，也会填充边框区域。\n外边距不会影响盒子大小，只会影响其位置。\n{%asset_img 分区.png%}\n\n`width-min width-max height-min height-max padding-left padding-top padding-bottom padding-right`\n\n`border` 的属性同样也可以是 `border-left-width border-left-style ... `\n\n`margin` 的属性可以同 `padding` 一样修改。\n\n#### 处理溢出\n`overflow: hidden;` 直接隐藏，还可以写 `scroll auto` 默认是 `visible`，也可以 x y 方向分开处理，就是写成 `overflow-x` 和 `overflow-y`\n\n#### 隐藏元素的方式\n1. 就是 `display: none;` 通过这种方式隐藏的元素不会再去占据页面的位置。\n2. 有一个属性专门控制元素的显示 `visibility: show;` 默认是 `show`，如果想隐藏就改为 `hidden`。不过通过这种方式隐藏的仍然会占位。\n\n一个关于开发者模式四个分区作用的说明。\n{%asset_img 开发者模式.png%}\n{%asset_img 布局技巧.png%}\n\n#### 浮动 float\n浮动最早期设计出来是为了实现文字环绕图片或者说文字环绕文字。现在浮动是主流的页面布局方式之一。\n1. 给第一个子元素设置 `margin-top` 会被父元素抢走，但是如果这个子元素浮动以后，就不会这样了。\n2. 浮动后的元素不会被当作文本处理了(行内和行内块都会被当作文本处理)\n3. 脱离文档流\n4. 不会独占一行，可以共用一行\n\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>\n            this is a test.\n        </title>\n        <style>\n            .outer {\n                background-color: gray;\n                border: black 1px solid;\n            }\n            .box {\n                margin: 10px;\n                width: 100px;\n                height: 100px;\n                background-color: skyblue;\n                border: solid black 1px;\n            }\n            .box1 {\n                float: right;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"outer\">\n            <div class=\"box box1\">1</div>\n            <div class=\"box box2\">2</div>\n            <div class=\"box box3\">3</div>\n        </div>\n    </body>\n</html>\n```\n\n浮动之后，盒子因为脱离了标准文档流，它撑不起父盒子的高度，导致父盒子高度塌陷\n##### 清除浮动带来影响的方式\n1. 父盒子设置固定高度\n虽然，给父盒子设置了固定高度能暂时解决我们的问题，但是它的使用不灵活，如果未来子盒子的高度需求发生了改变(网页的多处地方)，那么我们得手动需要更改父盒子的高度。后期不易维护。\n2. 内墙法\n所谓内墙法,有一个规则:在浮动元素的后面加一个空的块级元素(通常是div),并且该元素设置clear:both；属性。\nclear属性，字面意思就是清除，那么both,就是清除浮动元素对我左右两边的影响。\n3. 伪元素清除法\nhttps://juejin.cn/post/6886247611318140942\n在最后补加一个没有实际意义的块元素 `div`，然后添加 `div` 的 CSS 属性 `clear: both;`，这个块元素没有高，没有宽，没有内容，就是专门用来撑起父元素。\n或者更加优雅写成\n```\nxxx::after {\n    content: '';\n    display: block;\n    clear: both;\n}\n```\n其中 `content: ''` 表示元素为空，`display: block` 才能撑起父元素(因为另起一行了)，`clear: both;` 就是消除之前的浮动带来的所有影响。\n4. `overflow: hidden;`\n\n#### 定位\n开启相对定位的元素并未脱离文档流。\n如果一个元素开启了定位，那么它的层级就比普通元素的层级高。\n相对定位：\n1. 对于元素的位置进行微调。\n2. 配合绝对定位\n\n绝对定位：\n1. 一旦开启绝对定位，就脱离了文档流。\n2. 绝对定位参考的点是它的包含块。\n    对于没有脱离文档流的元素，它的父元素就是它的包含块。\n    对于脱离文档流的元素，它的第一个开启定位的祖先元素就是它的包含块。\n3. 不论是块元素、行内元素还是行内块元素，只要进行了绝对定位，就变成了**定位元素**\n    定位元素：\n    1. 默认被内容撑开。\n    2. 但是也是可以进行设置的。\n\n固定定位：\n就是直接对于视口定位。\n1. 并且元素变成了定位元素。\n2. 脱离了文档流。\n\n粘性定位：\n`position: sticky;`\n参考点是离它最近的拥有滚动行为的祖先元素。包含粘性定位元素的父容器也不在视图上时，胶水就失效了。\n\n这几个定位的层级是平等的。\n\n#### z-index\n属性 `z-index`(纯数值，没有单位) 就相当于 `z` 轴上的坐标，`z` 越大，层级越高，所以在屏幕上显示的优先级越高。\n\n#### 布局\n版心的大小一般是 900 - 1200 px\n{%asset_img 常见布局名词.png%}\n\n#### 重置默认样式\n1. 使用全局选择器\n在简单的案例中，我们可能使用这种方式，但是实际开发中我们不会使用。\n```\n* { padding: 0px; margin: 0px; }\n```\n2. 使用 `reset.css` 可以是自己一直以来的一个标准模板，也可以是使用一些公司开源的自己的 `reset.css`(比如小米、阿里...)\n3. `Normalize.css` 是一种最新方案，它再清楚默认样式的基础上，保留了一些有价值的默认样式。\n这是一个标准化的东西，有很多的网站和用户去维护这个东西。\nhttp://necolas.github.io/normalize.css/\n\n#### 练习\n{%asset_img 练习1.png%}\n```\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    <style>\n        * {\n            margin: 0px;\n            padding: 0px;\n        }\n        .leftfix {\n            float: left;\n        }\n        .rightfix {\n            float: right;\n        }\n        .clearfix {\n            overflow: hidden;\n        }\n        .container {\n            margin: 0 auto;\n            width: 960px;\n            text-align: center;\n        }\n        .top-header {\n            width: 960px;\n            height: 80px; \n        }\n        .logo,\n        .banner1,\n        .banner2 {\n            background-color: gray;\n            height: 80px;\n            line-height: 80px;\n        }\n        .logo {\n            width: 200px;\n        }\n        .banner2 {\n            width: 200px;\n        }\n        .banner1 {\n            width: 540px;\n            margin: 0 10px;\n        }\n        .menu {\n            background-color: gray;\n            height: 30px;\n            margin: 10px auto;\n            line-height: 30px;\n        }\n        .item1,\n        .item2 {\n            height: 198px;\n            width: 368px;\n            border: solid black 1px;\n            line-height: 198px;\n        }\n        .item2 {\n            margin-left: 10px;\n            margin-right: 10px;\n        }\n        .item3,\n        .item4,\n        .item5,\n        .item6 {\n            width: 178px;\n            height: 198px;\n            border: 1px solid black;\n            margin-top: 10px;\n            line-height: 198px;\n            margin-bottom: 10px;\n        }\n        .item4,\n        .item5,\n        .item6 {\n            margin-left: 10px;\n        }\n        .item7,\n        .item8,\n        .item9 {\n            width: 198px;\n            height: 128px;\n            border: 1px solid black;\n            margin-bottom: 10px;\n            line-height: 128px;\n        }\n        .footer {\n            background-color: gray;\n            width: 960px;\n            height: 60px;\n            line-height: 60px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <!--header-->\n        <div class=\"top-header clearfix\">\n            <div class=\"logo leftfix\">\n                logo\n            </div>\n            <div class=\"banner1 leftfix\">\n                banner1\n            </div>\n            <div class=\"banner2 leftfix\">\n                banner2\n            </div>\n        </div>\n        <!--menu-->\n        <div class=\"menu\">\n            菜单\n        </div>\n        <!--content-->\n        <div class=\"content clearfix\">\n            <!--left-->\n            <div class=\"left-content leftfix\">\n                <!--top-->\n                <div class=\"top-content clearfix\">\n                    <div class=\"item1 leftfix\">\n                        栏目一\n                    </div>\n                    <div class=\"item2 leftfix\">\n                        栏目二\n                    </div>\n                </div>\n                <!--bottom-->\n                <div class=\"bottom-content clearfix\">\n                    <div class=\"item3 leftfix\">栏目三</div>\n                    <div class=\"item4 leftfix\">栏目四</div>\n                    <div class=\"item5 leftfix\">栏目五</div>\n                    <div class=\"item6 leftfix\">栏目六</div>\n                </div>\n            </div>\n            <!--right-->\n            <div class=\"right-content leftfix\">\n                <div class=\"item7\">栏目七</div>\n                <div class=\"item8\">栏目八</div>\n                <div class=\"item9\">栏目九</div>\n            </div>\n        </div>\n        <!--footer-->\n        <div class=\"footer\">\n            页脚\n        </div>\n    </div>\n</body>\n</html>\n```\n调整背景图的位置用 `background-position:xxx;`\n\n布局里面，一堆东西横向排列一堆东西纵向排列，而且这一堆东西还很相似，往往我们都用 ul li\n\n大多数情况都是给子元素开启固定定位，给父元素开启相对定位。\n\nimg 方式引入图片的话，我们不需要给出宽和高，就是图片默认的宽和高。但是 `div` 设置图片背景的时候，`div` 必须先有宽和高，才能显示图片。","slug":"CSS记录","published":1,"updated":"2023-09-07T07:20:48.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7sznz00015oog5kvx0c9e","content":"<h4 id=\"行内样式\"><a href=\"#行内样式\" class=\"headerlink\" title=\"行内样式\"></a>行内样式</h4><p><code>style</code> 是 CSS 的属性名<br>在 CSS 中名-值对中间用 <code>:</code><br><code>font-size: xx px;</code> 可以设置字体大小<br>一般不推荐使用行内样式，不能复用并且不利于维护。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 style=&quot;color: red; font-size: 50px;&quot;&gt;Hello World&lt;/h1&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"内部样式\"><a href=\"#内部样式\" class=\"headerlink\" title=\"内部样式\"></a>内部样式</h4><p>在 <code>&lt;head&gt;</code> 标签或者 <code>&lt;body&gt;</code> 标签中加一个 <code>&lt;style&gt;</code> 标签(不过一般都是写在 <code>head</code> 里面)。</p>\n<h4 id=\"外部样式\"><a href=\"#外部样式\" class=\"headerlink\" title=\"外部样式\"></a>外部样式</h4><p>可以新建一个 <code>xxx.css</code> 文件，然后在 HTML 文件的 <code>&lt;head&gt;</code> 标签中加一个 <code>&lt;link&gt;</code> 标签<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; href=&quot;./xxx.css&quot;&gt;</span><br></pre></td></tr></table></figure><br>其中 <code>rel</code> 是 <code>relation</code> 的缩写，就是说 <code>href</code> 的文件和当前 HTML 文件的关系。</p>\n<h4 id=\"样式优先级\"><a href=\"#样式优先级\" class=\"headerlink\" title=\"样式优先级\"></a>样式优先级</h4><p>行内样式的优先级 &gt; 内部样式<br>对于内部样式和外部样式，它俩平级，但是后来者居上，也就是说，谁写在后面，就是展现谁的样式。</p>\n<h4 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h4><ol>\n<li><p>通配选择器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>类选择器：在标签中添加属性 <code>class=&quot;xxx&quot;</code>，注意在 <code>style</code> 中的格式，需要在 <code>xxx</code> 前面加一个 <code>.</code>，来区分类名和标签名。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.xxx &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要是一个标签属于两个 <code>class</code> 的话，写成 <code>class=&quot;xxx yyy&quot;</code> 的格式，而不是分开写两个 <code>class</code>，那样的话后一个 <code>class</code> 会被忽略。</p>\n</li>\n<li><p>ID 选择器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># xxx &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>交集选择器：<br>就是将两个选择器紧紧的写在一起。如果交集选择器中有元素，元素必须在开头(因为字母放在最后会引起单词的歧义)，并且我们交集的条件可以是多个。<br><code>id</code> 选择器理论上可以作为交集选择器，但是我们的 <code>id</code> 是唯一的，已经可以唯一定义了，所以一般就是 <code>class</code> 和标签一起写。<br>同时也不存在两个元素同时在标签选择器中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.xxx &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>并集选择器<br>就是在不同选择器之间加上逗号 <code>,</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.rich,.beauty,.dog,.pig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不过这样写的话，逗号和点写在一起看起来有些乱，我们一般竖着写：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.rich,</span><br><span class=\"line\">.beauty,</span><br><span class=\"line\">.dog,</span><br><span class=\"line\">.pig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>后代选择器<br>比如说 <code>ul</code> 中的所有 <code>li</code>，中间直接空格就可以。但是除了选择了儿子以外，孙子 <code>li</code> 也被选择了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul li &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>子代选择器<br><code>div</code> 标签中的子代 <code>a</code> 标签(排除了孙子等标签，只有儿子)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div&gt;a &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>兄弟选择器<br>用 <code>+</code> 连接，只有紧紧相邻的兄弟，如果 <code>div</code> 紧紧相邻的没有 <code>p</code>，但是有 <code>p</code> 中间隔了别的标签，也不不起作用的。(睡在我下铺的兄弟) 相邻兄弟选择器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div+p &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果是 <code>div~p &#123;&#125;</code> 就是 <code>div</code> 的所有兄弟 <code>p</code>，而不是紧紧相邻的了。</p>\n</li>\n<li><p>属性选择器<br><code>[title] &#123;&#125;</code> 选择具有 <code>title</code> 属性的标签<br><code>[title=&quot;xxx&quot;] &#123;&#125;</code> 选择具有 <code>title</code> 属性并且属性内容是 <code>xxx</code> 的标签。<br><code>[title^=&quot;a&quot;] &#123;&#125;</code> 选择具有 <code>title</code> 属性并且属性内容是以 <code>a</code> 开头的标签。<br><code>[title$=&quot;a&quot;] &#123;&#125;</code> 选择具有 <code>title</code> 属性并且属性内容是以 <code>a</code> 结尾的标签。<br><code>[title*=&quot;a&quot;] &#123;&#125;</code> 选择具有 <code>title</code> 属性并且属性内容中含有 <code>a</code> 的标签</p>\n</li>\n</ol>\n<h4 id=\"伪类选择器\"><a href=\"#伪类选择器\" class=\"headerlink\" title=\"伪类选择器\"></a>伪类选择器</h4><p>可以理解为是对于元素的状态的一种描述。比如，已经访问过的超链接和未访问过的超链接，就是加一个冒号，后面就是元素的状态<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a:link &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a:visited &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"三大特性\"><a href=\"#三大特性\" class=\"headerlink\" title=\"三大特性\"></a>三大特性</h4><ol>\n<li>层叠性<br>如果样式发生了冲突，就会根据一定的规则(选择器优先级)，进行样式层叠(覆盖)。(当权重一样的时候，我们才考虑在代码中的顺序)</li>\n<li>继承性<br>元素会自动拥有其父元素、或者祖先元素上设置的<strong>某些样式</strong>，优先继承离得最近的。<br>常见的可继承属性：<code>test-?? font-?? line-?? color</code></li>\n<li>优先级<br><code>!important &gt; 行内样式 &gt; ID 选择器 &gt; 类选择器 &gt; 元素选择器 &gt; * &gt; 继承的样式</code></li>\n</ol>\n<h4 id=\"像素-Pixel\"><a href=\"#像素-Pixel\" class=\"headerlink\" title=\"像素 Pixel\"></a>像素 Pixel</h4><p>虽然 <code>cm</code> 和 <code>mm</code> 这两个单位也可以用在网页中，但是对于网页来说，这两个单位不够精细。所以我们就是用 <code>px</code> 这个单位(是 Pixel 的缩写)，因为它很小，所以很精细。<br><img src=\"/2023/09/01/CSS%E8%AE%B0%E5%BD%95/%E5%83%8F%E7%B4%A0.png\" class=\"\"><br>可以看出来，虽然电脑屏幕一般大小，但是右边的像素多，所以每一个像素的大小就小。所以像素我们不确定多么大，需要看屏幕，它是一个相对单位。<br>像素点越小，呈现出来的图片就越细腻，越清晰</p>\n<h4 id=\"颜色\"><a href=\"#颜色\" class=\"headerlink\" title=\"颜色\"></a>颜色</h4><ol>\n<li>颜色名<br>但是它太有限了，并且不是很精确，所以开发的时候一般不用。</li>\n<li>RGB 或者 RGBA<br>RGB 中三个字母分别是 RED GREEN BLUE(范围都是从 0 到 255)<br><code>rgb(xx, xx, xx);</code><br><code>rgba(xx, xx, xx, xx);</code> 前三位和 <code>rgb</code> 相同，最后一位是透明度，范围是 0 - 1。</li>\n<li>HEX 或者 HEXA<br><code>#xxxxxx</code> 井号后面一共六位，每一位都是十六进制的数字，每两位组合起来分别表示红、绿、蓝<br>然后 HEXA 就像 RGBA，就是添加了一个透明度，它也是用两位十六进制来表示，也就是说一共八位。</li>\n<li>HSL 或者 HSLA<br>这两个东西用的不是很多。<br><code>hsl(hue, saturation, lightness);</code> 色相、饱和度、亮度<br><code>Hue</code> 在这里是用角度表示的，写为 <code>xxdeg</code><br>HELA 就是 <code>hsl(hue, saturation, lightness, xx);</code> 最后一位 0 - 1 表示透明度。<img src=\"/2023/09/01/CSS%E8%AE%B0%E5%BD%95/%E8%89%B2%E7%9B%B8%E7%8E%AF.png\" class=\"\">\n</li>\n</ol>\n<h4 id=\"字体属性\"><a href=\"#字体属性\" class=\"headerlink\" title=\"字体属性\"></a>字体属性</h4><p><code>font-family: &quot;xxx&quot;;</code> 字体族，其实就是字体样式。通常情况下，把字体分为两大类。第一类是衬线字体，第二类是非衬线字体。衬线字体的横竖撇捺特别有棱角，目前写网页还是非衬线字体比较多。</p>\n<p><code>font-style: xxx;</code> 字体风格。默认为 <code>normal</code>，斜体是 <code>italic</code></p>\n<p><code>font-weight:xxx;</code> 字体粗细，参数为 <code>lighter normal bold bolder</code>，或者写 100 - 1000 的数字，数字越大越粗。</p>\n<h4 id=\"文本属性\"><a href=\"#文本属性\" class=\"headerlink\" title=\"文本属性\"></a>文本属性</h4><p><code>letter-spacing:xxx px;</code> 字母间距(汉字被认为是字母)<br><code>word-spacing:xxx px;</code> 词间距<br><code>text-decoration:xxx;</code> 文本修饰 <code>overline underline line-through</code> 还可以改为波浪线等形式，并且也可以改颜色。<br><code>text-indent:xx;</code> 文本缩进<br><code>text-align:xxx;</code> <code>xxx</code> 可以是 <code>left center right</code> 就是靠哪里对齐。<br><code>line-height:xxx;</code> 调整行高，就是上下之间的距离变大，但是字体的大小不变。其中 <code>xxx</code> 可以为像素、也可以写一个数字，表示是 <code>font-size</code> 的多少倍，也可以写成百分比，表示是 <code>font-size</code> 的多少倍。<br><code>vertical-align:xxx;</code> <code>xxx</code> 可以是 <code>top baseline bottom middle</code> </p>\n<h4 id=\"列表属性\"><a href=\"#列表属性\" class=\"headerlink\" title=\"列表属性\"></a>列表属性</h4><p><code>list-style-type:xxx;</code> <code>xxx</code> 可以是 <code>none square lower-roman upper-roman decimal</code><br><code>list-style-position:xxx;</code> 可以是 <code>inside outside</code><br><code>list-style-image:xxx;</code> 找一个图片，自定义前面的点。</p>\n<h4 id=\"表格属性\"><a href=\"#表格属性\" class=\"headerlink\" title=\"表格属性\"></a>表格属性</h4><p><code>border-width:xxx px;</code> 宽度<br><code>border-color:xxx;</code> 颜色<br><code>border-style:xxx;</code> 样式<br>边框的相关属性，不仅仅是表格可以使用，其他元素如 <code>h1 p</code> 也可以使用。<br><code>table-layout:fixed;</code> 可以控制表格的列宽。<br><code>border-spacing:xxx px;</code> 控制单元格之间的距离。<br><code>borer-collapse: collapse;</code> 合并相邻单元格的标签。写了合并以后，上面的 <code>border-spacing:xxx;</code> 无论 <code>xx</code> 是多少都失效了。<br><code>empty-cells: show / hide;</code> 隐藏没有内容的单元格。<br><code>caption-side:xxx;</code> 设置表格标题的位置，可以是 <code>top bottom</code></p>\n<h4 id=\"背景属性\"><a href=\"#背景属性\" class=\"headerlink\" title=\"背景属性\"></a>背景属性</h4><p><code>background-color:xxx;</code><br><code>background-repeat:repeat / no-repeat / repeat-y / repeat-x;</code> 如果图片较小，是否重复显示<br><code>background-image:xxx;</code><br><code>background-position:xxx;</code> 可以控制背景图片的位置。<code>xxx</code> 可以是 <code>left top / left bottom / left center / xx px xx px</code></p>\n<h4 id=\"鼠标属性\"><a href=\"#鼠标属性\" class=\"headerlink\" title=\"鼠标属性\"></a>鼠标属性</h4><p><code>cursor:xxx;</code> 参数可以为 <code>pointer / move / wait / crosshair / help</code><br><code>cursor: url(&quot;xxx&quot;),pointer;</code> 其中 <code>xx</code> 是一个图片的地址，此时鼠标的样式就变为了图片的样子。</p>\n<h4 id=\"CSS-常用的长度单位\"><a href=\"#CSS-常用的长度单位\" class=\"headerlink\" title=\"CSS 常用的长度单位\"></a>CSS 常用的长度单位</h4><ol>\n<li><code>px</code></li>\n<li><code>em</code> 相当于当前元素的 <code>font-size</code> 的倍数。如果自己没有就沿着父元素一直网上找，如果都没有，就是用默认的。</li>\n<li><code>rem</code> r 是 root 的意思。相对于根元素的 <code>font-size</code> 的倍数，如果没有，就使用默认的。</li>\n<li><code>%</code> 相对于父元素计算。</li>\n</ol>\n<h4 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h4><ol>\n<li>块元素 block<br>在页面中独占一行，不会与任何元素共占一行，是从上到下排列的。<br>默认宽度就是撑满父级元素，高度由内容决定。</li>\n<li>行内元素 inline<br>在页面中不是独占一行，一行中不能容下的行内元素，会在下一行继续从左到右排列。<br>默认宽度和高度都是由内容决定。<br>但是 <strong>无法通过 CSS 设置宽和高。</strong><br>最具有代表性的其实就是 <code>&lt;span&gt;</code></li>\n<li>行内块元素 inline-block<br>又叫做内联块元素。在页面中不独占一行，会在下一行继续从左到右排列。<br>默认宽度和高度都是由内容决定。<br><strong>可以通过 CSS 设置宽和高。</strong><br>最具代表性的其实是 <code>&lt;img&gt;</code><img src=\"/2023/09/01/CSS%E8%AE%B0%E5%BD%95/%E5%90%84%E5%85%83%E7%B4%A0%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%BC%8F.png\" class=\"\">\n</li>\n</ol>\n<h5 id=\"修改元素的显示模式\"><a href=\"#修改元素的显示模式\" class=\"headerlink\" title=\"修改元素的显示模式\"></a>修改元素的显示模式</h5><p>上面是各种元素的默认显示形式，不过我们可以在 CSS 中修改 <code>display</code> 属性来调整它的显示形式。<br><code>display: block / inline-block / inline;</code> 如果是 <code>display: none;</code> 那么这个元素就直接不显示了，并且也不会占用网页的空间。</p>\n<h5 id=\"盒子模型的组成部分\"><a href=\"#盒子模型的组成部分\" class=\"headerlink\" title=\"盒子模型的组成部分\"></a>盒子模型的组成部分</h5><p>我们设置的背景颜色会填充内边距区域，也会填充边框区域。<br>外边距不会影响盒子大小，只会影响其位置。<br><img src=\"/2023/09/01/CSS%E8%AE%B0%E5%BD%95/%E5%88%86%E5%8C%BA.png\" class=\"\"></p>\n<p><code>width-min width-max height-min height-max padding-left padding-top padding-bottom padding-right</code></p>\n<p><code>border</code> 的属性同样也可以是 <code>border-left-width border-left-style ...</code></p>\n<p><code>margin</code> 的属性可以同 <code>padding</code> 一样修改。</p>\n<h4 id=\"处理溢出\"><a href=\"#处理溢出\" class=\"headerlink\" title=\"处理溢出\"></a>处理溢出</h4><p><code>overflow: hidden;</code> 直接隐藏，还可以写 <code>scroll auto</code> 默认是 <code>visible</code>，也可以 x y 方向分开处理，就是写成 <code>overflow-x</code> 和 <code>overflow-y</code></p>\n<h4 id=\"隐藏元素的方式\"><a href=\"#隐藏元素的方式\" class=\"headerlink\" title=\"隐藏元素的方式\"></a>隐藏元素的方式</h4><ol>\n<li>就是 <code>display: none;</code> 通过这种方式隐藏的元素不会再去占据页面的位置。</li>\n<li>有一个属性专门控制元素的显示 <code>visibility: show;</code> 默认是 <code>show</code>，如果想隐藏就改为 <code>hidden</code>。不过通过这种方式隐藏的仍然会占位。</li>\n</ol>\n<p>一个关于开发者模式四个分区作用的说明。<br><img src=\"/2023/09/01/CSS%E8%AE%B0%E5%BD%95/%E5%BC%80%E5%8F%91%E8%80%85%E6%A8%A1%E5%BC%8F.png\" class=\"\"><br><img src=\"/2023/09/01/CSS%E8%AE%B0%E5%BD%95/%E5%B8%83%E5%B1%80%E6%8A%80%E5%B7%A7.png\" class=\"\"></p>\n<h4 id=\"浮动-float\"><a href=\"#浮动-float\" class=\"headerlink\" title=\"浮动 float\"></a>浮动 float</h4><p>浮动最早期设计出来是为了实现文字环绕图片或者说文字环绕文字。现在浮动是主流的页面布局方式之一。</p>\n<ol>\n<li>给第一个子元素设置 <code>margin-top</code> 会被父元素抢走，但是如果这个子元素浮动以后，就不会这样了。</li>\n<li>浮动后的元素不会被当作文本处理了(行内和行内块都会被当作文本处理)</li>\n<li>脱离文档流</li>\n<li>不会独占一行，可以共用一行</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;title&gt;</span><br><span class=\"line\">            this is a test.</span><br><span class=\"line\">        &lt;/title&gt;</span><br><span class=\"line\">        &lt;style&gt;</span><br><span class=\"line\">            .outer &#123;</span><br><span class=\"line\">                background-color: gray;</span><br><span class=\"line\">                border: black 1px solid;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .box &#123;</span><br><span class=\"line\">                margin: 10px;</span><br><span class=\"line\">                width: 100px;</span><br><span class=\"line\">                height: 100px;</span><br><span class=\"line\">                background-color: skyblue;</span><br><span class=\"line\">                border: solid black 1px;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .box1 &#123;</span><br><span class=\"line\">                float: right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &lt;/style&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;div class=&quot;outer&quot;&gt;</span><br><span class=\"line\">            &lt;div class=&quot;box box1&quot;&gt;1&lt;/div&gt;</span><br><span class=\"line\">            &lt;div class=&quot;box box2&quot;&gt;2&lt;/div&gt;</span><br><span class=\"line\">            &lt;div class=&quot;box box3&quot;&gt;3&lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>浮动之后，盒子因为脱离了标准文档流，它撑不起父盒子的高度，导致父盒子高度塌陷</p>\n<h5 id=\"清除浮动带来影响的方式\"><a href=\"#清除浮动带来影响的方式\" class=\"headerlink\" title=\"清除浮动带来影响的方式\"></a>清除浮动带来影响的方式</h5><ol>\n<li>父盒子设置固定高度<br>虽然，给父盒子设置了固定高度能暂时解决我们的问题，但是它的使用不灵活，如果未来子盒子的高度需求发生了改变(网页的多处地方)，那么我们得手动需要更改父盒子的高度。后期不易维护。</li>\n<li>内墙法<br>所谓内墙法,有一个规则:在浮动元素的后面加一个空的块级元素(通常是div),并且该元素设置clear:both；属性。<br>clear属性，字面意思就是清除，那么both,就是清除浮动元素对我左右两边的影响。</li>\n<li>伪元素清除法<br><a href=\"https://juejin.cn/post/6886247611318140942\">https://juejin.cn/post/6886247611318140942</a><br>在最后补加一个没有实际意义的块元素 <code>div</code>，然后添加 <code>div</code> 的 CSS 属性 <code>clear: both;</code>，这个块元素没有高，没有宽，没有内容，就是专门用来撑起父元素。<br>或者更加优雅写成<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxx::after &#123;</span><br><span class=\"line\">    content: &#x27;&#x27;;</span><br><span class=\"line\">    display: block;</span><br><span class=\"line\">    clear: both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n其中 <code>content: &#39;&#39;</code> 表示元素为空，<code>display: block</code> 才能撑起父元素(因为另起一行了)，<code>clear: both;</code> 就是消除之前的浮动带来的所有影响。</li>\n<li><code>overflow: hidden;</code></li>\n</ol>\n<h4 id=\"定位\"><a href=\"#定位\" class=\"headerlink\" title=\"定位\"></a>定位</h4><p>开启相对定位的元素并未脱离文档流。<br>如果一个元素开启了定位，那么它的层级就比普通元素的层级高。<br>相对定位：</p>\n<ol>\n<li>对于元素的位置进行微调。</li>\n<li>配合绝对定位</li>\n</ol>\n<p>绝对定位：</p>\n<ol>\n<li>一旦开启绝对定位，就脱离了文档流。</li>\n<li>绝对定位参考的点是它的包含块。<br> 对于没有脱离文档流的元素，它的父元素就是它的包含块。<br> 对于脱离文档流的元素，它的第一个开启定位的祖先元素就是它的包含块。</li>\n<li>不论是块元素、行内元素还是行内块元素，只要进行了绝对定位，就变成了<strong>定位元素</strong><br> 定位元素：<ol>\n<li>默认被内容撑开。</li>\n<li>但是也是可以进行设置的。</li>\n</ol>\n</li>\n</ol>\n<p>固定定位：<br>就是直接对于视口定位。</p>\n<ol>\n<li>并且元素变成了定位元素。</li>\n<li>脱离了文档流。</li>\n</ol>\n<p>粘性定位：<br><code>position: sticky;</code><br>参考点是离它最近的拥有滚动行为的祖先元素。包含粘性定位元素的父容器也不在视图上时，胶水就失效了。</p>\n<p>这几个定位的层级是平等的。</p>\n<h4 id=\"z-index\"><a href=\"#z-index\" class=\"headerlink\" title=\"z-index\"></a>z-index</h4><p>属性 <code>z-index</code>(纯数值，没有单位) 就相当于 <code>z</code> 轴上的坐标，<code>z</code> 越大，层级越高，所以在屏幕上显示的优先级越高。</p>\n<h4 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h4><p>版心的大小一般是 900 - 1200 px<br><img src=\"/2023/09/01/CSS%E8%AE%B0%E5%BD%95/%E5%B8%B8%E8%A7%81%E5%B8%83%E5%B1%80%E5%90%8D%E8%AF%8D.png\" class=\"\"></p>\n<h4 id=\"重置默认样式\"><a href=\"#重置默认样式\" class=\"headerlink\" title=\"重置默认样式\"></a>重置默认样式</h4><ol>\n<li>使用全局选择器<br>在简单的案例中，我们可能使用这种方式，但是实际开发中我们不会使用。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123; padding: 0px; margin: 0px; &#125;</span><br></pre></td></tr></table></figure></li>\n<li>使用 <code>reset.css</code> 可以是自己一直以来的一个标准模板，也可以是使用一些公司开源的自己的 <code>reset.css</code>(比如小米、阿里…)</li>\n<li><code>Normalize.css</code> 是一种最新方案，它再清楚默认样式的基础上，保留了一些有价值的默认样式。<br>这是一个标准化的东西，有很多的网站和用户去维护这个东西。<br><a href=\"http://necolas.github.io/normalize.css/\">http://necolas.github.io/normalize.css/</a></li>\n</ol>\n<h4 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h4><img src=\"/2023/09/01/CSS%E8%AE%B0%E5%BD%95/%E7%BB%83%E4%B9%A01.png\" class=\"\">\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        * &#123;</span><br><span class=\"line\">            margin: 0px;</span><br><span class=\"line\">            padding: 0px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .leftfix &#123;</span><br><span class=\"line\">            float: left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .rightfix &#123;</span><br><span class=\"line\">            float: right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .clearfix &#123;</span><br><span class=\"line\">            overflow: hidden;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .container &#123;</span><br><span class=\"line\">            margin: 0 auto;</span><br><span class=\"line\">            width: 960px;</span><br><span class=\"line\">            text-align: center;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .top-header &#123;</span><br><span class=\"line\">            width: 960px;</span><br><span class=\"line\">            height: 80px; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .logo,</span><br><span class=\"line\">        .banner1,</span><br><span class=\"line\">        .banner2 &#123;</span><br><span class=\"line\">            background-color: gray;</span><br><span class=\"line\">            height: 80px;</span><br><span class=\"line\">            line-height: 80px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .logo &#123;</span><br><span class=\"line\">            width: 200px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .banner2 &#123;</span><br><span class=\"line\">            width: 200px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .banner1 &#123;</span><br><span class=\"line\">            width: 540px;</span><br><span class=\"line\">            margin: 0 10px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .menu &#123;</span><br><span class=\"line\">            background-color: gray;</span><br><span class=\"line\">            height: 30px;</span><br><span class=\"line\">            margin: 10px auto;</span><br><span class=\"line\">            line-height: 30px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .item1,</span><br><span class=\"line\">        .item2 &#123;</span><br><span class=\"line\">            height: 198px;</span><br><span class=\"line\">            width: 368px;</span><br><span class=\"line\">            border: solid black 1px;</span><br><span class=\"line\">            line-height: 198px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .item2 &#123;</span><br><span class=\"line\">            margin-left: 10px;</span><br><span class=\"line\">            margin-right: 10px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .item3,</span><br><span class=\"line\">        .item4,</span><br><span class=\"line\">        .item5,</span><br><span class=\"line\">        .item6 &#123;</span><br><span class=\"line\">            width: 178px;</span><br><span class=\"line\">            height: 198px;</span><br><span class=\"line\">            border: 1px solid black;</span><br><span class=\"line\">            margin-top: 10px;</span><br><span class=\"line\">            line-height: 198px;</span><br><span class=\"line\">            margin-bottom: 10px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .item4,</span><br><span class=\"line\">        .item5,</span><br><span class=\"line\">        .item6 &#123;</span><br><span class=\"line\">            margin-left: 10px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .item7,</span><br><span class=\"line\">        .item8,</span><br><span class=\"line\">        .item9 &#123;</span><br><span class=\"line\">            width: 198px;</span><br><span class=\"line\">            height: 128px;</span><br><span class=\"line\">            border: 1px solid black;</span><br><span class=\"line\">            margin-bottom: 10px;</span><br><span class=\"line\">            line-height: 128px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .footer &#123;</span><br><span class=\"line\">            background-color: gray;</span><br><span class=\"line\">            width: 960px;</span><br><span class=\"line\">            height: 60px;</span><br><span class=\"line\">            line-height: 60px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">        &lt;!--header--&gt;</span><br><span class=\"line\">        &lt;div class=&quot;top-header clearfix&quot;&gt;</span><br><span class=\"line\">            &lt;div class=&quot;logo leftfix&quot;&gt;</span><br><span class=\"line\">                logo</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            &lt;div class=&quot;banner1 leftfix&quot;&gt;</span><br><span class=\"line\">                banner1</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            &lt;div class=&quot;banner2 leftfix&quot;&gt;</span><br><span class=\"line\">                banner2</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;!--menu--&gt;</span><br><span class=\"line\">        &lt;div class=&quot;menu&quot;&gt;</span><br><span class=\"line\">            菜单</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;!--content--&gt;</span><br><span class=\"line\">        &lt;div class=&quot;content clearfix&quot;&gt;</span><br><span class=\"line\">            &lt;!--left--&gt;</span><br><span class=\"line\">            &lt;div class=&quot;left-content leftfix&quot;&gt;</span><br><span class=\"line\">                &lt;!--top--&gt;</span><br><span class=\"line\">                &lt;div class=&quot;top-content clearfix&quot;&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;item1 leftfix&quot;&gt;</span><br><span class=\"line\">                        栏目一</span><br><span class=\"line\">                    &lt;/div&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;item2 leftfix&quot;&gt;</span><br><span class=\"line\">                        栏目二</span><br><span class=\"line\">                    &lt;/div&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">                &lt;!--bottom--&gt;</span><br><span class=\"line\">                &lt;div class=&quot;bottom-content clearfix&quot;&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;item3 leftfix&quot;&gt;栏目三&lt;/div&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;item4 leftfix&quot;&gt;栏目四&lt;/div&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;item5 leftfix&quot;&gt;栏目五&lt;/div&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;item6 leftfix&quot;&gt;栏目六&lt;/div&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            &lt;!--right--&gt;</span><br><span class=\"line\">            &lt;div class=&quot;right-content leftfix&quot;&gt;</span><br><span class=\"line\">                &lt;div class=&quot;item7&quot;&gt;栏目七&lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;item8&quot;&gt;栏目八&lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;item9&quot;&gt;栏目九&lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;!--footer--&gt;</span><br><span class=\"line\">        &lt;div class=&quot;footer&quot;&gt;</span><br><span class=\"line\">            页脚</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>调整背景图的位置用 <code>background-position:xxx;</code></p>\n<p>布局里面，一堆东西横向排列一堆东西纵向排列，而且这一堆东西还很相似，往往我们都用 ul li</p>\n<p>大多数情况都是给子元素开启固定定位，给父元素开启相对定位。</p>\n<p>img 方式引入图片的话，我们不需要给出宽和高，就是图片默认的宽和高。但是 <code>div</code> 设置图片背景的时候，<code>div</code> 必须先有宽和高，才能显示图片。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"行内样式\"><a href=\"#行内样式\" class=\"headerlink\" title=\"行内样式\"></a>行内样式</h4><p><code>style</code> 是 CSS 的属性名<br>在 CSS 中名-值对中间用 <code>:</code><br><code>font-size: xx px;</code> 可以设置字体大小<br>一般不推荐使用行内样式，不能复用并且不利于维护。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 style=&quot;color: red; font-size: 50px;&quot;&gt;Hello World&lt;/h1&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"内部样式\"><a href=\"#内部样式\" class=\"headerlink\" title=\"内部样式\"></a>内部样式</h4><p>在 <code>&lt;head&gt;</code> 标签或者 <code>&lt;body&gt;</code> 标签中加一个 <code>&lt;style&gt;</code> 标签(不过一般都是写在 <code>head</code> 里面)。</p>\n<h4 id=\"外部样式\"><a href=\"#外部样式\" class=\"headerlink\" title=\"外部样式\"></a>外部样式</h4><p>可以新建一个 <code>xxx.css</code> 文件，然后在 HTML 文件的 <code>&lt;head&gt;</code> 标签中加一个 <code>&lt;link&gt;</code> 标签<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; href=&quot;./xxx.css&quot;&gt;</span><br></pre></td></tr></table></figure><br>其中 <code>rel</code> 是 <code>relation</code> 的缩写，就是说 <code>href</code> 的文件和当前 HTML 文件的关系。</p>\n<h4 id=\"样式优先级\"><a href=\"#样式优先级\" class=\"headerlink\" title=\"样式优先级\"></a>样式优先级</h4><p>行内样式的优先级 &gt; 内部样式<br>对于内部样式和外部样式，它俩平级，但是后来者居上，也就是说，谁写在后面，就是展现谁的样式。</p>\n<h4 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h4><ol>\n<li><p>通配选择器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>类选择器：在标签中添加属性 <code>class=&quot;xxx&quot;</code>，注意在 <code>style</code> 中的格式，需要在 <code>xxx</code> 前面加一个 <code>.</code>，来区分类名和标签名。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.xxx &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要是一个标签属于两个 <code>class</code> 的话，写成 <code>class=&quot;xxx yyy&quot;</code> 的格式，而不是分开写两个 <code>class</code>，那样的话后一个 <code>class</code> 会被忽略。</p>\n</li>\n<li><p>ID 选择器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># xxx &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>交集选择器：<br>就是将两个选择器紧紧的写在一起。如果交集选择器中有元素，元素必须在开头(因为字母放在最后会引起单词的歧义)，并且我们交集的条件可以是多个。<br><code>id</code> 选择器理论上可以作为交集选择器，但是我们的 <code>id</code> 是唯一的，已经可以唯一定义了，所以一般就是 <code>class</code> 和标签一起写。<br>同时也不存在两个元素同时在标签选择器中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.xxx &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>并集选择器<br>就是在不同选择器之间加上逗号 <code>,</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.rich,.beauty,.dog,.pig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不过这样写的话，逗号和点写在一起看起来有些乱，我们一般竖着写：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.rich,</span><br><span class=\"line\">.beauty,</span><br><span class=\"line\">.dog,</span><br><span class=\"line\">.pig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>后代选择器<br>比如说 <code>ul</code> 中的所有 <code>li</code>，中间直接空格就可以。但是除了选择了儿子以外，孙子 <code>li</code> 也被选择了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul li &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>子代选择器<br><code>div</code> 标签中的子代 <code>a</code> 标签(排除了孙子等标签，只有儿子)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div&gt;a &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>兄弟选择器<br>用 <code>+</code> 连接，只有紧紧相邻的兄弟，如果 <code>div</code> 紧紧相邻的没有 <code>p</code>，但是有 <code>p</code> 中间隔了别的标签，也不不起作用的。(睡在我下铺的兄弟) 相邻兄弟选择器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div+p &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果是 <code>div~p &#123;&#125;</code> 就是 <code>div</code> 的所有兄弟 <code>p</code>，而不是紧紧相邻的了。</p>\n</li>\n<li><p>属性选择器<br><code>[title] &#123;&#125;</code> 选择具有 <code>title</code> 属性的标签<br><code>[title=&quot;xxx&quot;] &#123;&#125;</code> 选择具有 <code>title</code> 属性并且属性内容是 <code>xxx</code> 的标签。<br><code>[title^=&quot;a&quot;] &#123;&#125;</code> 选择具有 <code>title</code> 属性并且属性内容是以 <code>a</code> 开头的标签。<br><code>[title$=&quot;a&quot;] &#123;&#125;</code> 选择具有 <code>title</code> 属性并且属性内容是以 <code>a</code> 结尾的标签。<br><code>[title*=&quot;a&quot;] &#123;&#125;</code> 选择具有 <code>title</code> 属性并且属性内容中含有 <code>a</code> 的标签</p>\n</li>\n</ol>\n<h4 id=\"伪类选择器\"><a href=\"#伪类选择器\" class=\"headerlink\" title=\"伪类选择器\"></a>伪类选择器</h4><p>可以理解为是对于元素的状态的一种描述。比如，已经访问过的超链接和未访问过的超链接，就是加一个冒号，后面就是元素的状态<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a:link &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a:visited &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"三大特性\"><a href=\"#三大特性\" class=\"headerlink\" title=\"三大特性\"></a>三大特性</h4><ol>\n<li>层叠性<br>如果样式发生了冲突，就会根据一定的规则(选择器优先级)，进行样式层叠(覆盖)。(当权重一样的时候，我们才考虑在代码中的顺序)</li>\n<li>继承性<br>元素会自动拥有其父元素、或者祖先元素上设置的<strong>某些样式</strong>，优先继承离得最近的。<br>常见的可继承属性：<code>test-?? font-?? line-?? color</code></li>\n<li>优先级<br><code>!important &gt; 行内样式 &gt; ID 选择器 &gt; 类选择器 &gt; 元素选择器 &gt; * &gt; 继承的样式</code></li>\n</ol>\n<h4 id=\"像素-Pixel\"><a href=\"#像素-Pixel\" class=\"headerlink\" title=\"像素 Pixel\"></a>像素 Pixel</h4><p>虽然 <code>cm</code> 和 <code>mm</code> 这两个单位也可以用在网页中，但是对于网页来说，这两个单位不够精细。所以我们就是用 <code>px</code> 这个单位(是 Pixel 的缩写)，因为它很小，所以很精细。<br><img src=\"/2023/09/01/CSS%E8%AE%B0%E5%BD%95/%E5%83%8F%E7%B4%A0.png\" class=\"\"><br>可以看出来，虽然电脑屏幕一般大小，但是右边的像素多，所以每一个像素的大小就小。所以像素我们不确定多么大，需要看屏幕，它是一个相对单位。<br>像素点越小，呈现出来的图片就越细腻，越清晰</p>\n<h4 id=\"颜色\"><a href=\"#颜色\" class=\"headerlink\" title=\"颜色\"></a>颜色</h4><ol>\n<li>颜色名<br>但是它太有限了，并且不是很精确，所以开发的时候一般不用。</li>\n<li>RGB 或者 RGBA<br>RGB 中三个字母分别是 RED GREEN BLUE(范围都是从 0 到 255)<br><code>rgb(xx, xx, xx);</code><br><code>rgba(xx, xx, xx, xx);</code> 前三位和 <code>rgb</code> 相同，最后一位是透明度，范围是 0 - 1。</li>\n<li>HEX 或者 HEXA<br><code>#xxxxxx</code> 井号后面一共六位，每一位都是十六进制的数字，每两位组合起来分别表示红、绿、蓝<br>然后 HEXA 就像 RGBA，就是添加了一个透明度，它也是用两位十六进制来表示，也就是说一共八位。</li>\n<li>HSL 或者 HSLA<br>这两个东西用的不是很多。<br><code>hsl(hue, saturation, lightness);</code> 色相、饱和度、亮度<br><code>Hue</code> 在这里是用角度表示的，写为 <code>xxdeg</code><br>HELA 就是 <code>hsl(hue, saturation, lightness, xx);</code> 最后一位 0 - 1 表示透明度。<img src=\"/2023/09/01/CSS%E8%AE%B0%E5%BD%95/%E8%89%B2%E7%9B%B8%E7%8E%AF.png\" class=\"\">\n</li>\n</ol>\n<h4 id=\"字体属性\"><a href=\"#字体属性\" class=\"headerlink\" title=\"字体属性\"></a>字体属性</h4><p><code>font-family: &quot;xxx&quot;;</code> 字体族，其实就是字体样式。通常情况下，把字体分为两大类。第一类是衬线字体，第二类是非衬线字体。衬线字体的横竖撇捺特别有棱角，目前写网页还是非衬线字体比较多。</p>\n<p><code>font-style: xxx;</code> 字体风格。默认为 <code>normal</code>，斜体是 <code>italic</code></p>\n<p><code>font-weight:xxx;</code> 字体粗细，参数为 <code>lighter normal bold bolder</code>，或者写 100 - 1000 的数字，数字越大越粗。</p>\n<h4 id=\"文本属性\"><a href=\"#文本属性\" class=\"headerlink\" title=\"文本属性\"></a>文本属性</h4><p><code>letter-spacing:xxx px;</code> 字母间距(汉字被认为是字母)<br><code>word-spacing:xxx px;</code> 词间距<br><code>text-decoration:xxx;</code> 文本修饰 <code>overline underline line-through</code> 还可以改为波浪线等形式，并且也可以改颜色。<br><code>text-indent:xx;</code> 文本缩进<br><code>text-align:xxx;</code> <code>xxx</code> 可以是 <code>left center right</code> 就是靠哪里对齐。<br><code>line-height:xxx;</code> 调整行高，就是上下之间的距离变大，但是字体的大小不变。其中 <code>xxx</code> 可以为像素、也可以写一个数字，表示是 <code>font-size</code> 的多少倍，也可以写成百分比，表示是 <code>font-size</code> 的多少倍。<br><code>vertical-align:xxx;</code> <code>xxx</code> 可以是 <code>top baseline bottom middle</code> </p>\n<h4 id=\"列表属性\"><a href=\"#列表属性\" class=\"headerlink\" title=\"列表属性\"></a>列表属性</h4><p><code>list-style-type:xxx;</code> <code>xxx</code> 可以是 <code>none square lower-roman upper-roman decimal</code><br><code>list-style-position:xxx;</code> 可以是 <code>inside outside</code><br><code>list-style-image:xxx;</code> 找一个图片，自定义前面的点。</p>\n<h4 id=\"表格属性\"><a href=\"#表格属性\" class=\"headerlink\" title=\"表格属性\"></a>表格属性</h4><p><code>border-width:xxx px;</code> 宽度<br><code>border-color:xxx;</code> 颜色<br><code>border-style:xxx;</code> 样式<br>边框的相关属性，不仅仅是表格可以使用，其他元素如 <code>h1 p</code> 也可以使用。<br><code>table-layout:fixed;</code> 可以控制表格的列宽。<br><code>border-spacing:xxx px;</code> 控制单元格之间的距离。<br><code>borer-collapse: collapse;</code> 合并相邻单元格的标签。写了合并以后，上面的 <code>border-spacing:xxx;</code> 无论 <code>xx</code> 是多少都失效了。<br><code>empty-cells: show / hide;</code> 隐藏没有内容的单元格。<br><code>caption-side:xxx;</code> 设置表格标题的位置，可以是 <code>top bottom</code></p>\n<h4 id=\"背景属性\"><a href=\"#背景属性\" class=\"headerlink\" title=\"背景属性\"></a>背景属性</h4><p><code>background-color:xxx;</code><br><code>background-repeat:repeat / no-repeat / repeat-y / repeat-x;</code> 如果图片较小，是否重复显示<br><code>background-image:xxx;</code><br><code>background-position:xxx;</code> 可以控制背景图片的位置。<code>xxx</code> 可以是 <code>left top / left bottom / left center / xx px xx px</code></p>\n<h4 id=\"鼠标属性\"><a href=\"#鼠标属性\" class=\"headerlink\" title=\"鼠标属性\"></a>鼠标属性</h4><p><code>cursor:xxx;</code> 参数可以为 <code>pointer / move / wait / crosshair / help</code><br><code>cursor: url(&quot;xxx&quot;),pointer;</code> 其中 <code>xx</code> 是一个图片的地址，此时鼠标的样式就变为了图片的样子。</p>\n<h4 id=\"CSS-常用的长度单位\"><a href=\"#CSS-常用的长度单位\" class=\"headerlink\" title=\"CSS 常用的长度单位\"></a>CSS 常用的长度单位</h4><ol>\n<li><code>px</code></li>\n<li><code>em</code> 相当于当前元素的 <code>font-size</code> 的倍数。如果自己没有就沿着父元素一直网上找，如果都没有，就是用默认的。</li>\n<li><code>rem</code> r 是 root 的意思。相对于根元素的 <code>font-size</code> 的倍数，如果没有，就使用默认的。</li>\n<li><code>%</code> 相对于父元素计算。</li>\n</ol>\n<h4 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h4><ol>\n<li>块元素 block<br>在页面中独占一行，不会与任何元素共占一行，是从上到下排列的。<br>默认宽度就是撑满父级元素，高度由内容决定。</li>\n<li>行内元素 inline<br>在页面中不是独占一行，一行中不能容下的行内元素，会在下一行继续从左到右排列。<br>默认宽度和高度都是由内容决定。<br>但是 <strong>无法通过 CSS 设置宽和高。</strong><br>最具有代表性的其实就是 <code>&lt;span&gt;</code></li>\n<li>行内块元素 inline-block<br>又叫做内联块元素。在页面中不独占一行，会在下一行继续从左到右排列。<br>默认宽度和高度都是由内容决定。<br><strong>可以通过 CSS 设置宽和高。</strong><br>最具代表性的其实是 <code>&lt;img&gt;</code><img src=\"/2023/09/01/CSS%E8%AE%B0%E5%BD%95/%E5%90%84%E5%85%83%E7%B4%A0%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%BC%8F.png\" class=\"\">\n</li>\n</ol>\n<h5 id=\"修改元素的显示模式\"><a href=\"#修改元素的显示模式\" class=\"headerlink\" title=\"修改元素的显示模式\"></a>修改元素的显示模式</h5><p>上面是各种元素的默认显示形式，不过我们可以在 CSS 中修改 <code>display</code> 属性来调整它的显示形式。<br><code>display: block / inline-block / inline;</code> 如果是 <code>display: none;</code> 那么这个元素就直接不显示了，并且也不会占用网页的空间。</p>\n<h5 id=\"盒子模型的组成部分\"><a href=\"#盒子模型的组成部分\" class=\"headerlink\" title=\"盒子模型的组成部分\"></a>盒子模型的组成部分</h5><p>我们设置的背景颜色会填充内边距区域，也会填充边框区域。<br>外边距不会影响盒子大小，只会影响其位置。<br><img src=\"/2023/09/01/CSS%E8%AE%B0%E5%BD%95/%E5%88%86%E5%8C%BA.png\" class=\"\"></p>\n<p><code>width-min width-max height-min height-max padding-left padding-top padding-bottom padding-right</code></p>\n<p><code>border</code> 的属性同样也可以是 <code>border-left-width border-left-style ...</code></p>\n<p><code>margin</code> 的属性可以同 <code>padding</code> 一样修改。</p>\n<h4 id=\"处理溢出\"><a href=\"#处理溢出\" class=\"headerlink\" title=\"处理溢出\"></a>处理溢出</h4><p><code>overflow: hidden;</code> 直接隐藏，还可以写 <code>scroll auto</code> 默认是 <code>visible</code>，也可以 x y 方向分开处理，就是写成 <code>overflow-x</code> 和 <code>overflow-y</code></p>\n<h4 id=\"隐藏元素的方式\"><a href=\"#隐藏元素的方式\" class=\"headerlink\" title=\"隐藏元素的方式\"></a>隐藏元素的方式</h4><ol>\n<li>就是 <code>display: none;</code> 通过这种方式隐藏的元素不会再去占据页面的位置。</li>\n<li>有一个属性专门控制元素的显示 <code>visibility: show;</code> 默认是 <code>show</code>，如果想隐藏就改为 <code>hidden</code>。不过通过这种方式隐藏的仍然会占位。</li>\n</ol>\n<p>一个关于开发者模式四个分区作用的说明。<br><img src=\"/2023/09/01/CSS%E8%AE%B0%E5%BD%95/%E5%BC%80%E5%8F%91%E8%80%85%E6%A8%A1%E5%BC%8F.png\" class=\"\"><br><img src=\"/2023/09/01/CSS%E8%AE%B0%E5%BD%95/%E5%B8%83%E5%B1%80%E6%8A%80%E5%B7%A7.png\" class=\"\"></p>\n<h4 id=\"浮动-float\"><a href=\"#浮动-float\" class=\"headerlink\" title=\"浮动 float\"></a>浮动 float</h4><p>浮动最早期设计出来是为了实现文字环绕图片或者说文字环绕文字。现在浮动是主流的页面布局方式之一。</p>\n<ol>\n<li>给第一个子元素设置 <code>margin-top</code> 会被父元素抢走，但是如果这个子元素浮动以后，就不会这样了。</li>\n<li>浮动后的元素不会被当作文本处理了(行内和行内块都会被当作文本处理)</li>\n<li>脱离文档流</li>\n<li>不会独占一行，可以共用一行</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;title&gt;</span><br><span class=\"line\">            this is a test.</span><br><span class=\"line\">        &lt;/title&gt;</span><br><span class=\"line\">        &lt;style&gt;</span><br><span class=\"line\">            .outer &#123;</span><br><span class=\"line\">                background-color: gray;</span><br><span class=\"line\">                border: black 1px solid;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .box &#123;</span><br><span class=\"line\">                margin: 10px;</span><br><span class=\"line\">                width: 100px;</span><br><span class=\"line\">                height: 100px;</span><br><span class=\"line\">                background-color: skyblue;</span><br><span class=\"line\">                border: solid black 1px;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .box1 &#123;</span><br><span class=\"line\">                float: right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &lt;/style&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;div class=&quot;outer&quot;&gt;</span><br><span class=\"line\">            &lt;div class=&quot;box box1&quot;&gt;1&lt;/div&gt;</span><br><span class=\"line\">            &lt;div class=&quot;box box2&quot;&gt;2&lt;/div&gt;</span><br><span class=\"line\">            &lt;div class=&quot;box box3&quot;&gt;3&lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>浮动之后，盒子因为脱离了标准文档流，它撑不起父盒子的高度，导致父盒子高度塌陷</p>\n<h5 id=\"清除浮动带来影响的方式\"><a href=\"#清除浮动带来影响的方式\" class=\"headerlink\" title=\"清除浮动带来影响的方式\"></a>清除浮动带来影响的方式</h5><ol>\n<li>父盒子设置固定高度<br>虽然，给父盒子设置了固定高度能暂时解决我们的问题，但是它的使用不灵活，如果未来子盒子的高度需求发生了改变(网页的多处地方)，那么我们得手动需要更改父盒子的高度。后期不易维护。</li>\n<li>内墙法<br>所谓内墙法,有一个规则:在浮动元素的后面加一个空的块级元素(通常是div),并且该元素设置clear:both；属性。<br>clear属性，字面意思就是清除，那么both,就是清除浮动元素对我左右两边的影响。</li>\n<li>伪元素清除法<br><a href=\"https://juejin.cn/post/6886247611318140942\">https://juejin.cn/post/6886247611318140942</a><br>在最后补加一个没有实际意义的块元素 <code>div</code>，然后添加 <code>div</code> 的 CSS 属性 <code>clear: both;</code>，这个块元素没有高，没有宽，没有内容，就是专门用来撑起父元素。<br>或者更加优雅写成<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxx::after &#123;</span><br><span class=\"line\">    content: &#x27;&#x27;;</span><br><span class=\"line\">    display: block;</span><br><span class=\"line\">    clear: both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n其中 <code>content: &#39;&#39;</code> 表示元素为空，<code>display: block</code> 才能撑起父元素(因为另起一行了)，<code>clear: both;</code> 就是消除之前的浮动带来的所有影响。</li>\n<li><code>overflow: hidden;</code></li>\n</ol>\n<h4 id=\"定位\"><a href=\"#定位\" class=\"headerlink\" title=\"定位\"></a>定位</h4><p>开启相对定位的元素并未脱离文档流。<br>如果一个元素开启了定位，那么它的层级就比普通元素的层级高。<br>相对定位：</p>\n<ol>\n<li>对于元素的位置进行微调。</li>\n<li>配合绝对定位</li>\n</ol>\n<p>绝对定位：</p>\n<ol>\n<li>一旦开启绝对定位，就脱离了文档流。</li>\n<li>绝对定位参考的点是它的包含块。<br> 对于没有脱离文档流的元素，它的父元素就是它的包含块。<br> 对于脱离文档流的元素，它的第一个开启定位的祖先元素就是它的包含块。</li>\n<li>不论是块元素、行内元素还是行内块元素，只要进行了绝对定位，就变成了<strong>定位元素</strong><br> 定位元素：<ol>\n<li>默认被内容撑开。</li>\n<li>但是也是可以进行设置的。</li>\n</ol>\n</li>\n</ol>\n<p>固定定位：<br>就是直接对于视口定位。</p>\n<ol>\n<li>并且元素变成了定位元素。</li>\n<li>脱离了文档流。</li>\n</ol>\n<p>粘性定位：<br><code>position: sticky;</code><br>参考点是离它最近的拥有滚动行为的祖先元素。包含粘性定位元素的父容器也不在视图上时，胶水就失效了。</p>\n<p>这几个定位的层级是平等的。</p>\n<h4 id=\"z-index\"><a href=\"#z-index\" class=\"headerlink\" title=\"z-index\"></a>z-index</h4><p>属性 <code>z-index</code>(纯数值，没有单位) 就相当于 <code>z</code> 轴上的坐标，<code>z</code> 越大，层级越高，所以在屏幕上显示的优先级越高。</p>\n<h4 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h4><p>版心的大小一般是 900 - 1200 px<br><img src=\"/2023/09/01/CSS%E8%AE%B0%E5%BD%95/%E5%B8%B8%E8%A7%81%E5%B8%83%E5%B1%80%E5%90%8D%E8%AF%8D.png\" class=\"\"></p>\n<h4 id=\"重置默认样式\"><a href=\"#重置默认样式\" class=\"headerlink\" title=\"重置默认样式\"></a>重置默认样式</h4><ol>\n<li>使用全局选择器<br>在简单的案例中，我们可能使用这种方式，但是实际开发中我们不会使用。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123; padding: 0px; margin: 0px; &#125;</span><br></pre></td></tr></table></figure></li>\n<li>使用 <code>reset.css</code> 可以是自己一直以来的一个标准模板，也可以是使用一些公司开源的自己的 <code>reset.css</code>(比如小米、阿里…)</li>\n<li><code>Normalize.css</code> 是一种最新方案，它再清楚默认样式的基础上，保留了一些有价值的默认样式。<br>这是一个标准化的东西，有很多的网站和用户去维护这个东西。<br><a href=\"http://necolas.github.io/normalize.css/\">http://necolas.github.io/normalize.css/</a></li>\n</ol>\n<h4 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h4><img src=\"/2023/09/01/CSS%E8%AE%B0%E5%BD%95/%E7%BB%83%E4%B9%A01.png\" class=\"\">\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        * &#123;</span><br><span class=\"line\">            margin: 0px;</span><br><span class=\"line\">            padding: 0px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .leftfix &#123;</span><br><span class=\"line\">            float: left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .rightfix &#123;</span><br><span class=\"line\">            float: right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .clearfix &#123;</span><br><span class=\"line\">            overflow: hidden;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .container &#123;</span><br><span class=\"line\">            margin: 0 auto;</span><br><span class=\"line\">            width: 960px;</span><br><span class=\"line\">            text-align: center;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .top-header &#123;</span><br><span class=\"line\">            width: 960px;</span><br><span class=\"line\">            height: 80px; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .logo,</span><br><span class=\"line\">        .banner1,</span><br><span class=\"line\">        .banner2 &#123;</span><br><span class=\"line\">            background-color: gray;</span><br><span class=\"line\">            height: 80px;</span><br><span class=\"line\">            line-height: 80px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .logo &#123;</span><br><span class=\"line\">            width: 200px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .banner2 &#123;</span><br><span class=\"line\">            width: 200px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .banner1 &#123;</span><br><span class=\"line\">            width: 540px;</span><br><span class=\"line\">            margin: 0 10px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .menu &#123;</span><br><span class=\"line\">            background-color: gray;</span><br><span class=\"line\">            height: 30px;</span><br><span class=\"line\">            margin: 10px auto;</span><br><span class=\"line\">            line-height: 30px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .item1,</span><br><span class=\"line\">        .item2 &#123;</span><br><span class=\"line\">            height: 198px;</span><br><span class=\"line\">            width: 368px;</span><br><span class=\"line\">            border: solid black 1px;</span><br><span class=\"line\">            line-height: 198px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .item2 &#123;</span><br><span class=\"line\">            margin-left: 10px;</span><br><span class=\"line\">            margin-right: 10px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .item3,</span><br><span class=\"line\">        .item4,</span><br><span class=\"line\">        .item5,</span><br><span class=\"line\">        .item6 &#123;</span><br><span class=\"line\">            width: 178px;</span><br><span class=\"line\">            height: 198px;</span><br><span class=\"line\">            border: 1px solid black;</span><br><span class=\"line\">            margin-top: 10px;</span><br><span class=\"line\">            line-height: 198px;</span><br><span class=\"line\">            margin-bottom: 10px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .item4,</span><br><span class=\"line\">        .item5,</span><br><span class=\"line\">        .item6 &#123;</span><br><span class=\"line\">            margin-left: 10px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .item7,</span><br><span class=\"line\">        .item8,</span><br><span class=\"line\">        .item9 &#123;</span><br><span class=\"line\">            width: 198px;</span><br><span class=\"line\">            height: 128px;</span><br><span class=\"line\">            border: 1px solid black;</span><br><span class=\"line\">            margin-bottom: 10px;</span><br><span class=\"line\">            line-height: 128px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .footer &#123;</span><br><span class=\"line\">            background-color: gray;</span><br><span class=\"line\">            width: 960px;</span><br><span class=\"line\">            height: 60px;</span><br><span class=\"line\">            line-height: 60px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">        &lt;!--header--&gt;</span><br><span class=\"line\">        &lt;div class=&quot;top-header clearfix&quot;&gt;</span><br><span class=\"line\">            &lt;div class=&quot;logo leftfix&quot;&gt;</span><br><span class=\"line\">                logo</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            &lt;div class=&quot;banner1 leftfix&quot;&gt;</span><br><span class=\"line\">                banner1</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            &lt;div class=&quot;banner2 leftfix&quot;&gt;</span><br><span class=\"line\">                banner2</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;!--menu--&gt;</span><br><span class=\"line\">        &lt;div class=&quot;menu&quot;&gt;</span><br><span class=\"line\">            菜单</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;!--content--&gt;</span><br><span class=\"line\">        &lt;div class=&quot;content clearfix&quot;&gt;</span><br><span class=\"line\">            &lt;!--left--&gt;</span><br><span class=\"line\">            &lt;div class=&quot;left-content leftfix&quot;&gt;</span><br><span class=\"line\">                &lt;!--top--&gt;</span><br><span class=\"line\">                &lt;div class=&quot;top-content clearfix&quot;&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;item1 leftfix&quot;&gt;</span><br><span class=\"line\">                        栏目一</span><br><span class=\"line\">                    &lt;/div&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;item2 leftfix&quot;&gt;</span><br><span class=\"line\">                        栏目二</span><br><span class=\"line\">                    &lt;/div&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">                &lt;!--bottom--&gt;</span><br><span class=\"line\">                &lt;div class=&quot;bottom-content clearfix&quot;&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;item3 leftfix&quot;&gt;栏目三&lt;/div&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;item4 leftfix&quot;&gt;栏目四&lt;/div&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;item5 leftfix&quot;&gt;栏目五&lt;/div&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;item6 leftfix&quot;&gt;栏目六&lt;/div&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            &lt;!--right--&gt;</span><br><span class=\"line\">            &lt;div class=&quot;right-content leftfix&quot;&gt;</span><br><span class=\"line\">                &lt;div class=&quot;item7&quot;&gt;栏目七&lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;item8&quot;&gt;栏目八&lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;item9&quot;&gt;栏目九&lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;!--footer--&gt;</span><br><span class=\"line\">        &lt;div class=&quot;footer&quot;&gt;</span><br><span class=\"line\">            页脚</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>调整背景图的位置用 <code>background-position:xxx;</code></p>\n<p>布局里面，一堆东西横向排列一堆东西纵向排列，而且这一堆东西还很相似，往往我们都用 ul li</p>\n<p>大多数情况都是给子元素开启固定定位，给父元素开启相对定位。</p>\n<p>img 方式引入图片的话，我们不需要给出宽和高，就是图片默认的宽和高。但是 <code>div</code> 设置图片背景的时候，<code>div</code> 必须先有宽和高，才能显示图片。</p>\n"},{"title":"Hello World","description":"Hello World.","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndescription: Hello World. \n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-08-23T08:48:51.054Z","updated":"2023-08-23T08:48:51.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szo000025oog1ssu6q8t","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"JavaScript基础","date":"2023-08-28T06:10:05.000Z","description":"The key record of JavaScript.","_content":"变量的声明就是 `var name = xxx;`。其中 `var` 是 `variable` 的缩写（虽然和方差 variance 的缩写一样）。\n\n在 JS 中使用 {} 来分块，同一个 {} 中的语句我们称之为一组语句，它们要么都执行，要么都不执行。\n\n其实函数也是一个对象，可以如下定义一个函数：`f = new Function(\"console.log('this is a function. ')\")`。但是一般不这么使用。\n\n```\nvar obj = {\n    name: 'lys',\n    age: 19,\n    address: 'SDU'\n}\nfor (var x in obj) {\n    console.log(x); // 这样只是枚举的对象中的元素名字\n}\nfor (var x in obj){\n    console.log(obj[x]); // 不能直接 obj.x 来获得具体元素，应用 [] 的引用方式。\n}\n```\n\n数组创建 `var arr = new Array()` 或者 `var arr = []`。但是一般不使用 `new Array()` 的创建方式。并且数组中的元素类型也是不一定的，不一定非要是 Number 类型的。\n其实数组也是一个对象，只不过索引方式是 []，所以对象有的东西数组也有。\n\n数组既然是对象，就有方法，在 JS 中数组有一些常用的方法：\n1. `push()` 向数组末尾添加一个或者多个元素，并且返回新的数组的长度。\n2. `pop()` 从数组末尾删除一个元素，并且返回删除的元素。\n3. `unshift()` 向数组的**开头**添加一个或者多个元素，并且返回新的数组的长度。\n4. `shift()` 从数组开头删除一个元素，并且返回删除的元素。\n5. `join()` 将所有的元素连接成一个字符串。\n6. `slice()` 返回数组的一部分，不修改原数组。\n\n建立函数\n```\nfunction xxx() {\n\n}\n```\n\n如果是构造函数\n```\nfunction Person() {\n\n}\nvar person = new Person();\n```\n如果不写前面的 function 直接 new，会出现错误。\n\narr.forEach(xx) 中间 xx 都要传递一个函数，如果之前定义了 `function fun() {}` 就写为 `arr.forEach(fun)`，但是一般不这样，一般都是用匿名函数。\n```\nvar arr = [1, 2, 3];\narr.forEach(function(a, b, c) {\n    console.log(a);\n});\n```\n上面就是输出 a，遍历的时候会将 arr 中的元素传递给 function。\n会传递三个参数，第一个是数组当前遍历到元素 value，第二个是当前遍历到的索引 index，第三个是正在遍历的数组。\n\n函数在调用的时候，浏览器会向里面传递两个隐含的参数\n1. 上下文对象的 this\n2. 封装实参的类数组对象 arguments，在调用函数的时候，我们所传递的实参都会在 arguments 中保存。\n\n在 JS 中，对象有 3 类\n{%asset_img 对象.png%}\nDOM Document Object Model\nJS 通过 DOM 对于 HTML 文档进行操作，只要理解了 DOM，就可以随心所欲操作 WEB 页面。\n\n节点 Node 是构成 HTML 文档的最基本的单元，常用节点分为四类\n- 文档节点 整个 HTML 文档\n- 元素节点 HTML 文档中的 HTML 标签\n- 属性节点 元素的属性\n- 文本节点 HTML 标签中的文本\n{%asset_img 节点.png%}\n\n{%asset_img 节点的属性.png%}\n上面的三个属性是每一个节点都有的三个属性。\n\ninnerHTML 可以获得到文字\n\n事件就是文档或浏览器窗口中发生的一些特定的交互瞬间。JavaScript 与 HTML 之间的交互是通过事件实现的。比如对于 Web 应用来说，有下面一些有代表性的事件：点击某个元素、将鼠标移动至某个元素上方、按下键盘上某个键等等。\n\n`onload` 事件会在整个页面加载完成之后发生。\n```\nwindow.onload= function() {\n    xxx\n}\n```\n这一段代码是页面加载完成之后执行的。\n\n标签就是元素，元素就是标签。\n\n{%asset_img 获取元素节点.png%}\n\ninnerHTML 对于「自结束标签」没有意义。如：\n{%asset_img 自结束标签.png%}\n如果想读取元素的属性，直接 `元素.属性名`。但是读取元素的 `class` 属性的时候不能直接 `元素.class` 因为 class 是 JS 中的保留字，应该写为 `元素.className`\n\n{%asset_img 查找子节点.png%}\n但是 `childNodes` 有个缺陷，此时如果我们使用 `children` 就不会出现这种问题了，它返回的是当前元素的所有子元素。\n{%asset_img childnodes缺陷.png%}\n\n`innerText` 和 `innerHTML` 类似，但是 `innerText` 获取的会将 html 标签去除。\n\n{%asset_img 获取兄弟节点.png%}\n\n`getElementsByName()` 一般用来操作一些表单项目。 \n\n获取 `body` 标签的话有两种方式：\n1. `var body = document.getElementsByTagName()[0];` 因为 `getElementsByTagName()` 返回的是一个集合 `Collection`，但是我们又只有一个 `body`，所以直接返回索引 0 就可以了。\n2. 其实在 `document` 中就有一个属性 `body`，我们直接 `var body = document.body;` 就可以了。\n\n`html` 元素是 `document.documentElement;`\n\n`document.all` 代表的是页面的所有元素。也可以写成 `document.getElementsByTagName(\"*\")`\n\n`document.getElementsByClassName();` 可以根据元素的 `class` 属性值获取一组节点对象。\n\n`document.querySelector();` 需要一个选择器字符串作为参数，可以根据一个 CSS 选择器来查询一个元素节点对象。但是使用这个方法只会返回唯一的一个元素，如果满足条件的元素有多个，但是只会返回第一个。如果需要多个就使用 `document.querySelectorAll();`\n\n`父节点.insertBefore(新节点, 旧节点)` 是在旧节点前面添加新节点。\n\n超链接点击以后会默认跳转页面，如果我们不希望出现此默认行为，我们可以在超链接的 `onclick = function() {}` 中写上 `return false;`\n\n`confirm()` 函数会弹出一个带有确定和取消两个按键的提示框，并且如果我们点击确定，会返回 true，如果点击取消，会返回 false。\n\n{%asset_img 执行顺序.png%}\n一个比较细节容易忽视的点，直观上我们认为 this 和 allA[i] 是一样的。\n图中，我们的 `onclick = function() {}` 可以认为只是函数之间的一个赋值，里面的内容并没有执行。只有我们在点击按钮的时候，`function` 里面的内容才会执行。如果我们 `function` 里面使用 `allA[i]`，等到我们点击的时候 for 循环早就已经执行完毕，此时的 i 必然是 all 的length，所以就会出现错误。我们正确的做法应该是将 function 里面的 allA[i] 改为 this。\n\n通过 JS 修改元素的样式：`元素.style.样式名 = 样式值` 其中样式值需要是一个字符串。\n注意，如果 CSS 样式名称中含有 `-`，如 `background-color` 这种命名在 JS 中是不合法的，我们需要将这种命名改为驼峰命名法，去掉 `-`，然后将 `-` 的字母大写。\n\n通过 JS 的 style 修改的往往是内联样式，而内联样式有较高的优先级，所以通过 JS 修改的样式往往会立即显示。\n\n事件对象：\n当事件的响应函数被触发的时候，浏览器每次会将一个事件对象作为实参传递进响应函数。在事件对象中封装了当前关于事件的一切信息，比如鼠标的坐标、键盘的哪一个按键被按下、鼠标滚轮的移动方向\n\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>\n            this is a title.\n        </title>\n        <script>\n            window.onload = function() {\n                var box1 = document.getElementById(\"box1\");\n                document.onmousemove = function(event) {\n                    var clientX = event.clientX;\n                    var clientY = event.clientY;\n                    box1.style.left = clientX + \"px\";\n                    box1.style.top = clientY + \"px\";\n                }\n            }\n        </script>\n    </head>\n    <body>\n        <style>\n            #box1 {\n                width: 100px;\n                height: 100px;\n                background-color: red;\n                position: absolute;\n            }\n        </style>\n        <box id=\"box1\"></box>\n    </body>\n</html>\n```\n`clientX` 和 `clientY` 是用于我们鼠标在当前可见窗口的坐标，所以对于有滚动条的窗口的话可能会出现一些错误。所以我们这时候使用 `pageX` 和 `pageY` 这两和属性是相对于整个页面的。\n\n{%asset_img document和window.png%}\n\n事件的冒泡(bubble)\n所谓事件的冒泡就是事件的想上传导，当后代元素上的事件被触发时，其祖先元素的相同事件也会被触发。在开发中，大部分情况冒泡是有用的，如果不希望发生事件冒泡可以通过事件对象来取消冒泡。\n`event.cancelBubble = true;`\n\n我们希望只绑定一次事件，即可应用到多个元素之上，即使元素是后来添加的。我们可以尝试将元素绑定给其共同的祖先元素。然后通过冒泡来实现事件的发生。这其实就是事件的「委派」。\n\n`document.getElementsByTagName();` 返回的不是一个数组（一个NodeList对象，指定标签名的集合 collection），虽然我们可以遍历，它也有长度。\n\n点击超链接时会自动默认跳转，我们把超链接的 `href` 修改为 `javascript:;` 就不会发生跳转了。\n\n事件给谁绑定的，function 中的 this 就是谁。\n```\n ul.onclick = function() {\n    alert(this);\n    alert(\"我是一个响应函数。\");\n}\n```\n像这一个，第一个 `alert` 输出的就是 `[object HTMLUListElement]`。\n但是事件绑定对象不等于事件触发对象，我们如果想要获得事件**触发对象**需要使用 `event.target` 属性。\n```\n<!DOCTYPE html>\n<html>\n    <title>\n        <meta charset=\"UTF-8\">\n        <title>this is a test.</title>\n    </title>\n    <body>\n        <script>\n            window.onload = function() {\n                var btn1 = document.getElementById(\"btn1\");\n                var ul = document.getElementsByTagName(\"ul\")[0];\n                btn1.onclick = function() {\n                    var li = document.createElement(\"li\");\n                    li.innerHTML = \"<a href='javascript:;' class='link'>新建的超链接</a>\"\n                    ul.appendChild(li);\n                }\n                ul.onclick = function(event) {\n                    if (event.target.className == 'link') {\n                        alert(\"这是一个响应函数\");\n                    }\n                }\n            }\n        </script>\n        <button id=\"btn1\">我是一个按钮</button>\n        <ul>\n            <li><a href=\"javascript:;\" class=\"link\">这是一个超链接</a></li>\n            <li><a href=\"javascript:;\" class=\"link\">这是一个超链接</a></li>\n            <li><a href=\"javascript:;\" class=\"link\">这是一个超链接</a></li>\n        </ul>\n    </body>\n</html>\n```\n\n使用 `对象.事件 = 函数` 的形式绑定响应函数，它只能同时为一个事件绑定一个响应函数，不能绑定多个，如果绑定了多个，那么后面的就会覆盖掉前面的。\n我们可以使用 `addEventListener(xxx, xxx, xxx)` 为元素绑定响应函数。\n它的参数：\n1. 事件的字符串，如果是 onclick 不要前面的 on\n2. 回调函数，当事件被触发时，该函数会被调用。\n3. 是否在捕获阶段触发，需要布尔值，一般是 false\n   \nJavaScript中的call()函数是用于调用函数的方法之一，它允许你显式地指定函数内部的this关键字，并传递参数给该函数。call()方法的语法如下：\n```\nfunctionName.call(thisArg, arg1, arg2, ...);\n```\n总之，call()方法是JavaScript中用于在指定上下文对象上调用函数的强大工具，它允许你更灵活地控制函数的执行环境。\n\n```\n<!DOCTYPE html>\n<html>\n    <title>\n        <meta charset=\"UFT-8\">\n        this is a test.\n    </title>\n    <body>\n        <style>\n            #box1 {\n                width: 100px;\n                height: 100px;\n                background-color: red;\n                position: absolute;\n            }\n        </style>\n        <script>\n            window.onload = function() {\n                var box1 = document.getElementById(\"box1\");\n                box1.onmousedown = function(event) {\n                    var offsetX = event.clientX - box1.offsetLeft;\n                    var offsetY = event.clientY - box1.offsetTop;\n                    document.onmousemove = function(event) {\n                        var x = event.clientX;\n                        var y = event.clientY;\n                        box1.style.left = x - offsetX + \"px\";\n                        box1.style.top = y - offsetY + \"px\";\n                    }\n                    document.onmouseup = function() {\n                        document.onmousemove = null;\n                        document.onmouseup = null;\n                    }\n                }\n            }\n        </script>\n        <div id=\"box1\"></div>\n    </body>\n</html>\n```\n实现一个小方块位置的拖拽。\n\n键盘事件一般都会绑定给可以获取到焦点的对象或者是 `document` 对象。对于 `onkeydown` 事件来说，如果我们一直按着某个按键不松手，则事件就会一直触发。当 `onkeydown` 连续触发时，第一次和第二次之间的间隔会长一点，其他后面的会非常快，这是为了防止我们误操作。\n\n我们可以使用 `event` 的 `keyCode` 属性可以返回被按下键的 `Unicode` 编码。或者使用 `key` 属性直接返回被按键的按键。\n如果判断 `alt` 或者 `ctrl` 或者 `shift` 和某个键是否同时被按下，可以同时使用 `event` 的 `altKey、shiftKey、ctrlKey` 属性和 `key` 属性。\n\nBOM browser object model 浏览器对象模型\nBOM 可以使我们通过 JS 来操作浏览器，DOM 可以使我们通过 JS 来操作网页。\n{%asset_img bom对象.png%}\n\n`uerAgent` 用户代理，通常指的是浏览器，其中 `navigator` 的属性 `userAgent` 是一个字符串，包含用来描述浏览器的内容，不同的浏览器有着不同的 userAgent\n\nGecko CSS 渲染的一个引擎。\n\n`history` 对象 `length` 属性，返回浏览器历史列表中 url 数量。\n方法：`back` 加载 `history` 列表中前一个 url，`forward` 加载 `history` 列表中下一个 url，`go(xx)` 加载列表中某一个具体的页面，xx 如果是正，就是前多少个，如果是负，就是加载后面第xx个页面。\n\n`location` 对象\n如果直接打印 `location` 可以获取当前的地址栏，也就是网页的完整路径。如果直接将 `location` 修改为一个路径，就会直接跳转到那个页面。\n\n`window` 的 `setInterval` 方法。(Interval 是 间隔、中场休息、幕间休息、间隙 的意思)\n- 定时调用\n- 可以将一个函数，每隔一段时间执行一次\n- 参数：\n    1. 回调函数\n    2. 每次调用的时间间隔，单位是毫秒\n- 返回值：\n    返回一个 Number 类型的数据\n    这个数字用来作为定时器的唯一标识(因为一个页面上可能有很多个定时器)\n    比如我们的 `clearInterval(xx)` 方法，可以用来关闭一个定时器，其中的 `xx` 就需要我们的标识作为参数。  \n```\nsetInterval(function() {\n    xxx.innerHTML = ++count;\n}, 1000);\n```\n\n延时调用：一个函数不是马上执行，而是一段时间之后再执行(只会执行一次)。\n用法和定时调用差不多 `setTimeout(xxx);`\n`clearTimeout(xxx);` 是关闭延时调用。\n\n延时调用其实和定时调用是可以互相代替的。\n\nJSON(JavaScript Object Notation)\n因为和 JavaScript 中对象的表示方法一样，只不过在 JSON 中属性名字必须加双引号。\nJSON 分类：\n1. 对象 `{}`\n2. 数组 `[]`\n\n在 JS 中，为我们提供了一个工具类就叫做 JSON，这个对象可以帮助我们将一个 JSON 转换为 JS 对象，也可以将一个 JS 对象转换为 JSON。\n`JSON.parse(xx);`\n- 将字符串转换为 JS 对象\n- 需要一个 JSON 字符串作为参数，返回一个 JS 对象\n\n`JSON.stringfy();`\n- 将 JS 对象转换为字符串\n- 需要一个 JS 对象作为参数，但会一个 JSON 字符串。\n\n`===` 是严格相等的意思，它用于比较两个值是否完全相等，包括值和数据类型。\n使用严格相等运算符是 JavaScript 编程中的一种良好实践，因为它可以减少潜在的错误和不确定性，确保比较的值具有相同的类型和值。\n\n","source":"_posts/JavaScript基础.md","raw":"---\ntitle: JavaScript基础\ndate: 2023-08-28 14:10:05\ntags: JavaScript, WEB\ndescription: The key record of JavaScript. \n---\n变量的声明就是 `var name = xxx;`。其中 `var` 是 `variable` 的缩写（虽然和方差 variance 的缩写一样）。\n\n在 JS 中使用 {} 来分块，同一个 {} 中的语句我们称之为一组语句，它们要么都执行，要么都不执行。\n\n其实函数也是一个对象，可以如下定义一个函数：`f = new Function(\"console.log('this is a function. ')\")`。但是一般不这么使用。\n\n```\nvar obj = {\n    name: 'lys',\n    age: 19,\n    address: 'SDU'\n}\nfor (var x in obj) {\n    console.log(x); // 这样只是枚举的对象中的元素名字\n}\nfor (var x in obj){\n    console.log(obj[x]); // 不能直接 obj.x 来获得具体元素，应用 [] 的引用方式。\n}\n```\n\n数组创建 `var arr = new Array()` 或者 `var arr = []`。但是一般不使用 `new Array()` 的创建方式。并且数组中的元素类型也是不一定的，不一定非要是 Number 类型的。\n其实数组也是一个对象，只不过索引方式是 []，所以对象有的东西数组也有。\n\n数组既然是对象，就有方法，在 JS 中数组有一些常用的方法：\n1. `push()` 向数组末尾添加一个或者多个元素，并且返回新的数组的长度。\n2. `pop()` 从数组末尾删除一个元素，并且返回删除的元素。\n3. `unshift()` 向数组的**开头**添加一个或者多个元素，并且返回新的数组的长度。\n4. `shift()` 从数组开头删除一个元素，并且返回删除的元素。\n5. `join()` 将所有的元素连接成一个字符串。\n6. `slice()` 返回数组的一部分，不修改原数组。\n\n建立函数\n```\nfunction xxx() {\n\n}\n```\n\n如果是构造函数\n```\nfunction Person() {\n\n}\nvar person = new Person();\n```\n如果不写前面的 function 直接 new，会出现错误。\n\narr.forEach(xx) 中间 xx 都要传递一个函数，如果之前定义了 `function fun() {}` 就写为 `arr.forEach(fun)`，但是一般不这样，一般都是用匿名函数。\n```\nvar arr = [1, 2, 3];\narr.forEach(function(a, b, c) {\n    console.log(a);\n});\n```\n上面就是输出 a，遍历的时候会将 arr 中的元素传递给 function。\n会传递三个参数，第一个是数组当前遍历到元素 value，第二个是当前遍历到的索引 index，第三个是正在遍历的数组。\n\n函数在调用的时候，浏览器会向里面传递两个隐含的参数\n1. 上下文对象的 this\n2. 封装实参的类数组对象 arguments，在调用函数的时候，我们所传递的实参都会在 arguments 中保存。\n\n在 JS 中，对象有 3 类\n{%asset_img 对象.png%}\nDOM Document Object Model\nJS 通过 DOM 对于 HTML 文档进行操作，只要理解了 DOM，就可以随心所欲操作 WEB 页面。\n\n节点 Node 是构成 HTML 文档的最基本的单元，常用节点分为四类\n- 文档节点 整个 HTML 文档\n- 元素节点 HTML 文档中的 HTML 标签\n- 属性节点 元素的属性\n- 文本节点 HTML 标签中的文本\n{%asset_img 节点.png%}\n\n{%asset_img 节点的属性.png%}\n上面的三个属性是每一个节点都有的三个属性。\n\ninnerHTML 可以获得到文字\n\n事件就是文档或浏览器窗口中发生的一些特定的交互瞬间。JavaScript 与 HTML 之间的交互是通过事件实现的。比如对于 Web 应用来说，有下面一些有代表性的事件：点击某个元素、将鼠标移动至某个元素上方、按下键盘上某个键等等。\n\n`onload` 事件会在整个页面加载完成之后发生。\n```\nwindow.onload= function() {\n    xxx\n}\n```\n这一段代码是页面加载完成之后执行的。\n\n标签就是元素，元素就是标签。\n\n{%asset_img 获取元素节点.png%}\n\ninnerHTML 对于「自结束标签」没有意义。如：\n{%asset_img 自结束标签.png%}\n如果想读取元素的属性，直接 `元素.属性名`。但是读取元素的 `class` 属性的时候不能直接 `元素.class` 因为 class 是 JS 中的保留字，应该写为 `元素.className`\n\n{%asset_img 查找子节点.png%}\n但是 `childNodes` 有个缺陷，此时如果我们使用 `children` 就不会出现这种问题了，它返回的是当前元素的所有子元素。\n{%asset_img childnodes缺陷.png%}\n\n`innerText` 和 `innerHTML` 类似，但是 `innerText` 获取的会将 html 标签去除。\n\n{%asset_img 获取兄弟节点.png%}\n\n`getElementsByName()` 一般用来操作一些表单项目。 \n\n获取 `body` 标签的话有两种方式：\n1. `var body = document.getElementsByTagName()[0];` 因为 `getElementsByTagName()` 返回的是一个集合 `Collection`，但是我们又只有一个 `body`，所以直接返回索引 0 就可以了。\n2. 其实在 `document` 中就有一个属性 `body`，我们直接 `var body = document.body;` 就可以了。\n\n`html` 元素是 `document.documentElement;`\n\n`document.all` 代表的是页面的所有元素。也可以写成 `document.getElementsByTagName(\"*\")`\n\n`document.getElementsByClassName();` 可以根据元素的 `class` 属性值获取一组节点对象。\n\n`document.querySelector();` 需要一个选择器字符串作为参数，可以根据一个 CSS 选择器来查询一个元素节点对象。但是使用这个方法只会返回唯一的一个元素，如果满足条件的元素有多个，但是只会返回第一个。如果需要多个就使用 `document.querySelectorAll();`\n\n`父节点.insertBefore(新节点, 旧节点)` 是在旧节点前面添加新节点。\n\n超链接点击以后会默认跳转页面，如果我们不希望出现此默认行为，我们可以在超链接的 `onclick = function() {}` 中写上 `return false;`\n\n`confirm()` 函数会弹出一个带有确定和取消两个按键的提示框，并且如果我们点击确定，会返回 true，如果点击取消，会返回 false。\n\n{%asset_img 执行顺序.png%}\n一个比较细节容易忽视的点，直观上我们认为 this 和 allA[i] 是一样的。\n图中，我们的 `onclick = function() {}` 可以认为只是函数之间的一个赋值，里面的内容并没有执行。只有我们在点击按钮的时候，`function` 里面的内容才会执行。如果我们 `function` 里面使用 `allA[i]`，等到我们点击的时候 for 循环早就已经执行完毕，此时的 i 必然是 all 的length，所以就会出现错误。我们正确的做法应该是将 function 里面的 allA[i] 改为 this。\n\n通过 JS 修改元素的样式：`元素.style.样式名 = 样式值` 其中样式值需要是一个字符串。\n注意，如果 CSS 样式名称中含有 `-`，如 `background-color` 这种命名在 JS 中是不合法的，我们需要将这种命名改为驼峰命名法，去掉 `-`，然后将 `-` 的字母大写。\n\n通过 JS 的 style 修改的往往是内联样式，而内联样式有较高的优先级，所以通过 JS 修改的样式往往会立即显示。\n\n事件对象：\n当事件的响应函数被触发的时候，浏览器每次会将一个事件对象作为实参传递进响应函数。在事件对象中封装了当前关于事件的一切信息，比如鼠标的坐标、键盘的哪一个按键被按下、鼠标滚轮的移动方向\n\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>\n            this is a title.\n        </title>\n        <script>\n            window.onload = function() {\n                var box1 = document.getElementById(\"box1\");\n                document.onmousemove = function(event) {\n                    var clientX = event.clientX;\n                    var clientY = event.clientY;\n                    box1.style.left = clientX + \"px\";\n                    box1.style.top = clientY + \"px\";\n                }\n            }\n        </script>\n    </head>\n    <body>\n        <style>\n            #box1 {\n                width: 100px;\n                height: 100px;\n                background-color: red;\n                position: absolute;\n            }\n        </style>\n        <box id=\"box1\"></box>\n    </body>\n</html>\n```\n`clientX` 和 `clientY` 是用于我们鼠标在当前可见窗口的坐标，所以对于有滚动条的窗口的话可能会出现一些错误。所以我们这时候使用 `pageX` 和 `pageY` 这两和属性是相对于整个页面的。\n\n{%asset_img document和window.png%}\n\n事件的冒泡(bubble)\n所谓事件的冒泡就是事件的想上传导，当后代元素上的事件被触发时，其祖先元素的相同事件也会被触发。在开发中，大部分情况冒泡是有用的，如果不希望发生事件冒泡可以通过事件对象来取消冒泡。\n`event.cancelBubble = true;`\n\n我们希望只绑定一次事件，即可应用到多个元素之上，即使元素是后来添加的。我们可以尝试将元素绑定给其共同的祖先元素。然后通过冒泡来实现事件的发生。这其实就是事件的「委派」。\n\n`document.getElementsByTagName();` 返回的不是一个数组（一个NodeList对象，指定标签名的集合 collection），虽然我们可以遍历，它也有长度。\n\n点击超链接时会自动默认跳转，我们把超链接的 `href` 修改为 `javascript:;` 就不会发生跳转了。\n\n事件给谁绑定的，function 中的 this 就是谁。\n```\n ul.onclick = function() {\n    alert(this);\n    alert(\"我是一个响应函数。\");\n}\n```\n像这一个，第一个 `alert` 输出的就是 `[object HTMLUListElement]`。\n但是事件绑定对象不等于事件触发对象，我们如果想要获得事件**触发对象**需要使用 `event.target` 属性。\n```\n<!DOCTYPE html>\n<html>\n    <title>\n        <meta charset=\"UTF-8\">\n        <title>this is a test.</title>\n    </title>\n    <body>\n        <script>\n            window.onload = function() {\n                var btn1 = document.getElementById(\"btn1\");\n                var ul = document.getElementsByTagName(\"ul\")[0];\n                btn1.onclick = function() {\n                    var li = document.createElement(\"li\");\n                    li.innerHTML = \"<a href='javascript:;' class='link'>新建的超链接</a>\"\n                    ul.appendChild(li);\n                }\n                ul.onclick = function(event) {\n                    if (event.target.className == 'link') {\n                        alert(\"这是一个响应函数\");\n                    }\n                }\n            }\n        </script>\n        <button id=\"btn1\">我是一个按钮</button>\n        <ul>\n            <li><a href=\"javascript:;\" class=\"link\">这是一个超链接</a></li>\n            <li><a href=\"javascript:;\" class=\"link\">这是一个超链接</a></li>\n            <li><a href=\"javascript:;\" class=\"link\">这是一个超链接</a></li>\n        </ul>\n    </body>\n</html>\n```\n\n使用 `对象.事件 = 函数` 的形式绑定响应函数，它只能同时为一个事件绑定一个响应函数，不能绑定多个，如果绑定了多个，那么后面的就会覆盖掉前面的。\n我们可以使用 `addEventListener(xxx, xxx, xxx)` 为元素绑定响应函数。\n它的参数：\n1. 事件的字符串，如果是 onclick 不要前面的 on\n2. 回调函数，当事件被触发时，该函数会被调用。\n3. 是否在捕获阶段触发，需要布尔值，一般是 false\n   \nJavaScript中的call()函数是用于调用函数的方法之一，它允许你显式地指定函数内部的this关键字，并传递参数给该函数。call()方法的语法如下：\n```\nfunctionName.call(thisArg, arg1, arg2, ...);\n```\n总之，call()方法是JavaScript中用于在指定上下文对象上调用函数的强大工具，它允许你更灵活地控制函数的执行环境。\n\n```\n<!DOCTYPE html>\n<html>\n    <title>\n        <meta charset=\"UFT-8\">\n        this is a test.\n    </title>\n    <body>\n        <style>\n            #box1 {\n                width: 100px;\n                height: 100px;\n                background-color: red;\n                position: absolute;\n            }\n        </style>\n        <script>\n            window.onload = function() {\n                var box1 = document.getElementById(\"box1\");\n                box1.onmousedown = function(event) {\n                    var offsetX = event.clientX - box1.offsetLeft;\n                    var offsetY = event.clientY - box1.offsetTop;\n                    document.onmousemove = function(event) {\n                        var x = event.clientX;\n                        var y = event.clientY;\n                        box1.style.left = x - offsetX + \"px\";\n                        box1.style.top = y - offsetY + \"px\";\n                    }\n                    document.onmouseup = function() {\n                        document.onmousemove = null;\n                        document.onmouseup = null;\n                    }\n                }\n            }\n        </script>\n        <div id=\"box1\"></div>\n    </body>\n</html>\n```\n实现一个小方块位置的拖拽。\n\n键盘事件一般都会绑定给可以获取到焦点的对象或者是 `document` 对象。对于 `onkeydown` 事件来说，如果我们一直按着某个按键不松手，则事件就会一直触发。当 `onkeydown` 连续触发时，第一次和第二次之间的间隔会长一点，其他后面的会非常快，这是为了防止我们误操作。\n\n我们可以使用 `event` 的 `keyCode` 属性可以返回被按下键的 `Unicode` 编码。或者使用 `key` 属性直接返回被按键的按键。\n如果判断 `alt` 或者 `ctrl` 或者 `shift` 和某个键是否同时被按下，可以同时使用 `event` 的 `altKey、shiftKey、ctrlKey` 属性和 `key` 属性。\n\nBOM browser object model 浏览器对象模型\nBOM 可以使我们通过 JS 来操作浏览器，DOM 可以使我们通过 JS 来操作网页。\n{%asset_img bom对象.png%}\n\n`uerAgent` 用户代理，通常指的是浏览器，其中 `navigator` 的属性 `userAgent` 是一个字符串，包含用来描述浏览器的内容，不同的浏览器有着不同的 userAgent\n\nGecko CSS 渲染的一个引擎。\n\n`history` 对象 `length` 属性，返回浏览器历史列表中 url 数量。\n方法：`back` 加载 `history` 列表中前一个 url，`forward` 加载 `history` 列表中下一个 url，`go(xx)` 加载列表中某一个具体的页面，xx 如果是正，就是前多少个，如果是负，就是加载后面第xx个页面。\n\n`location` 对象\n如果直接打印 `location` 可以获取当前的地址栏，也就是网页的完整路径。如果直接将 `location` 修改为一个路径，就会直接跳转到那个页面。\n\n`window` 的 `setInterval` 方法。(Interval 是 间隔、中场休息、幕间休息、间隙 的意思)\n- 定时调用\n- 可以将一个函数，每隔一段时间执行一次\n- 参数：\n    1. 回调函数\n    2. 每次调用的时间间隔，单位是毫秒\n- 返回值：\n    返回一个 Number 类型的数据\n    这个数字用来作为定时器的唯一标识(因为一个页面上可能有很多个定时器)\n    比如我们的 `clearInterval(xx)` 方法，可以用来关闭一个定时器，其中的 `xx` 就需要我们的标识作为参数。  \n```\nsetInterval(function() {\n    xxx.innerHTML = ++count;\n}, 1000);\n```\n\n延时调用：一个函数不是马上执行，而是一段时间之后再执行(只会执行一次)。\n用法和定时调用差不多 `setTimeout(xxx);`\n`clearTimeout(xxx);` 是关闭延时调用。\n\n延时调用其实和定时调用是可以互相代替的。\n\nJSON(JavaScript Object Notation)\n因为和 JavaScript 中对象的表示方法一样，只不过在 JSON 中属性名字必须加双引号。\nJSON 分类：\n1. 对象 `{}`\n2. 数组 `[]`\n\n在 JS 中，为我们提供了一个工具类就叫做 JSON，这个对象可以帮助我们将一个 JSON 转换为 JS 对象，也可以将一个 JS 对象转换为 JSON。\n`JSON.parse(xx);`\n- 将字符串转换为 JS 对象\n- 需要一个 JSON 字符串作为参数，返回一个 JS 对象\n\n`JSON.stringfy();`\n- 将 JS 对象转换为字符串\n- 需要一个 JS 对象作为参数，但会一个 JSON 字符串。\n\n`===` 是严格相等的意思，它用于比较两个值是否完全相等，包括值和数据类型。\n使用严格相等运算符是 JavaScript 编程中的一种良好实践，因为它可以减少潜在的错误和不确定性，确保比较的值具有相同的类型和值。\n\n","slug":"JavaScript基础","published":1,"updated":"2023-09-07T07:21:03.297Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szo100045oog03q2blxi","content":"<p>变量的声明就是 <code>var name = xxx;</code>。其中 <code>var</code> 是 <code>variable</code> 的缩写（虽然和方差 variance 的缩写一样）。</p>\n<p>在 JS 中使用 {} 来分块，同一个 {} 中的语句我们称之为一组语句，它们要么都执行，要么都不执行。</p>\n<p>其实函数也是一个对象，可以如下定义一个函数：<code>f = new Function(&quot;console.log(&#39;this is a function. &#39;)&quot;)</code>。但是一般不这么使用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">    name: &#x27;lys&#x27;,</span><br><span class=\"line\">    age: 19,</span><br><span class=\"line\">    address: &#x27;SDU&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for (var x in obj) &#123;</span><br><span class=\"line\">    console.log(x); // 这样只是枚举的对象中的元素名字</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for (var x in obj)&#123;</span><br><span class=\"line\">    console.log(obj[x]); // 不能直接 obj.x 来获得具体元素，应用 [] 的引用方式。</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>数组创建 <code>var arr = new Array()</code> 或者 <code>var arr = []</code>。但是一般不使用 <code>new Array()</code> 的创建方式。并且数组中的元素类型也是不一定的，不一定非要是 Number 类型的。<br>其实数组也是一个对象，只不过索引方式是 []，所以对象有的东西数组也有。</p>\n<p>数组既然是对象，就有方法，在 JS 中数组有一些常用的方法：</p>\n<ol>\n<li><code>push()</code> 向数组末尾添加一个或者多个元素，并且返回新的数组的长度。</li>\n<li><code>pop()</code> 从数组末尾删除一个元素，并且返回删除的元素。</li>\n<li><code>unshift()</code> 向数组的<strong>开头</strong>添加一个或者多个元素，并且返回新的数组的长度。</li>\n<li><code>shift()</code> 从数组开头删除一个元素，并且返回删除的元素。</li>\n<li><code>join()</code> 将所有的元素连接成一个字符串。</li>\n<li><code>slice()</code> 返回数组的一部分，不修改原数组。</li>\n</ol>\n<p>建立函数<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function xxx() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果是构造函数<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person = new Person();</span><br></pre></td></tr></table></figure><br>如果不写前面的 function 直接 new，会出现错误。</p>\n<p>arr.forEach(xx) 中间 xx 都要传递一个函数，如果之前定义了 <code>function fun() &#123;&#125;</code> 就写为 <code>arr.forEach(fun)</code>，但是一般不这样，一般都是用匿名函数。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1, 2, 3];</span><br><span class=\"line\">arr.forEach(function(a, b, c) &#123;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><br>上面就是输出 a，遍历的时候会将 arr 中的元素传递给 function。<br>会传递三个参数，第一个是数组当前遍历到元素 value，第二个是当前遍历到的索引 index，第三个是正在遍历的数组。</p>\n<p>函数在调用的时候，浏览器会向里面传递两个隐含的参数</p>\n<ol>\n<li>上下文对象的 this</li>\n<li>封装实参的类数组对象 arguments，在调用函数的时候，我们所传递的实参都会在 arguments 中保存。</li>\n</ol>\n<p>在 JS 中，对象有 3 类<br><img src=\"/2023/08/28/JavaScript%E5%9F%BA%E7%A1%80/%E5%AF%B9%E8%B1%A1.png\" class=\"\"><br>DOM Document Object Model<br>JS 通过 DOM 对于 HTML 文档进行操作，只要理解了 DOM，就可以随心所欲操作 WEB 页面。</p>\n<p>节点 Node 是构成 HTML 文档的最基本的单元，常用节点分为四类</p>\n<ul>\n<li>文档节点 整个 HTML 文档</li>\n<li>元素节点 HTML 文档中的 HTML 标签</li>\n<li>属性节点 元素的属性</li>\n<li>文本节点 HTML 标签中的文本<img src=\"/2023/08/28/JavaScript%E5%9F%BA%E7%A1%80/%E8%8A%82%E7%82%B9.png\" class=\"\">\n</li>\n</ul>\n<img src=\"/2023/08/28/JavaScript%E5%9F%BA%E7%A1%80/%E8%8A%82%E7%82%B9%E7%9A%84%E5%B1%9E%E6%80%A7.png\" class=\"\">\n<p>上面的三个属性是每一个节点都有的三个属性。</p>\n<p>innerHTML 可以获得到文字</p>\n<p>事件就是文档或浏览器窗口中发生的一些特定的交互瞬间。JavaScript 与 HTML 之间的交互是通过事件实现的。比如对于 Web 应用来说，有下面一些有代表性的事件：点击某个元素、将鼠标移动至某个元素上方、按下键盘上某个键等等。</p>\n<p><code>onload</code> 事件会在整个页面加载完成之后发生。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.onload= function() &#123;</span><br><span class=\"line\">    xxx</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>这一段代码是页面加载完成之后执行的。</p>\n<p>标签就是元素，元素就是标签。</p>\n<img src=\"/2023/08/28/JavaScript%E5%9F%BA%E7%A1%80/%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0%E8%8A%82%E7%82%B9.png\" class=\"\">\n<p>innerHTML 对于「自结束标签」没有意义。如：<br><img src=\"/2023/08/28/JavaScript%E5%9F%BA%E7%A1%80/%E8%87%AA%E7%BB%93%E6%9D%9F%E6%A0%87%E7%AD%BE.png\" class=\"\"><br>如果想读取元素的属性，直接 <code>元素.属性名</code>。但是读取元素的 <code>class</code> 属性的时候不能直接 <code>元素.class</code> 因为 class 是 JS 中的保留字，应该写为 <code>元素.className</code></p>\n<img src=\"/2023/08/28/JavaScript%E5%9F%BA%E7%A1%80/%E6%9F%A5%E6%89%BE%E5%AD%90%E8%8A%82%E7%82%B9.png\" class=\"\">\n<p>但是 <code>childNodes</code> 有个缺陷，此时如果我们使用 <code>children</code> 就不会出现这种问题了，它返回的是当前元素的所有子元素。<br><img src=\"/2023/08/28/JavaScript%E5%9F%BA%E7%A1%80/childnodes%E7%BC%BA%E9%99%B7.png\" class=\"\"></p>\n<p><code>innerText</code> 和 <code>innerHTML</code> 类似，但是 <code>innerText</code> 获取的会将 html 标签去除。</p>\n<img src=\"/2023/08/28/JavaScript%E5%9F%BA%E7%A1%80/%E8%8E%B7%E5%8F%96%E5%85%84%E5%BC%9F%E8%8A%82%E7%82%B9.png\" class=\"\">\n<p><code>getElementsByName()</code> 一般用来操作一些表单项目。 </p>\n<p>获取 <code>body</code> 标签的话有两种方式：</p>\n<ol>\n<li><code>var body = document.getElementsByTagName()[0];</code> 因为 <code>getElementsByTagName()</code> 返回的是一个集合 <code>Collection</code>，但是我们又只有一个 <code>body</code>，所以直接返回索引 0 就可以了。</li>\n<li>其实在 <code>document</code> 中就有一个属性 <code>body</code>，我们直接 <code>var body = document.body;</code> 就可以了。</li>\n</ol>\n<p><code>html</code> 元素是 <code>document.documentElement;</code></p>\n<p><code>document.all</code> 代表的是页面的所有元素。也可以写成 <code>document.getElementsByTagName(&quot;*&quot;)</code></p>\n<p><code>document.getElementsByClassName();</code> 可以根据元素的 <code>class</code> 属性值获取一组节点对象。</p>\n<p><code>document.querySelector();</code> 需要一个选择器字符串作为参数，可以根据一个 CSS 选择器来查询一个元素节点对象。但是使用这个方法只会返回唯一的一个元素，如果满足条件的元素有多个，但是只会返回第一个。如果需要多个就使用 <code>document.querySelectorAll();</code></p>\n<p><code>父节点.insertBefore(新节点, 旧节点)</code> 是在旧节点前面添加新节点。</p>\n<p>超链接点击以后会默认跳转页面，如果我们不希望出现此默认行为，我们可以在超链接的 <code>onclick = function() &#123;&#125;</code> 中写上 <code>return false;</code></p>\n<p><code>confirm()</code> 函数会弹出一个带有确定和取消两个按键的提示框，并且如果我们点击确定，会返回 true，如果点击取消，会返回 false。</p>\n<img src=\"/2023/08/28/JavaScript%E5%9F%BA%E7%A1%80/%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.png\" class=\"\">\n<p>一个比较细节容易忽视的点，直观上我们认为 this 和 allA[i] 是一样的。<br>图中，我们的 <code>onclick = function() &#123;&#125;</code> 可以认为只是函数之间的一个赋值，里面的内容并没有执行。只有我们在点击按钮的时候，<code>function</code> 里面的内容才会执行。如果我们 <code>function</code> 里面使用 <code>allA[i]</code>，等到我们点击的时候 for 循环早就已经执行完毕，此时的 i 必然是 all 的length，所以就会出现错误。我们正确的做法应该是将 function 里面的 allA[i] 改为 this。</p>\n<p>通过 JS 修改元素的样式：<code>元素.style.样式名 = 样式值</code> 其中样式值需要是一个字符串。<br>注意，如果 CSS 样式名称中含有 <code>-</code>，如 <code>background-color</code> 这种命名在 JS 中是不合法的，我们需要将这种命名改为驼峰命名法，去掉 <code>-</code>，然后将 <code>-</code> 的字母大写。</p>\n<p>通过 JS 的 style 修改的往往是内联样式，而内联样式有较高的优先级，所以通过 JS 修改的样式往往会立即显示。</p>\n<p>事件对象：<br>当事件的响应函数被触发的时候，浏览器每次会将一个事件对象作为实参传递进响应函数。在事件对象中封装了当前关于事件的一切信息，比如鼠标的坐标、键盘的哪一个按键被按下、鼠标滚轮的移动方向</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">        &lt;title&gt;</span><br><span class=\"line\">            this is a title.</span><br><span class=\"line\">        &lt;/title&gt;</span><br><span class=\"line\">        &lt;script&gt;</span><br><span class=\"line\">            window.onload = function() &#123;</span><br><span class=\"line\">                var box1 = document.getElementById(&quot;box1&quot;);</span><br><span class=\"line\">                document.onmousemove = function(event) &#123;</span><br><span class=\"line\">                    var clientX = event.clientX;</span><br><span class=\"line\">                    var clientY = event.clientY;</span><br><span class=\"line\">                    box1.style.left = clientX + &quot;px&quot;;</span><br><span class=\"line\">                    box1.style.top = clientY + &quot;px&quot;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &lt;/script&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;style&gt;</span><br><span class=\"line\">            #box1 &#123;</span><br><span class=\"line\">                width: 100px;</span><br><span class=\"line\">                height: 100px;</span><br><span class=\"line\">                background-color: red;</span><br><span class=\"line\">                position: absolute;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &lt;/style&gt;</span><br><span class=\"line\">        &lt;box id=&quot;box1&quot;&gt;&lt;/box&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p><code>clientX</code> 和 <code>clientY</code> 是用于我们鼠标在当前可见窗口的坐标，所以对于有滚动条的窗口的话可能会出现一些错误。所以我们这时候使用 <code>pageX</code> 和 <code>pageY</code> 这两和属性是相对于整个页面的。</p>\n<img src=\"/2023/08/28/JavaScript%E5%9F%BA%E7%A1%80/document%E5%92%8Cwindow.png\" class=\"\">\n<p>事件的冒泡(bubble)<br>所谓事件的冒泡就是事件的想上传导，当后代元素上的事件被触发时，其祖先元素的相同事件也会被触发。在开发中，大部分情况冒泡是有用的，如果不希望发生事件冒泡可以通过事件对象来取消冒泡。<br><code>event.cancelBubble = true;</code></p>\n<p>我们希望只绑定一次事件，即可应用到多个元素之上，即使元素是后来添加的。我们可以尝试将元素绑定给其共同的祖先元素。然后通过冒泡来实现事件的发生。这其实就是事件的「委派」。</p>\n<p><code>document.getElementsByTagName();</code> 返回的不是一个数组（一个NodeList对象，指定标签名的集合 collection），虽然我们可以遍历，它也有长度。</p>\n<p>点击超链接时会自动默认跳转，我们把超链接的 <code>href</code> 修改为 <code>javascript:;</code> 就不会发生跳转了。</p>\n<p>事件给谁绑定的，function 中的 this 就是谁。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ul.onclick = function() &#123;</span><br><span class=\"line\">    alert(this);</span><br><span class=\"line\">    alert(&quot;我是一个响应函数。&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>像这一个，第一个 <code>alert</code> 输出的就是 <code>[object HTMLUListElement]</code>。<br>但是事件绑定对象不等于事件触发对象，我们如果想要获得事件<strong>触发对象</strong>需要使用 <code>event.target</code> 属性。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;title&gt;</span><br><span class=\"line\">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">        &lt;title&gt;this is a test.&lt;/title&gt;</span><br><span class=\"line\">    &lt;/title&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;script&gt;</span><br><span class=\"line\">            window.onload = function() &#123;</span><br><span class=\"line\">                var btn1 = document.getElementById(&quot;btn1&quot;);</span><br><span class=\"line\">                var ul = document.getElementsByTagName(&quot;ul&quot;)[0];</span><br><span class=\"line\">                btn1.onclick = function() &#123;</span><br><span class=\"line\">                    var li = document.createElement(&quot;li&quot;);</span><br><span class=\"line\">                    li.innerHTML = &quot;&lt;a href=&#x27;javascript:;&#x27; class=&#x27;link&#x27;&gt;新建的超链接&lt;/a&gt;&quot;</span><br><span class=\"line\">                    ul.appendChild(li);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                ul.onclick = function(event) &#123;</span><br><span class=\"line\">                    if (event.target.className == &#x27;link&#x27;) &#123;</span><br><span class=\"line\">                        alert(&quot;这是一个响应函数&quot;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &lt;/script&gt;</span><br><span class=\"line\">        &lt;button id=&quot;btn1&quot;&gt;我是一个按钮&lt;/button&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">            &lt;li&gt;&lt;a href=&quot;javascript:;&quot; class=&quot;link&quot;&gt;这是一个超链接&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">            &lt;li&gt;&lt;a href=&quot;javascript:;&quot; class=&quot;link&quot;&gt;这是一个超链接&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">            &lt;li&gt;&lt;a href=&quot;javascript:;&quot; class=&quot;link&quot;&gt;这是一个超链接&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">        &lt;/ul&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>使用 <code>对象.事件 = 函数</code> 的形式绑定响应函数，它只能同时为一个事件绑定一个响应函数，不能绑定多个，如果绑定了多个，那么后面的就会覆盖掉前面的。<br>我们可以使用 <code>addEventListener(xxx, xxx, xxx)</code> 为元素绑定响应函数。<br>它的参数：</p>\n<ol>\n<li>事件的字符串，如果是 onclick 不要前面的 on</li>\n<li>回调函数，当事件被触发时，该函数会被调用。</li>\n<li>是否在捕获阶段触发，需要布尔值，一般是 false</li>\n</ol>\n<p>JavaScript中的call()函数是用于调用函数的方法之一，它允许你显式地指定函数内部的this关键字，并传递参数给该函数。call()方法的语法如下：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">functionName.call(thisArg, arg1, arg2, ...);</span><br></pre></td></tr></table></figure><br>总之，call()方法是JavaScript中用于在指定上下文对象上调用函数的强大工具，它允许你更灵活地控制函数的执行环境。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;title&gt;</span><br><span class=\"line\">        &lt;meta charset=&quot;UFT-8&quot;&gt;</span><br><span class=\"line\">        this is a test.</span><br><span class=\"line\">    &lt;/title&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;style&gt;</span><br><span class=\"line\">            #box1 &#123;</span><br><span class=\"line\">                width: 100px;</span><br><span class=\"line\">                height: 100px;</span><br><span class=\"line\">                background-color: red;</span><br><span class=\"line\">                position: absolute;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &lt;/style&gt;</span><br><span class=\"line\">        &lt;script&gt;</span><br><span class=\"line\">            window.onload = function() &#123;</span><br><span class=\"line\">                var box1 = document.getElementById(&quot;box1&quot;);</span><br><span class=\"line\">                box1.onmousedown = function(event) &#123;</span><br><span class=\"line\">                    var offsetX = event.clientX - box1.offsetLeft;</span><br><span class=\"line\">                    var offsetY = event.clientY - box1.offsetTop;</span><br><span class=\"line\">                    document.onmousemove = function(event) &#123;</span><br><span class=\"line\">                        var x = event.clientX;</span><br><span class=\"line\">                        var y = event.clientY;</span><br><span class=\"line\">                        box1.style.left = x - offsetX + &quot;px&quot;;</span><br><span class=\"line\">                        box1.style.top = y - offsetY + &quot;px&quot;;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    document.onmouseup = function() &#123;</span><br><span class=\"line\">                        document.onmousemove = null;</span><br><span class=\"line\">                        document.onmouseup = null;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &lt;/script&gt;</span><br><span class=\"line\">        &lt;div id=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>实现一个小方块位置的拖拽。</p>\n<p>键盘事件一般都会绑定给可以获取到焦点的对象或者是 <code>document</code> 对象。对于 <code>onkeydown</code> 事件来说，如果我们一直按着某个按键不松手，则事件就会一直触发。当 <code>onkeydown</code> 连续触发时，第一次和第二次之间的间隔会长一点，其他后面的会非常快，这是为了防止我们误操作。</p>\n<p>我们可以使用 <code>event</code> 的 <code>keyCode</code> 属性可以返回被按下键的 <code>Unicode</code> 编码。或者使用 <code>key</code> 属性直接返回被按键的按键。<br>如果判断 <code>alt</code> 或者 <code>ctrl</code> 或者 <code>shift</code> 和某个键是否同时被按下，可以同时使用 <code>event</code> 的 <code>altKey、shiftKey、ctrlKey</code> 属性和 <code>key</code> 属性。</p>\n<p>BOM browser object model 浏览器对象模型<br>BOM 可以使我们通过 JS 来操作浏览器，DOM 可以使我们通过 JS 来操作网页。<br><img src=\"/2023/08/28/JavaScript%E5%9F%BA%E7%A1%80/bom%E5%AF%B9%E8%B1%A1.png\" class=\"\"></p>\n<p><code>uerAgent</code> 用户代理，通常指的是浏览器，其中 <code>navigator</code> 的属性 <code>userAgent</code> 是一个字符串，包含用来描述浏览器的内容，不同的浏览器有着不同的 userAgent</p>\n<p>Gecko CSS 渲染的一个引擎。</p>\n<p><code>history</code> 对象 <code>length</code> 属性，返回浏览器历史列表中 url 数量。<br>方法：<code>back</code> 加载 <code>history</code> 列表中前一个 url，<code>forward</code> 加载 <code>history</code> 列表中下一个 url，<code>go(xx)</code> 加载列表中某一个具体的页面，xx 如果是正，就是前多少个，如果是负，就是加载后面第xx个页面。</p>\n<p><code>location</code> 对象<br>如果直接打印 <code>location</code> 可以获取当前的地址栏，也就是网页的完整路径。如果直接将 <code>location</code> 修改为一个路径，就会直接跳转到那个页面。</p>\n<p><code>window</code> 的 <code>setInterval</code> 方法。(Interval 是 间隔、中场休息、幕间休息、间隙 的意思)</p>\n<ul>\n<li>定时调用</li>\n<li>可以将一个函数，每隔一段时间执行一次</li>\n<li>参数：<ol>\n<li>回调函数</li>\n<li>每次调用的时间间隔，单位是毫秒</li>\n</ol>\n</li>\n<li>返回值：<br>  返回一个 Number 类型的数据<br>  这个数字用来作为定时器的唯一标识(因为一个页面上可能有很多个定时器)<br>  比如我们的 <code>clearInterval(xx)</code> 方法，可以用来关闭一个定时器，其中的 <code>xx</code> 就需要我们的标识作为参数。  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setInterval(function() &#123;</span><br><span class=\"line\">    xxx.innerHTML = ++count;</span><br><span class=\"line\">&#125;, 1000);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>延时调用：一个函数不是马上执行，而是一段时间之后再执行(只会执行一次)。<br>用法和定时调用差不多 <code>setTimeout(xxx);</code><br><code>clearTimeout(xxx);</code> 是关闭延时调用。</p>\n<p>延时调用其实和定时调用是可以互相代替的。</p>\n<p>JSON(JavaScript Object Notation)<br>因为和 JavaScript 中对象的表示方法一样，只不过在 JSON 中属性名字必须加双引号。<br>JSON 分类：</p>\n<ol>\n<li>对象 <code>&#123;&#125;</code></li>\n<li>数组 <code>[]</code></li>\n</ol>\n<p>在 JS 中，为我们提供了一个工具类就叫做 JSON，这个对象可以帮助我们将一个 JSON 转换为 JS 对象，也可以将一个 JS 对象转换为 JSON。<br><code>JSON.parse(xx);</code></p>\n<ul>\n<li>将字符串转换为 JS 对象</li>\n<li>需要一个 JSON 字符串作为参数，返回一个 JS 对象</li>\n</ul>\n<p><code>JSON.stringfy();</code></p>\n<ul>\n<li>将 JS 对象转换为字符串</li>\n<li>需要一个 JS 对象作为参数，但会一个 JSON 字符串。</li>\n</ul>\n<p><code>===</code> 是严格相等的意思，它用于比较两个值是否完全相等，包括值和数据类型。<br>使用严格相等运算符是 JavaScript 编程中的一种良好实践，因为它可以减少潜在的错误和不确定性，确保比较的值具有相同的类型和值。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>变量的声明就是 <code>var name = xxx;</code>。其中 <code>var</code> 是 <code>variable</code> 的缩写（虽然和方差 variance 的缩写一样）。</p>\n<p>在 JS 中使用 {} 来分块，同一个 {} 中的语句我们称之为一组语句，它们要么都执行，要么都不执行。</p>\n<p>其实函数也是一个对象，可以如下定义一个函数：<code>f = new Function(&quot;console.log(&#39;this is a function. &#39;)&quot;)</code>。但是一般不这么使用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">    name: &#x27;lys&#x27;,</span><br><span class=\"line\">    age: 19,</span><br><span class=\"line\">    address: &#x27;SDU&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for (var x in obj) &#123;</span><br><span class=\"line\">    console.log(x); // 这样只是枚举的对象中的元素名字</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for (var x in obj)&#123;</span><br><span class=\"line\">    console.log(obj[x]); // 不能直接 obj.x 来获得具体元素，应用 [] 的引用方式。</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>数组创建 <code>var arr = new Array()</code> 或者 <code>var arr = []</code>。但是一般不使用 <code>new Array()</code> 的创建方式。并且数组中的元素类型也是不一定的，不一定非要是 Number 类型的。<br>其实数组也是一个对象，只不过索引方式是 []，所以对象有的东西数组也有。</p>\n<p>数组既然是对象，就有方法，在 JS 中数组有一些常用的方法：</p>\n<ol>\n<li><code>push()</code> 向数组末尾添加一个或者多个元素，并且返回新的数组的长度。</li>\n<li><code>pop()</code> 从数组末尾删除一个元素，并且返回删除的元素。</li>\n<li><code>unshift()</code> 向数组的<strong>开头</strong>添加一个或者多个元素，并且返回新的数组的长度。</li>\n<li><code>shift()</code> 从数组开头删除一个元素，并且返回删除的元素。</li>\n<li><code>join()</code> 将所有的元素连接成一个字符串。</li>\n<li><code>slice()</code> 返回数组的一部分，不修改原数组。</li>\n</ol>\n<p>建立函数<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function xxx() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果是构造函数<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person = new Person();</span><br></pre></td></tr></table></figure><br>如果不写前面的 function 直接 new，会出现错误。</p>\n<p>arr.forEach(xx) 中间 xx 都要传递一个函数，如果之前定义了 <code>function fun() &#123;&#125;</code> 就写为 <code>arr.forEach(fun)</code>，但是一般不这样，一般都是用匿名函数。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1, 2, 3];</span><br><span class=\"line\">arr.forEach(function(a, b, c) &#123;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><br>上面就是输出 a，遍历的时候会将 arr 中的元素传递给 function。<br>会传递三个参数，第一个是数组当前遍历到元素 value，第二个是当前遍历到的索引 index，第三个是正在遍历的数组。</p>\n<p>函数在调用的时候，浏览器会向里面传递两个隐含的参数</p>\n<ol>\n<li>上下文对象的 this</li>\n<li>封装实参的类数组对象 arguments，在调用函数的时候，我们所传递的实参都会在 arguments 中保存。</li>\n</ol>\n<p>在 JS 中，对象有 3 类<br><img src=\"/2023/08/28/JavaScript%E5%9F%BA%E7%A1%80/%E5%AF%B9%E8%B1%A1.png\" class=\"\"><br>DOM Document Object Model<br>JS 通过 DOM 对于 HTML 文档进行操作，只要理解了 DOM，就可以随心所欲操作 WEB 页面。</p>\n<p>节点 Node 是构成 HTML 文档的最基本的单元，常用节点分为四类</p>\n<ul>\n<li>文档节点 整个 HTML 文档</li>\n<li>元素节点 HTML 文档中的 HTML 标签</li>\n<li>属性节点 元素的属性</li>\n<li>文本节点 HTML 标签中的文本<img src=\"/2023/08/28/JavaScript%E5%9F%BA%E7%A1%80/%E8%8A%82%E7%82%B9.png\" class=\"\">\n</li>\n</ul>\n<img src=\"/2023/08/28/JavaScript%E5%9F%BA%E7%A1%80/%E8%8A%82%E7%82%B9%E7%9A%84%E5%B1%9E%E6%80%A7.png\" class=\"\">\n<p>上面的三个属性是每一个节点都有的三个属性。</p>\n<p>innerHTML 可以获得到文字</p>\n<p>事件就是文档或浏览器窗口中发生的一些特定的交互瞬间。JavaScript 与 HTML 之间的交互是通过事件实现的。比如对于 Web 应用来说，有下面一些有代表性的事件：点击某个元素、将鼠标移动至某个元素上方、按下键盘上某个键等等。</p>\n<p><code>onload</code> 事件会在整个页面加载完成之后发生。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.onload= function() &#123;</span><br><span class=\"line\">    xxx</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>这一段代码是页面加载完成之后执行的。</p>\n<p>标签就是元素，元素就是标签。</p>\n<img src=\"/2023/08/28/JavaScript%E5%9F%BA%E7%A1%80/%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0%E8%8A%82%E7%82%B9.png\" class=\"\">\n<p>innerHTML 对于「自结束标签」没有意义。如：<br><img src=\"/2023/08/28/JavaScript%E5%9F%BA%E7%A1%80/%E8%87%AA%E7%BB%93%E6%9D%9F%E6%A0%87%E7%AD%BE.png\" class=\"\"><br>如果想读取元素的属性，直接 <code>元素.属性名</code>。但是读取元素的 <code>class</code> 属性的时候不能直接 <code>元素.class</code> 因为 class 是 JS 中的保留字，应该写为 <code>元素.className</code></p>\n<img src=\"/2023/08/28/JavaScript%E5%9F%BA%E7%A1%80/%E6%9F%A5%E6%89%BE%E5%AD%90%E8%8A%82%E7%82%B9.png\" class=\"\">\n<p>但是 <code>childNodes</code> 有个缺陷，此时如果我们使用 <code>children</code> 就不会出现这种问题了，它返回的是当前元素的所有子元素。<br><img src=\"/2023/08/28/JavaScript%E5%9F%BA%E7%A1%80/childnodes%E7%BC%BA%E9%99%B7.png\" class=\"\"></p>\n<p><code>innerText</code> 和 <code>innerHTML</code> 类似，但是 <code>innerText</code> 获取的会将 html 标签去除。</p>\n<img src=\"/2023/08/28/JavaScript%E5%9F%BA%E7%A1%80/%E8%8E%B7%E5%8F%96%E5%85%84%E5%BC%9F%E8%8A%82%E7%82%B9.png\" class=\"\">\n<p><code>getElementsByName()</code> 一般用来操作一些表单项目。 </p>\n<p>获取 <code>body</code> 标签的话有两种方式：</p>\n<ol>\n<li><code>var body = document.getElementsByTagName()[0];</code> 因为 <code>getElementsByTagName()</code> 返回的是一个集合 <code>Collection</code>，但是我们又只有一个 <code>body</code>，所以直接返回索引 0 就可以了。</li>\n<li>其实在 <code>document</code> 中就有一个属性 <code>body</code>，我们直接 <code>var body = document.body;</code> 就可以了。</li>\n</ol>\n<p><code>html</code> 元素是 <code>document.documentElement;</code></p>\n<p><code>document.all</code> 代表的是页面的所有元素。也可以写成 <code>document.getElementsByTagName(&quot;*&quot;)</code></p>\n<p><code>document.getElementsByClassName();</code> 可以根据元素的 <code>class</code> 属性值获取一组节点对象。</p>\n<p><code>document.querySelector();</code> 需要一个选择器字符串作为参数，可以根据一个 CSS 选择器来查询一个元素节点对象。但是使用这个方法只会返回唯一的一个元素，如果满足条件的元素有多个，但是只会返回第一个。如果需要多个就使用 <code>document.querySelectorAll();</code></p>\n<p><code>父节点.insertBefore(新节点, 旧节点)</code> 是在旧节点前面添加新节点。</p>\n<p>超链接点击以后会默认跳转页面，如果我们不希望出现此默认行为，我们可以在超链接的 <code>onclick = function() &#123;&#125;</code> 中写上 <code>return false;</code></p>\n<p><code>confirm()</code> 函数会弹出一个带有确定和取消两个按键的提示框，并且如果我们点击确定，会返回 true，如果点击取消，会返回 false。</p>\n<img src=\"/2023/08/28/JavaScript%E5%9F%BA%E7%A1%80/%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.png\" class=\"\">\n<p>一个比较细节容易忽视的点，直观上我们认为 this 和 allA[i] 是一样的。<br>图中，我们的 <code>onclick = function() &#123;&#125;</code> 可以认为只是函数之间的一个赋值，里面的内容并没有执行。只有我们在点击按钮的时候，<code>function</code> 里面的内容才会执行。如果我们 <code>function</code> 里面使用 <code>allA[i]</code>，等到我们点击的时候 for 循环早就已经执行完毕，此时的 i 必然是 all 的length，所以就会出现错误。我们正确的做法应该是将 function 里面的 allA[i] 改为 this。</p>\n<p>通过 JS 修改元素的样式：<code>元素.style.样式名 = 样式值</code> 其中样式值需要是一个字符串。<br>注意，如果 CSS 样式名称中含有 <code>-</code>，如 <code>background-color</code> 这种命名在 JS 中是不合法的，我们需要将这种命名改为驼峰命名法，去掉 <code>-</code>，然后将 <code>-</code> 的字母大写。</p>\n<p>通过 JS 的 style 修改的往往是内联样式，而内联样式有较高的优先级，所以通过 JS 修改的样式往往会立即显示。</p>\n<p>事件对象：<br>当事件的响应函数被触发的时候，浏览器每次会将一个事件对象作为实参传递进响应函数。在事件对象中封装了当前关于事件的一切信息，比如鼠标的坐标、键盘的哪一个按键被按下、鼠标滚轮的移动方向</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">        &lt;title&gt;</span><br><span class=\"line\">            this is a title.</span><br><span class=\"line\">        &lt;/title&gt;</span><br><span class=\"line\">        &lt;script&gt;</span><br><span class=\"line\">            window.onload = function() &#123;</span><br><span class=\"line\">                var box1 = document.getElementById(&quot;box1&quot;);</span><br><span class=\"line\">                document.onmousemove = function(event) &#123;</span><br><span class=\"line\">                    var clientX = event.clientX;</span><br><span class=\"line\">                    var clientY = event.clientY;</span><br><span class=\"line\">                    box1.style.left = clientX + &quot;px&quot;;</span><br><span class=\"line\">                    box1.style.top = clientY + &quot;px&quot;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &lt;/script&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;style&gt;</span><br><span class=\"line\">            #box1 &#123;</span><br><span class=\"line\">                width: 100px;</span><br><span class=\"line\">                height: 100px;</span><br><span class=\"line\">                background-color: red;</span><br><span class=\"line\">                position: absolute;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &lt;/style&gt;</span><br><span class=\"line\">        &lt;box id=&quot;box1&quot;&gt;&lt;/box&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p><code>clientX</code> 和 <code>clientY</code> 是用于我们鼠标在当前可见窗口的坐标，所以对于有滚动条的窗口的话可能会出现一些错误。所以我们这时候使用 <code>pageX</code> 和 <code>pageY</code> 这两和属性是相对于整个页面的。</p>\n<img src=\"/2023/08/28/JavaScript%E5%9F%BA%E7%A1%80/document%E5%92%8Cwindow.png\" class=\"\">\n<p>事件的冒泡(bubble)<br>所谓事件的冒泡就是事件的想上传导，当后代元素上的事件被触发时，其祖先元素的相同事件也会被触发。在开发中，大部分情况冒泡是有用的，如果不希望发生事件冒泡可以通过事件对象来取消冒泡。<br><code>event.cancelBubble = true;</code></p>\n<p>我们希望只绑定一次事件，即可应用到多个元素之上，即使元素是后来添加的。我们可以尝试将元素绑定给其共同的祖先元素。然后通过冒泡来实现事件的发生。这其实就是事件的「委派」。</p>\n<p><code>document.getElementsByTagName();</code> 返回的不是一个数组（一个NodeList对象，指定标签名的集合 collection），虽然我们可以遍历，它也有长度。</p>\n<p>点击超链接时会自动默认跳转，我们把超链接的 <code>href</code> 修改为 <code>javascript:;</code> 就不会发生跳转了。</p>\n<p>事件给谁绑定的，function 中的 this 就是谁。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ul.onclick = function() &#123;</span><br><span class=\"line\">    alert(this);</span><br><span class=\"line\">    alert(&quot;我是一个响应函数。&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>像这一个，第一个 <code>alert</code> 输出的就是 <code>[object HTMLUListElement]</code>。<br>但是事件绑定对象不等于事件触发对象，我们如果想要获得事件<strong>触发对象</strong>需要使用 <code>event.target</code> 属性。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;title&gt;</span><br><span class=\"line\">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">        &lt;title&gt;this is a test.&lt;/title&gt;</span><br><span class=\"line\">    &lt;/title&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;script&gt;</span><br><span class=\"line\">            window.onload = function() &#123;</span><br><span class=\"line\">                var btn1 = document.getElementById(&quot;btn1&quot;);</span><br><span class=\"line\">                var ul = document.getElementsByTagName(&quot;ul&quot;)[0];</span><br><span class=\"line\">                btn1.onclick = function() &#123;</span><br><span class=\"line\">                    var li = document.createElement(&quot;li&quot;);</span><br><span class=\"line\">                    li.innerHTML = &quot;&lt;a href=&#x27;javascript:;&#x27; class=&#x27;link&#x27;&gt;新建的超链接&lt;/a&gt;&quot;</span><br><span class=\"line\">                    ul.appendChild(li);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                ul.onclick = function(event) &#123;</span><br><span class=\"line\">                    if (event.target.className == &#x27;link&#x27;) &#123;</span><br><span class=\"line\">                        alert(&quot;这是一个响应函数&quot;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &lt;/script&gt;</span><br><span class=\"line\">        &lt;button id=&quot;btn1&quot;&gt;我是一个按钮&lt;/button&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">            &lt;li&gt;&lt;a href=&quot;javascript:;&quot; class=&quot;link&quot;&gt;这是一个超链接&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">            &lt;li&gt;&lt;a href=&quot;javascript:;&quot; class=&quot;link&quot;&gt;这是一个超链接&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">            &lt;li&gt;&lt;a href=&quot;javascript:;&quot; class=&quot;link&quot;&gt;这是一个超链接&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">        &lt;/ul&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>使用 <code>对象.事件 = 函数</code> 的形式绑定响应函数，它只能同时为一个事件绑定一个响应函数，不能绑定多个，如果绑定了多个，那么后面的就会覆盖掉前面的。<br>我们可以使用 <code>addEventListener(xxx, xxx, xxx)</code> 为元素绑定响应函数。<br>它的参数：</p>\n<ol>\n<li>事件的字符串，如果是 onclick 不要前面的 on</li>\n<li>回调函数，当事件被触发时，该函数会被调用。</li>\n<li>是否在捕获阶段触发，需要布尔值，一般是 false</li>\n</ol>\n<p>JavaScript中的call()函数是用于调用函数的方法之一，它允许你显式地指定函数内部的this关键字，并传递参数给该函数。call()方法的语法如下：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">functionName.call(thisArg, arg1, arg2, ...);</span><br></pre></td></tr></table></figure><br>总之，call()方法是JavaScript中用于在指定上下文对象上调用函数的强大工具，它允许你更灵活地控制函数的执行环境。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;title&gt;</span><br><span class=\"line\">        &lt;meta charset=&quot;UFT-8&quot;&gt;</span><br><span class=\"line\">        this is a test.</span><br><span class=\"line\">    &lt;/title&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;style&gt;</span><br><span class=\"line\">            #box1 &#123;</span><br><span class=\"line\">                width: 100px;</span><br><span class=\"line\">                height: 100px;</span><br><span class=\"line\">                background-color: red;</span><br><span class=\"line\">                position: absolute;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &lt;/style&gt;</span><br><span class=\"line\">        &lt;script&gt;</span><br><span class=\"line\">            window.onload = function() &#123;</span><br><span class=\"line\">                var box1 = document.getElementById(&quot;box1&quot;);</span><br><span class=\"line\">                box1.onmousedown = function(event) &#123;</span><br><span class=\"line\">                    var offsetX = event.clientX - box1.offsetLeft;</span><br><span class=\"line\">                    var offsetY = event.clientY - box1.offsetTop;</span><br><span class=\"line\">                    document.onmousemove = function(event) &#123;</span><br><span class=\"line\">                        var x = event.clientX;</span><br><span class=\"line\">                        var y = event.clientY;</span><br><span class=\"line\">                        box1.style.left = x - offsetX + &quot;px&quot;;</span><br><span class=\"line\">                        box1.style.top = y - offsetY + &quot;px&quot;;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    document.onmouseup = function() &#123;</span><br><span class=\"line\">                        document.onmousemove = null;</span><br><span class=\"line\">                        document.onmouseup = null;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &lt;/script&gt;</span><br><span class=\"line\">        &lt;div id=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>实现一个小方块位置的拖拽。</p>\n<p>键盘事件一般都会绑定给可以获取到焦点的对象或者是 <code>document</code> 对象。对于 <code>onkeydown</code> 事件来说，如果我们一直按着某个按键不松手，则事件就会一直触发。当 <code>onkeydown</code> 连续触发时，第一次和第二次之间的间隔会长一点，其他后面的会非常快，这是为了防止我们误操作。</p>\n<p>我们可以使用 <code>event</code> 的 <code>keyCode</code> 属性可以返回被按下键的 <code>Unicode</code> 编码。或者使用 <code>key</code> 属性直接返回被按键的按键。<br>如果判断 <code>alt</code> 或者 <code>ctrl</code> 或者 <code>shift</code> 和某个键是否同时被按下，可以同时使用 <code>event</code> 的 <code>altKey、shiftKey、ctrlKey</code> 属性和 <code>key</code> 属性。</p>\n<p>BOM browser object model 浏览器对象模型<br>BOM 可以使我们通过 JS 来操作浏览器，DOM 可以使我们通过 JS 来操作网页。<br><img src=\"/2023/08/28/JavaScript%E5%9F%BA%E7%A1%80/bom%E5%AF%B9%E8%B1%A1.png\" class=\"\"></p>\n<p><code>uerAgent</code> 用户代理，通常指的是浏览器，其中 <code>navigator</code> 的属性 <code>userAgent</code> 是一个字符串，包含用来描述浏览器的内容，不同的浏览器有着不同的 userAgent</p>\n<p>Gecko CSS 渲染的一个引擎。</p>\n<p><code>history</code> 对象 <code>length</code> 属性，返回浏览器历史列表中 url 数量。<br>方法：<code>back</code> 加载 <code>history</code> 列表中前一个 url，<code>forward</code> 加载 <code>history</code> 列表中下一个 url，<code>go(xx)</code> 加载列表中某一个具体的页面，xx 如果是正，就是前多少个，如果是负，就是加载后面第xx个页面。</p>\n<p><code>location</code> 对象<br>如果直接打印 <code>location</code> 可以获取当前的地址栏，也就是网页的完整路径。如果直接将 <code>location</code> 修改为一个路径，就会直接跳转到那个页面。</p>\n<p><code>window</code> 的 <code>setInterval</code> 方法。(Interval 是 间隔、中场休息、幕间休息、间隙 的意思)</p>\n<ul>\n<li>定时调用</li>\n<li>可以将一个函数，每隔一段时间执行一次</li>\n<li>参数：<ol>\n<li>回调函数</li>\n<li>每次调用的时间间隔，单位是毫秒</li>\n</ol>\n</li>\n<li>返回值：<br>  返回一个 Number 类型的数据<br>  这个数字用来作为定时器的唯一标识(因为一个页面上可能有很多个定时器)<br>  比如我们的 <code>clearInterval(xx)</code> 方法，可以用来关闭一个定时器，其中的 <code>xx</code> 就需要我们的标识作为参数。  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setInterval(function() &#123;</span><br><span class=\"line\">    xxx.innerHTML = ++count;</span><br><span class=\"line\">&#125;, 1000);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>延时调用：一个函数不是马上执行，而是一段时间之后再执行(只会执行一次)。<br>用法和定时调用差不多 <code>setTimeout(xxx);</code><br><code>clearTimeout(xxx);</code> 是关闭延时调用。</p>\n<p>延时调用其实和定时调用是可以互相代替的。</p>\n<p>JSON(JavaScript Object Notation)<br>因为和 JavaScript 中对象的表示方法一样，只不过在 JSON 中属性名字必须加双引号。<br>JSON 分类：</p>\n<ol>\n<li>对象 <code>&#123;&#125;</code></li>\n<li>数组 <code>[]</code></li>\n</ol>\n<p>在 JS 中，为我们提供了一个工具类就叫做 JSON，这个对象可以帮助我们将一个 JSON 转换为 JS 对象，也可以将一个 JS 对象转换为 JSON。<br><code>JSON.parse(xx);</code></p>\n<ul>\n<li>将字符串转换为 JS 对象</li>\n<li>需要一个 JSON 字符串作为参数，返回一个 JS 对象</li>\n</ul>\n<p><code>JSON.stringfy();</code></p>\n<ul>\n<li>将 JS 对象转换为字符串</li>\n<li>需要一个 JS 对象作为参数，但会一个 JSON 字符串。</li>\n</ul>\n<p><code>===</code> 是严格相等的意思，它用于比较两个值是否完全相等，包括值和数据类型。<br>使用严格相等运算符是 JavaScript 编程中的一种良好实践，因为它可以减少潜在的错误和不确定性，确保比较的值具有相同的类型和值。</p>\n"},{"title":"JavaScript进阶","date":"2023-08-31T08:08:47.000Z","description":"The key record of JavaScript advance.","_content":"#### 基础回顾\n数据类型：\n1. 基本类型\n    String Number boolean undefined null\n2. 对象(引用)类型\n    Object Function Array\n\n判断：\n1. `typeof`\n    返回的数据类型的字符串表达\n2. `instanceof`\n3. `===` 和 `==`\n\n```\nfunction Person(name, age) { // 这是一个 **类型对象**，因为函数也是一个对象。\n    this.name = name;\n    this.age = age;\n}\nvar p = new Person(); // 这是一个实例对象。\n```\n`null` 和 `undefined` \n`null` 定义了并且赋值了，只是值为 `null`，而 `undefined` 是定义了但是没有赋值。初始赋值为 `null` 表示将要是一个对象。程序的最后赋值为 `null` 可以释放内存。\n\n栈：全局变量 / 局部变量\n堆：对象\n(对象本身在栈里面，而表示对象的变量在栈空间，比如函数和函数名的关系)\n\nJS 在调用函数传递变量的时候是 **值传递**（理解可能不同）\n```\nvar a = 3;\nfunction add(a) {\n    a = a + 1;\n}\nconsole.log(a); // 程序输出为 3\n```\n\n```\nfunction fn() {\n    var b = {};\n}\n```\n函数执行完以后 `b` 这个局部变量会自动释放，而后面对应的对象因为没有再被指向，被认为是垃圾对象，是在后面的某个时刻由垃圾回收器回收，释放空间。\n```\nvar a = 3;\nvar b = {};\nb = null;\n```\n`b=null;` 以后，`b` 所指向的对象没有被任何其他变量指向，所以会被标记为垃圾对象，由 `JS` 引擎在一定时间后回收，而 `b` 这个全局变量仍然存在。\n在`JavaScript`中，全局变量通常在整个应用程序的生命周期内存在，不会自动释放内存。`JavaScript` 引擎会负责管理全局变量的内存，而不需要手动释放。当全局变量不再被引用时，`JavaScript`引擎会自动将其标记为可回收，并在适当的时候进行垃圾回收以释放内存。\n`JavaScript` 的垃圾回收机制主要处理对象的内存释放，而不负责释放变量的内存。变量的生命周期通常由其作用域决定。在全局作用域中声明的变量通常会在整个应用程序的生命周期内存在，除非您显式删除它们或应用程序终止。在局部作用域中声明的变量在离开作用域时会被销毁，相应的内存也会被释放。\n\n什么时候必须使用 `['属性名']` 的方式？\n1. 属性名包含特殊字符：如`-` 和 ` `。\n2. 使用表达式来动态访问属性\n```\nvar person = {\n    name: \"John\",\n    age: 30\n};\n\nvar propertyName = \"name\";\nconsole.log(person[propertyName]); // 使用方括号来访问属性\n```\n\n`test.call/apply(obj);` 这个意思是把 `test` 函数临时作为 `obj` 内部的函数来调用。`obj` 内部可以没有 `test` 函数。\n\n`JavaScript` 中的回调函数是一种常见的编程概念，它允许您将一个函数作为参数传递给另一个函数，并在需要时执行该函数。这通常用于处理异步操作，例如处理文件读取、网络请求、定时器等等，因为在这些情况下，不能立即得到结果，而需要在操作完成后执行特定的代码。\n\nIIFE(Immediately-Invoked Function Expression)\n\n`this` 是什么？\n- 任何函数本质上都是通过某个对象来调用，如果我们没有直接指定，就是 `window` 来调用。\n- 所有函数内部都以一个变量 `this`。\n- 这个 `this` 的值是当前调用函数的对象。\n\n在`JavaScript`中声明的全局函数通常是`window`对象的一部分，而不是`document`对象的一部分，这是因为`JavaScript`最初是为浏览器环境设计的，并且全局作用域在浏览器中通常与`window`对象关联。\n\n在浏览器环境中，`window`对象代表整个浏览器窗口，它包含了全局`JavaScript`作用域的所有内容，包括全局变量和函数。当您声明一个全局函数时，它实际上是`window`对象的一个属性。这意味着您可以在全局范围内访问这个函数，无需任何其他前缀。\n\n#### JS 原型和原型链\nJS 的复杂类型都是对象类型(`Object`)，而 JS 不是一门完全面向对象的编程语言，所以如何涉及继承机制，这是一个问题。\n\n##### 构造函数\n因为 JS 中没有类(`Class`)这个概念，所以 JS 的设计者使用了 **构造函数** 来实现继承机制。\n> ES6 中的 `Class` 可以看成一个语法糖，它的绝大部分功能，ES5 都可以做到，新的 `Class` 写法只是让原型的写法更加清晰、更像面向对象编程的语言而已。\n\n在构造函数中，通过 `this` 赋值的属性或者方法，是每个实例的 **实例属性** 和 **实例方法**，**无法共享公共属性**。所以就又设计出了一个**原型对象**，来存储这个**构造函数的公共属性以及方法**。\n\n##### 函数的 `prototype`(原型)  \n- 每一个函数都有一个 `prototype` 属性，它默认指向一个 `Object` 空实例对象(即称为：原型对象，但是 `Object` 不满足)。\n> 为什么要有这个空对象？\n> 它可以方便我们对于一个函数添加个性化的属性和方法，如果没有这个空对象而是直接链接到 Obejct，那么不同函数之间的个性化操作都会添加到 Obejct 下，会产生很多不必要的冲突和麻烦。\n- 原型对象中有一个属性 `constructor`，它指向函数对象。\n- 给原型对象添加属性(一般是方法) -> 实例对象可以访问使用。（感觉和类与对象的关系很像）\n构造函数和它的原型对象相互引用。\n每一个函数 `function` 都有一个 `prototype`，即显式原型(属性)\n每一个对象都有一个 `__proto__` 可以称为隐式原型(属性)\n对象隐式原型的值就是函数显式原型的值。\n\n##### 原型链\n- 访问一个对象的属性时，现在自身属性中查找，找到返回。\n- 如果没有，再沿着 `__proto__` 这条链向上查找，找到返回。\n- 如果最终没有找到，返回 `undefined`。\n- 一直是沿着隐式原型找的，所以我们的原型链本质上是一个 **隐式原型链**\n{%asset_img 原型.png%}\n{%asset_img 原型链.png%}\n所有函数的隐式原型都是相同的，`fun = new Function()` 都是 `Function` 的实例对象。\n- 在读取对象的属性时，会自动到原型链中查找。\n- 设置对象的属性时，不会查找原型链，如果当前对象中没有此属性，直接添加此属性并设置其值。\n- 方法一般定义在原型中，属性一般通过构造函数定义在对象本身上。\n\n\nTo do:\n利用js快速完成大学生新生安全教育课程\nhttps://blog.csdn.net/m0_38072683/article/details/118878085","source":"_posts/JavaScript进阶.md","raw":"---\ntitle: JavaScript进阶\ndate: 2023-08-31 16:08:47\ntags: JavaScript, WEB\ndescription: The key record of JavaScript advance.\n---\n#### 基础回顾\n数据类型：\n1. 基本类型\n    String Number boolean undefined null\n2. 对象(引用)类型\n    Object Function Array\n\n判断：\n1. `typeof`\n    返回的数据类型的字符串表达\n2. `instanceof`\n3. `===` 和 `==`\n\n```\nfunction Person(name, age) { // 这是一个 **类型对象**，因为函数也是一个对象。\n    this.name = name;\n    this.age = age;\n}\nvar p = new Person(); // 这是一个实例对象。\n```\n`null` 和 `undefined` \n`null` 定义了并且赋值了，只是值为 `null`，而 `undefined` 是定义了但是没有赋值。初始赋值为 `null` 表示将要是一个对象。程序的最后赋值为 `null` 可以释放内存。\n\n栈：全局变量 / 局部变量\n堆：对象\n(对象本身在栈里面，而表示对象的变量在栈空间，比如函数和函数名的关系)\n\nJS 在调用函数传递变量的时候是 **值传递**（理解可能不同）\n```\nvar a = 3;\nfunction add(a) {\n    a = a + 1;\n}\nconsole.log(a); // 程序输出为 3\n```\n\n```\nfunction fn() {\n    var b = {};\n}\n```\n函数执行完以后 `b` 这个局部变量会自动释放，而后面对应的对象因为没有再被指向，被认为是垃圾对象，是在后面的某个时刻由垃圾回收器回收，释放空间。\n```\nvar a = 3;\nvar b = {};\nb = null;\n```\n`b=null;` 以后，`b` 所指向的对象没有被任何其他变量指向，所以会被标记为垃圾对象，由 `JS` 引擎在一定时间后回收，而 `b` 这个全局变量仍然存在。\n在`JavaScript`中，全局变量通常在整个应用程序的生命周期内存在，不会自动释放内存。`JavaScript` 引擎会负责管理全局变量的内存，而不需要手动释放。当全局变量不再被引用时，`JavaScript`引擎会自动将其标记为可回收，并在适当的时候进行垃圾回收以释放内存。\n`JavaScript` 的垃圾回收机制主要处理对象的内存释放，而不负责释放变量的内存。变量的生命周期通常由其作用域决定。在全局作用域中声明的变量通常会在整个应用程序的生命周期内存在，除非您显式删除它们或应用程序终止。在局部作用域中声明的变量在离开作用域时会被销毁，相应的内存也会被释放。\n\n什么时候必须使用 `['属性名']` 的方式？\n1. 属性名包含特殊字符：如`-` 和 ` `。\n2. 使用表达式来动态访问属性\n```\nvar person = {\n    name: \"John\",\n    age: 30\n};\n\nvar propertyName = \"name\";\nconsole.log(person[propertyName]); // 使用方括号来访问属性\n```\n\n`test.call/apply(obj);` 这个意思是把 `test` 函数临时作为 `obj` 内部的函数来调用。`obj` 内部可以没有 `test` 函数。\n\n`JavaScript` 中的回调函数是一种常见的编程概念，它允许您将一个函数作为参数传递给另一个函数，并在需要时执行该函数。这通常用于处理异步操作，例如处理文件读取、网络请求、定时器等等，因为在这些情况下，不能立即得到结果，而需要在操作完成后执行特定的代码。\n\nIIFE(Immediately-Invoked Function Expression)\n\n`this` 是什么？\n- 任何函数本质上都是通过某个对象来调用，如果我们没有直接指定，就是 `window` 来调用。\n- 所有函数内部都以一个变量 `this`。\n- 这个 `this` 的值是当前调用函数的对象。\n\n在`JavaScript`中声明的全局函数通常是`window`对象的一部分，而不是`document`对象的一部分，这是因为`JavaScript`最初是为浏览器环境设计的，并且全局作用域在浏览器中通常与`window`对象关联。\n\n在浏览器环境中，`window`对象代表整个浏览器窗口，它包含了全局`JavaScript`作用域的所有内容，包括全局变量和函数。当您声明一个全局函数时，它实际上是`window`对象的一个属性。这意味着您可以在全局范围内访问这个函数，无需任何其他前缀。\n\n#### JS 原型和原型链\nJS 的复杂类型都是对象类型(`Object`)，而 JS 不是一门完全面向对象的编程语言，所以如何涉及继承机制，这是一个问题。\n\n##### 构造函数\n因为 JS 中没有类(`Class`)这个概念，所以 JS 的设计者使用了 **构造函数** 来实现继承机制。\n> ES6 中的 `Class` 可以看成一个语法糖，它的绝大部分功能，ES5 都可以做到，新的 `Class` 写法只是让原型的写法更加清晰、更像面向对象编程的语言而已。\n\n在构造函数中，通过 `this` 赋值的属性或者方法，是每个实例的 **实例属性** 和 **实例方法**，**无法共享公共属性**。所以就又设计出了一个**原型对象**，来存储这个**构造函数的公共属性以及方法**。\n\n##### 函数的 `prototype`(原型)  \n- 每一个函数都有一个 `prototype` 属性，它默认指向一个 `Object` 空实例对象(即称为：原型对象，但是 `Object` 不满足)。\n> 为什么要有这个空对象？\n> 它可以方便我们对于一个函数添加个性化的属性和方法，如果没有这个空对象而是直接链接到 Obejct，那么不同函数之间的个性化操作都会添加到 Obejct 下，会产生很多不必要的冲突和麻烦。\n- 原型对象中有一个属性 `constructor`，它指向函数对象。\n- 给原型对象添加属性(一般是方法) -> 实例对象可以访问使用。（感觉和类与对象的关系很像）\n构造函数和它的原型对象相互引用。\n每一个函数 `function` 都有一个 `prototype`，即显式原型(属性)\n每一个对象都有一个 `__proto__` 可以称为隐式原型(属性)\n对象隐式原型的值就是函数显式原型的值。\n\n##### 原型链\n- 访问一个对象的属性时，现在自身属性中查找，找到返回。\n- 如果没有，再沿着 `__proto__` 这条链向上查找，找到返回。\n- 如果最终没有找到，返回 `undefined`。\n- 一直是沿着隐式原型找的，所以我们的原型链本质上是一个 **隐式原型链**\n{%asset_img 原型.png%}\n{%asset_img 原型链.png%}\n所有函数的隐式原型都是相同的，`fun = new Function()` 都是 `Function` 的实例对象。\n- 在读取对象的属性时，会自动到原型链中查找。\n- 设置对象的属性时，不会查找原型链，如果当前对象中没有此属性，直接添加此属性并设置其值。\n- 方法一般定义在原型中，属性一般通过构造函数定义在对象本身上。\n\n\nTo do:\n利用js快速完成大学生新生安全教育课程\nhttps://blog.csdn.net/m0_38072683/article/details/118878085","slug":"JavaScript进阶","published":1,"updated":"2023-09-07T07:20:56.658Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szo200055oogc8pv0wep","content":"<h4 id=\"基础回顾\"><a href=\"#基础回顾\" class=\"headerlink\" title=\"基础回顾\"></a>基础回顾</h4><p>数据类型：</p>\n<ol>\n<li>基本类型<br> String Number boolean undefined null</li>\n<li>对象(引用)类型<br> Object Function Array</li>\n</ol>\n<p>判断：</p>\n<ol>\n<li><code>typeof</code><br> 返回的数据类型的字符串表达</li>\n<li><code>instanceof</code></li>\n<li><code>===</code> 和 <code>==</code></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name, age) &#123; // 这是一个 **类型对象**，因为函数也是一个对象。</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var p = new Person(); // 这是一个实例对象。</span><br></pre></td></tr></table></figure>\n<p><code>null</code> 和 <code>undefined</code><br><code>null</code> 定义了并且赋值了，只是值为 <code>null</code>，而 <code>undefined</code> 是定义了但是没有赋值。初始赋值为 <code>null</code> 表示将要是一个对象。程序的最后赋值为 <code>null</code> 可以释放内存。</p>\n<p>栈：全局变量 / 局部变量<br>堆：对象<br>(对象本身在栈里面，而表示对象的变量在栈空间，比如函数和函数名的关系)</p>\n<p>JS 在调用函数传递变量的时候是 <strong>值传递</strong>（理解可能不同）<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 3;</span><br><span class=\"line\">function add(a) &#123;</span><br><span class=\"line\">    a = a + 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(a); // 程序输出为 3</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fn() &#123;</span><br><span class=\"line\">    var b = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>函数执行完以后 <code>b</code> 这个局部变量会自动释放，而后面对应的对象因为没有再被指向，被认为是垃圾对象，是在后面的某个时刻由垃圾回收器回收，释放空间。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 3;</span><br><span class=\"line\">var b = &#123;&#125;;</span><br><span class=\"line\">b = null;</span><br></pre></td></tr></table></figure><br><code>b=null;</code> 以后，<code>b</code> 所指向的对象没有被任何其他变量指向，所以会被标记为垃圾对象，由 <code>JS</code> 引擎在一定时间后回收，而 <code>b</code> 这个全局变量仍然存在。<br>在<code>JavaScript</code>中，全局变量通常在整个应用程序的生命周期内存在，不会自动释放内存。<code>JavaScript</code> 引擎会负责管理全局变量的内存，而不需要手动释放。当全局变量不再被引用时，<code>JavaScript</code>引擎会自动将其标记为可回收，并在适当的时候进行垃圾回收以释放内存。<br><code>JavaScript</code> 的垃圾回收机制主要处理对象的内存释放，而不负责释放变量的内存。变量的生命周期通常由其作用域决定。在全局作用域中声明的变量通常会在整个应用程序的生命周期内存在，除非您显式删除它们或应用程序终止。在局部作用域中声明的变量在离开作用域时会被销毁，相应的内存也会被释放。</p>\n<p>什么时候必须使用 <code>[&#39;属性名&#39;]</code> 的方式？</p>\n<ol>\n<li>属性名包含特殊字符：如<code>-</code> 和 <code> </code>。</li>\n<li>使用表达式来动态访问属性<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = &#123;</span><br><span class=\"line\">    name: &quot;John&quot;,</span><br><span class=\"line\">    age: 30</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var propertyName = &quot;name&quot;;</span><br><span class=\"line\">console.log(person[propertyName]); // 使用方括号来访问属性</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><code>test.call/apply(obj);</code> 这个意思是把 <code>test</code> 函数临时作为 <code>obj</code> 内部的函数来调用。<code>obj</code> 内部可以没有 <code>test</code> 函数。</p>\n<p><code>JavaScript</code> 中的回调函数是一种常见的编程概念，它允许您将一个函数作为参数传递给另一个函数，并在需要时执行该函数。这通常用于处理异步操作，例如处理文件读取、网络请求、定时器等等，因为在这些情况下，不能立即得到结果，而需要在操作完成后执行特定的代码。</p>\n<p>IIFE(Immediately-Invoked Function Expression)</p>\n<p><code>this</code> 是什么？</p>\n<ul>\n<li>任何函数本质上都是通过某个对象来调用，如果我们没有直接指定，就是 <code>window</code> 来调用。</li>\n<li>所有函数内部都以一个变量 <code>this</code>。</li>\n<li>这个 <code>this</code> 的值是当前调用函数的对象。</li>\n</ul>\n<p>在<code>JavaScript</code>中声明的全局函数通常是<code>window</code>对象的一部分，而不是<code>document</code>对象的一部分，这是因为<code>JavaScript</code>最初是为浏览器环境设计的，并且全局作用域在浏览器中通常与<code>window</code>对象关联。</p>\n<p>在浏览器环境中，<code>window</code>对象代表整个浏览器窗口，它包含了全局<code>JavaScript</code>作用域的所有内容，包括全局变量和函数。当您声明一个全局函数时，它实际上是<code>window</code>对象的一个属性。这意味着您可以在全局范围内访问这个函数，无需任何其他前缀。</p>\n<h4 id=\"JS-原型和原型链\"><a href=\"#JS-原型和原型链\" class=\"headerlink\" title=\"JS 原型和原型链\"></a>JS 原型和原型链</h4><p>JS 的复杂类型都是对象类型(<code>Object</code>)，而 JS 不是一门完全面向对象的编程语言，所以如何涉及继承机制，这是一个问题。</p>\n<h5 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h5><p>因为 JS 中没有类(<code>Class</code>)这个概念，所以 JS 的设计者使用了 <strong>构造函数</strong> 来实现继承机制。</p>\n<blockquote>\n<p>ES6 中的 <code>Class</code> 可以看成一个语法糖，它的绝大部分功能，ES5 都可以做到，新的 <code>Class</code> 写法只是让原型的写法更加清晰、更像面向对象编程的语言而已。</p>\n</blockquote>\n<p>在构造函数中，通过 <code>this</code> 赋值的属性或者方法，是每个实例的 <strong>实例属性</strong> 和 <strong>实例方法</strong>，<strong>无法共享公共属性</strong>。所以就又设计出了一个<strong>原型对象</strong>，来存储这个<strong>构造函数的公共属性以及方法</strong>。</p>\n<h5 id=\"函数的-prototype-原型\"><a href=\"#函数的-prototype-原型\" class=\"headerlink\" title=\"函数的 prototype(原型)\"></a>函数的 <code>prototype</code>(原型)</h5><ul>\n<li>每一个函数都有一个 <code>prototype</code> 属性，它默认指向一个 <code>Object</code> 空实例对象(即称为：原型对象，但是 <code>Object</code> 不满足)。<blockquote>\n<p>为什么要有这个空对象？<br>它可以方便我们对于一个函数添加个性化的属性和方法，如果没有这个空对象而是直接链接到 Obejct，那么不同函数之间的个性化操作都会添加到 Obejct 下，会产生很多不必要的冲突和麻烦。</p>\n</blockquote>\n</li>\n<li>原型对象中有一个属性 <code>constructor</code>，它指向函数对象。</li>\n<li>给原型对象添加属性(一般是方法) -&gt; 实例对象可以访问使用。（感觉和类与对象的关系很像）<br>构造函数和它的原型对象相互引用。<br>每一个函数 <code>function</code> 都有一个 <code>prototype</code>，即显式原型(属性)<br>每一个对象都有一个 <code>__proto__</code> 可以称为隐式原型(属性)<br>对象隐式原型的值就是函数显式原型的值。</li>\n</ul>\n<h5 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h5><ul>\n<li>访问一个对象的属性时，现在自身属性中查找，找到返回。</li>\n<li>如果没有，再沿着 <code>__proto__</code> 这条链向上查找，找到返回。</li>\n<li>如果最终没有找到，返回 <code>undefined</code>。</li>\n<li>一直是沿着隐式原型找的，所以我们的原型链本质上是一个 <strong>隐式原型链</strong><img src=\"/2023/08/31/JavaScript%E8%BF%9B%E9%98%B6/%E5%8E%9F%E5%9E%8B.png\" class=\"\">\n<img src=\"/2023/08/31/JavaScript%E8%BF%9B%E9%98%B6/%E5%8E%9F%E5%9E%8B%E9%93%BE.png\" class=\"\">\n所有函数的隐式原型都是相同的，<code>fun = new Function()</code> 都是 <code>Function</code> 的实例对象。</li>\n<li>在读取对象的属性时，会自动到原型链中查找。</li>\n<li>设置对象的属性时，不会查找原型链，如果当前对象中没有此属性，直接添加此属性并设置其值。</li>\n<li>方法一般定义在原型中，属性一般通过构造函数定义在对象本身上。</li>\n</ul>\n<p>To do:<br>利用js快速完成大学生新生安全教育课程<br><a href=\"https://blog.csdn.net/m0_38072683/article/details/118878085\">https://blog.csdn.net/m0_38072683/article/details/118878085</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"基础回顾\"><a href=\"#基础回顾\" class=\"headerlink\" title=\"基础回顾\"></a>基础回顾</h4><p>数据类型：</p>\n<ol>\n<li>基本类型<br> String Number boolean undefined null</li>\n<li>对象(引用)类型<br> Object Function Array</li>\n</ol>\n<p>判断：</p>\n<ol>\n<li><code>typeof</code><br> 返回的数据类型的字符串表达</li>\n<li><code>instanceof</code></li>\n<li><code>===</code> 和 <code>==</code></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name, age) &#123; // 这是一个 **类型对象**，因为函数也是一个对象。</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var p = new Person(); // 这是一个实例对象。</span><br></pre></td></tr></table></figure>\n<p><code>null</code> 和 <code>undefined</code><br><code>null</code> 定义了并且赋值了，只是值为 <code>null</code>，而 <code>undefined</code> 是定义了但是没有赋值。初始赋值为 <code>null</code> 表示将要是一个对象。程序的最后赋值为 <code>null</code> 可以释放内存。</p>\n<p>栈：全局变量 / 局部变量<br>堆：对象<br>(对象本身在栈里面，而表示对象的变量在栈空间，比如函数和函数名的关系)</p>\n<p>JS 在调用函数传递变量的时候是 <strong>值传递</strong>（理解可能不同）<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 3;</span><br><span class=\"line\">function add(a) &#123;</span><br><span class=\"line\">    a = a + 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(a); // 程序输出为 3</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fn() &#123;</span><br><span class=\"line\">    var b = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>函数执行完以后 <code>b</code> 这个局部变量会自动释放，而后面对应的对象因为没有再被指向，被认为是垃圾对象，是在后面的某个时刻由垃圾回收器回收，释放空间。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 3;</span><br><span class=\"line\">var b = &#123;&#125;;</span><br><span class=\"line\">b = null;</span><br></pre></td></tr></table></figure><br><code>b=null;</code> 以后，<code>b</code> 所指向的对象没有被任何其他变量指向，所以会被标记为垃圾对象，由 <code>JS</code> 引擎在一定时间后回收，而 <code>b</code> 这个全局变量仍然存在。<br>在<code>JavaScript</code>中，全局变量通常在整个应用程序的生命周期内存在，不会自动释放内存。<code>JavaScript</code> 引擎会负责管理全局变量的内存，而不需要手动释放。当全局变量不再被引用时，<code>JavaScript</code>引擎会自动将其标记为可回收，并在适当的时候进行垃圾回收以释放内存。<br><code>JavaScript</code> 的垃圾回收机制主要处理对象的内存释放，而不负责释放变量的内存。变量的生命周期通常由其作用域决定。在全局作用域中声明的变量通常会在整个应用程序的生命周期内存在，除非您显式删除它们或应用程序终止。在局部作用域中声明的变量在离开作用域时会被销毁，相应的内存也会被释放。</p>\n<p>什么时候必须使用 <code>[&#39;属性名&#39;]</code> 的方式？</p>\n<ol>\n<li>属性名包含特殊字符：如<code>-</code> 和 <code> </code>。</li>\n<li>使用表达式来动态访问属性<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = &#123;</span><br><span class=\"line\">    name: &quot;John&quot;,</span><br><span class=\"line\">    age: 30</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var propertyName = &quot;name&quot;;</span><br><span class=\"line\">console.log(person[propertyName]); // 使用方括号来访问属性</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><code>test.call/apply(obj);</code> 这个意思是把 <code>test</code> 函数临时作为 <code>obj</code> 内部的函数来调用。<code>obj</code> 内部可以没有 <code>test</code> 函数。</p>\n<p><code>JavaScript</code> 中的回调函数是一种常见的编程概念，它允许您将一个函数作为参数传递给另一个函数，并在需要时执行该函数。这通常用于处理异步操作，例如处理文件读取、网络请求、定时器等等，因为在这些情况下，不能立即得到结果，而需要在操作完成后执行特定的代码。</p>\n<p>IIFE(Immediately-Invoked Function Expression)</p>\n<p><code>this</code> 是什么？</p>\n<ul>\n<li>任何函数本质上都是通过某个对象来调用，如果我们没有直接指定，就是 <code>window</code> 来调用。</li>\n<li>所有函数内部都以一个变量 <code>this</code>。</li>\n<li>这个 <code>this</code> 的值是当前调用函数的对象。</li>\n</ul>\n<p>在<code>JavaScript</code>中声明的全局函数通常是<code>window</code>对象的一部分，而不是<code>document</code>对象的一部分，这是因为<code>JavaScript</code>最初是为浏览器环境设计的，并且全局作用域在浏览器中通常与<code>window</code>对象关联。</p>\n<p>在浏览器环境中，<code>window</code>对象代表整个浏览器窗口，它包含了全局<code>JavaScript</code>作用域的所有内容，包括全局变量和函数。当您声明一个全局函数时，它实际上是<code>window</code>对象的一个属性。这意味着您可以在全局范围内访问这个函数，无需任何其他前缀。</p>\n<h4 id=\"JS-原型和原型链\"><a href=\"#JS-原型和原型链\" class=\"headerlink\" title=\"JS 原型和原型链\"></a>JS 原型和原型链</h4><p>JS 的复杂类型都是对象类型(<code>Object</code>)，而 JS 不是一门完全面向对象的编程语言，所以如何涉及继承机制，这是一个问题。</p>\n<h5 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h5><p>因为 JS 中没有类(<code>Class</code>)这个概念，所以 JS 的设计者使用了 <strong>构造函数</strong> 来实现继承机制。</p>\n<blockquote>\n<p>ES6 中的 <code>Class</code> 可以看成一个语法糖，它的绝大部分功能，ES5 都可以做到，新的 <code>Class</code> 写法只是让原型的写法更加清晰、更像面向对象编程的语言而已。</p>\n</blockquote>\n<p>在构造函数中，通过 <code>this</code> 赋值的属性或者方法，是每个实例的 <strong>实例属性</strong> 和 <strong>实例方法</strong>，<strong>无法共享公共属性</strong>。所以就又设计出了一个<strong>原型对象</strong>，来存储这个<strong>构造函数的公共属性以及方法</strong>。</p>\n<h5 id=\"函数的-prototype-原型\"><a href=\"#函数的-prototype-原型\" class=\"headerlink\" title=\"函数的 prototype(原型)\"></a>函数的 <code>prototype</code>(原型)</h5><ul>\n<li>每一个函数都有一个 <code>prototype</code> 属性，它默认指向一个 <code>Object</code> 空实例对象(即称为：原型对象，但是 <code>Object</code> 不满足)。<blockquote>\n<p>为什么要有这个空对象？<br>它可以方便我们对于一个函数添加个性化的属性和方法，如果没有这个空对象而是直接链接到 Obejct，那么不同函数之间的个性化操作都会添加到 Obejct 下，会产生很多不必要的冲突和麻烦。</p>\n</blockquote>\n</li>\n<li>原型对象中有一个属性 <code>constructor</code>，它指向函数对象。</li>\n<li>给原型对象添加属性(一般是方法) -&gt; 实例对象可以访问使用。（感觉和类与对象的关系很像）<br>构造函数和它的原型对象相互引用。<br>每一个函数 <code>function</code> 都有一个 <code>prototype</code>，即显式原型(属性)<br>每一个对象都有一个 <code>__proto__</code> 可以称为隐式原型(属性)<br>对象隐式原型的值就是函数显式原型的值。</li>\n</ul>\n<h5 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h5><ul>\n<li>访问一个对象的属性时，现在自身属性中查找，找到返回。</li>\n<li>如果没有，再沿着 <code>__proto__</code> 这条链向上查找，找到返回。</li>\n<li>如果最终没有找到，返回 <code>undefined</code>。</li>\n<li>一直是沿着隐式原型找的，所以我们的原型链本质上是一个 <strong>隐式原型链</strong><img src=\"/2023/08/31/JavaScript%E8%BF%9B%E9%98%B6/%E5%8E%9F%E5%9E%8B.png\" class=\"\">\n<img src=\"/2023/08/31/JavaScript%E8%BF%9B%E9%98%B6/%E5%8E%9F%E5%9E%8B%E9%93%BE.png\" class=\"\">\n所有函数的隐式原型都是相同的，<code>fun = new Function()</code> 都是 <code>Function</code> 的实例对象。</li>\n<li>在读取对象的属性时，会自动到原型链中查找。</li>\n<li>设置对象的属性时，不会查找原型链，如果当前对象中没有此属性，直接添加此属性并设置其值。</li>\n<li>方法一般定义在原型中，属性一般通过构造函数定义在对象本身上。</li>\n</ul>\n<p>To do:<br>利用js快速完成大学生新生安全教育课程<br><a href=\"https://blog.csdn.net/m0_38072683/article/details/118878085\">https://blog.csdn.net/m0_38072683/article/details/118878085</a></p>\n"},{"title":"hexo blog instructions list","date":"2023-08-23T07:52:48.000Z","description":"a list of basic instructions of hexo.","_content":"\n| 指令                                    | 操作             |\n| --------------------------------------- | ---------------- |\n| hexo n \"我的博客\" / hexo new \"我的博客\" | 新建文章         |\n| hexo p / hexo publish                   | 发表草稿文章     |\n| hexo g / hexo generate                  | 生成             |\n| hexo s / hexo server                    | 启动本地预览服务 |\n\n### 插入图片\n1. \n由于我们的博客是要部署在网站上，部署后会生成新的文件目录，所以我们选择使用相对路径的方式。\n在 hexo 中使用 **文章资源文件夹** 需要在 `config.yaml` 文件中更改一下配置：\n```\npost_asset_folder: true\n``` \n当该配置被应用后，使用 hexo new 命令创建新文章时，会生成相同名字的文件夹，也就是文章资源文件夹。\n但是若干原因，需要使用 `{ %asset_image xxx.jpg 这是一张图片% }` 来引用。\n2. \n另一种方法是，在 `source` 文件夹下建立一个文件夹 `_pic` 专门用来存放图片，此时在 md 文件中 `![img](/_pic/xxx.jpg)` 的格式引用就可以了。\n(不知道为啥这种没成功)\n\n### 搭建参考\n\n1. https://zhuanlan.zhihu.com/p/94038688#:~:text=hexo\n\n2. https://zhuanlan.zhihu.com/p/44213627\n\n3. https://segmentfault.com/a/1190000002632530 hexo 常用命令笔记\n\n4. https://blog.csdn.net/as480133937/article/details/100138838 hexo 博客美化配置\n\n5. https://theme-next.js.org/docs/getting-started/\n\n6. https://theme-next.js.org/docs/theme-settings/\n\n7. https://hexo.io/zh-cn/docs/configuration\n\n8. https://zhuanlan.zhihu.com/p/552639819\n\n9. https://blog.csdn.net/qq_34243930/article/details/103994419#2_65 关于 hexo 创建文章的讲解\n\n10. https://zhuanlan.zhihu.com/p/265077468 hexo 博客插入图片","source":"_posts/hexo-blog-instruction-list.md","raw":"---\ntitle: hexo blog instructions list\ndate: 2023-08-23 15:52:48\ndescription: a list of basic instructions of hexo.\n---\n\n| 指令                                    | 操作             |\n| --------------------------------------- | ---------------- |\n| hexo n \"我的博客\" / hexo new \"我的博客\" | 新建文章         |\n| hexo p / hexo publish                   | 发表草稿文章     |\n| hexo g / hexo generate                  | 生成             |\n| hexo s / hexo server                    | 启动本地预览服务 |\n\n### 插入图片\n1. \n由于我们的博客是要部署在网站上，部署后会生成新的文件目录，所以我们选择使用相对路径的方式。\n在 hexo 中使用 **文章资源文件夹** 需要在 `config.yaml` 文件中更改一下配置：\n```\npost_asset_folder: true\n``` \n当该配置被应用后，使用 hexo new 命令创建新文章时，会生成相同名字的文件夹，也就是文章资源文件夹。\n但是若干原因，需要使用 `{ %asset_image xxx.jpg 这是一张图片% }` 来引用。\n2. \n另一种方法是，在 `source` 文件夹下建立一个文件夹 `_pic` 专门用来存放图片，此时在 md 文件中 `![img](/_pic/xxx.jpg)` 的格式引用就可以了。\n(不知道为啥这种没成功)\n\n### 搭建参考\n\n1. https://zhuanlan.zhihu.com/p/94038688#:~:text=hexo\n\n2. https://zhuanlan.zhihu.com/p/44213627\n\n3. https://segmentfault.com/a/1190000002632530 hexo 常用命令笔记\n\n4. https://blog.csdn.net/as480133937/article/details/100138838 hexo 博客美化配置\n\n5. https://theme-next.js.org/docs/getting-started/\n\n6. https://theme-next.js.org/docs/theme-settings/\n\n7. https://hexo.io/zh-cn/docs/configuration\n\n8. https://zhuanlan.zhihu.com/p/552639819\n\n9. https://blog.csdn.net/qq_34243930/article/details/103994419#2_65 关于 hexo 创建文章的讲解\n\n10. https://zhuanlan.zhihu.com/p/265077468 hexo 博客插入图片","slug":"hexo-blog-instruction-list","published":1,"updated":"2023-08-23T10:58:37.791Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szo200065oog6vqq8eo1","content":"<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>操作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hexo n “我的博客” / hexo new “我的博客”</td>\n<td>新建文章</td>\n</tr>\n<tr>\n<td>hexo p / hexo publish</td>\n<td>发表草稿文章</td>\n</tr>\n<tr>\n<td>hexo g / hexo generate</td>\n<td>生成</td>\n</tr>\n<tr>\n<td>hexo s / hexo server</td>\n<td>启动本地预览服务</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h3><ol>\n<li>由于我们的博客是要部署在网站上，部署后会生成新的文件目录，所以我们选择使用相对路径的方式。<br>在 hexo 中使用 <strong>文章资源文件夹</strong> 需要在 <code>config.yaml</code> 文件中更改一下配置：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_asset_folder: true</span><br></pre></td></tr></table></figure>\n当该配置被应用后，使用 hexo new 命令创建新文章时，会生成相同名字的文件夹，也就是文章资源文件夹。<br>但是若干原因，需要使用 <code>&#123; %asset_image xxx.jpg 这是一张图片% &#125;</code> 来引用。</li>\n<li>另一种方法是，在 <code>source</code> 文件夹下建立一个文件夹 <code>_pic</code> 专门用来存放图片，此时在 md 文件中 <code>![img](/_pic/xxx.jpg)</code> 的格式引用就可以了。<br>(不知道为啥这种没成功)</li>\n</ol>\n<h3 id=\"搭建参考\"><a href=\"#搭建参考\" class=\"headerlink\" title=\"搭建参考\"></a>搭建参考</h3><ol>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/94038688#:~:text=hexo\">https://zhuanlan.zhihu.com/p/94038688#:~:text=hexo</a></p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/44213627\">https://zhuanlan.zhihu.com/p/44213627</a></p>\n</li>\n<li><p><a href=\"https://segmentfault.com/a/1190000002632530\">https://segmentfault.com/a/1190000002632530</a> hexo 常用命令笔记</p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/as480133937/article/details/100138838\">https://blog.csdn.net/as480133937/article/details/100138838</a> hexo 博客美化配置</p>\n</li>\n<li><p><a href=\"https://theme-next.js.org/docs/getting-started/\">https://theme-next.js.org/docs/getting-started/</a></p>\n</li>\n<li><p><a href=\"https://theme-next.js.org/docs/theme-settings/\">https://theme-next.js.org/docs/theme-settings/</a></p>\n</li>\n<li><p><a href=\"https://hexo.io/zh-cn/docs/configuration\">https://hexo.io/zh-cn/docs/configuration</a></p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/552639819\">https://zhuanlan.zhihu.com/p/552639819</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/qq_34243930/article/details/103994419#2_65\">https://blog.csdn.net/qq_34243930/article/details/103994419#2_65</a> 关于 hexo 创建文章的讲解</p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/265077468\">https://zhuanlan.zhihu.com/p/265077468</a> hexo 博客插入图片</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>操作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hexo n “我的博客” / hexo new “我的博客”</td>\n<td>新建文章</td>\n</tr>\n<tr>\n<td>hexo p / hexo publish</td>\n<td>发表草稿文章</td>\n</tr>\n<tr>\n<td>hexo g / hexo generate</td>\n<td>生成</td>\n</tr>\n<tr>\n<td>hexo s / hexo server</td>\n<td>启动本地预览服务</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h3><ol>\n<li>由于我们的博客是要部署在网站上，部署后会生成新的文件目录，所以我们选择使用相对路径的方式。<br>在 hexo 中使用 <strong>文章资源文件夹</strong> 需要在 <code>config.yaml</code> 文件中更改一下配置：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_asset_folder: true</span><br></pre></td></tr></table></figure>\n当该配置被应用后，使用 hexo new 命令创建新文章时，会生成相同名字的文件夹，也就是文章资源文件夹。<br>但是若干原因，需要使用 <code>&#123; %asset_image xxx.jpg 这是一张图片% &#125;</code> 来引用。</li>\n<li>另一种方法是，在 <code>source</code> 文件夹下建立一个文件夹 <code>_pic</code> 专门用来存放图片，此时在 md 文件中 <code>![img](/_pic/xxx.jpg)</code> 的格式引用就可以了。<br>(不知道为啥这种没成功)</li>\n</ol>\n<h3 id=\"搭建参考\"><a href=\"#搭建参考\" class=\"headerlink\" title=\"搭建参考\"></a>搭建参考</h3><ol>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/94038688#:~:text=hexo\">https://zhuanlan.zhihu.com/p/94038688#:~:text=hexo</a></p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/44213627\">https://zhuanlan.zhihu.com/p/44213627</a></p>\n</li>\n<li><p><a href=\"https://segmentfault.com/a/1190000002632530\">https://segmentfault.com/a/1190000002632530</a> hexo 常用命令笔记</p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/as480133937/article/details/100138838\">https://blog.csdn.net/as480133937/article/details/100138838</a> hexo 博客美化配置</p>\n</li>\n<li><p><a href=\"https://theme-next.js.org/docs/getting-started/\">https://theme-next.js.org/docs/getting-started/</a></p>\n</li>\n<li><p><a href=\"https://theme-next.js.org/docs/theme-settings/\">https://theme-next.js.org/docs/theme-settings/</a></p>\n</li>\n<li><p><a href=\"https://hexo.io/zh-cn/docs/configuration\">https://hexo.io/zh-cn/docs/configuration</a></p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/552639819\">https://zhuanlan.zhihu.com/p/552639819</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/qq_34243930/article/details/103994419#2_65\">https://blog.csdn.net/qq_34243930/article/details/103994419#2_65</a> 关于 hexo 创建文章的讲解</p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/265077468\">https://zhuanlan.zhihu.com/p/265077468</a> hexo 博客插入图片</p>\n</li>\n</ol>\n"},{"title":"matlab记录","date":"2023-08-26T01:06:51.000Z","description":"The key record of matlab.","mathjax":true,"_content":"{%asset_img matlab点乘点除.png%}\n\nx:y:z 一般表示 x 初值 y 步长 z 终值\n\nif - end 和 if - else - end\n\nx(i) 访问 x 数组中下标为 i 的元素\n\nmeshgrid 函数是MATLAB中用于生成网格采样点数的函数，通常进行2D、3D图形的绘制。\n{%asset_img meshgrid生成网格.png%}\n```\nx = -10:0.5:10;\ny = -10:0.5:10;\n[xx, yy] = meshgrid(x, y);\nz = xx .^2 - yy .^2;\nmesh(xx, yy, z);\n```\n\nhttps://blog.csdn.net/qq_54186956/article/details/127274462 sym syms 函数应用\n\n{%asset_img subs函数.png%}\n\n在命令行输入 `format rat` 后，输出为分数格式，不再约成小数。\n\n在命令行输入 `doc xxx` 可以直接查看官方解释 `xxx` 函数的文档。\n\n`num2str(xxx)` 其中 xxx 是一个数，转换一个行向量，每个字符代表向量的一个元素\n\n`result = [s1, s2]` 进行字符串拼接\n\n{%asset_img 矩阵操作.jpg%}\n\n提取矩阵的行数：$length(A(:,1))$\n提取矩阵的列数：$length(A(1,:))$\n\nmatlab 中读取图片和显示图片函数 `imread` 和 `imshow` https://blog.csdn.net/dp327264/article/details/105087849\n\n`subplot` 函数是将多个图片画到一个画面上的工具 `subplot(m,n,p)` 表示 m 行 n 列从左到右 从上到下第 p 个\n\n灰度图像二值化：图像二值化（ Image Binarization）就是将图像上的像素点的灰度值设置为0或255，也就是将整个图像呈现出明显的黑白效果的过程。\n在数字图像处理中，二值图像占有非常重要的地位，图像的二值化使图像中数据量大为减少，从而能凸显出目标的轮廓。\n\nmatlab 中关于数字图像处理的工具箱是 IPT(Image Processing Toolbox) \n\n{%asset_img 灰度图.png%}\n对于汉字处理的话，灰度图会引入误差，所我们转化为二值图。\n\n`find(xx)` 函数可以返回满足 xx 条件的下标组成的行向量。\n例如 `x=[1 2 3 4 5 6 7]; find(x >= 5)` 返回的就是：`5     6     7`\n\n`max(A)` A 可以是矩阵或者向量，就是返回其中最大的元素\n\n元组是matlab的数据类型之一，其元胞中可存储文本，数值，矩阵等等不同的数据类型，因此应用较为方便。因此，在采用matlab进行数据处理时，对元组的创建、读取、写入、转化函数的掌握尤为重要。\n`cell(dim)` 是创建 dim$\\times$dim维的空元组，下标必须是正整数，不能是 0.","source":"_posts/matlab记录.md","raw":"---\ntitle: matlab记录\ndate: 2023-08-26 09:06:51\ntags: matlab\ndescription: The key record of matlab. \nmathjax: true\n---\n{%asset_img matlab点乘点除.png%}\n\nx:y:z 一般表示 x 初值 y 步长 z 终值\n\nif - end 和 if - else - end\n\nx(i) 访问 x 数组中下标为 i 的元素\n\nmeshgrid 函数是MATLAB中用于生成网格采样点数的函数，通常进行2D、3D图形的绘制。\n{%asset_img meshgrid生成网格.png%}\n```\nx = -10:0.5:10;\ny = -10:0.5:10;\n[xx, yy] = meshgrid(x, y);\nz = xx .^2 - yy .^2;\nmesh(xx, yy, z);\n```\n\nhttps://blog.csdn.net/qq_54186956/article/details/127274462 sym syms 函数应用\n\n{%asset_img subs函数.png%}\n\n在命令行输入 `format rat` 后，输出为分数格式，不再约成小数。\n\n在命令行输入 `doc xxx` 可以直接查看官方解释 `xxx` 函数的文档。\n\n`num2str(xxx)` 其中 xxx 是一个数，转换一个行向量，每个字符代表向量的一个元素\n\n`result = [s1, s2]` 进行字符串拼接\n\n{%asset_img 矩阵操作.jpg%}\n\n提取矩阵的行数：$length(A(:,1))$\n提取矩阵的列数：$length(A(1,:))$\n\nmatlab 中读取图片和显示图片函数 `imread` 和 `imshow` https://blog.csdn.net/dp327264/article/details/105087849\n\n`subplot` 函数是将多个图片画到一个画面上的工具 `subplot(m,n,p)` 表示 m 行 n 列从左到右 从上到下第 p 个\n\n灰度图像二值化：图像二值化（ Image Binarization）就是将图像上的像素点的灰度值设置为0或255，也就是将整个图像呈现出明显的黑白效果的过程。\n在数字图像处理中，二值图像占有非常重要的地位，图像的二值化使图像中数据量大为减少，从而能凸显出目标的轮廓。\n\nmatlab 中关于数字图像处理的工具箱是 IPT(Image Processing Toolbox) \n\n{%asset_img 灰度图.png%}\n对于汉字处理的话，灰度图会引入误差，所我们转化为二值图。\n\n`find(xx)` 函数可以返回满足 xx 条件的下标组成的行向量。\n例如 `x=[1 2 3 4 5 6 7]; find(x >= 5)` 返回的就是：`5     6     7`\n\n`max(A)` A 可以是矩阵或者向量，就是返回其中最大的元素\n\n元组是matlab的数据类型之一，其元胞中可存储文本，数值，矩阵等等不同的数据类型，因此应用较为方便。因此，在采用matlab进行数据处理时，对元组的创建、读取、写入、转化函数的掌握尤为重要。\n`cell(dim)` 是创建 dim$\\times$dim维的空元组，下标必须是正整数，不能是 0.","slug":"matlab记录","published":1,"updated":"2023-08-27T06:46:43.957Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szo300095oogb5wn64eh","content":"<img src=\"/2023/08/26/matlab%E8%AE%B0%E5%BD%95/matlab%E7%82%B9%E4%B9%98%E7%82%B9%E9%99%A4.png\" class=\"\">\n<p>x:y:z 一般表示 x 初值 y 步长 z 终值</p>\n<p>if - end 和 if - else - end</p>\n<p>x(i) 访问 x 数组中下标为 i 的元素</p>\n<p>meshgrid 函数是MATLAB中用于生成网格采样点数的函数，通常进行2D、3D图形的绘制。<br><img src=\"/2023/08/26/matlab%E8%AE%B0%E5%BD%95/meshgrid%E7%94%9F%E6%88%90%E7%BD%91%E6%A0%BC.png\" class=\"\"><br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = -10:0.5:10;</span><br><span class=\"line\">y = -10:0.5:10;</span><br><span class=\"line\">[xx, yy] = meshgrid(x, y);</span><br><span class=\"line\">z = xx .^2 - yy .^2;</span><br><span class=\"line\">mesh(xx, yy, z);</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://blog.csdn.net/qq_54186956/article/details/127274462\">https://blog.csdn.net/qq_54186956/article/details/127274462</a> sym syms 函数应用</p>\n<img src=\"/2023/08/26/matlab%E8%AE%B0%E5%BD%95/subs%E5%87%BD%E6%95%B0.png\" class=\"\">\n<p>在命令行输入 <code>format rat</code> 后，输出为分数格式，不再约成小数。</p>\n<p>在命令行输入 <code>doc xxx</code> 可以直接查看官方解释 <code>xxx</code> 函数的文档。</p>\n<p><code>num2str(xxx)</code> 其中 xxx 是一个数，转换一个行向量，每个字符代表向量的一个元素</p>\n<p><code>result = [s1, s2]</code> 进行字符串拼接</p>\n<img src=\"/2023/08/26/matlab%E8%AE%B0%E5%BD%95/%E7%9F%A9%E9%98%B5%E6%93%8D%E4%BD%9C.jpg\" class=\"\">\n<p>提取矩阵的行数：$length(A(:,1))$<br>提取矩阵的列数：$length(A(1,:))$</p>\n<p>matlab 中读取图片和显示图片函数 <code>imread</code> 和 <code>imshow</code> <a href=\"https://blog.csdn.net/dp327264/article/details/105087849\">https://blog.csdn.net/dp327264/article/details/105087849</a></p>\n<p><code>subplot</code> 函数是将多个图片画到一个画面上的工具 <code>subplot(m,n,p)</code> 表示 m 行 n 列从左到右 从上到下第 p 个</p>\n<p>灰度图像二值化：图像二值化（ Image Binarization）就是将图像上的像素点的灰度值设置为0或255，也就是将整个图像呈现出明显的黑白效果的过程。<br>在数字图像处理中，二值图像占有非常重要的地位，图像的二值化使图像中数据量大为减少，从而能凸显出目标的轮廓。</p>\n<p>matlab 中关于数字图像处理的工具箱是 IPT(Image Processing Toolbox) </p>\n<img src=\"/2023/08/26/matlab%E8%AE%B0%E5%BD%95/%E7%81%B0%E5%BA%A6%E5%9B%BE.png\" class=\"\">\n<p>对于汉字处理的话，灰度图会引入误差，所我们转化为二值图。</p>\n<p><code>find(xx)</code> 函数可以返回满足 xx 条件的下标组成的行向量。<br>例如 <code>x=[1 2 3 4 5 6 7]; find(x &gt;= 5)</code> 返回的就是：<code>5     6     7</code></p>\n<p><code>max(A)</code> A 可以是矩阵或者向量，就是返回其中最大的元素</p>\n<p>元组是matlab的数据类型之一，其元胞中可存储文本，数值，矩阵等等不同的数据类型，因此应用较为方便。因此，在采用matlab进行数据处理时，对元组的创建、读取、写入、转化函数的掌握尤为重要。<br><code>cell(dim)</code> 是创建 dim$\\times$dim维的空元组，下标必须是正整数，不能是 0.</p>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/2023/08/26/matlab%E8%AE%B0%E5%BD%95/matlab%E7%82%B9%E4%B9%98%E7%82%B9%E9%99%A4.png\" class=\"\">\n<p>x:y:z 一般表示 x 初值 y 步长 z 终值</p>\n<p>if - end 和 if - else - end</p>\n<p>x(i) 访问 x 数组中下标为 i 的元素</p>\n<p>meshgrid 函数是MATLAB中用于生成网格采样点数的函数，通常进行2D、3D图形的绘制。<br><img src=\"/2023/08/26/matlab%E8%AE%B0%E5%BD%95/meshgrid%E7%94%9F%E6%88%90%E7%BD%91%E6%A0%BC.png\" class=\"\"><br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = -10:0.5:10;</span><br><span class=\"line\">y = -10:0.5:10;</span><br><span class=\"line\">[xx, yy] = meshgrid(x, y);</span><br><span class=\"line\">z = xx .^2 - yy .^2;</span><br><span class=\"line\">mesh(xx, yy, z);</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://blog.csdn.net/qq_54186956/article/details/127274462\">https://blog.csdn.net/qq_54186956/article/details/127274462</a> sym syms 函数应用</p>\n<img src=\"/2023/08/26/matlab%E8%AE%B0%E5%BD%95/subs%E5%87%BD%E6%95%B0.png\" class=\"\">\n<p>在命令行输入 <code>format rat</code> 后，输出为分数格式，不再约成小数。</p>\n<p>在命令行输入 <code>doc xxx</code> 可以直接查看官方解释 <code>xxx</code> 函数的文档。</p>\n<p><code>num2str(xxx)</code> 其中 xxx 是一个数，转换一个行向量，每个字符代表向量的一个元素</p>\n<p><code>result = [s1, s2]</code> 进行字符串拼接</p>\n<img src=\"/2023/08/26/matlab%E8%AE%B0%E5%BD%95/%E7%9F%A9%E9%98%B5%E6%93%8D%E4%BD%9C.jpg\" class=\"\">\n<p>提取矩阵的行数：$length(A(:,1))$<br>提取矩阵的列数：$length(A(1,:))$</p>\n<p>matlab 中读取图片和显示图片函数 <code>imread</code> 和 <code>imshow</code> <a href=\"https://blog.csdn.net/dp327264/article/details/105087849\">https://blog.csdn.net/dp327264/article/details/105087849</a></p>\n<p><code>subplot</code> 函数是将多个图片画到一个画面上的工具 <code>subplot(m,n,p)</code> 表示 m 行 n 列从左到右 从上到下第 p 个</p>\n<p>灰度图像二值化：图像二值化（ Image Binarization）就是将图像上的像素点的灰度值设置为0或255，也就是将整个图像呈现出明显的黑白效果的过程。<br>在数字图像处理中，二值图像占有非常重要的地位，图像的二值化使图像中数据量大为减少，从而能凸显出目标的轮廓。</p>\n<p>matlab 中关于数字图像处理的工具箱是 IPT(Image Processing Toolbox) </p>\n<img src=\"/2023/08/26/matlab%E8%AE%B0%E5%BD%95/%E7%81%B0%E5%BA%A6%E5%9B%BE.png\" class=\"\">\n<p>对于汉字处理的话，灰度图会引入误差，所我们转化为二值图。</p>\n<p><code>find(xx)</code> 函数可以返回满足 xx 条件的下标组成的行向量。<br>例如 <code>x=[1 2 3 4 5 6 7]; find(x &gt;= 5)</code> 返回的就是：<code>5     6     7</code></p>\n<p><code>max(A)</code> A 可以是矩阵或者向量，就是返回其中最大的元素</p>\n<p>元组是matlab的数据类型之一，其元胞中可存储文本，数值，矩阵等等不同的数据类型，因此应用较为方便。因此，在采用matlab进行数据处理时，对元组的创建、读取、写入、转化函数的掌握尤为重要。<br><code>cell(dim)</code> 是创建 dim$\\times$dim维的空元组，下标必须是正整数，不能是 0.</p>\n"},{"title":"python 数学建模与实验","date":"2023-08-28T05:31:38.000Z","description":"The key record of python and mathematical modeling.","mathjax":true,"_content":"虽然列表 list 可以完成数组操作，但不是真正意义上的数组，当数据量很大时，其速度很慢，故提供了 NumPy 扩展库完成数组操作。很多高级扩展库也依赖于它，比如 Scipy, Pandas 和 Matplotlib 等。\n\n数组创建的几种方式：\n{%asset_img 数组创建.png%}\n\nNumPy 中的数组 array 和 list 的区别是：列表中可以是数据类型不同的元素，而 array 数组只允许存储相同数据类型。\n\n二维数组中的索引 list 为 a[i][j] 而 array 为 a[i, j]\n\n一般索引：\n感觉有的地方还是和 matlab 很相似的。\n{%asset_img 一般索引.png%}\n\n文本文件读取：\n{%asset_img 文本读取.png%}\n二进制文件读取：\n{%asset_img 二进制文件读取.png%}\n另外，如果我们使用 NumPy 专用的二进制存取函数 `load() save() savez()` 会自动处理元素的类型和形状等信息。\n\nopen 打开文件的时候，如果打开的文件不在当前的目录，需要指定完整路径。注意，此时文件路径中的 `\\` 要改为 `\\\\`，例如 `e:\\mypython\\test.txt` 应该改为 `e:\\\\mypython\\\\test.txt`.\n{%asset_img 文件操作方式.png%}\n\njoin 函数：\n{%asset_img join函数.png%}\n\n#### 数据处理工具 Pandas\nPandas(Panel data, 面板数据) 是在 NumPy 的基础上开发的，是 Python 最强大的数据分析和探索工具之一。\n\n#### Matplotlib \nMatplotib 是 Python 强大的数据可视化工具，类似于 MATLAB 语言。\n\npie 绘制饼状图 bar 绘制柱状图 hist 绘制二维直方图 scatter 绘制散点图\n\n{%asset_img 常见样式颜色.png%}\n\n#### scipy \nscipy 包含各种专用于科学计算常见问题的工具箱。其中 scipy.stats 则是统计和随机数的专门的库。\nNumPy 能生成一定概率分布的随机数，但是如果需要更具体的概率密度、分布函数等，就用到 scipy.stats 模块了。Python 做简单的统计分析也可以用 scipy.stats 模块。\n\n### ","source":"_posts/python-数学建模与实验.md","raw":"---\ntitle: python 数学建模与实验\ndate: 2023-08-28 13:31:38\ntags: python\ndescription: The key record of python and mathematical modeling.\nmathjax: true\n---\n虽然列表 list 可以完成数组操作，但不是真正意义上的数组，当数据量很大时，其速度很慢，故提供了 NumPy 扩展库完成数组操作。很多高级扩展库也依赖于它，比如 Scipy, Pandas 和 Matplotlib 等。\n\n数组创建的几种方式：\n{%asset_img 数组创建.png%}\n\nNumPy 中的数组 array 和 list 的区别是：列表中可以是数据类型不同的元素，而 array 数组只允许存储相同数据类型。\n\n二维数组中的索引 list 为 a[i][j] 而 array 为 a[i, j]\n\n一般索引：\n感觉有的地方还是和 matlab 很相似的。\n{%asset_img 一般索引.png%}\n\n文本文件读取：\n{%asset_img 文本读取.png%}\n二进制文件读取：\n{%asset_img 二进制文件读取.png%}\n另外，如果我们使用 NumPy 专用的二进制存取函数 `load() save() savez()` 会自动处理元素的类型和形状等信息。\n\nopen 打开文件的时候，如果打开的文件不在当前的目录，需要指定完整路径。注意，此时文件路径中的 `\\` 要改为 `\\\\`，例如 `e:\\mypython\\test.txt` 应该改为 `e:\\\\mypython\\\\test.txt`.\n{%asset_img 文件操作方式.png%}\n\njoin 函数：\n{%asset_img join函数.png%}\n\n#### 数据处理工具 Pandas\nPandas(Panel data, 面板数据) 是在 NumPy 的基础上开发的，是 Python 最强大的数据分析和探索工具之一。\n\n#### Matplotlib \nMatplotib 是 Python 强大的数据可视化工具，类似于 MATLAB 语言。\n\npie 绘制饼状图 bar 绘制柱状图 hist 绘制二维直方图 scatter 绘制散点图\n\n{%asset_img 常见样式颜色.png%}\n\n#### scipy \nscipy 包含各种专用于科学计算常见问题的工具箱。其中 scipy.stats 则是统计和随机数的专门的库。\nNumPy 能生成一定概率分布的随机数，但是如果需要更具体的概率密度、分布函数等，就用到 scipy.stats 模块了。Python 做简单的统计分析也可以用 scipy.stats 模块。\n\n### ","slug":"python-数学建模与实验","published":1,"updated":"2023-08-28T05:35:12.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szo4000a5oog9l8x4n5u","content":"<p>虽然列表 list 可以完成数组操作，但不是真正意义上的数组，当数据量很大时，其速度很慢，故提供了 NumPy 扩展库完成数组操作。很多高级扩展库也依赖于它，比如 Scipy, Pandas 和 Matplotlib 等。</p>\n<p>数组创建的几种方式：<br><img src=\"/2023/08/28/python-%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%AE%9E%E9%AA%8C/%E6%95%B0%E7%BB%84%E5%88%9B%E5%BB%BA.png\" class=\"\"></p>\n<p>NumPy 中的数组 array 和 list 的区别是：列表中可以是数据类型不同的元素，而 array 数组只允许存储相同数据类型。</p>\n<p>二维数组中的索引 list 为 a[i][j] 而 array 为 a[i, j]</p>\n<p>一般索引：<br>感觉有的地方还是和 matlab 很相似的。<br><img src=\"/2023/08/28/python-%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%AE%9E%E9%AA%8C/%E4%B8%80%E8%88%AC%E7%B4%A2%E5%BC%95.png\" class=\"\"></p>\n<p>文本文件读取：<br><img src=\"/2023/08/28/python-%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%AE%9E%E9%AA%8C/%E6%96%87%E6%9C%AC%E8%AF%BB%E5%8F%96.png\" class=\"\"><br>二进制文件读取：<br><img src=\"/2023/08/28/python-%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%AE%9E%E9%AA%8C/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96.png\" class=\"\"><br>另外，如果我们使用 NumPy 专用的二进制存取函数 <code>load() save() savez()</code> 会自动处理元素的类型和形状等信息。</p>\n<p>open 打开文件的时候，如果打开的文件不在当前的目录，需要指定完整路径。注意，此时文件路径中的 <code>\\</code> 要改为 <code>\\\\</code>，例如 <code>e:\\mypython\\test.txt</code> 应该改为 <code>e:\\\\mypython\\\\test.txt</code>.<br><img src=\"/2023/08/28/python-%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%AE%9E%E9%AA%8C/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E6%96%B9%E5%BC%8F.png\" class=\"\"></p>\n<p>join 函数：<br><img src=\"/2023/08/28/python-%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%AE%9E%E9%AA%8C/join%E5%87%BD%E6%95%B0.png\" class=\"\"></p>\n<h4 id=\"数据处理工具-Pandas\"><a href=\"#数据处理工具-Pandas\" class=\"headerlink\" title=\"数据处理工具 Pandas\"></a>数据处理工具 Pandas</h4><p>Pandas(Panel data, 面板数据) 是在 NumPy 的基础上开发的，是 Python 最强大的数据分析和探索工具之一。</p>\n<h4 id=\"Matplotlib\"><a href=\"#Matplotlib\" class=\"headerlink\" title=\"Matplotlib\"></a>Matplotlib</h4><p>Matplotib 是 Python 强大的数据可视化工具，类似于 MATLAB 语言。</p>\n<p>pie 绘制饼状图 bar 绘制柱状图 hist 绘制二维直方图 scatter 绘制散点图</p>\n<img src=\"/2023/08/28/python-%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%AE%9E%E9%AA%8C/%E5%B8%B8%E8%A7%81%E6%A0%B7%E5%BC%8F%E9%A2%9C%E8%89%B2.png\" class=\"\">\n<h4 id=\"scipy\"><a href=\"#scipy\" class=\"headerlink\" title=\"scipy\"></a>scipy</h4><p>scipy 包含各种专用于科学计算常见问题的工具箱。其中 scipy.stats 则是统计和随机数的专门的库。<br>NumPy 能生成一定概率分布的随机数，但是如果需要更具体的概率密度、分布函数等，就用到 scipy.stats 模块了。Python 做简单的统计分析也可以用 scipy.stats 模块。</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h3>","site":{"data":{}},"excerpt":"","more":"<p>虽然列表 list 可以完成数组操作，但不是真正意义上的数组，当数据量很大时，其速度很慢，故提供了 NumPy 扩展库完成数组操作。很多高级扩展库也依赖于它，比如 Scipy, Pandas 和 Matplotlib 等。</p>\n<p>数组创建的几种方式：<br><img src=\"/2023/08/28/python-%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%AE%9E%E9%AA%8C/%E6%95%B0%E7%BB%84%E5%88%9B%E5%BB%BA.png\" class=\"\"></p>\n<p>NumPy 中的数组 array 和 list 的区别是：列表中可以是数据类型不同的元素，而 array 数组只允许存储相同数据类型。</p>\n<p>二维数组中的索引 list 为 a[i][j] 而 array 为 a[i, j]</p>\n<p>一般索引：<br>感觉有的地方还是和 matlab 很相似的。<br><img src=\"/2023/08/28/python-%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%AE%9E%E9%AA%8C/%E4%B8%80%E8%88%AC%E7%B4%A2%E5%BC%95.png\" class=\"\"></p>\n<p>文本文件读取：<br><img src=\"/2023/08/28/python-%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%AE%9E%E9%AA%8C/%E6%96%87%E6%9C%AC%E8%AF%BB%E5%8F%96.png\" class=\"\"><br>二进制文件读取：<br><img src=\"/2023/08/28/python-%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%AE%9E%E9%AA%8C/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96.png\" class=\"\"><br>另外，如果我们使用 NumPy 专用的二进制存取函数 <code>load() save() savez()</code> 会自动处理元素的类型和形状等信息。</p>\n<p>open 打开文件的时候，如果打开的文件不在当前的目录，需要指定完整路径。注意，此时文件路径中的 <code>\\</code> 要改为 <code>\\\\</code>，例如 <code>e:\\mypython\\test.txt</code> 应该改为 <code>e:\\\\mypython\\\\test.txt</code>.<br><img src=\"/2023/08/28/python-%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%AE%9E%E9%AA%8C/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E6%96%B9%E5%BC%8F.png\" class=\"\"></p>\n<p>join 函数：<br><img src=\"/2023/08/28/python-%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%AE%9E%E9%AA%8C/join%E5%87%BD%E6%95%B0.png\" class=\"\"></p>\n<h4 id=\"数据处理工具-Pandas\"><a href=\"#数据处理工具-Pandas\" class=\"headerlink\" title=\"数据处理工具 Pandas\"></a>数据处理工具 Pandas</h4><p>Pandas(Panel data, 面板数据) 是在 NumPy 的基础上开发的，是 Python 最强大的数据分析和探索工具之一。</p>\n<h4 id=\"Matplotlib\"><a href=\"#Matplotlib\" class=\"headerlink\" title=\"Matplotlib\"></a>Matplotlib</h4><p>Matplotib 是 Python 强大的数据可视化工具，类似于 MATLAB 语言。</p>\n<p>pie 绘制饼状图 bar 绘制柱状图 hist 绘制二维直方图 scatter 绘制散点图</p>\n<img src=\"/2023/08/28/python-%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%AE%9E%E9%AA%8C/%E5%B8%B8%E8%A7%81%E6%A0%B7%E5%BC%8F%E9%A2%9C%E8%89%B2.png\" class=\"\">\n<h4 id=\"scipy\"><a href=\"#scipy\" class=\"headerlink\" title=\"scipy\"></a>scipy</h4><p>scipy 包含各种专用于科学计算常见问题的工具箱。其中 scipy.stats 则是统计和随机数的专门的库。<br>NumPy 能生成一定概率分布的随机数，但是如果需要更具体的概率密度、分布函数等，就用到 scipy.stats 模块了。Python 做简单的统计分析也可以用 scipy.stats 模块。</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h3>"},{"title":"二叉树遍历","date":"2023-09-26T14:26:16.000Z","description":"The key record of the traversal of binary tree.","_content":"具体的更多可以参见代码 `GetTreeOrderNor.cpp` 和 `ParseTreeSequence.cpp`\n\n这是一段输入先序遍历和中序遍历输出后序遍历的代码。\n```#include <iostream>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <stack>\n#include <map>\n\nclass TreeNode {\n    public:\n        char value;\n        TreeNode* leftChild;\n        TreeNode* rightChild;\n        TreeNode(char val) : value(val), leftChild(nullptr), rightChild(nullptr) {}\n};\n\nTreeNode* buildTree(std::vector<char> preOrder, std::vector<char> inOrder) {\n    std::stack<TreeNode*> s;\n    std::map<char, int> vis;\n    for (int i = 0; i < inOrder.size(); ++i) {\n        vis[inOrder[i]] = i;\n    }\n    TreeNode* root = new TreeNode(preOrder[0]);\n    s.push(root);\n    for (int i = 1; i < preOrder.size(); ++i) {\n        TreeNode* curNode = new TreeNode(preOrder[i]);\n        TreeNode* parent = nullptr;\n        while (!s.empty() && vis[s.top()->value] < vis[preOrder[i]]) {\n            parent = s.top();\n            s.pop();\n        }\n        if (parent) {\n            parent->rightChild = curNode;\n        } else {\n            s.top()->leftChild = curNode;\n        }\n        s.push(curNode);\n    }\n    return root;\n}\n\nvoid getPostOrder(TreeNode* root) {\n    std::stack<TreeNode*> s;\n    std::map<TreeNode*, bool> tag;\n    TreeNode* cur = root;\n    while (!s.empty() || cur) {\n        if (cur) {\n            s.push(cur);\n            cur = cur->leftChild;\n        } else {\n            if (tag[s.top()] == 1) {\n                std::cout << s.top()->value;\n                s.pop();\n                cur = nullptr;\n            } else {\n                tag[s.top()] = 1;\n                cur = s.top()->rightChild;\n            }\n        }\n    }\n}\n\nint main() {\n    std::string pre, in;\n    while (std::cin >> pre >> in) {\n        std::vector<char> preOrder(pre.begin(), pre.end());\n        std::vector<char> inOrder(in.begin(), in.end());\n        TreeNode* root = buildTree(preOrder, inOrder);\n        getPostOrder(root);\n        std::cout << \"\\n\";\n    }\n    return 0;\n}\n```","source":"_posts/二叉树遍历.md","raw":"---\ntitle: 二叉树遍历\ndate: 2023-09-26 22:26:16\ntags: \ndescription: The key record of the traversal of binary tree.\n---\n具体的更多可以参见代码 `GetTreeOrderNor.cpp` 和 `ParseTreeSequence.cpp`\n\n这是一段输入先序遍历和中序遍历输出后序遍历的代码。\n```#include <iostream>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <stack>\n#include <map>\n\nclass TreeNode {\n    public:\n        char value;\n        TreeNode* leftChild;\n        TreeNode* rightChild;\n        TreeNode(char val) : value(val), leftChild(nullptr), rightChild(nullptr) {}\n};\n\nTreeNode* buildTree(std::vector<char> preOrder, std::vector<char> inOrder) {\n    std::stack<TreeNode*> s;\n    std::map<char, int> vis;\n    for (int i = 0; i < inOrder.size(); ++i) {\n        vis[inOrder[i]] = i;\n    }\n    TreeNode* root = new TreeNode(preOrder[0]);\n    s.push(root);\n    for (int i = 1; i < preOrder.size(); ++i) {\n        TreeNode* curNode = new TreeNode(preOrder[i]);\n        TreeNode* parent = nullptr;\n        while (!s.empty() && vis[s.top()->value] < vis[preOrder[i]]) {\n            parent = s.top();\n            s.pop();\n        }\n        if (parent) {\n            parent->rightChild = curNode;\n        } else {\n            s.top()->leftChild = curNode;\n        }\n        s.push(curNode);\n    }\n    return root;\n}\n\nvoid getPostOrder(TreeNode* root) {\n    std::stack<TreeNode*> s;\n    std::map<TreeNode*, bool> tag;\n    TreeNode* cur = root;\n    while (!s.empty() || cur) {\n        if (cur) {\n            s.push(cur);\n            cur = cur->leftChild;\n        } else {\n            if (tag[s.top()] == 1) {\n                std::cout << s.top()->value;\n                s.pop();\n                cur = nullptr;\n            } else {\n                tag[s.top()] = 1;\n                cur = s.top()->rightChild;\n            }\n        }\n    }\n}\n\nint main() {\n    std::string pre, in;\n    while (std::cin >> pre >> in) {\n        std::vector<char> preOrder(pre.begin(), pre.end());\n        std::vector<char> inOrder(in.begin(), in.end());\n        TreeNode* root = buildTree(preOrder, inOrder);\n        getPostOrder(root);\n        std::cout << \"\\n\";\n    }\n    return 0;\n}\n```","slug":"二叉树遍历","published":1,"updated":"2023-09-26T16:01:40.102Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szo5000c5oogcqzp4ayx","content":"<p>具体的更多可以参见代码 <code>GetTreeOrderNor.cpp</code> 和 <code>ParseTreeSequence.cpp</code></p>\n<p>这是一段输入先序遍历和中序遍历输出后序遍历的代码。<br><figure class=\"highlight plaintext\"><figcaption><span><iostream></span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;stack&gt;</span><br><span class=\"line\">#include &lt;map&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">class TreeNode &#123;</span><br><span class=\"line\">    public:</span><br><span class=\"line\">        char value;</span><br><span class=\"line\">        TreeNode* leftChild;</span><br><span class=\"line\">        TreeNode* rightChild;</span><br><span class=\"line\">        TreeNode(char val) : value(val), leftChild(nullptr), rightChild(nullptr) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">TreeNode* buildTree(std::vector&lt;char&gt; preOrder, std::vector&lt;char&gt; inOrder) &#123;</span><br><span class=\"line\">    std::stack&lt;TreeNode*&gt; s;</span><br><span class=\"line\">    std::map&lt;char, int&gt; vis;</span><br><span class=\"line\">    for (int i = 0; i &lt; inOrder.size(); ++i) &#123;</span><br><span class=\"line\">        vis[inOrder[i]] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    TreeNode* root = new TreeNode(preOrder[0]);</span><br><span class=\"line\">    s.push(root);</span><br><span class=\"line\">    for (int i = 1; i &lt; preOrder.size(); ++i) &#123;</span><br><span class=\"line\">        TreeNode* curNode = new TreeNode(preOrder[i]);</span><br><span class=\"line\">        TreeNode* parent = nullptr;</span><br><span class=\"line\">        while (!s.empty() &amp;&amp; vis[s.top()-&gt;value] &lt; vis[preOrder[i]]) &#123;</span><br><span class=\"line\">            parent = s.top();</span><br><span class=\"line\">            s.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (parent) &#123;</span><br><span class=\"line\">            parent-&gt;rightChild = curNode;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            s.top()-&gt;leftChild = curNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        s.push(curNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void getPostOrder(TreeNode* root) &#123;</span><br><span class=\"line\">    std::stack&lt;TreeNode*&gt; s;</span><br><span class=\"line\">    std::map&lt;TreeNode*, bool&gt; tag;</span><br><span class=\"line\">    TreeNode* cur = root;</span><br><span class=\"line\">    while (!s.empty() || cur) &#123;</span><br><span class=\"line\">        if (cur) &#123;</span><br><span class=\"line\">            s.push(cur);</span><br><span class=\"line\">            cur = cur-&gt;leftChild;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            if (tag[s.top()] == 1) &#123;</span><br><span class=\"line\">                std::cout &lt;&lt; s.top()-&gt;value;</span><br><span class=\"line\">                s.pop();</span><br><span class=\"line\">                cur = nullptr;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                tag[s.top()] = 1;</span><br><span class=\"line\">                cur = s.top()-&gt;rightChild;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">    std::string pre, in;</span><br><span class=\"line\">    while (std::cin &gt;&gt; pre &gt;&gt; in) &#123;</span><br><span class=\"line\">        std::vector&lt;char&gt; preOrder(pre.begin(), pre.end());</span><br><span class=\"line\">        std::vector&lt;char&gt; inOrder(in.begin(), in.end());</span><br><span class=\"line\">        TreeNode* root = buildTree(preOrder, inOrder);</span><br><span class=\"line\">        getPostOrder(root);</span><br><span class=\"line\">        std::cout &lt;&lt; &quot;\\n&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>具体的更多可以参见代码 <code>GetTreeOrderNor.cpp</code> 和 <code>ParseTreeSequence.cpp</code></p>\n<p>这是一段输入先序遍历和中序遍历输出后序遍历的代码。<br><figure class=\"highlight plaintext\"><figcaption><span><iostream></span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;stack&gt;</span><br><span class=\"line\">#include &lt;map&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">class TreeNode &#123;</span><br><span class=\"line\">    public:</span><br><span class=\"line\">        char value;</span><br><span class=\"line\">        TreeNode* leftChild;</span><br><span class=\"line\">        TreeNode* rightChild;</span><br><span class=\"line\">        TreeNode(char val) : value(val), leftChild(nullptr), rightChild(nullptr) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">TreeNode* buildTree(std::vector&lt;char&gt; preOrder, std::vector&lt;char&gt; inOrder) &#123;</span><br><span class=\"line\">    std::stack&lt;TreeNode*&gt; s;</span><br><span class=\"line\">    std::map&lt;char, int&gt; vis;</span><br><span class=\"line\">    for (int i = 0; i &lt; inOrder.size(); ++i) &#123;</span><br><span class=\"line\">        vis[inOrder[i]] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    TreeNode* root = new TreeNode(preOrder[0]);</span><br><span class=\"line\">    s.push(root);</span><br><span class=\"line\">    for (int i = 1; i &lt; preOrder.size(); ++i) &#123;</span><br><span class=\"line\">        TreeNode* curNode = new TreeNode(preOrder[i]);</span><br><span class=\"line\">        TreeNode* parent = nullptr;</span><br><span class=\"line\">        while (!s.empty() &amp;&amp; vis[s.top()-&gt;value] &lt; vis[preOrder[i]]) &#123;</span><br><span class=\"line\">            parent = s.top();</span><br><span class=\"line\">            s.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (parent) &#123;</span><br><span class=\"line\">            parent-&gt;rightChild = curNode;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            s.top()-&gt;leftChild = curNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        s.push(curNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void getPostOrder(TreeNode* root) &#123;</span><br><span class=\"line\">    std::stack&lt;TreeNode*&gt; s;</span><br><span class=\"line\">    std::map&lt;TreeNode*, bool&gt; tag;</span><br><span class=\"line\">    TreeNode* cur = root;</span><br><span class=\"line\">    while (!s.empty() || cur) &#123;</span><br><span class=\"line\">        if (cur) &#123;</span><br><span class=\"line\">            s.push(cur);</span><br><span class=\"line\">            cur = cur-&gt;leftChild;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            if (tag[s.top()] == 1) &#123;</span><br><span class=\"line\">                std::cout &lt;&lt; s.top()-&gt;value;</span><br><span class=\"line\">                s.pop();</span><br><span class=\"line\">                cur = nullptr;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                tag[s.top()] = 1;</span><br><span class=\"line\">                cur = s.top()-&gt;rightChild;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">    std::string pre, in;</span><br><span class=\"line\">    while (std::cin &gt;&gt; pre &gt;&gt; in) &#123;</span><br><span class=\"line\">        std::vector&lt;char&gt; preOrder(pre.begin(), pre.end());</span><br><span class=\"line\">        std::vector&lt;char&gt; inOrder(in.begin(), in.end());</span><br><span class=\"line\">        TreeNode* root = buildTree(preOrder, inOrder);</span><br><span class=\"line\">        getPostOrder(root);</span><br><span class=\"line\">        std::cout &lt;&lt; &quot;\\n&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"log","date":"2023-09-18T07:56:21.000Z","description":"Just record some learning experiences.","_content":"\n#### 2023年9月18日\n1. 多种计算逆元的方式：扩展欧几里得、费马小定理、递推、阶乘\n2. 扩展欧几里得推导：先假设一组解 `x^{'} y^{'}`，然后找到和原来的解 `x y` 之间的对应关系 或者 非递归实现\n3. 组合数的各种公式和基础二项式反演了解：\nhttps://oi-wiki.org/math/combinatorics/combination/\nhttps://zhuanlan.zhihu.com/p/602675596\n\n#### 2023年9月21日\n1. 矩阵加速递推\nFibonacci 数列的项公式推导。\n不动点法？求解微分方程？\n2. 康托展开与康托逆展开 直接看 OI-Wiki 就行\n全排列 next_permutation 函数\n3. Hanoi 问题的数学方法求解(无需开辟新空间，直接输出移动方式)\n对于 最小块的移动 是隔一个移动一次，而且是有规律的\nlowbit 函数可以知道移动哪一个块\n根据最小块的移动规律和lowbit函数就可以直接计算出哪一块移动到哪一个地方了\n\n#### 2023年9月27日\n1. 二叉树中序遍历和前序或者中序和后序可以确定二叉树的结构\n1. 二叉树的层序遍历、中序遍历、前序遍历、后序遍历的非递归实现\n2. 二叉树的括号形式解析和输出二叉树的括号形式，当然是非递归形式。\n\n\n","source":"_posts/log.md","raw":"---\ntitle: log\ndate: 2023-09-18 15:56:21\ntags: \ndescription: Just record some learning experiences.\n---\n\n#### 2023年9月18日\n1. 多种计算逆元的方式：扩展欧几里得、费马小定理、递推、阶乘\n2. 扩展欧几里得推导：先假设一组解 `x^{'} y^{'}`，然后找到和原来的解 `x y` 之间的对应关系 或者 非递归实现\n3. 组合数的各种公式和基础二项式反演了解：\nhttps://oi-wiki.org/math/combinatorics/combination/\nhttps://zhuanlan.zhihu.com/p/602675596\n\n#### 2023年9月21日\n1. 矩阵加速递推\nFibonacci 数列的项公式推导。\n不动点法？求解微分方程？\n2. 康托展开与康托逆展开 直接看 OI-Wiki 就行\n全排列 next_permutation 函数\n3. Hanoi 问题的数学方法求解(无需开辟新空间，直接输出移动方式)\n对于 最小块的移动 是隔一个移动一次，而且是有规律的\nlowbit 函数可以知道移动哪一个块\n根据最小块的移动规律和lowbit函数就可以直接计算出哪一块移动到哪一个地方了\n\n#### 2023年9月27日\n1. 二叉树中序遍历和前序或者中序和后序可以确定二叉树的结构\n1. 二叉树的层序遍历、中序遍历、前序遍历、后序遍历的非递归实现\n2. 二叉树的括号形式解析和输出二叉树的括号形式，当然是非递归形式。\n\n\n","slug":"log","published":1,"updated":"2023-11-12T10:52:18.693Z","_id":"clov7szo6000e5oog0pwohpd5","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"2023年9月18日\"><a href=\"#2023年9月18日\" class=\"headerlink\" title=\"2023年9月18日\"></a>2023年9月18日</h4><ol>\n<li>多种计算逆元的方式：扩展欧几里得、费马小定理、递推、阶乘</li>\n<li>扩展欧几里得推导：先假设一组解 <code>x^&#123;&#39;&#125; y^&#123;&#39;&#125;</code>，然后找到和原来的解 <code>x y</code> 之间的对应关系 或者 非递归实现</li>\n<li>组合数的各种公式和基础二项式反演了解：<br><a href=\"https://oi-wiki.org/math/combinatorics/combination/\">https://oi-wiki.org/math/combinatorics/combination/</a><br><a href=\"https://zhuanlan.zhihu.com/p/602675596\">https://zhuanlan.zhihu.com/p/602675596</a></li>\n</ol>\n<h4 id=\"2023年9月21日\"><a href=\"#2023年9月21日\" class=\"headerlink\" title=\"2023年9月21日\"></a>2023年9月21日</h4><ol>\n<li>矩阵加速递推<br>Fibonacci 数列的项公式推导。<br>不动点法？求解微分方程？</li>\n<li>康托展开与康托逆展开 直接看 OI-Wiki 就行<br>全排列 next_permutation 函数</li>\n<li>Hanoi 问题的数学方法求解(无需开辟新空间，直接输出移动方式)<br>对于 最小块的移动 是隔一个移动一次，而且是有规律的<br>lowbit 函数可以知道移动哪一个块<br>根据最小块的移动规律和lowbit函数就可以直接计算出哪一块移动到哪一个地方了</li>\n</ol>\n<h4 id=\"2023年9月27日\"><a href=\"#2023年9月27日\" class=\"headerlink\" title=\"2023年9月27日\"></a>2023年9月27日</h4><ol>\n<li>二叉树中序遍历和前序或者中序和后序可以确定二叉树的结构</li>\n<li>二叉树的层序遍历、中序遍历、前序遍历、后序遍历的非递归实现</li>\n<li>二叉树的括号形式解析和输出二叉树的括号形式，当然是非递归形式。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"2023年9月18日\"><a href=\"#2023年9月18日\" class=\"headerlink\" title=\"2023年9月18日\"></a>2023年9月18日</h4><ol>\n<li>多种计算逆元的方式：扩展欧几里得、费马小定理、递推、阶乘</li>\n<li>扩展欧几里得推导：先假设一组解 <code>x^&#123;&#39;&#125; y^&#123;&#39;&#125;</code>，然后找到和原来的解 <code>x y</code> 之间的对应关系 或者 非递归实现</li>\n<li>组合数的各种公式和基础二项式反演了解：<br><a href=\"https://oi-wiki.org/math/combinatorics/combination/\">https://oi-wiki.org/math/combinatorics/combination/</a><br><a href=\"https://zhuanlan.zhihu.com/p/602675596\">https://zhuanlan.zhihu.com/p/602675596</a></li>\n</ol>\n<h4 id=\"2023年9月21日\"><a href=\"#2023年9月21日\" class=\"headerlink\" title=\"2023年9月21日\"></a>2023年9月21日</h4><ol>\n<li>矩阵加速递推<br>Fibonacci 数列的项公式推导。<br>不动点法？求解微分方程？</li>\n<li>康托展开与康托逆展开 直接看 OI-Wiki 就行<br>全排列 next_permutation 函数</li>\n<li>Hanoi 问题的数学方法求解(无需开辟新空间，直接输出移动方式)<br>对于 最小块的移动 是隔一个移动一次，而且是有规律的<br>lowbit 函数可以知道移动哪一个块<br>根据最小块的移动规律和lowbit函数就可以直接计算出哪一块移动到哪一个地方了</li>\n</ol>\n<h4 id=\"2023年9月27日\"><a href=\"#2023年9月27日\" class=\"headerlink\" title=\"2023年9月27日\"></a>2023年9月27日</h4><ol>\n<li>二叉树中序遍历和前序或者中序和后序可以确定二叉树的结构</li>\n<li>二叉树的层序遍历、中序遍历、前序遍历、后序遍历的非递归实现</li>\n<li>二叉树的括号形式解析和输出二叉树的括号形式，当然是非递归形式。</li>\n</ol>\n"},{"title":"二项式反演","date":"2023-09-18T07:50:57.000Z","description":"the learning process of Binomial inversion.","_content":"#### 参考见 \nhttps://oi-wiki.org/math/combinatorics/combination/ 组合式公式\nhttps://zhuanlan.zhihu.com/p/602675596 笔记\n\n一共有两种情况\n\n[炫酷反演魔术 - command_block 的博客 - 洛谷博客 (luogu.com.cn)](https://www.luogu.com.cn/blog/command-block/xuan-ku-fan-yan-mo-shu) 介绍了反演的来历、各种反演\n\n[二项式反演及其应用 - GXZlegend - 博客园 (cnblogs.com)](https://www.cnblogs.com/GXZlegend/p/11407185.html) 有几个题目讲解\n\n{%asset_img 引理.png%}\n\n[二项式反演 - __allenge - 博客园 (cnblogs.com)](https://www.cnblogs.com/GDOI2018/p/14491894.html)","source":"_posts/二项式反演.md","raw":"---\ntitle: 二项式反演\ndate: 2023-09-18 15:50:57\ntags: Math Algorithm\ndescription: the learning process of Binomial inversion. \n---\n#### 参考见 \nhttps://oi-wiki.org/math/combinatorics/combination/ 组合式公式\nhttps://zhuanlan.zhihu.com/p/602675596 笔记\n\n一共有两种情况\n\n[炫酷反演魔术 - command_block 的博客 - 洛谷博客 (luogu.com.cn)](https://www.luogu.com.cn/blog/command-block/xuan-ku-fan-yan-mo-shu) 介绍了反演的来历、各种反演\n\n[二项式反演及其应用 - GXZlegend - 博客园 (cnblogs.com)](https://www.cnblogs.com/GXZlegend/p/11407185.html) 有几个题目讲解\n\n{%asset_img 引理.png%}\n\n[二项式反演 - __allenge - 博客园 (cnblogs.com)](https://www.cnblogs.com/GDOI2018/p/14491894.html)","slug":"二项式反演","published":1,"updated":"2023-11-12T10:53:05.672Z","_id":"clov7szo7000g5oog7ik0bhpx","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"参考见\"><a href=\"#参考见\" class=\"headerlink\" title=\"参考见\"></a>参考见</h4><p><a href=\"https://oi-wiki.org/math/combinatorics/combination/\">https://oi-wiki.org/math/combinatorics/combination/</a> 组合式公式<br><a href=\"https://zhuanlan.zhihu.com/p/602675596\">https://zhuanlan.zhihu.com/p/602675596</a> 笔记</p>\n<p>一共有两种情况</p>\n<p><a href=\"https://www.luogu.com.cn/blog/command-block/xuan-ku-fan-yan-mo-shu\">炫酷反演魔术 - command_block 的博客 - 洛谷博客 (luogu.com.cn)</a> 介绍了反演的来历、各种反演</p>\n<p><a href=\"https://www.cnblogs.com/GXZlegend/p/11407185.html\">二项式反演及其应用 - GXZlegend - 博客园 (cnblogs.com)</a> 有几个题目讲解</p>\n<img src=\"/.com//09/18/%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%8F%8D%E6%BC%94/%E5%BC%95%E7%90%86.png\" class>\n<p><a href=\"https://www.cnblogs.com/GDOI2018/p/14491894.html\">二项式反演 - __allenge - 博客园 (cnblogs.com)</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"参考见\"><a href=\"#参考见\" class=\"headerlink\" title=\"参考见\"></a>参考见</h4><p><a href=\"https://oi-wiki.org/math/combinatorics/combination/\">https://oi-wiki.org/math/combinatorics/combination/</a> 组合式公式<br><a href=\"https://zhuanlan.zhihu.com/p/602675596\">https://zhuanlan.zhihu.com/p/602675596</a> 笔记</p>\n<p>一共有两种情况</p>\n<p><a href=\"https://www.luogu.com.cn/blog/command-block/xuan-ku-fan-yan-mo-shu\">炫酷反演魔术 - command_block 的博客 - 洛谷博客 (luogu.com.cn)</a> 介绍了反演的来历、各种反演</p>\n<p><a href=\"https://www.cnblogs.com/GXZlegend/p/11407185.html\">二项式反演及其应用 - GXZlegend - 博客园 (cnblogs.com)</a> 有几个题目讲解</p>\n<img src=\"/.com//09/18/%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%8F%8D%E6%BC%94/%E5%BC%95%E7%90%86.png\" class>\n<p><a href=\"https://www.cnblogs.com/GDOI2018/p/14491894.html\">二项式反演 - __allenge - 博客园 (cnblogs.com)</a></p>\n"},{"title":"python爬虫","date":"2023-09-04T07:18:39.000Z","description":"The key record of python crawler.","_content":"#### 识别网页所用技术\n构建网站所用的技术类型会对我们如何爬取信息产生影响。有一个十分有用的工具可以检查网站构建的技术类型--detectem 模块，该模块需要 python3.5+ 环境以及 Docker\n\n#### python 读写文件\n1. open() + close()\n```\n#先打开文件：\nf = open('C:\\\\Users\\\\Administrator\\\\Desktop\\\\测试文件.txt','r',encoding = 'utf-8')\n\n#再使用read()方法，查看文件里的内容：\nprint(f.read())\n\n$关闭文件\nf.close()\n```\n注意如果使用 `open`，结尾一定要使用close（）来关闭文件。原因主要是：\n- 节约资源和内存耗损；\n- 可以释放所占用的系统资源并尽早将文件置于更安全的状态，只有关闭文件后，文件内容才能同步到磁盘。\n2. `with open` 推荐使用 \nwith 的作用相当于调用close（）方法，因此当我们使用with open( )在对文件操作完成后，无需通过close()关闭文件，文件会自动关闭，这种方法的安全系数更高，同时也避免了有些时候忘记关闭文件的毛病。\n```\nwith open('file_name','r',encoding = 'utf-8') as f:\n```\n{%asset_img 读取操作类型.png%}\n{%asset_img 读取操作类型.png%}\n\n#### python requests 模块\npython requests 是一个常用的 HTTP 请求库，可以方便地向网站发送 HTTP 请求，并获取响应结果。\n```\nresponse = requests.get(url=url, headers=headers)\n```\n返回一个 response 对象，该对象包含了具体的响应信息，如状态码、响应头(200 OK 404 NotFound)、响应内容等。\n对于其中的content 和 text 属性\n\n> content中间存的是字节码，而text中存的是Beautifulsoup根据猜测的编码方式将content内容编码成字符串。直接输出content，会发现前面存在b'这样的标志，这是字节字符串的标志，而text是，没有前面的b,对于纯ascii码，这两个可以说一模一样，对于其他的文字，需要正确编码才能正常显示。大部分情况建议使用.text，因为显示的是汉字，但有时会显示乱码，这时需要用.content.decode('utf-8')，中文常用utf-8和GBK，GB2312等。这样可以手工选择文字编码方式。\n\n```\nimport requests\n\n# 发送GET请求\nurl = 'https://example.com/some-page'\nresponse = requests.get(url)\n\n# 尝试获取内容的编码方式\nencoding = response.apparent_encoding ## 来尝试获取爬取内容的编码方式。这个属性会尝试根据响应内容来猜测编码方式，通常用于解决服务器没有显式提供编码信息的情况。\n\n# 设置编码方式并解码内容\ncontent = response.content\ntext = content.decode(encoding)\n\n# 打印内容\nprint(text)\n```\n通过这种方式，我们一般可以爬取网页的 `html` 代码。\n\n#### python 标准库 os 模块\nPython的os模块是一个用于与操作系统交互的内置模块。它提供了许多功能，允许你执行各种文件和目录操作，例如创建、删除、移动和重命名文件和目录，以及检查文件和目录的属性。下面是一些os模块的常见用法和功能：\n1. 获取当前工作目录(current work directory)\n```\ncurrent_directory = os.getcwd()\nprint(current_directory)\n```\n2. 列出目录中的文件和子目录\n```\nfiles_and_dirs = os.listdir('/path/to/directory')\nprint(files_and_dirs)\n```\n3. 创建目录\n```\nos.mkdir('/path/to/new_directory')\n```\n4. 删除目录\n```\nos.rmdir('/path/to/directory_to_delete')\n```\n5. 检查文件或者目录是否存在\n```\nif os.path.exists('/path/to/file_or_directory'):\n    print(\"存在\")\nelse:\n    print(\"不存在\")\n```\n其他 os 模块\n{%asset_img os模块.png%} \n\n#### XPath\nXPath（XML Path Language）是一种用于在XML文档中定位和选择元素的查询语言。它是一种重要的标准，广泛用于XML文档的解析和数据提取。XPath不仅可以用于XML文档，还可以用于HTML文档，因此它在Web开发和数据抓取中也非常有用。 (感觉可能类似于正则表达式？只是另一种不同的方式)\n{%asset_img xpath.png%}\n{%asset_img 未知节点.png%}\n\n#### 正则表达式\n`Regular Expression` 或者简称 `regex, RE`.\n它的设计思想是用一种**描述性的语言**来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的。\n\n#### RE 库\nRE 库就是正则表达式库，通过 RE 库我们可以匹配某些特定字符串的一些内容，比如爬虫爬取网页的时候，通过 RE 库可以获取网页内容中的某些特定标签内容。\n量词：\n{%asset_img 量词.png%}\n字符类：\n- `[]`: 匹配括号内的任意一个字符。例如 `[abc]` 匹配字符 a、b 或者 c\n- `[^ ]`: 匹配括号内字符以外的任意一个字符。例如 [^abc] 就是除了 a、b或者c以外的任意字符。 \n{%asset_img 转义字符.png%}\n\n##### 常用函数\n- `re.search(pattern, string, flags=0)` 在字符串中搜索第一个匹配的模式，并返回一个匹配对象。\n- `re.match(pattern, string, flags=0)` 在字符串的开头匹配模式，并返回一个匹配对象。\n- `re.findall(pattern, string, flags=0)` 返回一个包含所有匹配项的列表。\n- `re.sub(pattern, repl, string, count=0, flags=0)` 用指定的替换字符串替换匹配的文本。\n- `re.split(pattern, string, maxsplit=0, flags=0)` 根据模式拆分字符串。\n其中 `flags` 是标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。\n> 在Python中，前缀r表示一个原始字符串（raw string）。原始字符串中的反斜杠字符\\会被当作普通字符处理，而不会被解释为转义字符。这在处理正则表达式等包含大量反斜杠的字符串时非常有用，因为正则表达式模式本身通常包含许多反斜杠，这些反斜杠需要被保留而不被解释为转义字符。\n\n#### python 爬取图片简单示例\n我们打开一个下载图片的网址 https://pic.netbian.com/new/\n我们向这个网站发送请求以后获得的 `text` 就是网站的 `html` 代码。我们分析一下其中的 `html` 代码\n{%asset_img html代码.png%}\n其中的 `/uploads/allimg/xxx` 就是我们的图片的具体地址。\n我们可以使用正则表达式(re 库)来获取 `html` 代码中所有符合图片格式的地址，然后存储到 `img` 中。再向图片的具体地址发送请求，此时我们使用 python 的文件读写(二进制模式)，就可以批量地将图片下载下来了。\n```\nimport requests\nimport re\nimport os\nfrom bs4 import BeautifulSoup\nurl = \"https://pic.netbian.com/\"\nheaders = {\n    \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36 Edg/116.0.1938.69\"\n}\nresponse = requests.get(url=url, headers=headers)\nencoding = response.apparent_encoding\ncontent = response.content\ntext = content.decode(encoding)\nparr = re.compile('src=\"(/u.*?)\".alt=\"(.*?)\"') # 匹配图片链接和图片名字 使用正则表达式\nimage = re.findall(parr, text) # 所有的图片链接\npath = \"photos\"\nif not os.path.isdir(path):\n    os.mkdir(path)\nfor i in image:\n    link = i[0]\n    name = i[1]\n    with open(path+\"/{name}.jpg\".format(name),\"wb\") as img:\n        res = requests.get(\"https://pic.netbian.com\" + link)\n        img.write(res.content)\n        img.close()\n    print(name+\".jpg 获取成功......\")\n```\n爬取王者荣耀头像，感觉写的很丑很傻。\n```\nimport requests\nimport re\nimport os\nurl = \"https://pvp.qq.com/web201605/herolist.shtml\"\nheaders = {\n    \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, \"\n                  \"like Gecko) Chrome/116.0.0.0 Safari/537.36 Edg/116.0.1938.69\"\n}\nresponse = requests.get(url=url, headers=headers)\nencode = response.apparent_encoding\ntext = response.content.decode(encode)\npattern = re.compile(r'(//game.+\\.jpg)')\npattern1 = re.compile(r'alt=\"(.+?)\"')\nimages = re.findall(pattern, text)\nnames = re.findall(pattern1, text)\npath = \"heroes\"\nif not os.path.exists(path):\n    os.mkdir(path)\ncnt = 0\nfor element in images:\n    cur = element\n    with open(path + \"/{}.jpg\".format(names[cnt]), \"wb\") as img:\n        res = requests.get(\"https:\" + cur)\n        img.write(res.content)\n        img.close()\n    print(\"捕获成功\")\n    cnt = cnt + 1\n```\n\n#### lxml 库\nlxml 库是一个使用 python 编写的库，可以迅速、灵活地处理 XML 和 HTML。\n\n其中 lxml.etree 模块是最常用的 HTML、XML 文档解析模块。其中lxml.etree.Element是处理xml的一个核心类，Element对象可以直观的理解为是XML中的节点。使用Element类，可以实现对XML节点、节点属性、节点内文本的操作。\n\n\n\nhttps://blog.csdn.net/weixin_57440207/article/details/116363166 lxml 库的基本使用。\n\n#### BeautifulSoup 示例\n上面的都是比较基础的，对于一些动态的网页结构还是无能为力的。\n我们可以使用 python `bs4` 库的 `BeautifulSoup` 库来对于请求后获得的 `html` 文本进行解析。\n这是一段爬取豆瓣网站上`电影top250`的电影名称。\n```\nimport requests\nfrom bs4 import BeautifulSoup\nheaders = {\n    \"user-agent\": 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 '\n                  '(KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36 Edg/116.0.1938.69'\n}\nfor page_num in range(0, 250, 25):\n    url = f\"https://movie.douban.com/top250?start={page_num}&filter=\"\n    response = requests.get(url=url, headers=headers)\n    encode = response.apparent_encoding\n    content = response.content.decode(encode)\n    html = BeautifulSoup(content, 'lxml')\n    titles = html.findAll(\"span\", attrs={\"class\": \"title\"})\n    for title in titles:\n        if '/' not in title.string:\n            print(title.string)\n```\n我们通过 `BeatifulSoup(content, 'lxml')` 获取的是一个 BeatifulSoup 解析得到的结构。\n其中 content 就是我们请求网站获得的 html 代码，后面的 `lxml` 是一个 html 的解析器，我们需要手动指定解析器，因为 BeautifulSoup 不仅仅可以解析 html。\n`html = BeautifulSoup(content, 'lxml')` 获得到的 html，有许多的方法。\n其中如果我们想获得哪一元素，比如说段落，就可以直接 `html.findAll(\"p\")` 返回的是一个可以迭代的对象。如果直接写 `html.find(\"p\")` 则是获得的第一个段落元素。\n如果我们仍想要对于段落进一步细化，我们可以在后面加上参数，其中的格式是若干组键值。比如，我们想获取类名为`title`的span，就可以写为 `titles = html.findAll(\"span\", attrs={\"class\": \"title\"})`\n对于提取到的元素，我们会获得一个 `bs4.element.Tag` 就是一个 bs4 中的 Tag 对象，比如说我们有一个 `cur` 是 `bs4.elemnt.tag` 对象。\n`cur.name` 就是输出标签的名字，比如 `p` `img` `div`\n如果我们想要获得里面的单个属性值，就直接 `cur['xx']` 或者 `cur.get('xx')`，如果我们想获取全部的属性值，就是 `cur.attrs`\n获得标签内的文本，`cur.get_text()`\n\n#### Selenium\n前面都是模拟发送一个 `request` 获得返回，下面是真是模拟我们打开浏览器后进行操作。\nPython 中的 Selenium 是一个用于自动化网页操作和测试的强大工具。它提供了一种方式来模拟用户在浏览器中的操作，例如打开网页、填写表单、点击按钮、抓取数据等。\nSelenium 的核心之一就是 WebDriver，它是一个接口，允许我们与不同的浏览器进行交互。我们需要下载与我们所使用浏览器相对应的 WebDriver 驱动程序。将 WebDriver 的路径指定为您的 Python 脚本中。\n\n下面是一段打开百度首页并且搜索「你好」的代码。\n```\nfrom selenium import webdriver\nimport time\nfrom selenium.webdriver.common.by import By # 使用 find_element by=xxx 一定要引入这个\ndriver = webdriver.Chrome()\ndriver.get('https://www.baidu.com')\ndriver.find_element(by=By.ID, value='kw').send_keys('你好')\ndriver.find_element(by=By.ID, value='su').click()\ntime.sleep(5)\n```\n下面是查找元素的 by 赋值情况，后面的 `value` 就是目标的索引值。这是新版本的 `find` 操作，之前的 `find_element_by` 方法现在已经弃用。\n{%asset_img selenium定位元素.png%}\n\n对于查找后，如果是 `find_elements` 得到的是一个链表，如果是 `find_element` 得到的是一个 `<class 'selenium.webdriver.remote.webelement.WebElement'>`，后面对于这个类元素，我们可以 `xxx.click()` 点击\n`xxx.send_keys(\"xxx\")` 发送信息\n`xxx.text` 获取文本 \n`xxx.clear()` 清除元素内容 如 input 中的内容\n`get_attribute(\"value\")` 获得`value`的属性值 \n`current_url` 可以获取当前页面的 url\n\n下面是更深入的对于鼠标和键盘\n模拟鼠标操作需要读入类 `ActionChains`\n`from selenium.webdriver.common.action_chains import ActionChains`\n{%asset_img 鼠标操作.png%}\n\n模拟键盘操作的话，也需要导入键盘的类\n`from selenium.webdriver.common.keys import Keys`\n{%asset_img 键盘操作.png%}\n\n##### 延时等待\n遇到使用ajax加载的网页，页面元素可能不是同时加载出来的，这个时候尝试在get方法执行完成时获取网页源代码可能并非浏览器完全加载完成的页面。所以，这种情况下需要设置延时等待一定时间，确保全部节点都加载出来。\n有三种方式：\n1. 强制等待\n直接 `time.sleep(xx)`(记得先导入包 `import time`)\n2. 隐式等待\n`implicitly_wait(xx)` 设置等待时间，如果到时间还有元素没有加载出来就会抛出异常。\n3. 显式等待\n设置一个等待时间和等待条件，在规定时间内，每隔一段时间查看下条件是否成立，如果成立那么程序就继续执行，否则就抛出一个超时异常。\n\n##### 对 Cookie 的操作(亦称为 Http Cookie)\nCookie 通常用于在客户端（浏览器）和服务器之间存储一些小型数据，以便在用户与网站进行交互时进行识别、跟踪和状态管理。\n{%asset_img 存储信息.png%}\n爬虫中常常使用 selenium + requests 实现 cookie持久化，即先用 selenium 模拟登陆获取 cookie ，再通过 requests 携带 cookie 进行请求。\n`webdriver` 提供 cookie 的几种操作：读取、添加和删除。\n1. get_cookies：以字典的形式返回当前会话中可见的 cookie 信息。\n2. get_cookie(name)：返回 cookie 字典中key == name 的 cookie 信息\n3. dd_cookie(cookie_dict)：将 cookie 添加到当前会话中\n4. delete_cookie(name)：删除指定名称的单个 cookie\n5. delete_all_cookies()：删除会话范围内的所有cookie\n\nhttps://blog.csdn.net/kobepaul123/article/details/128796839\nhttps://blog.csdn.net/weixin_50835854/article/details/117170894 selenium 爬取图片\nhttps://zhuanlan.zhihu.com/p/270391233\nhttps://blog.csdn.net/qq_37267676/article/details/111667266\nhttps://zhuanlan.zhihu.com/p/366773104\n\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nimport time\ndriver = webdriver.Chrome()\nfor index in range(0, 250, 25):\n    driver.get(f'https://movie.douban.com/top250?start={index}&filter=')\n    time.sleep(1)\n    list = driver.find_elements(by=By.XPATH, value='//div[@class=\"pic\"]/a/img')\n    for cur in list:\n        print(cur.get_attribute('alt'))\n\n```\n#### selenium 和 splinter\nsplinter和selenium都是用于测试网页的程序，可以模拟浏览器操作，进行自动化测试，可以用于爬虫，自动抢票，网页自动化处理等。Selenium是Splinter的底层，Splinter是Selenium的一个上层封装。使用splinter和selenium时也会用到和html，css相关的使用。\n\n#### Scrapy 框架\n`Scrapy` 是一个异步网络 python 爬虫框架，可以高效地处理大量的请求和响应。它能够并行发送HTTP请求，从而加快数据抓取速度。异步处理允许我们同时处理多个请求而无需等待每一个请求的完成，这对于大规模的数据抓取任务十分有用。\n它的优势：\n1. 内置选择器(Selector)，使用 XPath 或者 CSS 选择器语法，使我们可以轻松获取 HTML 文档中的数据(我们不需要再去使用 bs4 ?)。\n2. 模块化和可扩展性\n允许我们将爬虫任务分解为多个模块，包括爬虫、中间件、管道等，使代码易于维护和扩展。\n3. 自动化处理\nScrapy提供了强大的自动化功能，包括请求的调度、URL跟踪、重试失败的请求等。它还支持自动限速，以避免过度请求目标网站，从而遵守网站的使用政策。\n4. 内置 HTTP 请求处理\nScrapy可以处理HTTP请求和响应的所有细节，包括Cookies、User-Agent、重定向、状态码处理等。这减轻了用户的负担，让你专注于爬取和数据处理。\n\nhttps://www.runoob.com/w3cnote/scrapy-detail.html 上面讲解了 Scrapy 的爬行流程，感觉还是挺形象的。只有当调度器中不存在任何 request 的时候，整个程序才会停止，又因为对于下载失败的 url 会再次进入 scheduler(调度器)，所以对于下载失败的 url，Scrapy 会重新进行下载。\n\n\n","source":"_posts/python爬虫.md","raw":"---\ntitle: python爬虫\ndate: 2023-09-04 15:18:39\ntags: python\ndescription: The key record of python crawler.\n---\n#### 识别网页所用技术\n构建网站所用的技术类型会对我们如何爬取信息产生影响。有一个十分有用的工具可以检查网站构建的技术类型--detectem 模块，该模块需要 python3.5+ 环境以及 Docker\n\n#### python 读写文件\n1. open() + close()\n```\n#先打开文件：\nf = open('C:\\\\Users\\\\Administrator\\\\Desktop\\\\测试文件.txt','r',encoding = 'utf-8')\n\n#再使用read()方法，查看文件里的内容：\nprint(f.read())\n\n$关闭文件\nf.close()\n```\n注意如果使用 `open`，结尾一定要使用close（）来关闭文件。原因主要是：\n- 节约资源和内存耗损；\n- 可以释放所占用的系统资源并尽早将文件置于更安全的状态，只有关闭文件后，文件内容才能同步到磁盘。\n2. `with open` 推荐使用 \nwith 的作用相当于调用close（）方法，因此当我们使用with open( )在对文件操作完成后，无需通过close()关闭文件，文件会自动关闭，这种方法的安全系数更高，同时也避免了有些时候忘记关闭文件的毛病。\n```\nwith open('file_name','r',encoding = 'utf-8') as f:\n```\n{%asset_img 读取操作类型.png%}\n{%asset_img 读取操作类型.png%}\n\n#### python requests 模块\npython requests 是一个常用的 HTTP 请求库，可以方便地向网站发送 HTTP 请求，并获取响应结果。\n```\nresponse = requests.get(url=url, headers=headers)\n```\n返回一个 response 对象，该对象包含了具体的响应信息，如状态码、响应头(200 OK 404 NotFound)、响应内容等。\n对于其中的content 和 text 属性\n\n> content中间存的是字节码，而text中存的是Beautifulsoup根据猜测的编码方式将content内容编码成字符串。直接输出content，会发现前面存在b'这样的标志，这是字节字符串的标志，而text是，没有前面的b,对于纯ascii码，这两个可以说一模一样，对于其他的文字，需要正确编码才能正常显示。大部分情况建议使用.text，因为显示的是汉字，但有时会显示乱码，这时需要用.content.decode('utf-8')，中文常用utf-8和GBK，GB2312等。这样可以手工选择文字编码方式。\n\n```\nimport requests\n\n# 发送GET请求\nurl = 'https://example.com/some-page'\nresponse = requests.get(url)\n\n# 尝试获取内容的编码方式\nencoding = response.apparent_encoding ## 来尝试获取爬取内容的编码方式。这个属性会尝试根据响应内容来猜测编码方式，通常用于解决服务器没有显式提供编码信息的情况。\n\n# 设置编码方式并解码内容\ncontent = response.content\ntext = content.decode(encoding)\n\n# 打印内容\nprint(text)\n```\n通过这种方式，我们一般可以爬取网页的 `html` 代码。\n\n#### python 标准库 os 模块\nPython的os模块是一个用于与操作系统交互的内置模块。它提供了许多功能，允许你执行各种文件和目录操作，例如创建、删除、移动和重命名文件和目录，以及检查文件和目录的属性。下面是一些os模块的常见用法和功能：\n1. 获取当前工作目录(current work directory)\n```\ncurrent_directory = os.getcwd()\nprint(current_directory)\n```\n2. 列出目录中的文件和子目录\n```\nfiles_and_dirs = os.listdir('/path/to/directory')\nprint(files_and_dirs)\n```\n3. 创建目录\n```\nos.mkdir('/path/to/new_directory')\n```\n4. 删除目录\n```\nos.rmdir('/path/to/directory_to_delete')\n```\n5. 检查文件或者目录是否存在\n```\nif os.path.exists('/path/to/file_or_directory'):\n    print(\"存在\")\nelse:\n    print(\"不存在\")\n```\n其他 os 模块\n{%asset_img os模块.png%} \n\n#### XPath\nXPath（XML Path Language）是一种用于在XML文档中定位和选择元素的查询语言。它是一种重要的标准，广泛用于XML文档的解析和数据提取。XPath不仅可以用于XML文档，还可以用于HTML文档，因此它在Web开发和数据抓取中也非常有用。 (感觉可能类似于正则表达式？只是另一种不同的方式)\n{%asset_img xpath.png%}\n{%asset_img 未知节点.png%}\n\n#### 正则表达式\n`Regular Expression` 或者简称 `regex, RE`.\n它的设计思想是用一种**描述性的语言**来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的。\n\n#### RE 库\nRE 库就是正则表达式库，通过 RE 库我们可以匹配某些特定字符串的一些内容，比如爬虫爬取网页的时候，通过 RE 库可以获取网页内容中的某些特定标签内容。\n量词：\n{%asset_img 量词.png%}\n字符类：\n- `[]`: 匹配括号内的任意一个字符。例如 `[abc]` 匹配字符 a、b 或者 c\n- `[^ ]`: 匹配括号内字符以外的任意一个字符。例如 [^abc] 就是除了 a、b或者c以外的任意字符。 \n{%asset_img 转义字符.png%}\n\n##### 常用函数\n- `re.search(pattern, string, flags=0)` 在字符串中搜索第一个匹配的模式，并返回一个匹配对象。\n- `re.match(pattern, string, flags=0)` 在字符串的开头匹配模式，并返回一个匹配对象。\n- `re.findall(pattern, string, flags=0)` 返回一个包含所有匹配项的列表。\n- `re.sub(pattern, repl, string, count=0, flags=0)` 用指定的替换字符串替换匹配的文本。\n- `re.split(pattern, string, maxsplit=0, flags=0)` 根据模式拆分字符串。\n其中 `flags` 是标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。\n> 在Python中，前缀r表示一个原始字符串（raw string）。原始字符串中的反斜杠字符\\会被当作普通字符处理，而不会被解释为转义字符。这在处理正则表达式等包含大量反斜杠的字符串时非常有用，因为正则表达式模式本身通常包含许多反斜杠，这些反斜杠需要被保留而不被解释为转义字符。\n\n#### python 爬取图片简单示例\n我们打开一个下载图片的网址 https://pic.netbian.com/new/\n我们向这个网站发送请求以后获得的 `text` 就是网站的 `html` 代码。我们分析一下其中的 `html` 代码\n{%asset_img html代码.png%}\n其中的 `/uploads/allimg/xxx` 就是我们的图片的具体地址。\n我们可以使用正则表达式(re 库)来获取 `html` 代码中所有符合图片格式的地址，然后存储到 `img` 中。再向图片的具体地址发送请求，此时我们使用 python 的文件读写(二进制模式)，就可以批量地将图片下载下来了。\n```\nimport requests\nimport re\nimport os\nfrom bs4 import BeautifulSoup\nurl = \"https://pic.netbian.com/\"\nheaders = {\n    \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36 Edg/116.0.1938.69\"\n}\nresponse = requests.get(url=url, headers=headers)\nencoding = response.apparent_encoding\ncontent = response.content\ntext = content.decode(encoding)\nparr = re.compile('src=\"(/u.*?)\".alt=\"(.*?)\"') # 匹配图片链接和图片名字 使用正则表达式\nimage = re.findall(parr, text) # 所有的图片链接\npath = \"photos\"\nif not os.path.isdir(path):\n    os.mkdir(path)\nfor i in image:\n    link = i[0]\n    name = i[1]\n    with open(path+\"/{name}.jpg\".format(name),\"wb\") as img:\n        res = requests.get(\"https://pic.netbian.com\" + link)\n        img.write(res.content)\n        img.close()\n    print(name+\".jpg 获取成功......\")\n```\n爬取王者荣耀头像，感觉写的很丑很傻。\n```\nimport requests\nimport re\nimport os\nurl = \"https://pvp.qq.com/web201605/herolist.shtml\"\nheaders = {\n    \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, \"\n                  \"like Gecko) Chrome/116.0.0.0 Safari/537.36 Edg/116.0.1938.69\"\n}\nresponse = requests.get(url=url, headers=headers)\nencode = response.apparent_encoding\ntext = response.content.decode(encode)\npattern = re.compile(r'(//game.+\\.jpg)')\npattern1 = re.compile(r'alt=\"(.+?)\"')\nimages = re.findall(pattern, text)\nnames = re.findall(pattern1, text)\npath = \"heroes\"\nif not os.path.exists(path):\n    os.mkdir(path)\ncnt = 0\nfor element in images:\n    cur = element\n    with open(path + \"/{}.jpg\".format(names[cnt]), \"wb\") as img:\n        res = requests.get(\"https:\" + cur)\n        img.write(res.content)\n        img.close()\n    print(\"捕获成功\")\n    cnt = cnt + 1\n```\n\n#### lxml 库\nlxml 库是一个使用 python 编写的库，可以迅速、灵活地处理 XML 和 HTML。\n\n其中 lxml.etree 模块是最常用的 HTML、XML 文档解析模块。其中lxml.etree.Element是处理xml的一个核心类，Element对象可以直观的理解为是XML中的节点。使用Element类，可以实现对XML节点、节点属性、节点内文本的操作。\n\n\n\nhttps://blog.csdn.net/weixin_57440207/article/details/116363166 lxml 库的基本使用。\n\n#### BeautifulSoup 示例\n上面的都是比较基础的，对于一些动态的网页结构还是无能为力的。\n我们可以使用 python `bs4` 库的 `BeautifulSoup` 库来对于请求后获得的 `html` 文本进行解析。\n这是一段爬取豆瓣网站上`电影top250`的电影名称。\n```\nimport requests\nfrom bs4 import BeautifulSoup\nheaders = {\n    \"user-agent\": 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 '\n                  '(KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36 Edg/116.0.1938.69'\n}\nfor page_num in range(0, 250, 25):\n    url = f\"https://movie.douban.com/top250?start={page_num}&filter=\"\n    response = requests.get(url=url, headers=headers)\n    encode = response.apparent_encoding\n    content = response.content.decode(encode)\n    html = BeautifulSoup(content, 'lxml')\n    titles = html.findAll(\"span\", attrs={\"class\": \"title\"})\n    for title in titles:\n        if '/' not in title.string:\n            print(title.string)\n```\n我们通过 `BeatifulSoup(content, 'lxml')` 获取的是一个 BeatifulSoup 解析得到的结构。\n其中 content 就是我们请求网站获得的 html 代码，后面的 `lxml` 是一个 html 的解析器，我们需要手动指定解析器，因为 BeautifulSoup 不仅仅可以解析 html。\n`html = BeautifulSoup(content, 'lxml')` 获得到的 html，有许多的方法。\n其中如果我们想获得哪一元素，比如说段落，就可以直接 `html.findAll(\"p\")` 返回的是一个可以迭代的对象。如果直接写 `html.find(\"p\")` 则是获得的第一个段落元素。\n如果我们仍想要对于段落进一步细化，我们可以在后面加上参数，其中的格式是若干组键值。比如，我们想获取类名为`title`的span，就可以写为 `titles = html.findAll(\"span\", attrs={\"class\": \"title\"})`\n对于提取到的元素，我们会获得一个 `bs4.element.Tag` 就是一个 bs4 中的 Tag 对象，比如说我们有一个 `cur` 是 `bs4.elemnt.tag` 对象。\n`cur.name` 就是输出标签的名字，比如 `p` `img` `div`\n如果我们想要获得里面的单个属性值，就直接 `cur['xx']` 或者 `cur.get('xx')`，如果我们想获取全部的属性值，就是 `cur.attrs`\n获得标签内的文本，`cur.get_text()`\n\n#### Selenium\n前面都是模拟发送一个 `request` 获得返回，下面是真是模拟我们打开浏览器后进行操作。\nPython 中的 Selenium 是一个用于自动化网页操作和测试的强大工具。它提供了一种方式来模拟用户在浏览器中的操作，例如打开网页、填写表单、点击按钮、抓取数据等。\nSelenium 的核心之一就是 WebDriver，它是一个接口，允许我们与不同的浏览器进行交互。我们需要下载与我们所使用浏览器相对应的 WebDriver 驱动程序。将 WebDriver 的路径指定为您的 Python 脚本中。\n\n下面是一段打开百度首页并且搜索「你好」的代码。\n```\nfrom selenium import webdriver\nimport time\nfrom selenium.webdriver.common.by import By # 使用 find_element by=xxx 一定要引入这个\ndriver = webdriver.Chrome()\ndriver.get('https://www.baidu.com')\ndriver.find_element(by=By.ID, value='kw').send_keys('你好')\ndriver.find_element(by=By.ID, value='su').click()\ntime.sleep(5)\n```\n下面是查找元素的 by 赋值情况，后面的 `value` 就是目标的索引值。这是新版本的 `find` 操作，之前的 `find_element_by` 方法现在已经弃用。\n{%asset_img selenium定位元素.png%}\n\n对于查找后，如果是 `find_elements` 得到的是一个链表，如果是 `find_element` 得到的是一个 `<class 'selenium.webdriver.remote.webelement.WebElement'>`，后面对于这个类元素，我们可以 `xxx.click()` 点击\n`xxx.send_keys(\"xxx\")` 发送信息\n`xxx.text` 获取文本 \n`xxx.clear()` 清除元素内容 如 input 中的内容\n`get_attribute(\"value\")` 获得`value`的属性值 \n`current_url` 可以获取当前页面的 url\n\n下面是更深入的对于鼠标和键盘\n模拟鼠标操作需要读入类 `ActionChains`\n`from selenium.webdriver.common.action_chains import ActionChains`\n{%asset_img 鼠标操作.png%}\n\n模拟键盘操作的话，也需要导入键盘的类\n`from selenium.webdriver.common.keys import Keys`\n{%asset_img 键盘操作.png%}\n\n##### 延时等待\n遇到使用ajax加载的网页，页面元素可能不是同时加载出来的，这个时候尝试在get方法执行完成时获取网页源代码可能并非浏览器完全加载完成的页面。所以，这种情况下需要设置延时等待一定时间，确保全部节点都加载出来。\n有三种方式：\n1. 强制等待\n直接 `time.sleep(xx)`(记得先导入包 `import time`)\n2. 隐式等待\n`implicitly_wait(xx)` 设置等待时间，如果到时间还有元素没有加载出来就会抛出异常。\n3. 显式等待\n设置一个等待时间和等待条件，在规定时间内，每隔一段时间查看下条件是否成立，如果成立那么程序就继续执行，否则就抛出一个超时异常。\n\n##### 对 Cookie 的操作(亦称为 Http Cookie)\nCookie 通常用于在客户端（浏览器）和服务器之间存储一些小型数据，以便在用户与网站进行交互时进行识别、跟踪和状态管理。\n{%asset_img 存储信息.png%}\n爬虫中常常使用 selenium + requests 实现 cookie持久化，即先用 selenium 模拟登陆获取 cookie ，再通过 requests 携带 cookie 进行请求。\n`webdriver` 提供 cookie 的几种操作：读取、添加和删除。\n1. get_cookies：以字典的形式返回当前会话中可见的 cookie 信息。\n2. get_cookie(name)：返回 cookie 字典中key == name 的 cookie 信息\n3. dd_cookie(cookie_dict)：将 cookie 添加到当前会话中\n4. delete_cookie(name)：删除指定名称的单个 cookie\n5. delete_all_cookies()：删除会话范围内的所有cookie\n\nhttps://blog.csdn.net/kobepaul123/article/details/128796839\nhttps://blog.csdn.net/weixin_50835854/article/details/117170894 selenium 爬取图片\nhttps://zhuanlan.zhihu.com/p/270391233\nhttps://blog.csdn.net/qq_37267676/article/details/111667266\nhttps://zhuanlan.zhihu.com/p/366773104\n\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nimport time\ndriver = webdriver.Chrome()\nfor index in range(0, 250, 25):\n    driver.get(f'https://movie.douban.com/top250?start={index}&filter=')\n    time.sleep(1)\n    list = driver.find_elements(by=By.XPATH, value='//div[@class=\"pic\"]/a/img')\n    for cur in list:\n        print(cur.get_attribute('alt'))\n\n```\n#### selenium 和 splinter\nsplinter和selenium都是用于测试网页的程序，可以模拟浏览器操作，进行自动化测试，可以用于爬虫，自动抢票，网页自动化处理等。Selenium是Splinter的底层，Splinter是Selenium的一个上层封装。使用splinter和selenium时也会用到和html，css相关的使用。\n\n#### Scrapy 框架\n`Scrapy` 是一个异步网络 python 爬虫框架，可以高效地处理大量的请求和响应。它能够并行发送HTTP请求，从而加快数据抓取速度。异步处理允许我们同时处理多个请求而无需等待每一个请求的完成，这对于大规模的数据抓取任务十分有用。\n它的优势：\n1. 内置选择器(Selector)，使用 XPath 或者 CSS 选择器语法，使我们可以轻松获取 HTML 文档中的数据(我们不需要再去使用 bs4 ?)。\n2. 模块化和可扩展性\n允许我们将爬虫任务分解为多个模块，包括爬虫、中间件、管道等，使代码易于维护和扩展。\n3. 自动化处理\nScrapy提供了强大的自动化功能，包括请求的调度、URL跟踪、重试失败的请求等。它还支持自动限速，以避免过度请求目标网站，从而遵守网站的使用政策。\n4. 内置 HTTP 请求处理\nScrapy可以处理HTTP请求和响应的所有细节，包括Cookies、User-Agent、重定向、状态码处理等。这减轻了用户的负担，让你专注于爬取和数据处理。\n\nhttps://www.runoob.com/w3cnote/scrapy-detail.html 上面讲解了 Scrapy 的爬行流程，感觉还是挺形象的。只有当调度器中不存在任何 request 的时候，整个程序才会停止，又因为对于下载失败的 url 会再次进入 scheduler(调度器)，所以对于下载失败的 url，Scrapy 会重新进行下载。\n\n\n","slug":"python爬虫","published":1,"updated":"2023-09-16T16:04:38.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szo7000i5ooghahue5t0","content":"<h4 id=\"识别网页所用技术\"><a href=\"#识别网页所用技术\" class=\"headerlink\" title=\"识别网页所用技术\"></a>识别网页所用技术</h4><p>构建网站所用的技术类型会对我们如何爬取信息产生影响。有一个十分有用的工具可以检查网站构建的技术类型—detectem 模块，该模块需要 python3.5+ 环境以及 Docker</p>\n<h4 id=\"python-读写文件\"><a href=\"#python-读写文件\" class=\"headerlink\" title=\"python 读写文件\"></a>python 读写文件</h4><ol>\n<li>open() + close()<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#先打开文件：</span><br><span class=\"line\">f = open(&#x27;C:\\\\Users\\\\Administrator\\\\Desktop\\\\测试文件.txt&#x27;,&#x27;r&#x27;,encoding = &#x27;utf-8&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">#再使用read()方法，查看文件里的内容：</span><br><span class=\"line\">print(f.read())</span><br><span class=\"line\"></span><br><span class=\"line\">$关闭文件</span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure>\n注意如果使用 <code>open</code>，结尾一定要使用close（）来关闭文件。原因主要是：</li>\n</ol>\n<ul>\n<li>节约资源和内存耗损；</li>\n<li>可以释放所占用的系统资源并尽早将文件置于更安全的状态，只有关闭文件后，文件内容才能同步到磁盘。</li>\n</ul>\n<ol>\n<li><code>with open</code> 推荐使用<br>with 的作用相当于调用close（）方法，因此当我们使用with open( )在对文件操作完成后，无需通过close()关闭文件，文件会自动关闭，这种方法的安全系数更高，同时也避免了有些时候忘记关闭文件的毛病。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">with open(&#x27;file_name&#x27;,&#x27;r&#x27;,encoding = &#x27;utf-8&#x27;) as f:</span><br></pre></td></tr></table></figure>\n<img src=\"/2023/09/04/python%E7%88%AC%E8%99%AB/%E8%AF%BB%E5%8F%96%E6%93%8D%E4%BD%9C%E7%B1%BB%E5%9E%8B.png\" class=\"\">\n<img src=\"/2023/09/04/python%E7%88%AC%E8%99%AB/%E8%AF%BB%E5%8F%96%E6%93%8D%E4%BD%9C%E7%B1%BB%E5%9E%8B.png\" class=\"\">\n</li>\n</ol>\n<h4 id=\"python-requests-模块\"><a href=\"#python-requests-模块\" class=\"headerlink\" title=\"python requests 模块\"></a>python requests 模块</h4><p>python requests 是一个常用的 HTTP 请求库，可以方便地向网站发送 HTTP 请求，并获取响应结果。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response = requests.get(url=url, headers=headers)</span><br></pre></td></tr></table></figure><br>返回一个 response 对象，该对象包含了具体的响应信息，如状态码、响应头(200 OK 404 NotFound)、响应内容等。<br>对于其中的content 和 text 属性</p>\n<blockquote>\n<p>content中间存的是字节码，而text中存的是Beautifulsoup根据猜测的编码方式将content内容编码成字符串。直接输出content，会发现前面存在b’这样的标志，这是字节字符串的标志，而text是，没有前面的b,对于纯ascii码，这两个可以说一模一样，对于其他的文字，需要正确编码才能正常显示。大部分情况建议使用.text，因为显示的是汉字，但有时会显示乱码，这时需要用.content.decode(‘utf-8’)，中文常用utf-8和GBK，GB2312等。这样可以手工选择文字编码方式。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\"></span><br><span class=\"line\"># 发送GET请求</span><br><span class=\"line\">url = &#x27;https://example.com/some-page&#x27;</span><br><span class=\"line\">response = requests.get(url)</span><br><span class=\"line\"></span><br><span class=\"line\"># 尝试获取内容的编码方式</span><br><span class=\"line\">encoding = response.apparent_encoding ## 来尝试获取爬取内容的编码方式。这个属性会尝试根据响应内容来猜测编码方式，通常用于解决服务器没有显式提供编码信息的情况。</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置编码方式并解码内容</span><br><span class=\"line\">content = response.content</span><br><span class=\"line\">text = content.decode(encoding)</span><br><span class=\"line\"></span><br><span class=\"line\"># 打印内容</span><br><span class=\"line\">print(text)</span><br></pre></td></tr></table></figure>\n<p>通过这种方式，我们一般可以爬取网页的 <code>html</code> 代码。</p>\n<h4 id=\"python-标准库-os-模块\"><a href=\"#python-标准库-os-模块\" class=\"headerlink\" title=\"python 标准库 os 模块\"></a>python 标准库 os 模块</h4><p>Python的os模块是一个用于与操作系统交互的内置模块。它提供了许多功能，允许你执行各种文件和目录操作，例如创建、删除、移动和重命名文件和目录，以及检查文件和目录的属性。下面是一些os模块的常见用法和功能：</p>\n<ol>\n<li>获取当前工作目录(current work directory)<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">current_directory = os.getcwd()</span><br><span class=\"line\">print(current_directory)</span><br></pre></td></tr></table></figure></li>\n<li>列出目录中的文件和子目录<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">files_and_dirs = os.listdir(&#x27;/path/to/directory&#x27;)</span><br><span class=\"line\">print(files_and_dirs)</span><br></pre></td></tr></table></figure></li>\n<li>创建目录<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">os.mkdir(&#x27;/path/to/new_directory&#x27;)</span><br></pre></td></tr></table></figure></li>\n<li>删除目录<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">os.rmdir(&#x27;/path/to/directory_to_delete&#x27;)</span><br></pre></td></tr></table></figure></li>\n<li>检查文件或者目录是否存在<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if os.path.exists(&#x27;/path/to/file_or_directory&#x27;):</span><br><span class=\"line\">    print(&quot;存在&quot;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&quot;不存在&quot;)</span><br></pre></td></tr></table></figure>\n其他 os 模块<img src=\"/2023/09/04/python%E7%88%AC%E8%99%AB/os%E6%A8%A1%E5%9D%97.png\" class=\"\"> \n</li>\n</ol>\n<h4 id=\"XPath\"><a href=\"#XPath\" class=\"headerlink\" title=\"XPath\"></a>XPath</h4><p>XPath（XML Path Language）是一种用于在XML文档中定位和选择元素的查询语言。它是一种重要的标准，广泛用于XML文档的解析和数据提取。XPath不仅可以用于XML文档，还可以用于HTML文档，因此它在Web开发和数据抓取中也非常有用。 (感觉可能类似于正则表达式？只是另一种不同的方式)<br><img src=\"/2023/09/04/python%E7%88%AC%E8%99%AB/xpath.png\" class=\"\"><br><img src=\"/2023/09/04/python%E7%88%AC%E8%99%AB/%E6%9C%AA%E7%9F%A5%E8%8A%82%E7%82%B9.png\" class=\"\"></p>\n<h4 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h4><p><code>Regular Expression</code> 或者简称 <code>regex, RE</code>.<br>它的设计思想是用一种<strong>描述性的语言</strong>来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的。</p>\n<h4 id=\"RE-库\"><a href=\"#RE-库\" class=\"headerlink\" title=\"RE 库\"></a>RE 库</h4><p>RE 库就是正则表达式库，通过 RE 库我们可以匹配某些特定字符串的一些内容，比如爬虫爬取网页的时候，通过 RE 库可以获取网页内容中的某些特定标签内容。<br>量词：<br><img src=\"/2023/09/04/python%E7%88%AC%E8%99%AB/%E9%87%8F%E8%AF%8D.png\" class=\"\"><br>字符类：</p>\n<ul>\n<li><code>[]</code>: 匹配括号内的任意一个字符。例如 <code>[abc]</code> 匹配字符 a、b 或者 c</li>\n<li><code>[^ ]</code>: 匹配括号内字符以外的任意一个字符。例如 <sup><a href=\"#fn_abc\" id=\"reffn_abc\">abc</a></sup> 就是除了 a、b或者c以外的任意字符。 <img src=\"/2023/09/04/python%E7%88%AC%E8%99%AB/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6.png\" class=\"\">\n</li>\n</ul>\n<h5 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h5><ul>\n<li><code>re.search(pattern, string, flags=0)</code> 在字符串中搜索第一个匹配的模式，并返回一个匹配对象。</li>\n<li><code>re.match(pattern, string, flags=0)</code> 在字符串的开头匹配模式，并返回一个匹配对象。</li>\n<li><code>re.findall(pattern, string, flags=0)</code> 返回一个包含所有匹配项的列表。</li>\n<li><code>re.sub(pattern, repl, string, count=0, flags=0)</code> 用指定的替换字符串替换匹配的文本。</li>\n<li><code>re.split(pattern, string, maxsplit=0, flags=0)</code> 根据模式拆分字符串。<br>其中 <code>flags</code> 是标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。<blockquote>\n<p>在Python中，前缀r表示一个原始字符串（raw string）。原始字符串中的反斜杠字符\\会被当作普通字符处理，而不会被解释为转义字符。这在处理正则表达式等包含大量反斜杠的字符串时非常有用，因为正则表达式模式本身通常包含许多反斜杠，这些反斜杠需要被保留而不被解释为转义字符。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"python-爬取图片简单示例\"><a href=\"#python-爬取图片简单示例\" class=\"headerlink\" title=\"python 爬取图片简单示例\"></a>python 爬取图片简单示例</h4><p>我们打开一个下载图片的网址 <a href=\"https://pic.netbian.com/new/\">https://pic.netbian.com/new/</a><br>我们向这个网站发送请求以后获得的 <code>text</code> 就是网站的 <code>html</code> 代码。我们分析一下其中的 <code>html</code> 代码<br><img src=\"/2023/09/04/python%E7%88%AC%E8%99%AB/html%E4%BB%A3%E7%A0%81.png\" class=\"\"><br>其中的 <code>/uploads/allimg/xxx</code> 就是我们的图片的具体地址。<br>我们可以使用正则表达式(re 库)来获取 <code>html</code> 代码中所有符合图片格式的地址，然后存储到 <code>img</code> 中。再向图片的具体地址发送请求，此时我们使用 python 的文件读写(二进制模式)，就可以批量地将图片下载下来了。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">import re</span><br><span class=\"line\">import os</span><br><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">url = &quot;https://pic.netbian.com/&quot;</span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    &quot;user-agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36 Edg/116.0.1938.69&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">response = requests.get(url=url, headers=headers)</span><br><span class=\"line\">encoding = response.apparent_encoding</span><br><span class=\"line\">content = response.content</span><br><span class=\"line\">text = content.decode(encoding)</span><br><span class=\"line\">parr = re.compile(&#x27;src=&quot;(/u.*?)&quot;.alt=&quot;(.*?)&quot;&#x27;) # 匹配图片链接和图片名字 使用正则表达式</span><br><span class=\"line\">image = re.findall(parr, text) # 所有的图片链接</span><br><span class=\"line\">path = &quot;photos&quot;</span><br><span class=\"line\">if not os.path.isdir(path):</span><br><span class=\"line\">    os.mkdir(path)</span><br><span class=\"line\">for i in image:</span><br><span class=\"line\">    link = i[0]</span><br><span class=\"line\">    name = i[1]</span><br><span class=\"line\">    with open(path+&quot;/&#123;name&#125;.jpg&quot;.format(name),&quot;wb&quot;) as img:</span><br><span class=\"line\">        res = requests.get(&quot;https://pic.netbian.com&quot; + link)</span><br><span class=\"line\">        img.write(res.content)</span><br><span class=\"line\">        img.close()</span><br><span class=\"line\">    print(name+&quot;.jpg 获取成功......&quot;)</span><br></pre></td></tr></table></figure><br>爬取王者荣耀头像，感觉写的很丑很傻。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">import re</span><br><span class=\"line\">import os</span><br><span class=\"line\">url = &quot;https://pvp.qq.com/web201605/herolist.shtml&quot;</span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    &quot;user-agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, &quot;</span><br><span class=\"line\">                  &quot;like Gecko) Chrome/116.0.0.0 Safari/537.36 Edg/116.0.1938.69&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">response = requests.get(url=url, headers=headers)</span><br><span class=\"line\">encode = response.apparent_encoding</span><br><span class=\"line\">text = response.content.decode(encode)</span><br><span class=\"line\">pattern = re.compile(r&#x27;(//game.+\\.jpg)&#x27;)</span><br><span class=\"line\">pattern1 = re.compile(r&#x27;alt=&quot;(.+?)&quot;&#x27;)</span><br><span class=\"line\">images = re.findall(pattern, text)</span><br><span class=\"line\">names = re.findall(pattern1, text)</span><br><span class=\"line\">path = &quot;heroes&quot;</span><br><span class=\"line\">if not os.path.exists(path):</span><br><span class=\"line\">    os.mkdir(path)</span><br><span class=\"line\">cnt = 0</span><br><span class=\"line\">for element in images:</span><br><span class=\"line\">    cur = element</span><br><span class=\"line\">    with open(path + &quot;/&#123;&#125;.jpg&quot;.format(names[cnt]), &quot;wb&quot;) as img:</span><br><span class=\"line\">        res = requests.get(&quot;https:&quot; + cur)</span><br><span class=\"line\">        img.write(res.content)</span><br><span class=\"line\">        img.close()</span><br><span class=\"line\">    print(&quot;捕获成功&quot;)</span><br><span class=\"line\">    cnt = cnt + 1</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"lxml-库\"><a href=\"#lxml-库\" class=\"headerlink\" title=\"lxml 库\"></a>lxml 库</h4><p>lxml 库是一个使用 python 编写的库，可以迅速、灵活地处理 XML 和 HTML。</p>\n<p>其中 lxml.etree 模块是最常用的 HTML、XML 文档解析模块。其中lxml.etree.Element是处理xml的一个核心类，Element对象可以直观的理解为是XML中的节点。使用Element类，可以实现对XML节点、节点属性、节点内文本的操作。</p>\n<p><a href=\"https://blog.csdn.net/weixin_57440207/article/details/116363166\">https://blog.csdn.net/weixin_57440207/article/details/116363166</a> lxml 库的基本使用。</p>\n<h4 id=\"BeautifulSoup-示例\"><a href=\"#BeautifulSoup-示例\" class=\"headerlink\" title=\"BeautifulSoup 示例\"></a>BeautifulSoup 示例</h4><p>上面的都是比较基础的，对于一些动态的网页结构还是无能为力的。<br>我们可以使用 python <code>bs4</code> 库的 <code>BeautifulSoup</code> 库来对于请求后获得的 <code>html</code> 文本进行解析。<br>这是一段爬取豆瓣网站上<code>电影top250</code>的电影名称。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    &quot;user-agent&quot;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 &#x27;</span><br><span class=\"line\">                  &#x27;(KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36 Edg/116.0.1938.69&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for page_num in range(0, 250, 25):</span><br><span class=\"line\">    url = f&quot;https://movie.douban.com/top250?start=&#123;page_num&#125;&amp;filter=&quot;</span><br><span class=\"line\">    response = requests.get(url=url, headers=headers)</span><br><span class=\"line\">    encode = response.apparent_encoding</span><br><span class=\"line\">    content = response.content.decode(encode)</span><br><span class=\"line\">    html = BeautifulSoup(content, &#x27;lxml&#x27;)</span><br><span class=\"line\">    titles = html.findAll(&quot;span&quot;, attrs=&#123;&quot;class&quot;: &quot;title&quot;&#125;)</span><br><span class=\"line\">    for title in titles:</span><br><span class=\"line\">        if &#x27;/&#x27; not in title.string:</span><br><span class=\"line\">            print(title.string)</span><br></pre></td></tr></table></figure><br>我们通过 <code>BeatifulSoup(content, &#39;lxml&#39;)</code> 获取的是一个 BeatifulSoup 解析得到的结构。<br>其中 content 就是我们请求网站获得的 html 代码，后面的 <code>lxml</code> 是一个 html 的解析器，我们需要手动指定解析器，因为 BeautifulSoup 不仅仅可以解析 html。<br><code>html = BeautifulSoup(content, &#39;lxml&#39;)</code> 获得到的 html，有许多的方法。<br>其中如果我们想获得哪一元素，比如说段落，就可以直接 <code>html.findAll(&quot;p&quot;)</code> 返回的是一个可以迭代的对象。如果直接写 <code>html.find(&quot;p&quot;)</code> 则是获得的第一个段落元素。<br>如果我们仍想要对于段落进一步细化，我们可以在后面加上参数，其中的格式是若干组键值。比如，我们想获取类名为<code>title</code>的span，就可以写为 <code>titles = html.findAll(&quot;span&quot;, attrs=&#123;&quot;class&quot;: &quot;title&quot;&#125;)</code><br>对于提取到的元素，我们会获得一个 <code>bs4.element.Tag</code> 就是一个 bs4 中的 Tag 对象，比如说我们有一个 <code>cur</code> 是 <code>bs4.elemnt.tag</code> 对象。<br><code>cur.name</code> 就是输出标签的名字，比如 <code>p</code> <code>img</code> <code>div</code><br>如果我们想要获得里面的单个属性值，就直接 <code>cur[&#39;xx&#39;]</code> 或者 <code>cur.get(&#39;xx&#39;)</code>，如果我们想获取全部的属性值，就是 <code>cur.attrs</code><br>获得标签内的文本，<code>cur.get_text()</code></p>\n<h4 id=\"Selenium\"><a href=\"#Selenium\" class=\"headerlink\" title=\"Selenium\"></a>Selenium</h4><p>前面都是模拟发送一个 <code>request</code> 获得返回，下面是真是模拟我们打开浏览器后进行操作。<br>Python 中的 Selenium 是一个用于自动化网页操作和测试的强大工具。它提供了一种方式来模拟用户在浏览器中的操作，例如打开网页、填写表单、点击按钮、抓取数据等。<br>Selenium 的核心之一就是 WebDriver，它是一个接口，允许我们与不同的浏览器进行交互。我们需要下载与我们所使用浏览器相对应的 WebDriver 驱动程序。将 WebDriver 的路径指定为您的 Python 脚本中。</p>\n<p>下面是一段打开百度首页并且搜索「你好」的代码。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from selenium import webdriver</span><br><span class=\"line\">import time</span><br><span class=\"line\">from selenium.webdriver.common.by import By # 使用 find_element by=xxx 一定要引入这个</span><br><span class=\"line\">driver = webdriver.Chrome()</span><br><span class=\"line\">driver.get(&#x27;https://www.baidu.com&#x27;)</span><br><span class=\"line\">driver.find_element(by=By.ID, value=&#x27;kw&#x27;).send_keys(&#x27;你好&#x27;)</span><br><span class=\"line\">driver.find_element(by=By.ID, value=&#x27;su&#x27;).click()</span><br><span class=\"line\">time.sleep(5)</span><br></pre></td></tr></table></figure><br>下面是查找元素的 by 赋值情况，后面的 <code>value</code> 就是目标的索引值。这是新版本的 <code>find</code> 操作，之前的 <code>find_element_by</code> 方法现在已经弃用。<br><img src=\"/2023/09/04/python%E7%88%AC%E8%99%AB/selenium%E5%AE%9A%E4%BD%8D%E5%85%83%E7%B4%A0.png\" class=\"\"></p>\n<p>对于查找后，如果是 <code>find_elements</code> 得到的是一个链表，如果是 <code>find_element</code> 得到的是一个 <code>&lt;class &#39;selenium.webdriver.remote.webelement.WebElement&#39;&gt;</code>，后面对于这个类元素，我们可以 <code>xxx.click()</code> 点击<br><code>xxx.send_keys(&quot;xxx&quot;)</code> 发送信息<br><code>xxx.text</code> 获取文本<br><code>xxx.clear()</code> 清除元素内容 如 input 中的内容<br><code>get_attribute(&quot;value&quot;)</code> 获得<code>value</code>的属性值<br><code>current_url</code> 可以获取当前页面的 url</p>\n<p>下面是更深入的对于鼠标和键盘<br>模拟鼠标操作需要读入类 <code>ActionChains</code><br><code>from selenium.webdriver.common.action_chains import ActionChains</code><br><img src=\"/2023/09/04/python%E7%88%AC%E8%99%AB/%E9%BC%A0%E6%A0%87%E6%93%8D%E4%BD%9C.png\" class=\"\"></p>\n<p>模拟键盘操作的话，也需要导入键盘的类<br><code>from selenium.webdriver.common.keys import Keys</code><br><img src=\"/2023/09/04/python%E7%88%AC%E8%99%AB/%E9%94%AE%E7%9B%98%E6%93%8D%E4%BD%9C.png\" class=\"\"></p>\n<h5 id=\"延时等待\"><a href=\"#延时等待\" class=\"headerlink\" title=\"延时等待\"></a>延时等待</h5><p>遇到使用ajax加载的网页，页面元素可能不是同时加载出来的，这个时候尝试在get方法执行完成时获取网页源代码可能并非浏览器完全加载完成的页面。所以，这种情况下需要设置延时等待一定时间，确保全部节点都加载出来。<br>有三种方式：</p>\n<ol>\n<li>强制等待<br>直接 <code>time.sleep(xx)</code>(记得先导入包 <code>import time</code>)</li>\n<li>隐式等待<br><code>implicitly_wait(xx)</code> 设置等待时间，如果到时间还有元素没有加载出来就会抛出异常。</li>\n<li>显式等待<br>设置一个等待时间和等待条件，在规定时间内，每隔一段时间查看下条件是否成立，如果成立那么程序就继续执行，否则就抛出一个超时异常。</li>\n</ol>\n<h5 id=\"对-Cookie-的操作-亦称为-Http-Cookie\"><a href=\"#对-Cookie-的操作-亦称为-Http-Cookie\" class=\"headerlink\" title=\"对 Cookie 的操作(亦称为 Http Cookie)\"></a>对 Cookie 的操作(亦称为 Http Cookie)</h5><p>Cookie 通常用于在客户端（浏览器）和服务器之间存储一些小型数据，以便在用户与网站进行交互时进行识别、跟踪和状态管理。<br><br>爬虫中常常使用 selenium + requests 实现 cookie持久化，即先用 selenium 模拟登陆获取 cookie ，再通过 requests 携带 cookie 进行请求。<br><code>webdriver</code> 提供 cookie 的几种操作：读取、添加和删除。</p>\n<ol>\n<li>get_cookies：以字典的形式返回当前会话中可见的 cookie 信息。</li>\n<li>get_cookie(name)：返回 cookie 字典中key == name 的 cookie 信息</li>\n<li>dd_cookie(cookie_dict)：将 cookie 添加到当前会话中</li>\n<li>delete_cookie(name)：删除指定名称的单个 cookie</li>\n<li>delete_all_cookies()：删除会话范围内的所有cookie</li>\n</ol>\n<p><a href=\"https://blog.csdn.net/kobepaul123/article/details/128796839\">https://blog.csdn.net/kobepaul123/article/details/128796839</a><br><a href=\"https://blog.csdn.net/weixin_50835854/article/details/117170894\">https://blog.csdn.net/weixin_50835854/article/details/117170894</a> selenium 爬取图片<br><a href=\"https://zhuanlan.zhihu.com/p/270391233\">https://zhuanlan.zhihu.com/p/270391233</a><br><a href=\"https://blog.csdn.net/qq_37267676/article/details/111667266\">https://blog.csdn.net/qq_37267676/article/details/111667266</a><br><a href=\"https://zhuanlan.zhihu.com/p/366773104\">https://zhuanlan.zhihu.com/p/366773104</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from selenium import webdriver</span><br><span class=\"line\">from selenium.webdriver.common.by import By</span><br><span class=\"line\">import time</span><br><span class=\"line\">driver = webdriver.Chrome()</span><br><span class=\"line\">for index in range(0, 250, 25):</span><br><span class=\"line\">    driver.get(f&#x27;https://movie.douban.com/top250?start=&#123;index&#125;&amp;filter=&#x27;)</span><br><span class=\"line\">    time.sleep(1)</span><br><span class=\"line\">    list = driver.find_elements(by=By.XPATH, value=&#x27;//div[@class=&quot;pic&quot;]/a/img&#x27;)</span><br><span class=\"line\">    for cur in list:</span><br><span class=\"line\">        print(cur.get_attribute(&#x27;alt&#x27;))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"selenium-和-splinter\"><a href=\"#selenium-和-splinter\" class=\"headerlink\" title=\"selenium 和 splinter\"></a>selenium 和 splinter</h4><p>splinter和selenium都是用于测试网页的程序，可以模拟浏览器操作，进行自动化测试，可以用于爬虫，自动抢票，网页自动化处理等。Selenium是Splinter的底层，Splinter是Selenium的一个上层封装。使用splinter和selenium时也会用到和html，css相关的使用。</p>\n<h4 id=\"Scrapy-框架\"><a href=\"#Scrapy-框架\" class=\"headerlink\" title=\"Scrapy 框架\"></a>Scrapy 框架</h4><p><code>Scrapy</code> 是一个异步网络 python 爬虫框架，可以高效地处理大量的请求和响应。它能够并行发送HTTP请求，从而加快数据抓取速度。异步处理允许我们同时处理多个请求而无需等待每一个请求的完成，这对于大规模的数据抓取任务十分有用。<br>它的优势：</p>\n<ol>\n<li>内置选择器(Selector)，使用 XPath 或者 CSS 选择器语法，使我们可以轻松获取 HTML 文档中的数据(我们不需要再去使用 bs4 ?)。</li>\n<li>模块化和可扩展性<br>允许我们将爬虫任务分解为多个模块，包括爬虫、中间件、管道等，使代码易于维护和扩展。</li>\n<li>自动化处理<br>Scrapy提供了强大的自动化功能，包括请求的调度、URL跟踪、重试失败的请求等。它还支持自动限速，以避免过度请求目标网站，从而遵守网站的使用政策。</li>\n<li>内置 HTTP 请求处理<br>Scrapy可以处理HTTP请求和响应的所有细节，包括Cookies、User-Agent、重定向、状态码处理等。这减轻了用户的负担，让你专注于爬取和数据处理。</li>\n</ol>\n<p><a href=\"https://www.runoob.com/w3cnote/scrapy-detail.html\">https://www.runoob.com/w3cnote/scrapy-detail.html</a> 上面讲解了 Scrapy 的爬行流程，感觉还是挺形象的。只有当调度器中不存在任何 request 的时候，整个程序才会停止，又因为对于下载失败的 url 会再次进入 scheduler(调度器)，所以对于下载失败的 url，Scrapy 会重新进行下载。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"识别网页所用技术\"><a href=\"#识别网页所用技术\" class=\"headerlink\" title=\"识别网页所用技术\"></a>识别网页所用技术</h4><p>构建网站所用的技术类型会对我们如何爬取信息产生影响。有一个十分有用的工具可以检查网站构建的技术类型—detectem 模块，该模块需要 python3.5+ 环境以及 Docker</p>\n<h4 id=\"python-读写文件\"><a href=\"#python-读写文件\" class=\"headerlink\" title=\"python 读写文件\"></a>python 读写文件</h4><ol>\n<li>open() + close()<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#先打开文件：</span><br><span class=\"line\">f = open(&#x27;C:\\\\Users\\\\Administrator\\\\Desktop\\\\测试文件.txt&#x27;,&#x27;r&#x27;,encoding = &#x27;utf-8&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">#再使用read()方法，查看文件里的内容：</span><br><span class=\"line\">print(f.read())</span><br><span class=\"line\"></span><br><span class=\"line\">$关闭文件</span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure>\n注意如果使用 <code>open</code>，结尾一定要使用close（）来关闭文件。原因主要是：</li>\n</ol>\n<ul>\n<li>节约资源和内存耗损；</li>\n<li>可以释放所占用的系统资源并尽早将文件置于更安全的状态，只有关闭文件后，文件内容才能同步到磁盘。</li>\n</ul>\n<ol>\n<li><code>with open</code> 推荐使用<br>with 的作用相当于调用close（）方法，因此当我们使用with open( )在对文件操作完成后，无需通过close()关闭文件，文件会自动关闭，这种方法的安全系数更高，同时也避免了有些时候忘记关闭文件的毛病。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">with open(&#x27;file_name&#x27;,&#x27;r&#x27;,encoding = &#x27;utf-8&#x27;) as f:</span><br></pre></td></tr></table></figure>\n<img src=\"/2023/09/04/python%E7%88%AC%E8%99%AB/%E8%AF%BB%E5%8F%96%E6%93%8D%E4%BD%9C%E7%B1%BB%E5%9E%8B.png\" class=\"\">\n<img src=\"/2023/09/04/python%E7%88%AC%E8%99%AB/%E8%AF%BB%E5%8F%96%E6%93%8D%E4%BD%9C%E7%B1%BB%E5%9E%8B.png\" class=\"\">\n</li>\n</ol>\n<h4 id=\"python-requests-模块\"><a href=\"#python-requests-模块\" class=\"headerlink\" title=\"python requests 模块\"></a>python requests 模块</h4><p>python requests 是一个常用的 HTTP 请求库，可以方便地向网站发送 HTTP 请求，并获取响应结果。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response = requests.get(url=url, headers=headers)</span><br></pre></td></tr></table></figure><br>返回一个 response 对象，该对象包含了具体的响应信息，如状态码、响应头(200 OK 404 NotFound)、响应内容等。<br>对于其中的content 和 text 属性</p>\n<blockquote>\n<p>content中间存的是字节码，而text中存的是Beautifulsoup根据猜测的编码方式将content内容编码成字符串。直接输出content，会发现前面存在b’这样的标志，这是字节字符串的标志，而text是，没有前面的b,对于纯ascii码，这两个可以说一模一样，对于其他的文字，需要正确编码才能正常显示。大部分情况建议使用.text，因为显示的是汉字，但有时会显示乱码，这时需要用.content.decode(‘utf-8’)，中文常用utf-8和GBK，GB2312等。这样可以手工选择文字编码方式。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\"></span><br><span class=\"line\"># 发送GET请求</span><br><span class=\"line\">url = &#x27;https://example.com/some-page&#x27;</span><br><span class=\"line\">response = requests.get(url)</span><br><span class=\"line\"></span><br><span class=\"line\"># 尝试获取内容的编码方式</span><br><span class=\"line\">encoding = response.apparent_encoding ## 来尝试获取爬取内容的编码方式。这个属性会尝试根据响应内容来猜测编码方式，通常用于解决服务器没有显式提供编码信息的情况。</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置编码方式并解码内容</span><br><span class=\"line\">content = response.content</span><br><span class=\"line\">text = content.decode(encoding)</span><br><span class=\"line\"></span><br><span class=\"line\"># 打印内容</span><br><span class=\"line\">print(text)</span><br></pre></td></tr></table></figure>\n<p>通过这种方式，我们一般可以爬取网页的 <code>html</code> 代码。</p>\n<h4 id=\"python-标准库-os-模块\"><a href=\"#python-标准库-os-模块\" class=\"headerlink\" title=\"python 标准库 os 模块\"></a>python 标准库 os 模块</h4><p>Python的os模块是一个用于与操作系统交互的内置模块。它提供了许多功能，允许你执行各种文件和目录操作，例如创建、删除、移动和重命名文件和目录，以及检查文件和目录的属性。下面是一些os模块的常见用法和功能：</p>\n<ol>\n<li>获取当前工作目录(current work directory)<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">current_directory = os.getcwd()</span><br><span class=\"line\">print(current_directory)</span><br></pre></td></tr></table></figure></li>\n<li>列出目录中的文件和子目录<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">files_and_dirs = os.listdir(&#x27;/path/to/directory&#x27;)</span><br><span class=\"line\">print(files_and_dirs)</span><br></pre></td></tr></table></figure></li>\n<li>创建目录<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">os.mkdir(&#x27;/path/to/new_directory&#x27;)</span><br></pre></td></tr></table></figure></li>\n<li>删除目录<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">os.rmdir(&#x27;/path/to/directory_to_delete&#x27;)</span><br></pre></td></tr></table></figure></li>\n<li>检查文件或者目录是否存在<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if os.path.exists(&#x27;/path/to/file_or_directory&#x27;):</span><br><span class=\"line\">    print(&quot;存在&quot;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&quot;不存在&quot;)</span><br></pre></td></tr></table></figure>\n其他 os 模块<img src=\"/2023/09/04/python%E7%88%AC%E8%99%AB/os%E6%A8%A1%E5%9D%97.png\" class=\"\"> \n</li>\n</ol>\n<h4 id=\"XPath\"><a href=\"#XPath\" class=\"headerlink\" title=\"XPath\"></a>XPath</h4><p>XPath（XML Path Language）是一种用于在XML文档中定位和选择元素的查询语言。它是一种重要的标准，广泛用于XML文档的解析和数据提取。XPath不仅可以用于XML文档，还可以用于HTML文档，因此它在Web开发和数据抓取中也非常有用。 (感觉可能类似于正则表达式？只是另一种不同的方式)<br><img src=\"/2023/09/04/python%E7%88%AC%E8%99%AB/xpath.png\" class=\"\"><br><img src=\"/2023/09/04/python%E7%88%AC%E8%99%AB/%E6%9C%AA%E7%9F%A5%E8%8A%82%E7%82%B9.png\" class=\"\"></p>\n<h4 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h4><p><code>Regular Expression</code> 或者简称 <code>regex, RE</code>.<br>它的设计思想是用一种<strong>描述性的语言</strong>来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的。</p>\n<h4 id=\"RE-库\"><a href=\"#RE-库\" class=\"headerlink\" title=\"RE 库\"></a>RE 库</h4><p>RE 库就是正则表达式库，通过 RE 库我们可以匹配某些特定字符串的一些内容，比如爬虫爬取网页的时候，通过 RE 库可以获取网页内容中的某些特定标签内容。<br>量词：<br><img src=\"/2023/09/04/python%E7%88%AC%E8%99%AB/%E9%87%8F%E8%AF%8D.png\" class=\"\"><br>字符类：</p>\n<ul>\n<li><code>[]</code>: 匹配括号内的任意一个字符。例如 <code>[abc]</code> 匹配字符 a、b 或者 c</li>\n<li><code>[^ ]</code>: 匹配括号内字符以外的任意一个字符。例如 <sup><a href=\"#fn_abc\" id=\"reffn_abc\">abc</a></sup> 就是除了 a、b或者c以外的任意字符。 <img src=\"/2023/09/04/python%E7%88%AC%E8%99%AB/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6.png\" class=\"\">\n</li>\n</ul>\n<h5 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h5><ul>\n<li><code>re.search(pattern, string, flags=0)</code> 在字符串中搜索第一个匹配的模式，并返回一个匹配对象。</li>\n<li><code>re.match(pattern, string, flags=0)</code> 在字符串的开头匹配模式，并返回一个匹配对象。</li>\n<li><code>re.findall(pattern, string, flags=0)</code> 返回一个包含所有匹配项的列表。</li>\n<li><code>re.sub(pattern, repl, string, count=0, flags=0)</code> 用指定的替换字符串替换匹配的文本。</li>\n<li><code>re.split(pattern, string, maxsplit=0, flags=0)</code> 根据模式拆分字符串。<br>其中 <code>flags</code> 是标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。<blockquote>\n<p>在Python中，前缀r表示一个原始字符串（raw string）。原始字符串中的反斜杠字符\\会被当作普通字符处理，而不会被解释为转义字符。这在处理正则表达式等包含大量反斜杠的字符串时非常有用，因为正则表达式模式本身通常包含许多反斜杠，这些反斜杠需要被保留而不被解释为转义字符。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"python-爬取图片简单示例\"><a href=\"#python-爬取图片简单示例\" class=\"headerlink\" title=\"python 爬取图片简单示例\"></a>python 爬取图片简单示例</h4><p>我们打开一个下载图片的网址 <a href=\"https://pic.netbian.com/new/\">https://pic.netbian.com/new/</a><br>我们向这个网站发送请求以后获得的 <code>text</code> 就是网站的 <code>html</code> 代码。我们分析一下其中的 <code>html</code> 代码<br><img src=\"/2023/09/04/python%E7%88%AC%E8%99%AB/html%E4%BB%A3%E7%A0%81.png\" class=\"\"><br>其中的 <code>/uploads/allimg/xxx</code> 就是我们的图片的具体地址。<br>我们可以使用正则表达式(re 库)来获取 <code>html</code> 代码中所有符合图片格式的地址，然后存储到 <code>img</code> 中。再向图片的具体地址发送请求，此时我们使用 python 的文件读写(二进制模式)，就可以批量地将图片下载下来了。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">import re</span><br><span class=\"line\">import os</span><br><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">url = &quot;https://pic.netbian.com/&quot;</span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    &quot;user-agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36 Edg/116.0.1938.69&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">response = requests.get(url=url, headers=headers)</span><br><span class=\"line\">encoding = response.apparent_encoding</span><br><span class=\"line\">content = response.content</span><br><span class=\"line\">text = content.decode(encoding)</span><br><span class=\"line\">parr = re.compile(&#x27;src=&quot;(/u.*?)&quot;.alt=&quot;(.*?)&quot;&#x27;) # 匹配图片链接和图片名字 使用正则表达式</span><br><span class=\"line\">image = re.findall(parr, text) # 所有的图片链接</span><br><span class=\"line\">path = &quot;photos&quot;</span><br><span class=\"line\">if not os.path.isdir(path):</span><br><span class=\"line\">    os.mkdir(path)</span><br><span class=\"line\">for i in image:</span><br><span class=\"line\">    link = i[0]</span><br><span class=\"line\">    name = i[1]</span><br><span class=\"line\">    with open(path+&quot;/&#123;name&#125;.jpg&quot;.format(name),&quot;wb&quot;) as img:</span><br><span class=\"line\">        res = requests.get(&quot;https://pic.netbian.com&quot; + link)</span><br><span class=\"line\">        img.write(res.content)</span><br><span class=\"line\">        img.close()</span><br><span class=\"line\">    print(name+&quot;.jpg 获取成功......&quot;)</span><br></pre></td></tr></table></figure><br>爬取王者荣耀头像，感觉写的很丑很傻。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">import re</span><br><span class=\"line\">import os</span><br><span class=\"line\">url = &quot;https://pvp.qq.com/web201605/herolist.shtml&quot;</span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    &quot;user-agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, &quot;</span><br><span class=\"line\">                  &quot;like Gecko) Chrome/116.0.0.0 Safari/537.36 Edg/116.0.1938.69&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">response = requests.get(url=url, headers=headers)</span><br><span class=\"line\">encode = response.apparent_encoding</span><br><span class=\"line\">text = response.content.decode(encode)</span><br><span class=\"line\">pattern = re.compile(r&#x27;(//game.+\\.jpg)&#x27;)</span><br><span class=\"line\">pattern1 = re.compile(r&#x27;alt=&quot;(.+?)&quot;&#x27;)</span><br><span class=\"line\">images = re.findall(pattern, text)</span><br><span class=\"line\">names = re.findall(pattern1, text)</span><br><span class=\"line\">path = &quot;heroes&quot;</span><br><span class=\"line\">if not os.path.exists(path):</span><br><span class=\"line\">    os.mkdir(path)</span><br><span class=\"line\">cnt = 0</span><br><span class=\"line\">for element in images:</span><br><span class=\"line\">    cur = element</span><br><span class=\"line\">    with open(path + &quot;/&#123;&#125;.jpg&quot;.format(names[cnt]), &quot;wb&quot;) as img:</span><br><span class=\"line\">        res = requests.get(&quot;https:&quot; + cur)</span><br><span class=\"line\">        img.write(res.content)</span><br><span class=\"line\">        img.close()</span><br><span class=\"line\">    print(&quot;捕获成功&quot;)</span><br><span class=\"line\">    cnt = cnt + 1</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"lxml-库\"><a href=\"#lxml-库\" class=\"headerlink\" title=\"lxml 库\"></a>lxml 库</h4><p>lxml 库是一个使用 python 编写的库，可以迅速、灵活地处理 XML 和 HTML。</p>\n<p>其中 lxml.etree 模块是最常用的 HTML、XML 文档解析模块。其中lxml.etree.Element是处理xml的一个核心类，Element对象可以直观的理解为是XML中的节点。使用Element类，可以实现对XML节点、节点属性、节点内文本的操作。</p>\n<p><a href=\"https://blog.csdn.net/weixin_57440207/article/details/116363166\">https://blog.csdn.net/weixin_57440207/article/details/116363166</a> lxml 库的基本使用。</p>\n<h4 id=\"BeautifulSoup-示例\"><a href=\"#BeautifulSoup-示例\" class=\"headerlink\" title=\"BeautifulSoup 示例\"></a>BeautifulSoup 示例</h4><p>上面的都是比较基础的，对于一些动态的网页结构还是无能为力的。<br>我们可以使用 python <code>bs4</code> 库的 <code>BeautifulSoup</code> 库来对于请求后获得的 <code>html</code> 文本进行解析。<br>这是一段爬取豆瓣网站上<code>电影top250</code>的电影名称。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    &quot;user-agent&quot;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 &#x27;</span><br><span class=\"line\">                  &#x27;(KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36 Edg/116.0.1938.69&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for page_num in range(0, 250, 25):</span><br><span class=\"line\">    url = f&quot;https://movie.douban.com/top250?start=&#123;page_num&#125;&amp;filter=&quot;</span><br><span class=\"line\">    response = requests.get(url=url, headers=headers)</span><br><span class=\"line\">    encode = response.apparent_encoding</span><br><span class=\"line\">    content = response.content.decode(encode)</span><br><span class=\"line\">    html = BeautifulSoup(content, &#x27;lxml&#x27;)</span><br><span class=\"line\">    titles = html.findAll(&quot;span&quot;, attrs=&#123;&quot;class&quot;: &quot;title&quot;&#125;)</span><br><span class=\"line\">    for title in titles:</span><br><span class=\"line\">        if &#x27;/&#x27; not in title.string:</span><br><span class=\"line\">            print(title.string)</span><br></pre></td></tr></table></figure><br>我们通过 <code>BeatifulSoup(content, &#39;lxml&#39;)</code> 获取的是一个 BeatifulSoup 解析得到的结构。<br>其中 content 就是我们请求网站获得的 html 代码，后面的 <code>lxml</code> 是一个 html 的解析器，我们需要手动指定解析器，因为 BeautifulSoup 不仅仅可以解析 html。<br><code>html = BeautifulSoup(content, &#39;lxml&#39;)</code> 获得到的 html，有许多的方法。<br>其中如果我们想获得哪一元素，比如说段落，就可以直接 <code>html.findAll(&quot;p&quot;)</code> 返回的是一个可以迭代的对象。如果直接写 <code>html.find(&quot;p&quot;)</code> 则是获得的第一个段落元素。<br>如果我们仍想要对于段落进一步细化，我们可以在后面加上参数，其中的格式是若干组键值。比如，我们想获取类名为<code>title</code>的span，就可以写为 <code>titles = html.findAll(&quot;span&quot;, attrs=&#123;&quot;class&quot;: &quot;title&quot;&#125;)</code><br>对于提取到的元素，我们会获得一个 <code>bs4.element.Tag</code> 就是一个 bs4 中的 Tag 对象，比如说我们有一个 <code>cur</code> 是 <code>bs4.elemnt.tag</code> 对象。<br><code>cur.name</code> 就是输出标签的名字，比如 <code>p</code> <code>img</code> <code>div</code><br>如果我们想要获得里面的单个属性值，就直接 <code>cur[&#39;xx&#39;]</code> 或者 <code>cur.get(&#39;xx&#39;)</code>，如果我们想获取全部的属性值，就是 <code>cur.attrs</code><br>获得标签内的文本，<code>cur.get_text()</code></p>\n<h4 id=\"Selenium\"><a href=\"#Selenium\" class=\"headerlink\" title=\"Selenium\"></a>Selenium</h4><p>前面都是模拟发送一个 <code>request</code> 获得返回，下面是真是模拟我们打开浏览器后进行操作。<br>Python 中的 Selenium 是一个用于自动化网页操作和测试的强大工具。它提供了一种方式来模拟用户在浏览器中的操作，例如打开网页、填写表单、点击按钮、抓取数据等。<br>Selenium 的核心之一就是 WebDriver，它是一个接口，允许我们与不同的浏览器进行交互。我们需要下载与我们所使用浏览器相对应的 WebDriver 驱动程序。将 WebDriver 的路径指定为您的 Python 脚本中。</p>\n<p>下面是一段打开百度首页并且搜索「你好」的代码。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from selenium import webdriver</span><br><span class=\"line\">import time</span><br><span class=\"line\">from selenium.webdriver.common.by import By # 使用 find_element by=xxx 一定要引入这个</span><br><span class=\"line\">driver = webdriver.Chrome()</span><br><span class=\"line\">driver.get(&#x27;https://www.baidu.com&#x27;)</span><br><span class=\"line\">driver.find_element(by=By.ID, value=&#x27;kw&#x27;).send_keys(&#x27;你好&#x27;)</span><br><span class=\"line\">driver.find_element(by=By.ID, value=&#x27;su&#x27;).click()</span><br><span class=\"line\">time.sleep(5)</span><br></pre></td></tr></table></figure><br>下面是查找元素的 by 赋值情况，后面的 <code>value</code> 就是目标的索引值。这是新版本的 <code>find</code> 操作，之前的 <code>find_element_by</code> 方法现在已经弃用。<br><img src=\"/2023/09/04/python%E7%88%AC%E8%99%AB/selenium%E5%AE%9A%E4%BD%8D%E5%85%83%E7%B4%A0.png\" class=\"\"></p>\n<p>对于查找后，如果是 <code>find_elements</code> 得到的是一个链表，如果是 <code>find_element</code> 得到的是一个 <code>&lt;class &#39;selenium.webdriver.remote.webelement.WebElement&#39;&gt;</code>，后面对于这个类元素，我们可以 <code>xxx.click()</code> 点击<br><code>xxx.send_keys(&quot;xxx&quot;)</code> 发送信息<br><code>xxx.text</code> 获取文本<br><code>xxx.clear()</code> 清除元素内容 如 input 中的内容<br><code>get_attribute(&quot;value&quot;)</code> 获得<code>value</code>的属性值<br><code>current_url</code> 可以获取当前页面的 url</p>\n<p>下面是更深入的对于鼠标和键盘<br>模拟鼠标操作需要读入类 <code>ActionChains</code><br><code>from selenium.webdriver.common.action_chains import ActionChains</code><br><img src=\"/2023/09/04/python%E7%88%AC%E8%99%AB/%E9%BC%A0%E6%A0%87%E6%93%8D%E4%BD%9C.png\" class=\"\"></p>\n<p>模拟键盘操作的话，也需要导入键盘的类<br><code>from selenium.webdriver.common.keys import Keys</code><br><img src=\"/2023/09/04/python%E7%88%AC%E8%99%AB/%E9%94%AE%E7%9B%98%E6%93%8D%E4%BD%9C.png\" class=\"\"></p>\n<h5 id=\"延时等待\"><a href=\"#延时等待\" class=\"headerlink\" title=\"延时等待\"></a>延时等待</h5><p>遇到使用ajax加载的网页，页面元素可能不是同时加载出来的，这个时候尝试在get方法执行完成时获取网页源代码可能并非浏览器完全加载完成的页面。所以，这种情况下需要设置延时等待一定时间，确保全部节点都加载出来。<br>有三种方式：</p>\n<ol>\n<li>强制等待<br>直接 <code>time.sleep(xx)</code>(记得先导入包 <code>import time</code>)</li>\n<li>隐式等待<br><code>implicitly_wait(xx)</code> 设置等待时间，如果到时间还有元素没有加载出来就会抛出异常。</li>\n<li>显式等待<br>设置一个等待时间和等待条件，在规定时间内，每隔一段时间查看下条件是否成立，如果成立那么程序就继续执行，否则就抛出一个超时异常。</li>\n</ol>\n<h5 id=\"对-Cookie-的操作-亦称为-Http-Cookie\"><a href=\"#对-Cookie-的操作-亦称为-Http-Cookie\" class=\"headerlink\" title=\"对 Cookie 的操作(亦称为 Http Cookie)\"></a>对 Cookie 的操作(亦称为 Http Cookie)</h5><p>Cookie 通常用于在客户端（浏览器）和服务器之间存储一些小型数据，以便在用户与网站进行交互时进行识别、跟踪和状态管理。<br><br>爬虫中常常使用 selenium + requests 实现 cookie持久化，即先用 selenium 模拟登陆获取 cookie ，再通过 requests 携带 cookie 进行请求。<br><code>webdriver</code> 提供 cookie 的几种操作：读取、添加和删除。</p>\n<ol>\n<li>get_cookies：以字典的形式返回当前会话中可见的 cookie 信息。</li>\n<li>get_cookie(name)：返回 cookie 字典中key == name 的 cookie 信息</li>\n<li>dd_cookie(cookie_dict)：将 cookie 添加到当前会话中</li>\n<li>delete_cookie(name)：删除指定名称的单个 cookie</li>\n<li>delete_all_cookies()：删除会话范围内的所有cookie</li>\n</ol>\n<p><a href=\"https://blog.csdn.net/kobepaul123/article/details/128796839\">https://blog.csdn.net/kobepaul123/article/details/128796839</a><br><a href=\"https://blog.csdn.net/weixin_50835854/article/details/117170894\">https://blog.csdn.net/weixin_50835854/article/details/117170894</a> selenium 爬取图片<br><a href=\"https://zhuanlan.zhihu.com/p/270391233\">https://zhuanlan.zhihu.com/p/270391233</a><br><a href=\"https://blog.csdn.net/qq_37267676/article/details/111667266\">https://blog.csdn.net/qq_37267676/article/details/111667266</a><br><a href=\"https://zhuanlan.zhihu.com/p/366773104\">https://zhuanlan.zhihu.com/p/366773104</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from selenium import webdriver</span><br><span class=\"line\">from selenium.webdriver.common.by import By</span><br><span class=\"line\">import time</span><br><span class=\"line\">driver = webdriver.Chrome()</span><br><span class=\"line\">for index in range(0, 250, 25):</span><br><span class=\"line\">    driver.get(f&#x27;https://movie.douban.com/top250?start=&#123;index&#125;&amp;filter=&#x27;)</span><br><span class=\"line\">    time.sleep(1)</span><br><span class=\"line\">    list = driver.find_elements(by=By.XPATH, value=&#x27;//div[@class=&quot;pic&quot;]/a/img&#x27;)</span><br><span class=\"line\">    for cur in list:</span><br><span class=\"line\">        print(cur.get_attribute(&#x27;alt&#x27;))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"selenium-和-splinter\"><a href=\"#selenium-和-splinter\" class=\"headerlink\" title=\"selenium 和 splinter\"></a>selenium 和 splinter</h4><p>splinter和selenium都是用于测试网页的程序，可以模拟浏览器操作，进行自动化测试，可以用于爬虫，自动抢票，网页自动化处理等。Selenium是Splinter的底层，Splinter是Selenium的一个上层封装。使用splinter和selenium时也会用到和html，css相关的使用。</p>\n<h4 id=\"Scrapy-框架\"><a href=\"#Scrapy-框架\" class=\"headerlink\" title=\"Scrapy 框架\"></a>Scrapy 框架</h4><p><code>Scrapy</code> 是一个异步网络 python 爬虫框架，可以高效地处理大量的请求和响应。它能够并行发送HTTP请求，从而加快数据抓取速度。异步处理允许我们同时处理多个请求而无需等待每一个请求的完成，这对于大规模的数据抓取任务十分有用。<br>它的优势：</p>\n<ol>\n<li>内置选择器(Selector)，使用 XPath 或者 CSS 选择器语法，使我们可以轻松获取 HTML 文档中的数据(我们不需要再去使用 bs4 ?)。</li>\n<li>模块化和可扩展性<br>允许我们将爬虫任务分解为多个模块，包括爬虫、中间件、管道等，使代码易于维护和扩展。</li>\n<li>自动化处理<br>Scrapy提供了强大的自动化功能，包括请求的调度、URL跟踪、重试失败的请求等。它还支持自动限速，以避免过度请求目标网站，从而遵守网站的使用政策。</li>\n<li>内置 HTTP 请求处理<br>Scrapy可以处理HTTP请求和响应的所有细节，包括Cookies、User-Agent、重定向、状态码处理等。这减轻了用户的负担，让你专注于爬取和数据处理。</li>\n</ol>\n<p><a href=\"https://www.runoob.com/w3cnote/scrapy-detail.html\">https://www.runoob.com/w3cnote/scrapy-detail.html</a> 上面讲解了 Scrapy 的爬行流程，感觉还是挺形象的。只有当调度器中不存在任何 request 的时候，整个程序才会停止，又因为对于下载失败的 url 会再次进入 scheduler(调度器)，所以对于下载失败的 url，Scrapy 会重新进行下载。</p>\n"},{"title":"test","date":"2023-08-23T10:36:11.000Z","description":"this is a test for blog.","_content":"{ %asset_img machine_learning.jpg this is a example image. %}\n","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2023-08-23 18:36:11\ntags:\ndescription: this is a test for blog. \n---\n{ %asset_img machine_learning.jpg this is a example image. %}\n","slug":"test","published":1,"updated":"2023-08-23T10:57:56.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szo8000k5oogg68318sx","content":"<p>{ %asset_img machine_learning.jpg this is a example image. %}</p>\n","site":{"data":{}},"excerpt":"","more":"<p>{ %asset_img machine_learning.jpg this is a example image. %}</p>\n"},{"title":"二项堆","date":"2023-10-09T02:30:20.000Z","description":"the key record of binomial heap.","_content":"\n二项堆是二项树的集合。\n\n二项树是一种递归定义的有序树，定义如下：\n\n1. 二项树 B0 只有一个节点\n\n2. 二项树 Bk 由两颗二项树 B(k-1) 组成，其中一棵树是另一棵树的最左孩子。\n\n#### 二项堆的性质\n\n1. $B_k$ 一共有 $2_k$ 个节点\n2. $B_k$ 的高度为 k\n3. $B_k$ 在深度为 i 处恰好有 $C_k^{i}$ 个节点\n3. 4. 根的度数为 k，大于任何其他节点的度数。\n\n#### 二项堆的优势和劣势\n\n其实就是比二叉堆支持了合并操作？\n![image-20231018140027829](C:\\Users\\梁云森\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231018140027829.png)\n\n#### Code\n\n```c++\n#include <iostream>\n#include <algorithm>\n#include <algorithm>\n#include <string>\n#include <vector>\n\ntemplate<class T>\nclass BinomialHeapNode {\n    public:\n        T value;\n        int degree;\n        BinomialHeapNode<T>* sibling;\n        BinomialHeapNode<T>* child;\n        BinomialHeapNode<T>* parent;\n        BinomialHeapNode(T val)\n            : value(val)\n            , degree(0)\n            , sibling(nullptr)\n            , child(nullptr)\n            , parent(nullptr) {}\n};\n\ntemplate<class T>\nclass BinomialHeap {\n    public:\n        void insert(T);\n        T top();\n        void pop();\n        BinomialHeapNode<T>* topNode() {\n            return top(head);\n        }\n        void unionHeap(BinomialHeapNode<T>*);\n        void decrease(BinomialHeapNode<T>*, int);\n        BinomialHeapNode<T>* getHead() {\n            return head;\n        }\n        BinomialHeap() {\n            head = nullptr;\n        }\n    private:\n        void extractMin();  \n        BinomialHeapNode<T>* head;\n        void Insert(T);\n        BinomialHeapNode<T>* top(BinomialHeapNode<T>*);\n        void linkNode(BinomialHeapNode<T>*&, BinomialHeapNode<T>*&);\n        BinomialHeapNode<T>* mergeTopLink(BinomialHeapNode<T>*);\n        BinomialHeapNode<T>* getTopLink(BinomialHeapNode<T>*, BinomialHeapNode<T>*);\n};\n\ntemplate<class T>\nvoid BinomialHeap<T>::insert(T val) {\n    Insert(val);\n}\n\ntemplate<class T>\nvoid BinomialHeap<T>::Insert(T val) {\n    if (!head) {\n        head = new BinomialHeapNode<T>(val);\n        return ;\n    }\n    BinomialHeapNode<T>* newNode = new BinomialHeapNode<T>(val);\n    // BinomialHeapNode<T>* newHead = getTopLink(head, newNode);\n    newNode->sibling = head;\n    head = newNode;\n    head = mergeTopLink(head);\n}\n\ntemplate<class T>\nT BinomialHeap<T>::top() {\n    return top(head)->value;\n}\n\ntemplate<class T>\nBinomialHeapNode<T>* BinomialHeap<T>::top(BinomialHeapNode<T>* cur) {\n    BinomialHeapNode<T>* ans = nullptr;\n    while (cur) {\n        if (!ans) ans = cur;\n        else if (cur->value < ans->value) ans = cur;\n        cur = cur->sibling;\n    }\n    return ans;\n}\n\ntemplate<class T>\nvoid BinomialHeap<T>::pop() {\n    extractMin();\n}\n\ntemplate<class T>\nvoid BinomialHeap<T>::extractMin() {\n    BinomialHeapNode<T>* minNode = top(head);\n    BinomialHeapNode<T>* cur = head;\n    if (cur == minNode) {\n        if (head->sibling) {\n            head = head->sibling;\n        } else {\n            head = nullptr;\n            // return ;\n        }\n    } else {\n        while (cur->sibling != minNode)\n            cur = cur->sibling;\n        cur->sibling = cur->sibling->sibling;\n    }\n    std::vector<BinomialHeapNode<T>*> v;\n    BinomialHeapNode<T>* curNode = minNode->child;\n    if (curNode) {\n        while (curNode) {\n            v.push_back(curNode);\n            curNode = curNode->sibling;\n        }\n        for (BinomialHeapNode<T>* element : v)\n            element->sibling = nullptr;\n        if (v.size() > 1) {\n            std::reverse(v.begin(), v.end());\n            // 获取 minNode 的 pre，和 后面连接\n            // 取反 v 然后再合并两个根链 \n            for (int i = 0; i < v.size() - 1; ++i)\n                v[i]->sibling = v[i + 1];\n        }\n        // BinomialHeapNode<T>* newHead = getTopLink(head, v[0]);\n        // head = mergeTopLink(newHead);\n        head = getTopLink(head, v[0]);\n        head = mergeTopLink(head);\n    }\n}\n\ntemplate<class T>\nvoid BinomialHeap<T>::unionHeap(BinomialHeapNode<T>* h2) {\n    head = getTopLink(head, h2);\n    head = mergeTopLink(head);\n}\n\ntemplate<class T>\nvoid BinomialHeap<T>::decrease(BinomialHeapNode<T>* cur, int key) {\n    if (!cur || !head) {\n        throw std::runtime_error(\"illegal decreasing!\");\n    }\n    cur->value -= key;\n    BinomialHeapNode<T>* parent = cur->parent;\n    while (parent && cur->value < parent->value) {\n        T temp = cur->value;\n        cur->value = parent->value;\n        parent->value = temp;\n        cur = parent;\n        parent = cur->parent;\n    }\n}\n\ntemplate<class T>\nvoid BinomialHeap<T>::linkNode(BinomialHeapNode<T>*& cur, BinomialHeapNode<T>*& newNode) {\n    newNode->parent = cur;\n    newNode->sibling = cur->child;\n    cur->child = newNode;\n    ++cur->degree;\n}\n\ntemplate<class T>\nBinomialHeapNode<T>* BinomialHeap<T>::getTopLink(BinomialHeapNode<T>* p1, BinomialHeapNode<T>* p2) {\n    if (p1 == nullptr) {\n        return p2;\n    } else if (p2 == nullptr) {\n        return p1;\n    }\n    BinomialHeapNode<T>* newHead = nullptr;\n    BinomialHeapNode<T>* p = nullptr;\n    if (p1->degree <= p2->degree) {\n        newHead = p1;\n        p = p1;\n        p1 = p1->sibling;\n    } else {\n        newHead = p2;\n        p = p2;\n        p2 = p2->sibling;\n    }\n    while (p1 && p2) {\n        if (p1->degree <= p2->degree) {\n            p->sibling = p1;\n            p1 = p1->sibling;\n            p = p->sibling;\n        } else {\n            p->sibling = p2;\n            p2 = p2->sibling;\n            p = p->sibling;\n        }\n    }\n    if (p1) p->sibling = p1;\n    else p->sibling = p2;\n    return newHead;\n}\n\ntemplate<class T>\nBinomialHeapNode<T>* BinomialHeap<T>::mergeTopLink(BinomialHeapNode<T>* cur) {\n    if (!cur) return nullptr;\n    BinomialHeapNode<T>* prev = nullptr;\n    BinomialHeapNode<T>* x = cur;\n    BinomialHeapNode<T>* nxt = x->sibling;\n    while (nxt) {\n        // std::cout << \"a\";\n        if (x->degree != nxt->degree || (nxt->sibling && nxt->sibling->degree == x->degree)) {\n            prev = x;\n            x = nxt; // 连续三个一样的，并且现在的 x 指向了第一个位置 或者 当前不一样和下一个\n        } else if (x->value <= nxt->value) {\n            x->sibling = nxt->sibling;\n            linkNode(x, nxt);\n        } else {\n            if (prev == nullptr) {\n                cur = nxt;\n            } else {\n                prev->sibling = nxt;\n            }\n            linkNode(nxt, x);\n            x = nxt;\n        }\n        nxt = x->sibling;\n    }\n    return cur;\n}\n```\n\n","source":"_posts/二项堆.md","raw":"---\ntitle: 二项堆\ndate: 2023-10-09 10:30:20\ntags:\ndescription: the key record of binomial heap.\n---\n\n二项堆是二项树的集合。\n\n二项树是一种递归定义的有序树，定义如下：\n\n1. 二项树 B0 只有一个节点\n\n2. 二项树 Bk 由两颗二项树 B(k-1) 组成，其中一棵树是另一棵树的最左孩子。\n\n#### 二项堆的性质\n\n1. $B_k$ 一共有 $2_k$ 个节点\n2. $B_k$ 的高度为 k\n3. $B_k$ 在深度为 i 处恰好有 $C_k^{i}$ 个节点\n3. 4. 根的度数为 k，大于任何其他节点的度数。\n\n#### 二项堆的优势和劣势\n\n其实就是比二叉堆支持了合并操作？\n![image-20231018140027829](C:\\Users\\梁云森\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231018140027829.png)\n\n#### Code\n\n```c++\n#include <iostream>\n#include <algorithm>\n#include <algorithm>\n#include <string>\n#include <vector>\n\ntemplate<class T>\nclass BinomialHeapNode {\n    public:\n        T value;\n        int degree;\n        BinomialHeapNode<T>* sibling;\n        BinomialHeapNode<T>* child;\n        BinomialHeapNode<T>* parent;\n        BinomialHeapNode(T val)\n            : value(val)\n            , degree(0)\n            , sibling(nullptr)\n            , child(nullptr)\n            , parent(nullptr) {}\n};\n\ntemplate<class T>\nclass BinomialHeap {\n    public:\n        void insert(T);\n        T top();\n        void pop();\n        BinomialHeapNode<T>* topNode() {\n            return top(head);\n        }\n        void unionHeap(BinomialHeapNode<T>*);\n        void decrease(BinomialHeapNode<T>*, int);\n        BinomialHeapNode<T>* getHead() {\n            return head;\n        }\n        BinomialHeap() {\n            head = nullptr;\n        }\n    private:\n        void extractMin();  \n        BinomialHeapNode<T>* head;\n        void Insert(T);\n        BinomialHeapNode<T>* top(BinomialHeapNode<T>*);\n        void linkNode(BinomialHeapNode<T>*&, BinomialHeapNode<T>*&);\n        BinomialHeapNode<T>* mergeTopLink(BinomialHeapNode<T>*);\n        BinomialHeapNode<T>* getTopLink(BinomialHeapNode<T>*, BinomialHeapNode<T>*);\n};\n\ntemplate<class T>\nvoid BinomialHeap<T>::insert(T val) {\n    Insert(val);\n}\n\ntemplate<class T>\nvoid BinomialHeap<T>::Insert(T val) {\n    if (!head) {\n        head = new BinomialHeapNode<T>(val);\n        return ;\n    }\n    BinomialHeapNode<T>* newNode = new BinomialHeapNode<T>(val);\n    // BinomialHeapNode<T>* newHead = getTopLink(head, newNode);\n    newNode->sibling = head;\n    head = newNode;\n    head = mergeTopLink(head);\n}\n\ntemplate<class T>\nT BinomialHeap<T>::top() {\n    return top(head)->value;\n}\n\ntemplate<class T>\nBinomialHeapNode<T>* BinomialHeap<T>::top(BinomialHeapNode<T>* cur) {\n    BinomialHeapNode<T>* ans = nullptr;\n    while (cur) {\n        if (!ans) ans = cur;\n        else if (cur->value < ans->value) ans = cur;\n        cur = cur->sibling;\n    }\n    return ans;\n}\n\ntemplate<class T>\nvoid BinomialHeap<T>::pop() {\n    extractMin();\n}\n\ntemplate<class T>\nvoid BinomialHeap<T>::extractMin() {\n    BinomialHeapNode<T>* minNode = top(head);\n    BinomialHeapNode<T>* cur = head;\n    if (cur == minNode) {\n        if (head->sibling) {\n            head = head->sibling;\n        } else {\n            head = nullptr;\n            // return ;\n        }\n    } else {\n        while (cur->sibling != minNode)\n            cur = cur->sibling;\n        cur->sibling = cur->sibling->sibling;\n    }\n    std::vector<BinomialHeapNode<T>*> v;\n    BinomialHeapNode<T>* curNode = minNode->child;\n    if (curNode) {\n        while (curNode) {\n            v.push_back(curNode);\n            curNode = curNode->sibling;\n        }\n        for (BinomialHeapNode<T>* element : v)\n            element->sibling = nullptr;\n        if (v.size() > 1) {\n            std::reverse(v.begin(), v.end());\n            // 获取 minNode 的 pre，和 后面连接\n            // 取反 v 然后再合并两个根链 \n            for (int i = 0; i < v.size() - 1; ++i)\n                v[i]->sibling = v[i + 1];\n        }\n        // BinomialHeapNode<T>* newHead = getTopLink(head, v[0]);\n        // head = mergeTopLink(newHead);\n        head = getTopLink(head, v[0]);\n        head = mergeTopLink(head);\n    }\n}\n\ntemplate<class T>\nvoid BinomialHeap<T>::unionHeap(BinomialHeapNode<T>* h2) {\n    head = getTopLink(head, h2);\n    head = mergeTopLink(head);\n}\n\ntemplate<class T>\nvoid BinomialHeap<T>::decrease(BinomialHeapNode<T>* cur, int key) {\n    if (!cur || !head) {\n        throw std::runtime_error(\"illegal decreasing!\");\n    }\n    cur->value -= key;\n    BinomialHeapNode<T>* parent = cur->parent;\n    while (parent && cur->value < parent->value) {\n        T temp = cur->value;\n        cur->value = parent->value;\n        parent->value = temp;\n        cur = parent;\n        parent = cur->parent;\n    }\n}\n\ntemplate<class T>\nvoid BinomialHeap<T>::linkNode(BinomialHeapNode<T>*& cur, BinomialHeapNode<T>*& newNode) {\n    newNode->parent = cur;\n    newNode->sibling = cur->child;\n    cur->child = newNode;\n    ++cur->degree;\n}\n\ntemplate<class T>\nBinomialHeapNode<T>* BinomialHeap<T>::getTopLink(BinomialHeapNode<T>* p1, BinomialHeapNode<T>* p2) {\n    if (p1 == nullptr) {\n        return p2;\n    } else if (p2 == nullptr) {\n        return p1;\n    }\n    BinomialHeapNode<T>* newHead = nullptr;\n    BinomialHeapNode<T>* p = nullptr;\n    if (p1->degree <= p2->degree) {\n        newHead = p1;\n        p = p1;\n        p1 = p1->sibling;\n    } else {\n        newHead = p2;\n        p = p2;\n        p2 = p2->sibling;\n    }\n    while (p1 && p2) {\n        if (p1->degree <= p2->degree) {\n            p->sibling = p1;\n            p1 = p1->sibling;\n            p = p->sibling;\n        } else {\n            p->sibling = p2;\n            p2 = p2->sibling;\n            p = p->sibling;\n        }\n    }\n    if (p1) p->sibling = p1;\n    else p->sibling = p2;\n    return newHead;\n}\n\ntemplate<class T>\nBinomialHeapNode<T>* BinomialHeap<T>::mergeTopLink(BinomialHeapNode<T>* cur) {\n    if (!cur) return nullptr;\n    BinomialHeapNode<T>* prev = nullptr;\n    BinomialHeapNode<T>* x = cur;\n    BinomialHeapNode<T>* nxt = x->sibling;\n    while (nxt) {\n        // std::cout << \"a\";\n        if (x->degree != nxt->degree || (nxt->sibling && nxt->sibling->degree == x->degree)) {\n            prev = x;\n            x = nxt; // 连续三个一样的，并且现在的 x 指向了第一个位置 或者 当前不一样和下一个\n        } else if (x->value <= nxt->value) {\n            x->sibling = nxt->sibling;\n            linkNode(x, nxt);\n        } else {\n            if (prev == nullptr) {\n                cur = nxt;\n            } else {\n                prev->sibling = nxt;\n            }\n            linkNode(nxt, x);\n            x = nxt;\n        }\n        nxt = x->sibling;\n    }\n    return cur;\n}\n```\n\n","slug":"二项堆","published":1,"updated":"2023-10-19T01:16:55.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szo8000m5oogc0agcr3l","content":"<p>二项堆是二项树的集合。</p>\n<p>二项树是一种递归定义的有序树，定义如下：</p>\n<ol>\n<li><p>二项树 B0 只有一个节点</p>\n</li>\n<li><p>二项树 Bk 由两颗二项树 B(k-1) 组成，其中一棵树是另一棵树的最左孩子。</p>\n</li>\n</ol>\n<h4 id=\"二项堆的性质\"><a href=\"#二项堆的性质\" class=\"headerlink\" title=\"二项堆的性质\"></a>二项堆的性质</h4><ol>\n<li>$B_k$ 一共有 $2_k$ 个节点</li>\n<li>$B_k$ 的高度为 k</li>\n<li>$B_k$ 在深度为 i 处恰好有 $C_k^{i}$ 个节点</li>\n<li><ol>\n<li>根的度数为 k，大于任何其他节点的度数。</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"二项堆的优势和劣势\"><a href=\"#二项堆的优势和劣势\" class=\"headerlink\" title=\"二项堆的优势和劣势\"></a>二项堆的优势和劣势</h4><p>其实就是比二叉堆支持了合并操作？<br><img src=\"C:\\Users\\梁云森\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231018140027829.png\" alt=\"image-20231018140027829\"></p>\n<h4 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BinomialHeapNode</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        T value;</span><br><span class=\"line\">        <span class=\"type\">int</span> degree;</span><br><span class=\"line\">        BinomialHeapNode&lt;T&gt;* sibling;</span><br><span class=\"line\">        BinomialHeapNode&lt;T&gt;* child;</span><br><span class=\"line\">        BinomialHeapNode&lt;T&gt;* parent;</span><br><span class=\"line\">        <span class=\"built_in\">BinomialHeapNode</span>(T val)</span><br><span class=\"line\">            : <span class=\"built_in\">value</span>(val)</span><br><span class=\"line\">            , <span class=\"built_in\">degree</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">            , <span class=\"built_in\">sibling</span>(<span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">            , <span class=\"built_in\">child</span>(<span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">            , <span class=\"built_in\">parent</span>(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BinomialHeap</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(T)</span></span>;</span><br><span class=\"line\">        <span class=\"function\">T <span class=\"title\">top</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"function\">BinomialHeapNode&lt;T&gt;* <span class=\"title\">topNode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">top</span>(head);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">unionHeap</span><span class=\"params\">(BinomialHeapNode&lt;T&gt;*)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">decrease</span><span class=\"params\">(BinomialHeapNode&lt;T&gt;*, <span class=\"type\">int</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"function\">BinomialHeapNode&lt;T&gt;* <span class=\"title\">getHead</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">BinomialHeap</span>() &#123;</span><br><span class=\"line\">            head = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">extractMin</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">        BinomialHeapNode&lt;T&gt;* head;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(T)</span></span>;</span><br><span class=\"line\">        <span class=\"function\">BinomialHeapNode&lt;T&gt;* <span class=\"title\">top</span><span class=\"params\">(BinomialHeapNode&lt;T&gt;*)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">linkNode</span><span class=\"params\">(BinomialHeapNode&lt;T&gt;*&amp;, BinomialHeapNode&lt;T&gt;*&amp;)</span></span>;</span><br><span class=\"line\">        <span class=\"function\">BinomialHeapNode&lt;T&gt;* <span class=\"title\">mergeTopLink</span><span class=\"params\">(BinomialHeapNode&lt;T&gt;*)</span></span>;</span><br><span class=\"line\">        <span class=\"function\">BinomialHeapNode&lt;T&gt;* <span class=\"title\">getTopLink</span><span class=\"params\">(BinomialHeapNode&lt;T&gt;*, BinomialHeapNode&lt;T&gt;*)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> BinomialHeap&lt;T&gt;::<span class=\"built_in\">insert</span>(T val) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Insert</span>(val);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> BinomialHeap&lt;T&gt;::<span class=\"built_in\">Insert</span>(T val) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!head) &#123;</span><br><span class=\"line\">        head = <span class=\"keyword\">new</span> <span class=\"built_in\">BinomialHeapNode</span>&lt;T&gt;(val);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    BinomialHeapNode&lt;T&gt;* newNode = <span class=\"keyword\">new</span> <span class=\"built_in\">BinomialHeapNode</span>&lt;T&gt;(val);</span><br><span class=\"line\">    <span class=\"comment\">// BinomialHeapNode&lt;T&gt;* newHead = getTopLink(head, newNode);</span></span><br><span class=\"line\">    newNode-&gt;sibling = head;</span><br><span class=\"line\">    head = newNode;</span><br><span class=\"line\">    head = <span class=\"built_in\">mergeTopLink</span>(head);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">T BinomialHeap&lt;T&gt;::<span class=\"built_in\">top</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">top</span>(head)-&gt;value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">BinomialHeapNode&lt;T&gt;* BinomialHeap&lt;T&gt;::<span class=\"built_in\">top</span>(BinomialHeapNode&lt;T&gt;* cur) &#123;</span><br><span class=\"line\">    BinomialHeapNode&lt;T&gt;* ans = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ans) ans = cur;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cur-&gt;value &lt; ans-&gt;value) ans = cur;</span><br><span class=\"line\">        cur = cur-&gt;sibling;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> BinomialHeap&lt;T&gt;::<span class=\"built_in\">pop</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">extractMin</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> BinomialHeap&lt;T&gt;::<span class=\"built_in\">extractMin</span>() &#123;</span><br><span class=\"line\">    BinomialHeapNode&lt;T&gt;* minNode = <span class=\"built_in\">top</span>(head);</span><br><span class=\"line\">    BinomialHeapNode&lt;T&gt;* cur = head;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cur == minNode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head-&gt;sibling) &#123;</span><br><span class=\"line\">            head = head-&gt;sibling;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            head = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            <span class=\"comment\">// return ;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur-&gt;sibling != minNode)</span><br><span class=\"line\">            cur = cur-&gt;sibling;</span><br><span class=\"line\">        cur-&gt;sibling = cur-&gt;sibling-&gt;sibling;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    std::vector&lt;BinomialHeapNode&lt;T&gt;*&gt; v;</span><br><span class=\"line\">    BinomialHeapNode&lt;T&gt;* curNode = minNode-&gt;child;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (curNode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curNode) &#123;</span><br><span class=\"line\">            v.<span class=\"built_in\">push_back</span>(curNode);</span><br><span class=\"line\">            curNode = curNode-&gt;sibling;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (BinomialHeapNode&lt;T&gt;* element : v)</span><br><span class=\"line\">            element-&gt;sibling = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            std::<span class=\"built_in\">reverse</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">            <span class=\"comment\">// 获取 minNode 的 pre，和 后面连接</span></span><br><span class=\"line\">            <span class=\"comment\">// 取反 v 然后再合并两个根链 </span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; v.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">                v[i]-&gt;sibling = v[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// BinomialHeapNode&lt;T&gt;* newHead = getTopLink(head, v[0]);</span></span><br><span class=\"line\">        <span class=\"comment\">// head = mergeTopLink(newHead);</span></span><br><span class=\"line\">        head = <span class=\"built_in\">getTopLink</span>(head, v[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        head = <span class=\"built_in\">mergeTopLink</span>(head);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> BinomialHeap&lt;T&gt;::<span class=\"built_in\">unionHeap</span>(BinomialHeapNode&lt;T&gt;* h2) &#123;</span><br><span class=\"line\">    head = <span class=\"built_in\">getTopLink</span>(head, h2);</span><br><span class=\"line\">    head = <span class=\"built_in\">mergeTopLink</span>(head);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> BinomialHeap&lt;T&gt;::<span class=\"built_in\">decrease</span>(BinomialHeapNode&lt;T&gt;* cur, <span class=\"type\">int</span> key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!cur || !head) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> std::<span class=\"built_in\">runtime_error</span>(<span class=\"string\">&quot;illegal decreasing!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cur-&gt;value -= key;</span><br><span class=\"line\">    BinomialHeapNode&lt;T&gt;* parent = cur-&gt;parent;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (parent &amp;&amp; cur-&gt;value &lt; parent-&gt;value) &#123;</span><br><span class=\"line\">        T temp = cur-&gt;value;</span><br><span class=\"line\">        cur-&gt;value = parent-&gt;value;</span><br><span class=\"line\">        parent-&gt;value = temp;</span><br><span class=\"line\">        cur = parent;</span><br><span class=\"line\">        parent = cur-&gt;parent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> BinomialHeap&lt;T&gt;::<span class=\"built_in\">linkNode</span>(BinomialHeapNode&lt;T&gt;*&amp; cur, BinomialHeapNode&lt;T&gt;*&amp; newNode) &#123;</span><br><span class=\"line\">    newNode-&gt;parent = cur;</span><br><span class=\"line\">    newNode-&gt;sibling = cur-&gt;child;</span><br><span class=\"line\">    cur-&gt;child = newNode;</span><br><span class=\"line\">    ++cur-&gt;degree;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">BinomialHeapNode&lt;T&gt;* BinomialHeap&lt;T&gt;::<span class=\"built_in\">getTopLink</span>(BinomialHeapNode&lt;T&gt;* p1, BinomialHeapNode&lt;T&gt;* p2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p1 == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p2;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p2 == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    BinomialHeapNode&lt;T&gt;* newHead = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    BinomialHeapNode&lt;T&gt;* p = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p1-&gt;degree &lt;= p2-&gt;degree) &#123;</span><br><span class=\"line\">        newHead = p1;</span><br><span class=\"line\">        p = p1;</span><br><span class=\"line\">        p1 = p1-&gt;sibling;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        newHead = p2;</span><br><span class=\"line\">        p = p2;</span><br><span class=\"line\">        p2 = p2-&gt;sibling;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p1 &amp;&amp; p2) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p1-&gt;degree &lt;= p2-&gt;degree) &#123;</span><br><span class=\"line\">            p-&gt;sibling = p1;</span><br><span class=\"line\">            p1 = p1-&gt;sibling;</span><br><span class=\"line\">            p = p-&gt;sibling;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            p-&gt;sibling = p2;</span><br><span class=\"line\">            p2 = p2-&gt;sibling;</span><br><span class=\"line\">            p = p-&gt;sibling;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p1) p-&gt;sibling = p1;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> p-&gt;sibling = p2;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newHead;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">BinomialHeapNode&lt;T&gt;* BinomialHeap&lt;T&gt;::<span class=\"built_in\">mergeTopLink</span>(BinomialHeapNode&lt;T&gt;* cur) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!cur) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    BinomialHeapNode&lt;T&gt;* prev = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    BinomialHeapNode&lt;T&gt;* x = cur;</span><br><span class=\"line\">    BinomialHeapNode&lt;T&gt;* nxt = x-&gt;sibling;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (nxt) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// std::cout &lt;&lt; &quot;a&quot;;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x-&gt;degree != nxt-&gt;degree || (nxt-&gt;sibling &amp;&amp; nxt-&gt;sibling-&gt;degree == x-&gt;degree)) &#123;</span><br><span class=\"line\">            prev = x;</span><br><span class=\"line\">            x = nxt; <span class=\"comment\">// 连续三个一样的，并且现在的 x 指向了第一个位置 或者 当前不一样和下一个</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x-&gt;value &lt;= nxt-&gt;value) &#123;</span><br><span class=\"line\">            x-&gt;sibling = nxt-&gt;sibling;</span><br><span class=\"line\">            <span class=\"built_in\">linkNode</span>(x, nxt);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prev == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">                cur = nxt;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                prev-&gt;sibling = nxt;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">linkNode</span>(nxt, x);</span><br><span class=\"line\">            x = nxt;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nxt = x-&gt;sibling;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cur;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>二项堆是二项树的集合。</p>\n<p>二项树是一种递归定义的有序树，定义如下：</p>\n<ol>\n<li><p>二项树 B0 只有一个节点</p>\n</li>\n<li><p>二项树 Bk 由两颗二项树 B(k-1) 组成，其中一棵树是另一棵树的最左孩子。</p>\n</li>\n</ol>\n<h4 id=\"二项堆的性质\"><a href=\"#二项堆的性质\" class=\"headerlink\" title=\"二项堆的性质\"></a>二项堆的性质</h4><ol>\n<li>$B_k$ 一共有 $2_k$ 个节点</li>\n<li>$B_k$ 的高度为 k</li>\n<li>$B_k$ 在深度为 i 处恰好有 $C_k^{i}$ 个节点</li>\n<li><ol>\n<li>根的度数为 k，大于任何其他节点的度数。</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"二项堆的优势和劣势\"><a href=\"#二项堆的优势和劣势\" class=\"headerlink\" title=\"二项堆的优势和劣势\"></a>二项堆的优势和劣势</h4><p>其实就是比二叉堆支持了合并操作？<br><img src=\"C:\\Users\\梁云森\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231018140027829.png\" alt=\"image-20231018140027829\"></p>\n<h4 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BinomialHeapNode</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        T value;</span><br><span class=\"line\">        <span class=\"type\">int</span> degree;</span><br><span class=\"line\">        BinomialHeapNode&lt;T&gt;* sibling;</span><br><span class=\"line\">        BinomialHeapNode&lt;T&gt;* child;</span><br><span class=\"line\">        BinomialHeapNode&lt;T&gt;* parent;</span><br><span class=\"line\">        <span class=\"built_in\">BinomialHeapNode</span>(T val)</span><br><span class=\"line\">            : <span class=\"built_in\">value</span>(val)</span><br><span class=\"line\">            , <span class=\"built_in\">degree</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">            , <span class=\"built_in\">sibling</span>(<span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">            , <span class=\"built_in\">child</span>(<span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">            , <span class=\"built_in\">parent</span>(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BinomialHeap</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(T)</span></span>;</span><br><span class=\"line\">        <span class=\"function\">T <span class=\"title\">top</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"function\">BinomialHeapNode&lt;T&gt;* <span class=\"title\">topNode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">top</span>(head);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">unionHeap</span><span class=\"params\">(BinomialHeapNode&lt;T&gt;*)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">decrease</span><span class=\"params\">(BinomialHeapNode&lt;T&gt;*, <span class=\"type\">int</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"function\">BinomialHeapNode&lt;T&gt;* <span class=\"title\">getHead</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">BinomialHeap</span>() &#123;</span><br><span class=\"line\">            head = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">extractMin</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">        BinomialHeapNode&lt;T&gt;* head;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(T)</span></span>;</span><br><span class=\"line\">        <span class=\"function\">BinomialHeapNode&lt;T&gt;* <span class=\"title\">top</span><span class=\"params\">(BinomialHeapNode&lt;T&gt;*)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">linkNode</span><span class=\"params\">(BinomialHeapNode&lt;T&gt;*&amp;, BinomialHeapNode&lt;T&gt;*&amp;)</span></span>;</span><br><span class=\"line\">        <span class=\"function\">BinomialHeapNode&lt;T&gt;* <span class=\"title\">mergeTopLink</span><span class=\"params\">(BinomialHeapNode&lt;T&gt;*)</span></span>;</span><br><span class=\"line\">        <span class=\"function\">BinomialHeapNode&lt;T&gt;* <span class=\"title\">getTopLink</span><span class=\"params\">(BinomialHeapNode&lt;T&gt;*, BinomialHeapNode&lt;T&gt;*)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> BinomialHeap&lt;T&gt;::<span class=\"built_in\">insert</span>(T val) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Insert</span>(val);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> BinomialHeap&lt;T&gt;::<span class=\"built_in\">Insert</span>(T val) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!head) &#123;</span><br><span class=\"line\">        head = <span class=\"keyword\">new</span> <span class=\"built_in\">BinomialHeapNode</span>&lt;T&gt;(val);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    BinomialHeapNode&lt;T&gt;* newNode = <span class=\"keyword\">new</span> <span class=\"built_in\">BinomialHeapNode</span>&lt;T&gt;(val);</span><br><span class=\"line\">    <span class=\"comment\">// BinomialHeapNode&lt;T&gt;* newHead = getTopLink(head, newNode);</span></span><br><span class=\"line\">    newNode-&gt;sibling = head;</span><br><span class=\"line\">    head = newNode;</span><br><span class=\"line\">    head = <span class=\"built_in\">mergeTopLink</span>(head);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">T BinomialHeap&lt;T&gt;::<span class=\"built_in\">top</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">top</span>(head)-&gt;value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">BinomialHeapNode&lt;T&gt;* BinomialHeap&lt;T&gt;::<span class=\"built_in\">top</span>(BinomialHeapNode&lt;T&gt;* cur) &#123;</span><br><span class=\"line\">    BinomialHeapNode&lt;T&gt;* ans = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ans) ans = cur;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cur-&gt;value &lt; ans-&gt;value) ans = cur;</span><br><span class=\"line\">        cur = cur-&gt;sibling;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> BinomialHeap&lt;T&gt;::<span class=\"built_in\">pop</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">extractMin</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> BinomialHeap&lt;T&gt;::<span class=\"built_in\">extractMin</span>() &#123;</span><br><span class=\"line\">    BinomialHeapNode&lt;T&gt;* minNode = <span class=\"built_in\">top</span>(head);</span><br><span class=\"line\">    BinomialHeapNode&lt;T&gt;* cur = head;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cur == minNode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head-&gt;sibling) &#123;</span><br><span class=\"line\">            head = head-&gt;sibling;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            head = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            <span class=\"comment\">// return ;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur-&gt;sibling != minNode)</span><br><span class=\"line\">            cur = cur-&gt;sibling;</span><br><span class=\"line\">        cur-&gt;sibling = cur-&gt;sibling-&gt;sibling;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    std::vector&lt;BinomialHeapNode&lt;T&gt;*&gt; v;</span><br><span class=\"line\">    BinomialHeapNode&lt;T&gt;* curNode = minNode-&gt;child;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (curNode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curNode) &#123;</span><br><span class=\"line\">            v.<span class=\"built_in\">push_back</span>(curNode);</span><br><span class=\"line\">            curNode = curNode-&gt;sibling;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (BinomialHeapNode&lt;T&gt;* element : v)</span><br><span class=\"line\">            element-&gt;sibling = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            std::<span class=\"built_in\">reverse</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">            <span class=\"comment\">// 获取 minNode 的 pre，和 后面连接</span></span><br><span class=\"line\">            <span class=\"comment\">// 取反 v 然后再合并两个根链 </span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; v.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">                v[i]-&gt;sibling = v[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// BinomialHeapNode&lt;T&gt;* newHead = getTopLink(head, v[0]);</span></span><br><span class=\"line\">        <span class=\"comment\">// head = mergeTopLink(newHead);</span></span><br><span class=\"line\">        head = <span class=\"built_in\">getTopLink</span>(head, v[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        head = <span class=\"built_in\">mergeTopLink</span>(head);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> BinomialHeap&lt;T&gt;::<span class=\"built_in\">unionHeap</span>(BinomialHeapNode&lt;T&gt;* h2) &#123;</span><br><span class=\"line\">    head = <span class=\"built_in\">getTopLink</span>(head, h2);</span><br><span class=\"line\">    head = <span class=\"built_in\">mergeTopLink</span>(head);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> BinomialHeap&lt;T&gt;::<span class=\"built_in\">decrease</span>(BinomialHeapNode&lt;T&gt;* cur, <span class=\"type\">int</span> key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!cur || !head) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> std::<span class=\"built_in\">runtime_error</span>(<span class=\"string\">&quot;illegal decreasing!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cur-&gt;value -= key;</span><br><span class=\"line\">    BinomialHeapNode&lt;T&gt;* parent = cur-&gt;parent;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (parent &amp;&amp; cur-&gt;value &lt; parent-&gt;value) &#123;</span><br><span class=\"line\">        T temp = cur-&gt;value;</span><br><span class=\"line\">        cur-&gt;value = parent-&gt;value;</span><br><span class=\"line\">        parent-&gt;value = temp;</span><br><span class=\"line\">        cur = parent;</span><br><span class=\"line\">        parent = cur-&gt;parent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> BinomialHeap&lt;T&gt;::<span class=\"built_in\">linkNode</span>(BinomialHeapNode&lt;T&gt;*&amp; cur, BinomialHeapNode&lt;T&gt;*&amp; newNode) &#123;</span><br><span class=\"line\">    newNode-&gt;parent = cur;</span><br><span class=\"line\">    newNode-&gt;sibling = cur-&gt;child;</span><br><span class=\"line\">    cur-&gt;child = newNode;</span><br><span class=\"line\">    ++cur-&gt;degree;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">BinomialHeapNode&lt;T&gt;* BinomialHeap&lt;T&gt;::<span class=\"built_in\">getTopLink</span>(BinomialHeapNode&lt;T&gt;* p1, BinomialHeapNode&lt;T&gt;* p2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p1 == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p2;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p2 == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    BinomialHeapNode&lt;T&gt;* newHead = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    BinomialHeapNode&lt;T&gt;* p = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p1-&gt;degree &lt;= p2-&gt;degree) &#123;</span><br><span class=\"line\">        newHead = p1;</span><br><span class=\"line\">        p = p1;</span><br><span class=\"line\">        p1 = p1-&gt;sibling;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        newHead = p2;</span><br><span class=\"line\">        p = p2;</span><br><span class=\"line\">        p2 = p2-&gt;sibling;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p1 &amp;&amp; p2) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p1-&gt;degree &lt;= p2-&gt;degree) &#123;</span><br><span class=\"line\">            p-&gt;sibling = p1;</span><br><span class=\"line\">            p1 = p1-&gt;sibling;</span><br><span class=\"line\">            p = p-&gt;sibling;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            p-&gt;sibling = p2;</span><br><span class=\"line\">            p2 = p2-&gt;sibling;</span><br><span class=\"line\">            p = p-&gt;sibling;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p1) p-&gt;sibling = p1;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> p-&gt;sibling = p2;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newHead;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">BinomialHeapNode&lt;T&gt;* BinomialHeap&lt;T&gt;::<span class=\"built_in\">mergeTopLink</span>(BinomialHeapNode&lt;T&gt;* cur) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!cur) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    BinomialHeapNode&lt;T&gt;* prev = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    BinomialHeapNode&lt;T&gt;* x = cur;</span><br><span class=\"line\">    BinomialHeapNode&lt;T&gt;* nxt = x-&gt;sibling;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (nxt) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// std::cout &lt;&lt; &quot;a&quot;;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x-&gt;degree != nxt-&gt;degree || (nxt-&gt;sibling &amp;&amp; nxt-&gt;sibling-&gt;degree == x-&gt;degree)) &#123;</span><br><span class=\"line\">            prev = x;</span><br><span class=\"line\">            x = nxt; <span class=\"comment\">// 连续三个一样的，并且现在的 x 指向了第一个位置 或者 当前不一样和下一个</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x-&gt;value &lt;= nxt-&gt;value) &#123;</span><br><span class=\"line\">            x-&gt;sibling = nxt-&gt;sibling;</span><br><span class=\"line\">            <span class=\"built_in\">linkNode</span>(x, nxt);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prev == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">                cur = nxt;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                prev-&gt;sibling = nxt;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">linkNode</span>(nxt, x);</span><br><span class=\"line\">            x = nxt;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nxt = x-&gt;sibling;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cur;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"公共关系实务","date":"2023-09-18T11:26:47.000Z","description":"record something important.","_content":"#### 第二章 公共关系产生与发展\n古代时期--公共关系思想的萌芽\n\n#### 扩展\n公共关系确实有一段黑暗的历史，我们不否认，正视历史。\n","source":"_posts/公共关系实务.md","raw":"---\ntitle: 公共关系实务\ndate: 2023-09-18 19:26:47\ntags: \ndescription: record something important.\n---\n#### 第二章 公共关系产生与发展\n古代时期--公共关系思想的萌芽\n\n#### 扩展\n公共关系确实有一段黑暗的历史，我们不否认，正视历史。\n","slug":"公共关系实务","published":1,"updated":"2023-09-27T03:08:39.111Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szo9000o5oogha4de55q","content":"<h4 id=\"第二章-公共关系产生与发展\"><a href=\"#第二章-公共关系产生与发展\" class=\"headerlink\" title=\"第二章 公共关系产生与发展\"></a>第二章 公共关系产生与发展</h4><p>古代时期—公共关系思想的萌芽</p>\n<h4 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h4><p>公共关系确实有一段黑暗的历史，我们不否认，正视历史。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"第二章-公共关系产生与发展\"><a href=\"#第二章-公共关系产生与发展\" class=\"headerlink\" title=\"第二章 公共关系产生与发展\"></a>第二章 公共关系产生与发展</h4><p>古代时期—公共关系思想的萌芽</p>\n<h4 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h4><p>公共关系确实有一段黑暗的历史，我们不否认，正视历史。</p>\n"},{"title":"博弈论及其应用","date":"2023-10-05T15:30:14.000Z","description":"the key record of game theory and its application.","_content":"\n博弈论的**精髓在于**：博弈中的一个理性决策者必须在考虑其它局中人行动的基础上来选择自己最理想的行动方案。\n\n#### 囚徒困境 prisoners' dilemma\n\n两个嫌疑犯被分别关在两个房间由警察审讯，警察告诉每个嫌疑犯：如果两个人都不承认，每人将被判为1年；如果两个人都坦白，各判8年；如果其中一人坦白，另一人抵赖，坦白者释放，抵赖者判10年。每个囚徒将面临四种可能结果，被判0年、1年、8年、10年。\n\n但在上述例子中，一个人的最优选择并不依赖于他人的选择。这样的最优战略，被称为“占优战略”(dominant strategy)。由所有参与人的占优战略构成的战略组合被称为“占优均衡”。\n占优战略均衡的出现只要求所有人都是理性的，但不要求每个参与人知道其他参与人是否理性.\n\n「囚徒困境」表明**个人理性和集体理性之间的冲突**。\n这样的例子有：寡头竞争、军备竞赛、团队生产中的劳动供给、公共产品的供给。\n\n#### 博弈的划分\n\n有合作博弈和非合作博弈，其中非合作博弈按照参与人的先后顺序又可以分为**静态博弈和动态博弈**\n\n非合作博弈按照参与人对其他人(对手)的特征、战略空间以及支付函数的知识可以划分为：**完全信息博弈和不完全信息博弈**\n\n{%asset_img 非合作博弈划分.png%}\n\n垄断最优产量小于非垄断的情况，但是对于垄断企业的利润大于非垄断情况下两个企业的利润和。\n","source":"_posts/博弈论及其应用.md","raw":"---\ntitle: 博弈论及其应用\ndate: 2023-10-05 23:30:14\ntags: GameTheory\ndescription: the key record of game theory and its application. \n---\n\n博弈论的**精髓在于**：博弈中的一个理性决策者必须在考虑其它局中人行动的基础上来选择自己最理想的行动方案。\n\n#### 囚徒困境 prisoners' dilemma\n\n两个嫌疑犯被分别关在两个房间由警察审讯，警察告诉每个嫌疑犯：如果两个人都不承认，每人将被判为1年；如果两个人都坦白，各判8年；如果其中一人坦白，另一人抵赖，坦白者释放，抵赖者判10年。每个囚徒将面临四种可能结果，被判0年、1年、8年、10年。\n\n但在上述例子中，一个人的最优选择并不依赖于他人的选择。这样的最优战略，被称为“占优战略”(dominant strategy)。由所有参与人的占优战略构成的战略组合被称为“占优均衡”。\n占优战略均衡的出现只要求所有人都是理性的，但不要求每个参与人知道其他参与人是否理性.\n\n「囚徒困境」表明**个人理性和集体理性之间的冲突**。\n这样的例子有：寡头竞争、军备竞赛、团队生产中的劳动供给、公共产品的供给。\n\n#### 博弈的划分\n\n有合作博弈和非合作博弈，其中非合作博弈按照参与人的先后顺序又可以分为**静态博弈和动态博弈**\n\n非合作博弈按照参与人对其他人(对手)的特征、战略空间以及支付函数的知识可以划分为：**完全信息博弈和不完全信息博弈**\n\n{%asset_img 非合作博弈划分.png%}\n\n垄断最优产量小于非垄断的情况，但是对于垄断企业的利润大于非垄断情况下两个企业的利润和。\n","slug":"博弈论及其应用","published":1,"updated":"2023-10-06T02:26:29.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szo9000q5oogfkjkhwyg","content":"<p>博弈论的<strong>精髓在于</strong>：博弈中的一个理性决策者必须在考虑其它局中人行动的基础上来选择自己最理想的行动方案。</p>\n<h4 id=\"囚徒困境-prisoners’-dilemma\"><a href=\"#囚徒困境-prisoners’-dilemma\" class=\"headerlink\" title=\"囚徒困境 prisoners’ dilemma\"></a>囚徒困境 prisoners’ dilemma</h4><p>两个嫌疑犯被分别关在两个房间由警察审讯，警察告诉每个嫌疑犯：如果两个人都不承认，每人将被判为1年；如果两个人都坦白，各判8年；如果其中一人坦白，另一人抵赖，坦白者释放，抵赖者判10年。每个囚徒将面临四种可能结果，被判0年、1年、8年、10年。</p>\n<p>但在上述例子中，一个人的最优选择并不依赖于他人的选择。这样的最优战略，被称为“占优战略”(dominant strategy)。由所有参与人的占优战略构成的战略组合被称为“占优均衡”。<br>占优战略均衡的出现只要求所有人都是理性的，但不要求每个参与人知道其他参与人是否理性.</p>\n<p>「囚徒困境」表明<strong>个人理性和集体理性之间的冲突</strong>。<br>这样的例子有：寡头竞争、军备竞赛、团队生产中的劳动供给、公共产品的供给。</p>\n<h4 id=\"博弈的划分\"><a href=\"#博弈的划分\" class=\"headerlink\" title=\"博弈的划分\"></a>博弈的划分</h4><p>有合作博弈和非合作博弈，其中非合作博弈按照参与人的先后顺序又可以分为<strong>静态博弈和动态博弈</strong></p>\n<p>非合作博弈按照参与人对其他人(对手)的特征、战略空间以及支付函数的知识可以划分为：<strong>完全信息博弈和不完全信息博弈</strong></p>\n<img src=\"/2023/10/05/%E5%8D%9A%E5%BC%88%E8%AE%BA%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/%E9%9D%9E%E5%90%88%E4%BD%9C%E5%8D%9A%E5%BC%88%E5%88%92%E5%88%86.png\" class=\"\">\n<p>垄断最优产量小于非垄断的情况，但是对于垄断企业的利润大于非垄断情况下两个企业的利润和。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>博弈论的<strong>精髓在于</strong>：博弈中的一个理性决策者必须在考虑其它局中人行动的基础上来选择自己最理想的行动方案。</p>\n<h4 id=\"囚徒困境-prisoners’-dilemma\"><a href=\"#囚徒困境-prisoners’-dilemma\" class=\"headerlink\" title=\"囚徒困境 prisoners’ dilemma\"></a>囚徒困境 prisoners’ dilemma</h4><p>两个嫌疑犯被分别关在两个房间由警察审讯，警察告诉每个嫌疑犯：如果两个人都不承认，每人将被判为1年；如果两个人都坦白，各判8年；如果其中一人坦白，另一人抵赖，坦白者释放，抵赖者判10年。每个囚徒将面临四种可能结果，被判0年、1年、8年、10年。</p>\n<p>但在上述例子中，一个人的最优选择并不依赖于他人的选择。这样的最优战略，被称为“占优战略”(dominant strategy)。由所有参与人的占优战略构成的战略组合被称为“占优均衡”。<br>占优战略均衡的出现只要求所有人都是理性的，但不要求每个参与人知道其他参与人是否理性.</p>\n<p>「囚徒困境」表明<strong>个人理性和集体理性之间的冲突</strong>。<br>这样的例子有：寡头竞争、军备竞赛、团队生产中的劳动供给、公共产品的供给。</p>\n<h4 id=\"博弈的划分\"><a href=\"#博弈的划分\" class=\"headerlink\" title=\"博弈的划分\"></a>博弈的划分</h4><p>有合作博弈和非合作博弈，其中非合作博弈按照参与人的先后顺序又可以分为<strong>静态博弈和动态博弈</strong></p>\n<p>非合作博弈按照参与人对其他人(对手)的特征、战略空间以及支付函数的知识可以划分为：<strong>完全信息博弈和不完全信息博弈</strong></p>\n<img src=\"/2023/10/05/%E5%8D%9A%E5%BC%88%E8%AE%BA%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/%E9%9D%9E%E5%90%88%E4%BD%9C%E5%8D%9A%E5%BC%88%E5%88%92%E5%88%86.png\" class=\"\">\n<p>垄断最优产量小于非垄断的情况，但是对于垄断企业的利润大于非垄断情况下两个企业的利润和。</p>\n"},{"title":"回归分析与时间序列方法","date":"2023-08-24T08:06:19.000Z","description":"The key record of mathematical modeling.","mathjax":true,"_content":"\n统计推断的另一类重要问题是假设检验问题。在总体的分布函数未知或者只知道其形式、但不知其参数的情况，为了推断总体的某些未知特性，提出某些关于总体的假设。我们要根据样本对于所提出的假设做出是接受还是拒绝的决策，**假设检验**就是做出这一决策的过程。\n\n这种只对于第一种错误的概率进行控制，而不考虑第二种错误的概率的检验，称为显著性检验。对应的还有双边假设检验、右边检验和左边检验。\n{%asset_img 显著性检验.png%}\n\n#### 一元线性回归方程的检验\n根据样本数据算出的回归可能有一定的抽样误差。为了考察这两个变量在同体内是否是存在线性关系以及回归方程对估计预测因变量的有效性如何，首先进行的就是显著性检验。\n\n##### t 检验\nt 检验又称学生 t 检验，是统计推断中一种非常常见的检验方法，**用于统计量服从正态分布**但是方差未知(如果知道方差，我们可以直接 Z 检验，或者叫做 U 检验，就是正态检验)的情况。\n\nt检验的前提是要求样本服从正态分布或近似正态分布，不然可以利用一些变换（取对数、开根号、倒数等等）试图将其转化为服从正态分布是数据，如若还是不满足正态分布，只能利用非参数检验方法。\n\nt 检验最常见的四个用途：\n1. 单样本均值检验（One-sample t-test）\n    用于检验 总体方差未知、正态数据或近似正态的 单样本的均值 是否与 已知的总体均值相等\n2. 两独立样本均值检验（Independent two-sample t-test）\n    用于检验 两对独立的 正态数据或近似正态的 样本的均值 是否相等，这里可根据总体方差是否相等分类讨论\n3. 配对样本均值检验（Dependent t-test for paired samples）\n    用于检验 一对配对样本的均值的差 是否等于某一个值\n4. 回归系数的显著性检验（t-test for regression coefficient significance）\n    用于检验 回归模型的解释变量对被解释变量是否有显著影响\n\n具体内容见 https://zhuanlan.zhihu.com/p/138711532\n\n","source":"_posts/回归分析与时间序列方法.md","raw":"---\ntitle: 回归分析与时间序列方法\ndate: 2023-08-24 16:06:19\ntags: Mathematic\ndescription: The key record of mathematical modeling. \nmathjax: true\n---\n\n统计推断的另一类重要问题是假设检验问题。在总体的分布函数未知或者只知道其形式、但不知其参数的情况，为了推断总体的某些未知特性，提出某些关于总体的假设。我们要根据样本对于所提出的假设做出是接受还是拒绝的决策，**假设检验**就是做出这一决策的过程。\n\n这种只对于第一种错误的概率进行控制，而不考虑第二种错误的概率的检验，称为显著性检验。对应的还有双边假设检验、右边检验和左边检验。\n{%asset_img 显著性检验.png%}\n\n#### 一元线性回归方程的检验\n根据样本数据算出的回归可能有一定的抽样误差。为了考察这两个变量在同体内是否是存在线性关系以及回归方程对估计预测因变量的有效性如何，首先进行的就是显著性检验。\n\n##### t 检验\nt 检验又称学生 t 检验，是统计推断中一种非常常见的检验方法，**用于统计量服从正态分布**但是方差未知(如果知道方差，我们可以直接 Z 检验，或者叫做 U 检验，就是正态检验)的情况。\n\nt检验的前提是要求样本服从正态分布或近似正态分布，不然可以利用一些变换（取对数、开根号、倒数等等）试图将其转化为服从正态分布是数据，如若还是不满足正态分布，只能利用非参数检验方法。\n\nt 检验最常见的四个用途：\n1. 单样本均值检验（One-sample t-test）\n    用于检验 总体方差未知、正态数据或近似正态的 单样本的均值 是否与 已知的总体均值相等\n2. 两独立样本均值检验（Independent two-sample t-test）\n    用于检验 两对独立的 正态数据或近似正态的 样本的均值 是否相等，这里可根据总体方差是否相等分类讨论\n3. 配对样本均值检验（Dependent t-test for paired samples）\n    用于检验 一对配对样本的均值的差 是否等于某一个值\n4. 回归系数的显著性检验（t-test for regression coefficient significance）\n    用于检验 回归模型的解释变量对被解释变量是否有显著影响\n\n具体内容见 https://zhuanlan.zhihu.com/p/138711532\n\n","slug":"回归分析与时间序列方法","published":1,"updated":"2023-08-24T11:55:15.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szo9000r5oog41w14ux6","content":"<p>统计推断的另一类重要问题是假设检验问题。在总体的分布函数未知或者只知道其形式、但不知其参数的情况，为了推断总体的某些未知特性，提出某些关于总体的假设。我们要根据样本对于所提出的假设做出是接受还是拒绝的决策，<strong>假设检验</strong>就是做出这一决策的过程。</p>\n<p>这种只对于第一种错误的概率进行控制，而不考虑第二种错误的概率的检验，称为显著性检验。对应的还有双边假设检验、右边检验和左边检验。<br><img src=\"/2023/08/24/%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90%E4%B8%8E%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E6%96%B9%E6%B3%95/%E6%98%BE%E8%91%97%E6%80%A7%E6%A3%80%E9%AA%8C.png\" class=\"\"></p>\n<h4 id=\"一元线性回归方程的检验\"><a href=\"#一元线性回归方程的检验\" class=\"headerlink\" title=\"一元线性回归方程的检验\"></a>一元线性回归方程的检验</h4><p>根据样本数据算出的回归可能有一定的抽样误差。为了考察这两个变量在同体内是否是存在线性关系以及回归方程对估计预测因变量的有效性如何，首先进行的就是显著性检验。</p>\n<h5 id=\"t-检验\"><a href=\"#t-检验\" class=\"headerlink\" title=\"t 检验\"></a>t 检验</h5><p>t 检验又称学生 t 检验，是统计推断中一种非常常见的检验方法，<strong>用于统计量服从正态分布</strong>但是方差未知(如果知道方差，我们可以直接 Z 检验，或者叫做 U 检验，就是正态检验)的情况。</p>\n<p>t检验的前提是要求样本服从正态分布或近似正态分布，不然可以利用一些变换（取对数、开根号、倒数等等）试图将其转化为服从正态分布是数据，如若还是不满足正态分布，只能利用非参数检验方法。</p>\n<p>t 检验最常见的四个用途：</p>\n<ol>\n<li>单样本均值检验（One-sample t-test）<br> 用于检验 总体方差未知、正态数据或近似正态的 单样本的均值 是否与 已知的总体均值相等</li>\n<li>两独立样本均值检验（Independent two-sample t-test）<br> 用于检验 两对独立的 正态数据或近似正态的 样本的均值 是否相等，这里可根据总体方差是否相等分类讨论</li>\n<li>配对样本均值检验（Dependent t-test for paired samples）<br> 用于检验 一对配对样本的均值的差 是否等于某一个值</li>\n<li>回归系数的显著性检验（t-test for regression coefficient significance）<br> 用于检验 回归模型的解释变量对被解释变量是否有显著影响</li>\n</ol>\n<p>具体内容见 <a href=\"https://zhuanlan.zhihu.com/p/138711532\">https://zhuanlan.zhihu.com/p/138711532</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>统计推断的另一类重要问题是假设检验问题。在总体的分布函数未知或者只知道其形式、但不知其参数的情况，为了推断总体的某些未知特性，提出某些关于总体的假设。我们要根据样本对于所提出的假设做出是接受还是拒绝的决策，<strong>假设检验</strong>就是做出这一决策的过程。</p>\n<p>这种只对于第一种错误的概率进行控制，而不考虑第二种错误的概率的检验，称为显著性检验。对应的还有双边假设检验、右边检验和左边检验。<br><img src=\"/2023/08/24/%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90%E4%B8%8E%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E6%96%B9%E6%B3%95/%E6%98%BE%E8%91%97%E6%80%A7%E6%A3%80%E9%AA%8C.png\" class=\"\"></p>\n<h4 id=\"一元线性回归方程的检验\"><a href=\"#一元线性回归方程的检验\" class=\"headerlink\" title=\"一元线性回归方程的检验\"></a>一元线性回归方程的检验</h4><p>根据样本数据算出的回归可能有一定的抽样误差。为了考察这两个变量在同体内是否是存在线性关系以及回归方程对估计预测因变量的有效性如何，首先进行的就是显著性检验。</p>\n<h5 id=\"t-检验\"><a href=\"#t-检验\" class=\"headerlink\" title=\"t 检验\"></a>t 检验</h5><p>t 检验又称学生 t 检验，是统计推断中一种非常常见的检验方法，<strong>用于统计量服从正态分布</strong>但是方差未知(如果知道方差，我们可以直接 Z 检验，或者叫做 U 检验，就是正态检验)的情况。</p>\n<p>t检验的前提是要求样本服从正态分布或近似正态分布，不然可以利用一些变换（取对数、开根号、倒数等等）试图将其转化为服从正态分布是数据，如若还是不满足正态分布，只能利用非参数检验方法。</p>\n<p>t 检验最常见的四个用途：</p>\n<ol>\n<li>单样本均值检验（One-sample t-test）<br> 用于检验 总体方差未知、正态数据或近似正态的 单样本的均值 是否与 已知的总体均值相等</li>\n<li>两独立样本均值检验（Independent two-sample t-test）<br> 用于检验 两对独立的 正态数据或近似正态的 样本的均值 是否相等，这里可根据总体方差是否相等分类讨论</li>\n<li>配对样本均值检验（Dependent t-test for paired samples）<br> 用于检验 一对配对样本的均值的差 是否等于某一个值</li>\n<li>回归系数的显著性检验（t-test for regression coefficient significance）<br> 用于检验 回归模型的解释变量对被解释变量是否有显著影响</li>\n</ol>\n<p>具体内容见 <a href=\"https://zhuanlan.zhihu.com/p/138711532\">https://zhuanlan.zhihu.com/p/138711532</a></p>\n"},{"title":"左偏树","date":"2023-10-11T06:47:17.000Z","description":"the learning process of leftistheap.","_content":"\n#### 参考资料\n\nhttps://www.cnblogs.com/skywang12345/p/3638327.html\n\nhttps://www.luogu.com.cn/problem/solution/P3377\n\nhttps://zh.wikipedia.org/wiki/%E5%B7%A6%E5%81%8F%E6%A0%91\n\nhttps://oi-wiki.org/ds/leftist-tree/\n\nhttps://www.jvruo.com/archives/343/\n\n##### TO DO\n\n左偏树实现删除任意节点？而不只是根节点。（其实就是从删除的节点一直向上递归，直到 cur.npl == cur.rightChild.npl + 1）\n\n其实我们可以从左偏树的 merge 操作中看出来，左偏树的子树也是一个左偏树\n\n\n好像如果想实现左偏树减小任意一个节点的值，可以先删除那个节点，再添加减小后的值。\n\n![image-20231018233914144](C:\\Users\\梁云森\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231018233914144.png)\n\n#### Code\n\n```C++\n#ifndef LEFTISTHEAP_HPP\n#define LEFTISTHEAP_HPP\n\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\ntemplate<class T>\nclass LeftistHeapNode {\n    public:\n        T value;\n        int npl;\n        LeftistHeapNode<T>* leftChild;\n        LeftistHeapNode<T>* rightChild;\n        LeftistHeapNode()\n            : npl(-1)\n            , leftChild(nullptr)\n            , rightChild(nullptr) {}\n        LeftistHeapNode(T val)\n            : npl(0)\n            , value(val)\n            , leftChild(nullptr)\n            , rightChild(nullptr) {}\n};      \n\ntemplate<class T>\nclass LeftistHeap {\n    public:\n        LeftistHeapNode<T>* root;\n        LeftistHeap()\n            : root(nullptr) {}\n        LeftistHeap(T val) {\n            root = new LeftistHeapNode<T>(val);\n        }\n        void insert(T);\n        void merge(LeftistHeap<T>);\n        // void remove(LeftistHeapNode<T>*);\n        void pop();\n        void preOrder();\n        void inOrder();\n        void postOrder();\n    private:\n        LeftistHeapNode<T>* merge(LeftistHeapNode<T>*, LeftistHeapNode<T>*);\n        void insert(LeftistHeap<T>*);\n        void preOrder(LeftistHeapNode<T>*);\n        void inOrder(LeftistHeapNode<T>*);\n        void postOrder(LeftistHeapNode<T>*);\n};\n\ntemplate<class T>\nvoid LeftistHeap<T>::postOrder() {\n    postOrder(root);\n    std::cout << \"\\n\";\n}\n\ntemplate<class T>\nvoid LeftistHeap<T>::postOrder(LeftistHeapNode<T>* cur) {\n    if (!cur) return ;\n    postOrder(cur->leftChild);\n    postOrder(cur->rightChild);\n    std::cout << cur->value << \" \";\n}\n\ntemplate<class T>\nvoid LeftistHeap<T>::inOrder() {\n    inOrder(root);\n    std::cout << \"\\n\";\n}\n\ntemplate<class T>\nvoid LeftistHeap<T>::inOrder(LeftistHeapNode<T>* cur) {\n    if (!cur) return ;\n    inOrder(cur->leftChild);\n    std::cout << cur->value << \" \";\n    inOrder(cur->rightChild);\n}\n\ntemplate<class T>\nvoid LeftistHeap<T>::preOrder() {\n    preOrder(root);\n    std::cout << \"\\n\";\n}\n\ntemplate<class T>\nvoid LeftistHeap<T>::preOrder(LeftistHeapNode<T>* cur) {\n    if (!cur) return ;\n    std::cout << cur->value << \" \";\n    preOrder(cur->leftChild);\n    preOrder(cur->rightChild);\n}\n\ntemplate<class T>\nvoid LeftistHeap<T>::insert(T value) {\n    insert(new LeftistHeap<T>(value));\n}\n\ntemplate<class T>\nvoid LeftistHeap<T>::insert(LeftistHeap<T>* heap) {\n    root = merge(root, heap->root);\n}\n\ntemplate<class T>\nvoid LeftistHeap<T>::merge(LeftistHeap<T> heap) {\n    root = merge(root, heap.root);\n}\n\ntemplate<class T>\nLeftistHeapNode<T>* LeftistHeap<T>::merge(LeftistHeapNode<T>* x, LeftistHeapNode<T>* y) {\n    if (x == nullptr) {\n        return y;\n    } else if (y == nullptr) {\n        return x;\n    }\n    if (x->value > y->value) {\n        LeftistHeapNode<T>* temp = x;\n        x = y;\n        y = temp;\n    }\n    x->rightChild = merge(x->rightChild, y);\n    if (x->leftChild == nullptr || x->leftChild->npl < x->rightChild->npl) {\n        LeftistHeapNode<T>* temp = x->leftChild;\n        x->leftChild = x->rightChild;\n        x->rightChild = temp;\n    }\n    if (x->rightChild == nullptr || x->leftChild == nullptr) {\n        x->npl = 0;\n    } else {\n        x->npl = (x->leftChild->npl > x->rightChild->npl) ? (x->rightChild->npl + 1) : (x->leftChild->npl + 1);\n    }\n    return x;\n}\n\n// template<class T>\n// void LeftistHeap<T>::remove(LeftistHeapNode<T>* removeNode) {\n//     if (!root) {\n//         throw std::runtime_error(\"the heap is empty!\");\n//         return ;\n//     }\n\n// }\n\ntemplate<class T>\nvoid LeftistHeap<T>::pop() {\n    if (!root) {\n        throw std::runtime_error(\"the heap is empty!\");\n        return ;\n    }\n    LeftistHeapNode<T>* l = root->leftChild;\n    LeftistHeapNode<T>* r = root->rightChild;\n    root = merge(l, r);\n}\n\n#endif\n```\n\n","source":"_posts/左偏树.md","raw":"---\ntitle: 左偏树\ndate: 2023-10-11 14:47:17\ntags: Data Structure\ndescription: the learning process of leftistheap. \n---\n\n#### 参考资料\n\nhttps://www.cnblogs.com/skywang12345/p/3638327.html\n\nhttps://www.luogu.com.cn/problem/solution/P3377\n\nhttps://zh.wikipedia.org/wiki/%E5%B7%A6%E5%81%8F%E6%A0%91\n\nhttps://oi-wiki.org/ds/leftist-tree/\n\nhttps://www.jvruo.com/archives/343/\n\n##### TO DO\n\n左偏树实现删除任意节点？而不只是根节点。（其实就是从删除的节点一直向上递归，直到 cur.npl == cur.rightChild.npl + 1）\n\n其实我们可以从左偏树的 merge 操作中看出来，左偏树的子树也是一个左偏树\n\n\n好像如果想实现左偏树减小任意一个节点的值，可以先删除那个节点，再添加减小后的值。\n\n![image-20231018233914144](C:\\Users\\梁云森\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231018233914144.png)\n\n#### Code\n\n```C++\n#ifndef LEFTISTHEAP_HPP\n#define LEFTISTHEAP_HPP\n\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\ntemplate<class T>\nclass LeftistHeapNode {\n    public:\n        T value;\n        int npl;\n        LeftistHeapNode<T>* leftChild;\n        LeftistHeapNode<T>* rightChild;\n        LeftistHeapNode()\n            : npl(-1)\n            , leftChild(nullptr)\n            , rightChild(nullptr) {}\n        LeftistHeapNode(T val)\n            : npl(0)\n            , value(val)\n            , leftChild(nullptr)\n            , rightChild(nullptr) {}\n};      \n\ntemplate<class T>\nclass LeftistHeap {\n    public:\n        LeftistHeapNode<T>* root;\n        LeftistHeap()\n            : root(nullptr) {}\n        LeftistHeap(T val) {\n            root = new LeftistHeapNode<T>(val);\n        }\n        void insert(T);\n        void merge(LeftistHeap<T>);\n        // void remove(LeftistHeapNode<T>*);\n        void pop();\n        void preOrder();\n        void inOrder();\n        void postOrder();\n    private:\n        LeftistHeapNode<T>* merge(LeftistHeapNode<T>*, LeftistHeapNode<T>*);\n        void insert(LeftistHeap<T>*);\n        void preOrder(LeftistHeapNode<T>*);\n        void inOrder(LeftistHeapNode<T>*);\n        void postOrder(LeftistHeapNode<T>*);\n};\n\ntemplate<class T>\nvoid LeftistHeap<T>::postOrder() {\n    postOrder(root);\n    std::cout << \"\\n\";\n}\n\ntemplate<class T>\nvoid LeftistHeap<T>::postOrder(LeftistHeapNode<T>* cur) {\n    if (!cur) return ;\n    postOrder(cur->leftChild);\n    postOrder(cur->rightChild);\n    std::cout << cur->value << \" \";\n}\n\ntemplate<class T>\nvoid LeftistHeap<T>::inOrder() {\n    inOrder(root);\n    std::cout << \"\\n\";\n}\n\ntemplate<class T>\nvoid LeftistHeap<T>::inOrder(LeftistHeapNode<T>* cur) {\n    if (!cur) return ;\n    inOrder(cur->leftChild);\n    std::cout << cur->value << \" \";\n    inOrder(cur->rightChild);\n}\n\ntemplate<class T>\nvoid LeftistHeap<T>::preOrder() {\n    preOrder(root);\n    std::cout << \"\\n\";\n}\n\ntemplate<class T>\nvoid LeftistHeap<T>::preOrder(LeftistHeapNode<T>* cur) {\n    if (!cur) return ;\n    std::cout << cur->value << \" \";\n    preOrder(cur->leftChild);\n    preOrder(cur->rightChild);\n}\n\ntemplate<class T>\nvoid LeftistHeap<T>::insert(T value) {\n    insert(new LeftistHeap<T>(value));\n}\n\ntemplate<class T>\nvoid LeftistHeap<T>::insert(LeftistHeap<T>* heap) {\n    root = merge(root, heap->root);\n}\n\ntemplate<class T>\nvoid LeftistHeap<T>::merge(LeftistHeap<T> heap) {\n    root = merge(root, heap.root);\n}\n\ntemplate<class T>\nLeftistHeapNode<T>* LeftistHeap<T>::merge(LeftistHeapNode<T>* x, LeftistHeapNode<T>* y) {\n    if (x == nullptr) {\n        return y;\n    } else if (y == nullptr) {\n        return x;\n    }\n    if (x->value > y->value) {\n        LeftistHeapNode<T>* temp = x;\n        x = y;\n        y = temp;\n    }\n    x->rightChild = merge(x->rightChild, y);\n    if (x->leftChild == nullptr || x->leftChild->npl < x->rightChild->npl) {\n        LeftistHeapNode<T>* temp = x->leftChild;\n        x->leftChild = x->rightChild;\n        x->rightChild = temp;\n    }\n    if (x->rightChild == nullptr || x->leftChild == nullptr) {\n        x->npl = 0;\n    } else {\n        x->npl = (x->leftChild->npl > x->rightChild->npl) ? (x->rightChild->npl + 1) : (x->leftChild->npl + 1);\n    }\n    return x;\n}\n\n// template<class T>\n// void LeftistHeap<T>::remove(LeftistHeapNode<T>* removeNode) {\n//     if (!root) {\n//         throw std::runtime_error(\"the heap is empty!\");\n//         return ;\n//     }\n\n// }\n\ntemplate<class T>\nvoid LeftistHeap<T>::pop() {\n    if (!root) {\n        throw std::runtime_error(\"the heap is empty!\");\n        return ;\n    }\n    LeftistHeapNode<T>* l = root->leftChild;\n    LeftistHeapNode<T>* r = root->rightChild;\n    root = merge(l, r);\n}\n\n#endif\n```\n\n","slug":"左偏树","published":1,"updated":"2023-11-12T10:51:56.933Z","_id":"clov7szoa000u5ooggdpg2n18","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://www.cnblogs.com/skywang12345/p/3638327.html\">https://www.cnblogs.com/skywang12345/p/3638327.html</a></p>\n<p><a href=\"https://www.luogu.com.cn/problem/solution/P3377\">https://www.luogu.com.cn/problem/solution/P3377</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E5%B7%A6%E5%81%8F%E6%A0%91\">https://zh.wikipedia.org/wiki/%E5%B7%A6%E5%81%8F%E6%A0%91</a></p>\n<p><a href=\"https://oi-wiki.org/ds/leftist-tree/\">https://oi-wiki.org/ds/leftist-tree/</a></p>\n<p><a href=\"https://www.jvruo.com/archives/343/\">https://www.jvruo.com/archives/343/</a></p>\n<h5 id=\"TO-DO\"><a href=\"#TO-DO\" class=\"headerlink\" title=\"TO DO\"></a>TO DO</h5><p>左偏树实现删除任意节点？而不只是根节点。（其实就是从删除的节点一直向上递归，直到 cur.npl == cur.rightChild.npl + 1）</p>\n<p>其实我们可以从左偏树的 merge 操作中看出来，左偏树的子树也是一个左偏树</p>\n<p>好像如果想实现左偏树减小任意一个节点的值，可以先删除那个节点，再添加减小后的值。</p>\n<p><img src=\"/.com//Users\\梁云森\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231018233914144.png\" alt=\"image-20231018233914144\"></p>\n<h4 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> LEFTISTHEAP_HPP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LEFTISTHEAP_HPP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LeftistHeapNode</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        T value;</span><br><span class=\"line\">        <span class=\"type\">int</span> npl;</span><br><span class=\"line\">        LeftistHeapNode&lt;T&gt;* leftChild;</span><br><span class=\"line\">        LeftistHeapNode&lt;T&gt;* rightChild;</span><br><span class=\"line\">        <span class=\"built_in\">LeftistHeapNode</span>()</span><br><span class=\"line\">            : <span class=\"built_in\">npl</span>(<span class=\"number\">-1</span>)</span><br><span class=\"line\">            , <span class=\"built_in\">leftChild</span>(<span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">            , <span class=\"built_in\">rightChild</span>(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\">        <span class=\"built_in\">LeftistHeapNode</span>(T val)</span><br><span class=\"line\">            : <span class=\"built_in\">npl</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">            , <span class=\"built_in\">value</span>(val)</span><br><span class=\"line\">            , <span class=\"built_in\">leftChild</span>(<span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">            , <span class=\"built_in\">rightChild</span>(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\">&#125;;      </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LeftistHeap</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        LeftistHeapNode&lt;T&gt;* root;</span><br><span class=\"line\">        <span class=\"built_in\">LeftistHeap</span>()</span><br><span class=\"line\">            : <span class=\"built_in\">root</span>(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\">        <span class=\"built_in\">LeftistHeap</span>(T val) &#123;</span><br><span class=\"line\">            root = <span class=\"keyword\">new</span> <span class=\"built_in\">LeftistHeapNode</span>&lt;T&gt;(val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(T)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(LeftistHeap&lt;T&gt;)</span></span>;</span><br><span class=\"line\">        <span class=\"comment\">// void remove(LeftistHeapNode&lt;T&gt;*);</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">inOrder</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">postOrder</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        <span class=\"function\">LeftistHeapNode&lt;T&gt;* <span class=\"title\">merge</span><span class=\"params\">(LeftistHeapNode&lt;T&gt;*, LeftistHeapNode&lt;T&gt;*)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(LeftistHeap&lt;T&gt;*)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">(LeftistHeapNode&lt;T&gt;*)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">inOrder</span><span class=\"params\">(LeftistHeapNode&lt;T&gt;*)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">postOrder</span><span class=\"params\">(LeftistHeapNode&lt;T&gt;*)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LeftistHeap&lt;T&gt;::<span class=\"built_in\">postOrder</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">postOrder</span>(root);</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LeftistHeap&lt;T&gt;::<span class=\"built_in\">postOrder</span>(LeftistHeapNode&lt;T&gt;* cur) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!cur) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    <span class=\"built_in\">postOrder</span>(cur-&gt;leftChild);</span><br><span class=\"line\">    <span class=\"built_in\">postOrder</span>(cur-&gt;rightChild);</span><br><span class=\"line\">    std::cout &lt;&lt; cur-&gt;value &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LeftistHeap&lt;T&gt;::<span class=\"built_in\">inOrder</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">inOrder</span>(root);</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LeftistHeap&lt;T&gt;::<span class=\"built_in\">inOrder</span>(LeftistHeapNode&lt;T&gt;* cur) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!cur) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    <span class=\"built_in\">inOrder</span>(cur-&gt;leftChild);</span><br><span class=\"line\">    std::cout &lt;&lt; cur-&gt;value &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">inOrder</span>(cur-&gt;rightChild);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LeftistHeap&lt;T&gt;::<span class=\"built_in\">preOrder</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">preOrder</span>(root);</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LeftistHeap&lt;T&gt;::<span class=\"built_in\">preOrder</span>(LeftistHeapNode&lt;T&gt;* cur) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!cur) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    std::cout &lt;&lt; cur-&gt;value &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">preOrder</span>(cur-&gt;leftChild);</span><br><span class=\"line\">    <span class=\"built_in\">preOrder</span>(cur-&gt;rightChild);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LeftistHeap&lt;T&gt;::<span class=\"built_in\">insert</span>(T value) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">insert</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">LeftistHeap</span>&lt;T&gt;(value));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LeftistHeap&lt;T&gt;::<span class=\"built_in\">insert</span>(LeftistHeap&lt;T&gt;* heap) &#123;</span><br><span class=\"line\">    root = <span class=\"built_in\">merge</span>(root, heap-&gt;root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LeftistHeap&lt;T&gt;::<span class=\"built_in\">merge</span>(LeftistHeap&lt;T&gt; heap) &#123;</span><br><span class=\"line\">    root = <span class=\"built_in\">merge</span>(root, heap.root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">LeftistHeapNode&lt;T&gt;* LeftistHeap&lt;T&gt;::<span class=\"built_in\">merge</span>(LeftistHeapNode&lt;T&gt;* x, LeftistHeapNode&lt;T&gt;* y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> y;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (y == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x-&gt;value &gt; y-&gt;value) &#123;</span><br><span class=\"line\">        LeftistHeapNode&lt;T&gt;* temp = x;</span><br><span class=\"line\">        x = y;</span><br><span class=\"line\">        y = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    x-&gt;rightChild = <span class=\"built_in\">merge</span>(x-&gt;rightChild, y);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x-&gt;leftChild == <span class=\"literal\">nullptr</span> || x-&gt;leftChild-&gt;npl &lt; x-&gt;rightChild-&gt;npl) &#123;</span><br><span class=\"line\">        LeftistHeapNode&lt;T&gt;* temp = x-&gt;leftChild;</span><br><span class=\"line\">        x-&gt;leftChild = x-&gt;rightChild;</span><br><span class=\"line\">        x-&gt;rightChild = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x-&gt;rightChild == <span class=\"literal\">nullptr</span> || x-&gt;leftChild == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        x-&gt;npl = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        x-&gt;npl = (x-&gt;leftChild-&gt;npl &gt; x-&gt;rightChild-&gt;npl) ? (x-&gt;rightChild-&gt;npl + <span class=\"number\">1</span>) : (x-&gt;leftChild-&gt;npl + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// template&lt;class T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// void LeftistHeap&lt;T&gt;::remove(LeftistHeapNode&lt;T&gt;* removeNode) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     if (!root) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         throw std::runtime_error(&quot;the heap is empty!&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//         return ;</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LeftistHeap&lt;T&gt;::<span class=\"built_in\">pop</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> std::<span class=\"built_in\">runtime_error</span>(<span class=\"string\">&quot;the heap is empty!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LeftistHeapNode&lt;T&gt;* l = root-&gt;leftChild;</span><br><span class=\"line\">    LeftistHeapNode&lt;T&gt;* r = root-&gt;rightChild;</span><br><span class=\"line\">    root = <span class=\"built_in\">merge</span>(l, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://www.cnblogs.com/skywang12345/p/3638327.html\">https://www.cnblogs.com/skywang12345/p/3638327.html</a></p>\n<p><a href=\"https://www.luogu.com.cn/problem/solution/P3377\">https://www.luogu.com.cn/problem/solution/P3377</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E5%B7%A6%E5%81%8F%E6%A0%91\">https://zh.wikipedia.org/wiki/%E5%B7%A6%E5%81%8F%E6%A0%91</a></p>\n<p><a href=\"https://oi-wiki.org/ds/leftist-tree/\">https://oi-wiki.org/ds/leftist-tree/</a></p>\n<p><a href=\"https://www.jvruo.com/archives/343/\">https://www.jvruo.com/archives/343/</a></p>\n<h5 id=\"TO-DO\"><a href=\"#TO-DO\" class=\"headerlink\" title=\"TO DO\"></a>TO DO</h5><p>左偏树实现删除任意节点？而不只是根节点。（其实就是从删除的节点一直向上递归，直到 cur.npl == cur.rightChild.npl + 1）</p>\n<p>其实我们可以从左偏树的 merge 操作中看出来，左偏树的子树也是一个左偏树</p>\n<p>好像如果想实现左偏树减小任意一个节点的值，可以先删除那个节点，再添加减小后的值。</p>\n<p><img src=\"/.com//Users\\梁云森\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231018233914144.png\" alt=\"image-20231018233914144\"></p>\n<h4 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> LEFTISTHEAP_HPP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LEFTISTHEAP_HPP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LeftistHeapNode</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        T value;</span><br><span class=\"line\">        <span class=\"type\">int</span> npl;</span><br><span class=\"line\">        LeftistHeapNode&lt;T&gt;* leftChild;</span><br><span class=\"line\">        LeftistHeapNode&lt;T&gt;* rightChild;</span><br><span class=\"line\">        <span class=\"built_in\">LeftistHeapNode</span>()</span><br><span class=\"line\">            : <span class=\"built_in\">npl</span>(<span class=\"number\">-1</span>)</span><br><span class=\"line\">            , <span class=\"built_in\">leftChild</span>(<span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">            , <span class=\"built_in\">rightChild</span>(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\">        <span class=\"built_in\">LeftistHeapNode</span>(T val)</span><br><span class=\"line\">            : <span class=\"built_in\">npl</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">            , <span class=\"built_in\">value</span>(val)</span><br><span class=\"line\">            , <span class=\"built_in\">leftChild</span>(<span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">            , <span class=\"built_in\">rightChild</span>(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\">&#125;;      </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LeftistHeap</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        LeftistHeapNode&lt;T&gt;* root;</span><br><span class=\"line\">        <span class=\"built_in\">LeftistHeap</span>()</span><br><span class=\"line\">            : <span class=\"built_in\">root</span>(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\">        <span class=\"built_in\">LeftistHeap</span>(T val) &#123;</span><br><span class=\"line\">            root = <span class=\"keyword\">new</span> <span class=\"built_in\">LeftistHeapNode</span>&lt;T&gt;(val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(T)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(LeftistHeap&lt;T&gt;)</span></span>;</span><br><span class=\"line\">        <span class=\"comment\">// void remove(LeftistHeapNode&lt;T&gt;*);</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">inOrder</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">postOrder</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        <span class=\"function\">LeftistHeapNode&lt;T&gt;* <span class=\"title\">merge</span><span class=\"params\">(LeftistHeapNode&lt;T&gt;*, LeftistHeapNode&lt;T&gt;*)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(LeftistHeap&lt;T&gt;*)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">(LeftistHeapNode&lt;T&gt;*)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">inOrder</span><span class=\"params\">(LeftistHeapNode&lt;T&gt;*)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">postOrder</span><span class=\"params\">(LeftistHeapNode&lt;T&gt;*)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LeftistHeap&lt;T&gt;::<span class=\"built_in\">postOrder</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">postOrder</span>(root);</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LeftistHeap&lt;T&gt;::<span class=\"built_in\">postOrder</span>(LeftistHeapNode&lt;T&gt;* cur) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!cur) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    <span class=\"built_in\">postOrder</span>(cur-&gt;leftChild);</span><br><span class=\"line\">    <span class=\"built_in\">postOrder</span>(cur-&gt;rightChild);</span><br><span class=\"line\">    std::cout &lt;&lt; cur-&gt;value &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LeftistHeap&lt;T&gt;::<span class=\"built_in\">inOrder</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">inOrder</span>(root);</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LeftistHeap&lt;T&gt;::<span class=\"built_in\">inOrder</span>(LeftistHeapNode&lt;T&gt;* cur) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!cur) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    <span class=\"built_in\">inOrder</span>(cur-&gt;leftChild);</span><br><span class=\"line\">    std::cout &lt;&lt; cur-&gt;value &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">inOrder</span>(cur-&gt;rightChild);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LeftistHeap&lt;T&gt;::<span class=\"built_in\">preOrder</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">preOrder</span>(root);</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LeftistHeap&lt;T&gt;::<span class=\"built_in\">preOrder</span>(LeftistHeapNode&lt;T&gt;* cur) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!cur) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    std::cout &lt;&lt; cur-&gt;value &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">preOrder</span>(cur-&gt;leftChild);</span><br><span class=\"line\">    <span class=\"built_in\">preOrder</span>(cur-&gt;rightChild);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LeftistHeap&lt;T&gt;::<span class=\"built_in\">insert</span>(T value) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">insert</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">LeftistHeap</span>&lt;T&gt;(value));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LeftistHeap&lt;T&gt;::<span class=\"built_in\">insert</span>(LeftistHeap&lt;T&gt;* heap) &#123;</span><br><span class=\"line\">    root = <span class=\"built_in\">merge</span>(root, heap-&gt;root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LeftistHeap&lt;T&gt;::<span class=\"built_in\">merge</span>(LeftistHeap&lt;T&gt; heap) &#123;</span><br><span class=\"line\">    root = <span class=\"built_in\">merge</span>(root, heap.root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">LeftistHeapNode&lt;T&gt;* LeftistHeap&lt;T&gt;::<span class=\"built_in\">merge</span>(LeftistHeapNode&lt;T&gt;* x, LeftistHeapNode&lt;T&gt;* y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> y;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (y == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x-&gt;value &gt; y-&gt;value) &#123;</span><br><span class=\"line\">        LeftistHeapNode&lt;T&gt;* temp = x;</span><br><span class=\"line\">        x = y;</span><br><span class=\"line\">        y = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    x-&gt;rightChild = <span class=\"built_in\">merge</span>(x-&gt;rightChild, y);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x-&gt;leftChild == <span class=\"literal\">nullptr</span> || x-&gt;leftChild-&gt;npl &lt; x-&gt;rightChild-&gt;npl) &#123;</span><br><span class=\"line\">        LeftistHeapNode&lt;T&gt;* temp = x-&gt;leftChild;</span><br><span class=\"line\">        x-&gt;leftChild = x-&gt;rightChild;</span><br><span class=\"line\">        x-&gt;rightChild = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x-&gt;rightChild == <span class=\"literal\">nullptr</span> || x-&gt;leftChild == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        x-&gt;npl = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        x-&gt;npl = (x-&gt;leftChild-&gt;npl &gt; x-&gt;rightChild-&gt;npl) ? (x-&gt;rightChild-&gt;npl + <span class=\"number\">1</span>) : (x-&gt;leftChild-&gt;npl + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// template&lt;class T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// void LeftistHeap&lt;T&gt;::remove(LeftistHeapNode&lt;T&gt;* removeNode) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     if (!root) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         throw std::runtime_error(&quot;the heap is empty!&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//         return ;</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LeftistHeap&lt;T&gt;::<span class=\"built_in\">pop</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> std::<span class=\"built_in\">runtime_error</span>(<span class=\"string\">&quot;the heap is empty!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LeftistHeapNode&lt;T&gt;* l = root-&gt;leftChild;</span><br><span class=\"line\">    LeftistHeapNode&lt;T&gt;* r = root-&gt;rightChild;</span><br><span class=\"line\">    root = <span class=\"built_in\">merge</span>(l, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n"},{"title":"插值与拟合建模","date":"2023-08-25T02:22:51.000Z","description":"The key record of mathematical modeling.","mathjax":true,"_content":"插值方法实数值分析中的一种古老而重要的方法。在实际生产和科学实验中，有时候仅仅能获得函数 f(x) 在若干点的函数值或者微商值，即只能给出 f(x) 的一张数据表。如果根据这张数据表构造一个函数 $\\varphi(x)$ ，使之满足这张表中的数据，这样的函数 $\\varphi(x)$ 就是函数 f(x) 的逼近函数。这种逼近问题称为插值问题。\n\n#### 插值多项式的存在性和唯一性\n设 $p_n(x) = a_0 + a_1x + a_2x^{2} + ... + a_nx^n$，由插值条件可以得到非齐次线性方程组：\n{%asset_img 插值条件非齐次方程组.png 插值条件非齐次方程组%}\n可以由 $\\text{Vandermonde}$ 行列式，各个点是互异的来得到系数矩阵的行列式 $D \\neq 0$。由 $\\text{Cramer}$ 法则知道，方程有唯一的解，所以多项式存在且唯一。 \n\n**几何解释：** 一个 n 次的多项式一定可以由 n + 1 个点唯一确定。\n\n#### Lagrange 插值公式\n{%asset_img 拉格朗日插值公式.png 拉格朗日插值公式%}\n\n#### Newton 插值公式\nhttps://www.zhihu.com/question/22320408/answer/141973314 马同学关于牛顿插值的解释\n牛顿插值法的特点在于：每增加一个点，不会导致之前的重新计算，只需要算和新增点有关的就可以了（这里不同于拉格朗日插值法）。\n\n#### 两种插值的比较\n也不是很懂，给出 ChatGPT 的解释\n\n1. 数值稳定性： 牛顿插值通常在数值上更稳定，特别是在高次插值中。高次的拉格朗日插值多项式的系数可能会变得非常大，导致数值计算问题，这在计算机中可能会引发数值溢出或不稳定性。牛顿插值使用分裂差分形式，这种形式在数值计算上通常更可靠。\n\n2. 数据更新效率： 如果您需要在运行时动态添加新的数据点并更新插值多项式，牛顿插值更为高效。因为在牛顿插值中，您可以通过添加一个新的数据点来更新插值多项式，而不需要重新计算整个多项式。\n\n3. 分布不均匀的数据： 如果您的数据点分布不均匀，拉格朗日插值可能会导致插值多项式的阶数变得非常高，这会增加计算的复杂性和开销。牛顿插值在这种情况下通常更具优势。\n\n然而，需要注意的是，即使在大数据集的情况下，牛顿插值也不是绝对适用的。在一些特定情况下，如数据点的数量非常大或插值多项式的次数非常高，都可能导致数值计算问题。在这种情况下，考虑使用更高级的插值技术，例如分段插值（如样条插值）或基于快速傅里叶变换的方法，以提高数值稳定性和计算效率。选择合适的插值方法需要综合考虑数据的性质、计算需求和数值稳定性。\n\n#### 三次样条插值函数\n三次样条插值在科学和工程计算中起到重要作用，它只在插值区间的断点比 Lagrange 插值多两个边界条件，但是却在内节点处二阶导数连续。\n样条一词来源于工程制图。绘图员为了将一些指定点（称作样点）连接成一条光滑的曲线，往往把富有弹性的细长木条（称为样条）固定在样点上，然后画下木条表示的曲线所形成的样条曲线。\n\n有三种边界条件：\n1. 自然边界(Natural Spline) 指端点处二阶导数为 0.\n2. 固定边界(Clamped Spline) 指定端点一阶导数，这里分别定为 A 和 B，即 $S_0'(x_0) = A, S_{n - 1}^{x_n} = B$\n3. 非扭结边界(Not-A-Knot Spline) 强制第一个插值点的三阶导数等于第二个点的三阶导数，最后一个点的三阶导数等于倒数第二个点的三阶导数。\n\nhttps://zhuanlan.zhihu.com/p/62860859?utm_medium=social&utm_oi=1127691903852081152&utm_psn=1678405306240057344&utm_source=qq 关于三次样条的具体推导和最终求解矩阵方程。\n\n#### 最小二乘法拟合\n$r_i = y_i - \\varphi(x_i)$ 称为残量，$\\boldsymbol{r} = (r_0, r_1, ..., r_m)^{T}$ 称为**残向量**。所以用 $\\varphi(x)$ 去拟合 $f(x)$ 的问题就变成了残量的大小问题。\n我们用 $\\sum\\limits_{i = 0}^{m} r_i^{2} = \\boldsymbol{r^{T}}\\boldsymbol{r}$ 去度量残量的大小。\n后面的具体推导可以参考：\n1. https://zhuanlan.zhihu.com/p/128083562\n2. https://zhuanlan.zhihu.com/p/109986821\n3. https://zhuanlan.zhihu.com/p/38128785\n\n最终结果就是参数向量 $\\widehat{w} = \\boldsymbol{(X^{T}X)^{-1}X^{T}Y}$\n\n内积表示？？？\n\n#### 最佳平方逼近\n\n","source":"_posts/插值与拟合建模.md","raw":"---\ntitle: 插值与拟合建模\ndate: 2023-08-25 10:22:51\ntags: Mathematic\ndescription: The key record of mathematical modeling. \nmathjax: true\n---\n插值方法实数值分析中的一种古老而重要的方法。在实际生产和科学实验中，有时候仅仅能获得函数 f(x) 在若干点的函数值或者微商值，即只能给出 f(x) 的一张数据表。如果根据这张数据表构造一个函数 $\\varphi(x)$ ，使之满足这张表中的数据，这样的函数 $\\varphi(x)$ 就是函数 f(x) 的逼近函数。这种逼近问题称为插值问题。\n\n#### 插值多项式的存在性和唯一性\n设 $p_n(x) = a_0 + a_1x + a_2x^{2} + ... + a_nx^n$，由插值条件可以得到非齐次线性方程组：\n{%asset_img 插值条件非齐次方程组.png 插值条件非齐次方程组%}\n可以由 $\\text{Vandermonde}$ 行列式，各个点是互异的来得到系数矩阵的行列式 $D \\neq 0$。由 $\\text{Cramer}$ 法则知道，方程有唯一的解，所以多项式存在且唯一。 \n\n**几何解释：** 一个 n 次的多项式一定可以由 n + 1 个点唯一确定。\n\n#### Lagrange 插值公式\n{%asset_img 拉格朗日插值公式.png 拉格朗日插值公式%}\n\n#### Newton 插值公式\nhttps://www.zhihu.com/question/22320408/answer/141973314 马同学关于牛顿插值的解释\n牛顿插值法的特点在于：每增加一个点，不会导致之前的重新计算，只需要算和新增点有关的就可以了（这里不同于拉格朗日插值法）。\n\n#### 两种插值的比较\n也不是很懂，给出 ChatGPT 的解释\n\n1. 数值稳定性： 牛顿插值通常在数值上更稳定，特别是在高次插值中。高次的拉格朗日插值多项式的系数可能会变得非常大，导致数值计算问题，这在计算机中可能会引发数值溢出或不稳定性。牛顿插值使用分裂差分形式，这种形式在数值计算上通常更可靠。\n\n2. 数据更新效率： 如果您需要在运行时动态添加新的数据点并更新插值多项式，牛顿插值更为高效。因为在牛顿插值中，您可以通过添加一个新的数据点来更新插值多项式，而不需要重新计算整个多项式。\n\n3. 分布不均匀的数据： 如果您的数据点分布不均匀，拉格朗日插值可能会导致插值多项式的阶数变得非常高，这会增加计算的复杂性和开销。牛顿插值在这种情况下通常更具优势。\n\n然而，需要注意的是，即使在大数据集的情况下，牛顿插值也不是绝对适用的。在一些特定情况下，如数据点的数量非常大或插值多项式的次数非常高，都可能导致数值计算问题。在这种情况下，考虑使用更高级的插值技术，例如分段插值（如样条插值）或基于快速傅里叶变换的方法，以提高数值稳定性和计算效率。选择合适的插值方法需要综合考虑数据的性质、计算需求和数值稳定性。\n\n#### 三次样条插值函数\n三次样条插值在科学和工程计算中起到重要作用，它只在插值区间的断点比 Lagrange 插值多两个边界条件，但是却在内节点处二阶导数连续。\n样条一词来源于工程制图。绘图员为了将一些指定点（称作样点）连接成一条光滑的曲线，往往把富有弹性的细长木条（称为样条）固定在样点上，然后画下木条表示的曲线所形成的样条曲线。\n\n有三种边界条件：\n1. 自然边界(Natural Spline) 指端点处二阶导数为 0.\n2. 固定边界(Clamped Spline) 指定端点一阶导数，这里分别定为 A 和 B，即 $S_0'(x_0) = A, S_{n - 1}^{x_n} = B$\n3. 非扭结边界(Not-A-Knot Spline) 强制第一个插值点的三阶导数等于第二个点的三阶导数，最后一个点的三阶导数等于倒数第二个点的三阶导数。\n\nhttps://zhuanlan.zhihu.com/p/62860859?utm_medium=social&utm_oi=1127691903852081152&utm_psn=1678405306240057344&utm_source=qq 关于三次样条的具体推导和最终求解矩阵方程。\n\n#### 最小二乘法拟合\n$r_i = y_i - \\varphi(x_i)$ 称为残量，$\\boldsymbol{r} = (r_0, r_1, ..., r_m)^{T}$ 称为**残向量**。所以用 $\\varphi(x)$ 去拟合 $f(x)$ 的问题就变成了残量的大小问题。\n我们用 $\\sum\\limits_{i = 0}^{m} r_i^{2} = \\boldsymbol{r^{T}}\\boldsymbol{r}$ 去度量残量的大小。\n后面的具体推导可以参考：\n1. https://zhuanlan.zhihu.com/p/128083562\n2. https://zhuanlan.zhihu.com/p/109986821\n3. https://zhuanlan.zhihu.com/p/38128785\n\n最终结果就是参数向量 $\\widehat{w} = \\boldsymbol{(X^{T}X)^{-1}X^{T}Y}$\n\n内积表示？？？\n\n#### 最佳平方逼近\n\n","slug":"插值与拟合建模","published":1,"updated":"2023-08-25T06:21:02.883Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szoa000v5ooga28yamyl","content":"<p>插值方法实数值分析中的一种古老而重要的方法。在实际生产和科学实验中，有时候仅仅能获得函数 f(x) 在若干点的函数值或者微商值，即只能给出 f(x) 的一张数据表。如果根据这张数据表构造一个函数 $\\varphi(x)$ ，使之满足这张表中的数据，这样的函数 $\\varphi(x)$ 就是函数 f(x) 的逼近函数。这种逼近问题称为插值问题。</p>\n<h4 id=\"插值多项式的存在性和唯一性\"><a href=\"#插值多项式的存在性和唯一性\" class=\"headerlink\" title=\"插值多项式的存在性和唯一性\"></a>插值多项式的存在性和唯一性</h4><p>设 $p_n(x) = a_0 + a_1x + a_2x^{2} + … + a_nx^n$，由插值条件可以得到非齐次线性方程组：<br><img src=\"/2023/08/25/%E6%8F%92%E5%80%BC%E4%B8%8E%E6%8B%9F%E5%90%88%E5%BB%BA%E6%A8%A1/%E6%8F%92%E5%80%BC%E6%9D%A1%E4%BB%B6%E9%9D%9E%E9%BD%90%E6%AC%A1%E6%96%B9%E7%A8%8B%E7%BB%84.png\" class=\"\" title=\"插值条件非齐次方程组\"><br>可以由 $\\text{Vandermonde}$ 行列式，各个点是互异的来得到系数矩阵的行列式 $D \\neq 0$。由 $\\text{Cramer}$ 法则知道，方程有唯一的解，所以多项式存在且唯一。 </p>\n<p><strong>几何解释：</strong> 一个 n 次的多项式一定可以由 n + 1 个点唯一确定。</p>\n<h4 id=\"Lagrange-插值公式\"><a href=\"#Lagrange-插值公式\" class=\"headerlink\" title=\"Lagrange 插值公式\"></a>Lagrange 插值公式</h4><img src=\"/2023/08/25/%E6%8F%92%E5%80%BC%E4%B8%8E%E6%8B%9F%E5%90%88%E5%BB%BA%E6%A8%A1/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E6%8F%92%E5%80%BC%E5%85%AC%E5%BC%8F.png\" class=\"\" title=\"拉格朗日插值公式\">\n<h4 id=\"Newton-插值公式\"><a href=\"#Newton-插值公式\" class=\"headerlink\" title=\"Newton 插值公式\"></a>Newton 插值公式</h4><p><a href=\"https://www.zhihu.com/question/22320408/answer/141973314\">https://www.zhihu.com/question/22320408/answer/141973314</a> 马同学关于牛顿插值的解释<br>牛顿插值法的特点在于：每增加一个点，不会导致之前的重新计算，只需要算和新增点有关的就可以了（这里不同于拉格朗日插值法）。</p>\n<h4 id=\"两种插值的比较\"><a href=\"#两种插值的比较\" class=\"headerlink\" title=\"两种插值的比较\"></a>两种插值的比较</h4><p>也不是很懂，给出 ChatGPT 的解释</p>\n<ol>\n<li><p>数值稳定性： 牛顿插值通常在数值上更稳定，特别是在高次插值中。高次的拉格朗日插值多项式的系数可能会变得非常大，导致数值计算问题，这在计算机中可能会引发数值溢出或不稳定性。牛顿插值使用分裂差分形式，这种形式在数值计算上通常更可靠。</p>\n</li>\n<li><p>数据更新效率： 如果您需要在运行时动态添加新的数据点并更新插值多项式，牛顿插值更为高效。因为在牛顿插值中，您可以通过添加一个新的数据点来更新插值多项式，而不需要重新计算整个多项式。</p>\n</li>\n<li><p>分布不均匀的数据： 如果您的数据点分布不均匀，拉格朗日插值可能会导致插值多项式的阶数变得非常高，这会增加计算的复杂性和开销。牛顿插值在这种情况下通常更具优势。</p>\n</li>\n</ol>\n<p>然而，需要注意的是，即使在大数据集的情况下，牛顿插值也不是绝对适用的。在一些特定情况下，如数据点的数量非常大或插值多项式的次数非常高，都可能导致数值计算问题。在这种情况下，考虑使用更高级的插值技术，例如分段插值（如样条插值）或基于快速傅里叶变换的方法，以提高数值稳定性和计算效率。选择合适的插值方法需要综合考虑数据的性质、计算需求和数值稳定性。</p>\n<h4 id=\"三次样条插值函数\"><a href=\"#三次样条插值函数\" class=\"headerlink\" title=\"三次样条插值函数\"></a>三次样条插值函数</h4><p>三次样条插值在科学和工程计算中起到重要作用，它只在插值区间的断点比 Lagrange 插值多两个边界条件，但是却在内节点处二阶导数连续。<br>样条一词来源于工程制图。绘图员为了将一些指定点（称作样点）连接成一条光滑的曲线，往往把富有弹性的细长木条（称为样条）固定在样点上，然后画下木条表示的曲线所形成的样条曲线。</p>\n<p>有三种边界条件：</p>\n<ol>\n<li>自然边界(Natural Spline) 指端点处二阶导数为 0.</li>\n<li>固定边界(Clamped Spline) 指定端点一阶导数，这里分别定为 A 和 B，即 $S_0’(x_0) = A, S_{n - 1}^{x_n} = B$</li>\n<li>非扭结边界(Not-A-Knot Spline) 强制第一个插值点的三阶导数等于第二个点的三阶导数，最后一个点的三阶导数等于倒数第二个点的三阶导数。</li>\n</ol>\n<p><a href=\"https://zhuanlan.zhihu.com/p/62860859?utm_medium=social&amp;utm_oi=1127691903852081152&amp;utm_psn=1678405306240057344&amp;utm_source=qq\">https://zhuanlan.zhihu.com/p/62860859?utm_medium=social&amp;utm_oi=1127691903852081152&amp;utm_psn=1678405306240057344&amp;utm_source=qq</a> 关于三次样条的具体推导和最终求解矩阵方程。</p>\n<h4 id=\"最小二乘法拟合\"><a href=\"#最小二乘法拟合\" class=\"headerlink\" title=\"最小二乘法拟合\"></a>最小二乘法拟合</h4><p>$r_i = y_i - \\varphi(x_i)$ 称为残量，$\\boldsymbol{r} = (r_0, r_1, …, r_m)^{T}$ 称为<strong>残向量</strong>。所以用 $\\varphi(x)$ 去拟合 $f(x)$ 的问题就变成了残量的大小问题。<br>我们用 $\\sum\\limits_{i = 0}^{m} r_i^{2} = \\boldsymbol{r^{T}}\\boldsymbol{r}$ 去度量残量的大小。<br>后面的具体推导可以参考：</p>\n<ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/128083562\">https://zhuanlan.zhihu.com/p/128083562</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/109986821\">https://zhuanlan.zhihu.com/p/109986821</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/38128785\">https://zhuanlan.zhihu.com/p/38128785</a></li>\n</ol>\n<p>最终结果就是参数向量 $\\widehat{w} = \\boldsymbol{(X^{T}X)^{-1}X^{T}Y}$</p>\n<p>内积表示？？？</p>\n<h4 id=\"最佳平方逼近\"><a href=\"#最佳平方逼近\" class=\"headerlink\" title=\"最佳平方逼近\"></a>最佳平方逼近</h4>","site":{"data":{}},"excerpt":"","more":"<p>插值方法实数值分析中的一种古老而重要的方法。在实际生产和科学实验中，有时候仅仅能获得函数 f(x) 在若干点的函数值或者微商值，即只能给出 f(x) 的一张数据表。如果根据这张数据表构造一个函数 $\\varphi(x)$ ，使之满足这张表中的数据，这样的函数 $\\varphi(x)$ 就是函数 f(x) 的逼近函数。这种逼近问题称为插值问题。</p>\n<h4 id=\"插值多项式的存在性和唯一性\"><a href=\"#插值多项式的存在性和唯一性\" class=\"headerlink\" title=\"插值多项式的存在性和唯一性\"></a>插值多项式的存在性和唯一性</h4><p>设 $p_n(x) = a_0 + a_1x + a_2x^{2} + … + a_nx^n$，由插值条件可以得到非齐次线性方程组：<br><img src=\"/2023/08/25/%E6%8F%92%E5%80%BC%E4%B8%8E%E6%8B%9F%E5%90%88%E5%BB%BA%E6%A8%A1/%E6%8F%92%E5%80%BC%E6%9D%A1%E4%BB%B6%E9%9D%9E%E9%BD%90%E6%AC%A1%E6%96%B9%E7%A8%8B%E7%BB%84.png\" class=\"\" title=\"插值条件非齐次方程组\"><br>可以由 $\\text{Vandermonde}$ 行列式，各个点是互异的来得到系数矩阵的行列式 $D \\neq 0$。由 $\\text{Cramer}$ 法则知道，方程有唯一的解，所以多项式存在且唯一。 </p>\n<p><strong>几何解释：</strong> 一个 n 次的多项式一定可以由 n + 1 个点唯一确定。</p>\n<h4 id=\"Lagrange-插值公式\"><a href=\"#Lagrange-插值公式\" class=\"headerlink\" title=\"Lagrange 插值公式\"></a>Lagrange 插值公式</h4><img src=\"/2023/08/25/%E6%8F%92%E5%80%BC%E4%B8%8E%E6%8B%9F%E5%90%88%E5%BB%BA%E6%A8%A1/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E6%8F%92%E5%80%BC%E5%85%AC%E5%BC%8F.png\" class=\"\" title=\"拉格朗日插值公式\">\n<h4 id=\"Newton-插值公式\"><a href=\"#Newton-插值公式\" class=\"headerlink\" title=\"Newton 插值公式\"></a>Newton 插值公式</h4><p><a href=\"https://www.zhihu.com/question/22320408/answer/141973314\">https://www.zhihu.com/question/22320408/answer/141973314</a> 马同学关于牛顿插值的解释<br>牛顿插值法的特点在于：每增加一个点，不会导致之前的重新计算，只需要算和新增点有关的就可以了（这里不同于拉格朗日插值法）。</p>\n<h4 id=\"两种插值的比较\"><a href=\"#两种插值的比较\" class=\"headerlink\" title=\"两种插值的比较\"></a>两种插值的比较</h4><p>也不是很懂，给出 ChatGPT 的解释</p>\n<ol>\n<li><p>数值稳定性： 牛顿插值通常在数值上更稳定，特别是在高次插值中。高次的拉格朗日插值多项式的系数可能会变得非常大，导致数值计算问题，这在计算机中可能会引发数值溢出或不稳定性。牛顿插值使用分裂差分形式，这种形式在数值计算上通常更可靠。</p>\n</li>\n<li><p>数据更新效率： 如果您需要在运行时动态添加新的数据点并更新插值多项式，牛顿插值更为高效。因为在牛顿插值中，您可以通过添加一个新的数据点来更新插值多项式，而不需要重新计算整个多项式。</p>\n</li>\n<li><p>分布不均匀的数据： 如果您的数据点分布不均匀，拉格朗日插值可能会导致插值多项式的阶数变得非常高，这会增加计算的复杂性和开销。牛顿插值在这种情况下通常更具优势。</p>\n</li>\n</ol>\n<p>然而，需要注意的是，即使在大数据集的情况下，牛顿插值也不是绝对适用的。在一些特定情况下，如数据点的数量非常大或插值多项式的次数非常高，都可能导致数值计算问题。在这种情况下，考虑使用更高级的插值技术，例如分段插值（如样条插值）或基于快速傅里叶变换的方法，以提高数值稳定性和计算效率。选择合适的插值方法需要综合考虑数据的性质、计算需求和数值稳定性。</p>\n<h4 id=\"三次样条插值函数\"><a href=\"#三次样条插值函数\" class=\"headerlink\" title=\"三次样条插值函数\"></a>三次样条插值函数</h4><p>三次样条插值在科学和工程计算中起到重要作用，它只在插值区间的断点比 Lagrange 插值多两个边界条件，但是却在内节点处二阶导数连续。<br>样条一词来源于工程制图。绘图员为了将一些指定点（称作样点）连接成一条光滑的曲线，往往把富有弹性的细长木条（称为样条）固定在样点上，然后画下木条表示的曲线所形成的样条曲线。</p>\n<p>有三种边界条件：</p>\n<ol>\n<li>自然边界(Natural Spline) 指端点处二阶导数为 0.</li>\n<li>固定边界(Clamped Spline) 指定端点一阶导数，这里分别定为 A 和 B，即 $S_0’(x_0) = A, S_{n - 1}^{x_n} = B$</li>\n<li>非扭结边界(Not-A-Knot Spline) 强制第一个插值点的三阶导数等于第二个点的三阶导数，最后一个点的三阶导数等于倒数第二个点的三阶导数。</li>\n</ol>\n<p><a href=\"https://zhuanlan.zhihu.com/p/62860859?utm_medium=social&amp;utm_oi=1127691903852081152&amp;utm_psn=1678405306240057344&amp;utm_source=qq\">https://zhuanlan.zhihu.com/p/62860859?utm_medium=social&amp;utm_oi=1127691903852081152&amp;utm_psn=1678405306240057344&amp;utm_source=qq</a> 关于三次样条的具体推导和最终求解矩阵方程。</p>\n<h4 id=\"最小二乘法拟合\"><a href=\"#最小二乘法拟合\" class=\"headerlink\" title=\"最小二乘法拟合\"></a>最小二乘法拟合</h4><p>$r_i = y_i - \\varphi(x_i)$ 称为残量，$\\boldsymbol{r} = (r_0, r_1, …, r_m)^{T}$ 称为<strong>残向量</strong>。所以用 $\\varphi(x)$ 去拟合 $f(x)$ 的问题就变成了残量的大小问题。<br>我们用 $\\sum\\limits_{i = 0}^{m} r_i^{2} = \\boldsymbol{r^{T}}\\boldsymbol{r}$ 去度量残量的大小。<br>后面的具体推导可以参考：</p>\n<ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/128083562\">https://zhuanlan.zhihu.com/p/128083562</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/109986821\">https://zhuanlan.zhihu.com/p/109986821</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/38128785\">https://zhuanlan.zhihu.com/p/38128785</a></li>\n</ol>\n<p>最终结果就是参数向量 $\\widehat{w} = \\boldsymbol{(X^{T}X)^{-1}X^{T}Y}$</p>\n<p>内积表示？？？</p>\n<h4 id=\"最佳平方逼近\"><a href=\"#最佳平方逼近\" class=\"headerlink\" title=\"最佳平方逼近\"></a>最佳平方逼近</h4>"},{"title":"微分方程模型","description":"The key record of mathematical modeling.","mathjax":true,"date":"2023-08-24T01:05:59.000Z","_content":"\n\n#### 微分方程模型\n\n如果能得到解析解的形式固然便于分析和应用，但是大多数微分方程无法得到解析解，因此研究其稳定性和数值解法就十分重要。\n\n1. {%asset_img liuliangxishu.jpg 流量系数%}\n    容器漏水问题。\n    好像是 $Q = Sv$ 流量前面一个系数，不是很懂。\n2. 导弹追踪问题\n    列出关于斜率的微分方程，然后代入初值条件。\n   \n##### 传染病模型\n\n我们一开始不把所有的因素考虑在内，而是抓住主要因素，把问题简化，建立相应的数学模型。然后与实际比较，再做出修改。\n\n1. 指数模型\n    用 $i(t)$ 表示 t 时刻病人的数量，每个病人传染的人数为 k, 则有 $i(t + \\Delta t) - i(t) = ki(t)\\Delta t$\n    解得 $i(t) = i_0e^{kt}$，随着时间增长，人数是无穷的，不符合实际，所以我们对于这个模型进行修改。\n2. SI 模型\n    设 t 时刻病人为 $i(t)$，健康人数为 $s(t)$，每个病人传染的人数和健康人数呈正比，比例系数为 k，则有 $i(t + \\Delta t) - i(t) = i(t)\\Delta ks(t) = ki(t)(n - i(t))$，解得 $i(t) = \\dfrac{n}{1 + (\\frac{n}{i_0} - 1)e^{-kt}}$\n    医学上一般称这个 $i(t)$ 曲线为传染病曲线。\n    但是这个模型的缺点是，当 $t \\to +\\infty$ 的时候，人人都会生病，这是不符合实际的。\n3. SIS 模型\n    考虑到人们生病后是恢复的，或者说有人可能会感染多次。\n    在上一个模型的基础上，添加日治愈率 $\\mu$，和病人的数量呈正比。\n    现在就有 $i(t + \\Delta t) - i(t) = (ks(t)i(t) - \\mu i(t))\\Delta t, i(0) = i_0$。\n\n#### 捕鱼业的持续收获模型\n\n\n###### 阻滞增长模型 (Logistic 模型)\n\n将增长率 r 修正为 r - sx 一个关于 x 的线性函数。自然资源和环境限制所能容纳的最大人数为 $x_m$，也就是 $x = x_m$ 的时候，$r =0$，所以有 $r(x) = r(1 - \\dfrac{x}{x_m})$，其实和上面传染病模型中的 SI 模型是差不多的。)\n\n1. 产量模型\n    记时刻 t 时渔场中的鱼量为 $x(t)$，由 Logistic 模型则有 $x'(t) = f(x) = rx(1 - \\frac{x}{N})$，N 是环境允许的最大鱼量。\n    设捕鱼强度为 E，也就是单位时间捕鱼量为 $Ex$，记 $F(x) = f(x) - Ex$，则持续捕捞下，平衡的鱼量为 $x_0 = N(1 - \\frac{E}{r})$\n    $x_0 \\times E$ 求二次函数的最值，就是最大的持续捕捞量了，此时 $E = \\dfrac{r}{2}$（好像和高中生物学的一样了）。\n    (其实和人口增长差不多)\n2. 效益模型\n3. 捕捞过度模型\n\n\n#### 战争模型\n\n\n「兰彻斯特平方定律」：作战部队的实力同投入战斗的士兵人数的平方成正比。\n\n1. 正规战模型\n    以 $x(t), y(t)$ 分别表示 t 时刻红军和蓝军的士兵人数，每队士兵的减员率和对方士兵的人数成正比，所以有方程 $\\frac{\\mathrm{d}x}{\\mathrm{d}t} = -ay, \\frac{\\mathrm{d}y}{\\mathrm{d}t} = -bx$，这两个式子相除，积分得到 $ay^2 - bx^2 = ay_0^{2} - bx_0^{2} = c$\n2. 混合战模型\n    红军游击队，蓝军正规部队，但是游击队伍位于不易发现的有利位置，所以把红军的人员损失方程再乘一个 x，表示损失与自身规模大小有关。\n    $\\frac{\\mathrm{d}x}{\\mathrm{d}t} = -cxy + f(t)$，f(t) 表示红军的增援情况。\n3. 游击战模型\n    双方都是游击队伍。就都变成上个模型红军的方程形式。\n\n恩格尔(Engel)将第二次世界大战时美军和日军争夺硫磺岛所进行的战斗资料进行分析，发现与兰彻斯特作战数学模型非常吻合，这说明兰彻斯特作战数学模型是可以来描述实际战争的。\n\n#### 对药物剂量开处方\n\n#### 捕食者——食饵模型\n感觉和战争模型比较相似，不过这里的捕食者和被捕食者是会自然增长的（其实等价于战争模型中的援助）。\n\n#### 微分方程的数值解\n\n\n很多方程往往复杂且大多数情况下求不出解析解，因而在实际生产和科研中，常常是求满足精度要求的近似解。\n\n1. 欧拉方法\n2. 梯形方法\n3. 龙格-库塔方法","source":"_posts/微分方程模型.md","raw":"---\ntitle: 微分方程模型\ntags: Mathematic\ndescription: The key record of mathematical modeling.\nmathjax: true\ndate: 2023-08-24 09:05:59\n---\n\n\n#### 微分方程模型\n\n如果能得到解析解的形式固然便于分析和应用，但是大多数微分方程无法得到解析解，因此研究其稳定性和数值解法就十分重要。\n\n1. {%asset_img liuliangxishu.jpg 流量系数%}\n    容器漏水问题。\n    好像是 $Q = Sv$ 流量前面一个系数，不是很懂。\n2. 导弹追踪问题\n    列出关于斜率的微分方程，然后代入初值条件。\n   \n##### 传染病模型\n\n我们一开始不把所有的因素考虑在内，而是抓住主要因素，把问题简化，建立相应的数学模型。然后与实际比较，再做出修改。\n\n1. 指数模型\n    用 $i(t)$ 表示 t 时刻病人的数量，每个病人传染的人数为 k, 则有 $i(t + \\Delta t) - i(t) = ki(t)\\Delta t$\n    解得 $i(t) = i_0e^{kt}$，随着时间增长，人数是无穷的，不符合实际，所以我们对于这个模型进行修改。\n2. SI 模型\n    设 t 时刻病人为 $i(t)$，健康人数为 $s(t)$，每个病人传染的人数和健康人数呈正比，比例系数为 k，则有 $i(t + \\Delta t) - i(t) = i(t)\\Delta ks(t) = ki(t)(n - i(t))$，解得 $i(t) = \\dfrac{n}{1 + (\\frac{n}{i_0} - 1)e^{-kt}}$\n    医学上一般称这个 $i(t)$ 曲线为传染病曲线。\n    但是这个模型的缺点是，当 $t \\to +\\infty$ 的时候，人人都会生病，这是不符合实际的。\n3. SIS 模型\n    考虑到人们生病后是恢复的，或者说有人可能会感染多次。\n    在上一个模型的基础上，添加日治愈率 $\\mu$，和病人的数量呈正比。\n    现在就有 $i(t + \\Delta t) - i(t) = (ks(t)i(t) - \\mu i(t))\\Delta t, i(0) = i_0$。\n\n#### 捕鱼业的持续收获模型\n\n\n###### 阻滞增长模型 (Logistic 模型)\n\n将增长率 r 修正为 r - sx 一个关于 x 的线性函数。自然资源和环境限制所能容纳的最大人数为 $x_m$，也就是 $x = x_m$ 的时候，$r =0$，所以有 $r(x) = r(1 - \\dfrac{x}{x_m})$，其实和上面传染病模型中的 SI 模型是差不多的。)\n\n1. 产量模型\n    记时刻 t 时渔场中的鱼量为 $x(t)$，由 Logistic 模型则有 $x'(t) = f(x) = rx(1 - \\frac{x}{N})$，N 是环境允许的最大鱼量。\n    设捕鱼强度为 E，也就是单位时间捕鱼量为 $Ex$，记 $F(x) = f(x) - Ex$，则持续捕捞下，平衡的鱼量为 $x_0 = N(1 - \\frac{E}{r})$\n    $x_0 \\times E$ 求二次函数的最值，就是最大的持续捕捞量了，此时 $E = \\dfrac{r}{2}$（好像和高中生物学的一样了）。\n    (其实和人口增长差不多)\n2. 效益模型\n3. 捕捞过度模型\n\n\n#### 战争模型\n\n\n「兰彻斯特平方定律」：作战部队的实力同投入战斗的士兵人数的平方成正比。\n\n1. 正规战模型\n    以 $x(t), y(t)$ 分别表示 t 时刻红军和蓝军的士兵人数，每队士兵的减员率和对方士兵的人数成正比，所以有方程 $\\frac{\\mathrm{d}x}{\\mathrm{d}t} = -ay, \\frac{\\mathrm{d}y}{\\mathrm{d}t} = -bx$，这两个式子相除，积分得到 $ay^2 - bx^2 = ay_0^{2} - bx_0^{2} = c$\n2. 混合战模型\n    红军游击队，蓝军正规部队，但是游击队伍位于不易发现的有利位置，所以把红军的人员损失方程再乘一个 x，表示损失与自身规模大小有关。\n    $\\frac{\\mathrm{d}x}{\\mathrm{d}t} = -cxy + f(t)$，f(t) 表示红军的增援情况。\n3. 游击战模型\n    双方都是游击队伍。就都变成上个模型红军的方程形式。\n\n恩格尔(Engel)将第二次世界大战时美军和日军争夺硫磺岛所进行的战斗资料进行分析，发现与兰彻斯特作战数学模型非常吻合，这说明兰彻斯特作战数学模型是可以来描述实际战争的。\n\n#### 对药物剂量开处方\n\n#### 捕食者——食饵模型\n感觉和战争模型比较相似，不过这里的捕食者和被捕食者是会自然增长的（其实等价于战争模型中的援助）。\n\n#### 微分方程的数值解\n\n\n很多方程往往复杂且大多数情况下求不出解析解，因而在实际生产和科研中，常常是求满足精度要求的近似解。\n\n1. 欧拉方法\n2. 梯形方法\n3. 龙格-库塔方法","slug":"微分方程模型","published":1,"updated":"2023-08-26T00:50:49.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szob000x5oogeyep3lv0","content":"<h4 id=\"微分方程模型\"><a href=\"#微分方程模型\" class=\"headerlink\" title=\"微分方程模型\"></a>微分方程模型</h4><p>如果能得到解析解的形式固然便于分析和应用，但是大多数微分方程无法得到解析解，因此研究其稳定性和数值解法就十分重要。</p>\n<ol>\n<li><img src=\"/2023/08/24/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%A8%A1%E5%9E%8B/liuliangxishu.jpg\" class=\"\" title=\"流量系数\">\n 容器漏水问题。<br> 好像是 $Q = Sv$ 流量前面一个系数，不是很懂。</li>\n<li>导弹追踪问题<br> 列出关于斜率的微分方程，然后代入初值条件。</li>\n</ol>\n<h5 id=\"传染病模型\"><a href=\"#传染病模型\" class=\"headerlink\" title=\"传染病模型\"></a>传染病模型</h5><p>我们一开始不把所有的因素考虑在内，而是抓住主要因素，把问题简化，建立相应的数学模型。然后与实际比较，再做出修改。</p>\n<ol>\n<li>指数模型<br> 用 $i(t)$ 表示 t 时刻病人的数量，每个病人传染的人数为 k, 则有 $i(t + \\Delta t) - i(t) = ki(t)\\Delta t$<br> 解得 $i(t) = i_0e^{kt}$，随着时间增长，人数是无穷的，不符合实际，所以我们对于这个模型进行修改。</li>\n<li>SI 模型<br> 设 t 时刻病人为 $i(t)$，健康人数为 $s(t)$，每个病人传染的人数和健康人数呈正比，比例系数为 k，则有 $i(t + \\Delta t) - i(t) = i(t)\\Delta ks(t) = ki(t)(n - i(t))$，解得 $i(t) = \\dfrac{n}{1 + (\\frac{n}{i_0} - 1)e^{-kt}}$<br> 医学上一般称这个 $i(t)$ 曲线为传染病曲线。<br> 但是这个模型的缺点是，当 $t \\to +\\infty$ 的时候，人人都会生病，这是不符合实际的。</li>\n<li>SIS 模型<br> 考虑到人们生病后是恢复的，或者说有人可能会感染多次。<br> 在上一个模型的基础上，添加日治愈率 $\\mu$，和病人的数量呈正比。<br> 现在就有 $i(t + \\Delta t) - i(t) = (ks(t)i(t) - \\mu i(t))\\Delta t, i(0) = i_0$。</li>\n</ol>\n<h4 id=\"捕鱼业的持续收获模型\"><a href=\"#捕鱼业的持续收获模型\" class=\"headerlink\" title=\"捕鱼业的持续收获模型\"></a>捕鱼业的持续收获模型</h4><h6 id=\"阻滞增长模型-Logistic-模型\"><a href=\"#阻滞增长模型-Logistic-模型\" class=\"headerlink\" title=\"阻滞增长模型 (Logistic 模型)\"></a>阻滞增长模型 (Logistic 模型)</h6><p>将增长率 r 修正为 r - sx 一个关于 x 的线性函数。自然资源和环境限制所能容纳的最大人数为 $x_m$，也就是 $x = x_m$ 的时候，$r =0$，所以有 $r(x) = r(1 - \\dfrac{x}{x_m})$，其实和上面传染病模型中的 SI 模型是差不多的。)</p>\n<ol>\n<li>产量模型<br> 记时刻 t 时渔场中的鱼量为 $x(t)$，由 Logistic 模型则有 $x’(t) = f(x) = rx(1 - \\frac{x}{N})$，N 是环境允许的最大鱼量。<br> 设捕鱼强度为 E，也就是单位时间捕鱼量为 $Ex$，记 $F(x) = f(x) - Ex$，则持续捕捞下，平衡的鱼量为 $x_0 = N(1 - \\frac{E}{r})$<br> $x_0 \\times E$ 求二次函数的最值，就是最大的持续捕捞量了，此时 $E = \\dfrac{r}{2}$（好像和高中生物学的一样了）。<br> (其实和人口增长差不多)</li>\n<li>效益模型</li>\n<li>捕捞过度模型</li>\n</ol>\n<h4 id=\"战争模型\"><a href=\"#战争模型\" class=\"headerlink\" title=\"战争模型\"></a>战争模型</h4><p>「兰彻斯特平方定律」：作战部队的实力同投入战斗的士兵人数的平方成正比。</p>\n<ol>\n<li>正规战模型<br> 以 $x(t), y(t)$ 分别表示 t 时刻红军和蓝军的士兵人数，每队士兵的减员率和对方士兵的人数成正比，所以有方程 $\\frac{\\mathrm{d}x}{\\mathrm{d}t} = -ay, \\frac{\\mathrm{d}y}{\\mathrm{d}t} = -bx$，这两个式子相除，积分得到 $ay^2 - bx^2 = ay_0^{2} - bx_0^{2} = c$</li>\n<li>混合战模型<br> 红军游击队，蓝军正规部队，但是游击队伍位于不易发现的有利位置，所以把红军的人员损失方程再乘一个 x，表示损失与自身规模大小有关。<br> $\\frac{\\mathrm{d}x}{\\mathrm{d}t} = -cxy + f(t)$，f(t) 表示红军的增援情况。</li>\n<li>游击战模型<br> 双方都是游击队伍。就都变成上个模型红军的方程形式。</li>\n</ol>\n<p>恩格尔(Engel)将第二次世界大战时美军和日军争夺硫磺岛所进行的战斗资料进行分析，发现与兰彻斯特作战数学模型非常吻合，这说明兰彻斯特作战数学模型是可以来描述实际战争的。</p>\n<h4 id=\"对药物剂量开处方\"><a href=\"#对药物剂量开处方\" class=\"headerlink\" title=\"对药物剂量开处方\"></a>对药物剂量开处方</h4><h4 id=\"捕食者——食饵模型\"><a href=\"#捕食者——食饵模型\" class=\"headerlink\" title=\"捕食者——食饵模型\"></a>捕食者——食饵模型</h4><p>感觉和战争模型比较相似，不过这里的捕食者和被捕食者是会自然增长的（其实等价于战争模型中的援助）。</p>\n<h4 id=\"微分方程的数值解\"><a href=\"#微分方程的数值解\" class=\"headerlink\" title=\"微分方程的数值解\"></a>微分方程的数值解</h4><p>很多方程往往复杂且大多数情况下求不出解析解，因而在实际生产和科研中，常常是求满足精度要求的近似解。</p>\n<ol>\n<li>欧拉方法</li>\n<li>梯形方法</li>\n<li>龙格-库塔方法</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"微分方程模型\"><a href=\"#微分方程模型\" class=\"headerlink\" title=\"微分方程模型\"></a>微分方程模型</h4><p>如果能得到解析解的形式固然便于分析和应用，但是大多数微分方程无法得到解析解，因此研究其稳定性和数值解法就十分重要。</p>\n<ol>\n<li><img src=\"/2023/08/24/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%A8%A1%E5%9E%8B/liuliangxishu.jpg\" class=\"\" title=\"流量系数\">\n 容器漏水问题。<br> 好像是 $Q = Sv$ 流量前面一个系数，不是很懂。</li>\n<li>导弹追踪问题<br> 列出关于斜率的微分方程，然后代入初值条件。</li>\n</ol>\n<h5 id=\"传染病模型\"><a href=\"#传染病模型\" class=\"headerlink\" title=\"传染病模型\"></a>传染病模型</h5><p>我们一开始不把所有的因素考虑在内，而是抓住主要因素，把问题简化，建立相应的数学模型。然后与实际比较，再做出修改。</p>\n<ol>\n<li>指数模型<br> 用 $i(t)$ 表示 t 时刻病人的数量，每个病人传染的人数为 k, 则有 $i(t + \\Delta t) - i(t) = ki(t)\\Delta t$<br> 解得 $i(t) = i_0e^{kt}$，随着时间增长，人数是无穷的，不符合实际，所以我们对于这个模型进行修改。</li>\n<li>SI 模型<br> 设 t 时刻病人为 $i(t)$，健康人数为 $s(t)$，每个病人传染的人数和健康人数呈正比，比例系数为 k，则有 $i(t + \\Delta t) - i(t) = i(t)\\Delta ks(t) = ki(t)(n - i(t))$，解得 $i(t) = \\dfrac{n}{1 + (\\frac{n}{i_0} - 1)e^{-kt}}$<br> 医学上一般称这个 $i(t)$ 曲线为传染病曲线。<br> 但是这个模型的缺点是，当 $t \\to +\\infty$ 的时候，人人都会生病，这是不符合实际的。</li>\n<li>SIS 模型<br> 考虑到人们生病后是恢复的，或者说有人可能会感染多次。<br> 在上一个模型的基础上，添加日治愈率 $\\mu$，和病人的数量呈正比。<br> 现在就有 $i(t + \\Delta t) - i(t) = (ks(t)i(t) - \\mu i(t))\\Delta t, i(0) = i_0$。</li>\n</ol>\n<h4 id=\"捕鱼业的持续收获模型\"><a href=\"#捕鱼业的持续收获模型\" class=\"headerlink\" title=\"捕鱼业的持续收获模型\"></a>捕鱼业的持续收获模型</h4><h6 id=\"阻滞增长模型-Logistic-模型\"><a href=\"#阻滞增长模型-Logistic-模型\" class=\"headerlink\" title=\"阻滞增长模型 (Logistic 模型)\"></a>阻滞增长模型 (Logistic 模型)</h6><p>将增长率 r 修正为 r - sx 一个关于 x 的线性函数。自然资源和环境限制所能容纳的最大人数为 $x_m$，也就是 $x = x_m$ 的时候，$r =0$，所以有 $r(x) = r(1 - \\dfrac{x}{x_m})$，其实和上面传染病模型中的 SI 模型是差不多的。)</p>\n<ol>\n<li>产量模型<br> 记时刻 t 时渔场中的鱼量为 $x(t)$，由 Logistic 模型则有 $x’(t) = f(x) = rx(1 - \\frac{x}{N})$，N 是环境允许的最大鱼量。<br> 设捕鱼强度为 E，也就是单位时间捕鱼量为 $Ex$，记 $F(x) = f(x) - Ex$，则持续捕捞下，平衡的鱼量为 $x_0 = N(1 - \\frac{E}{r})$<br> $x_0 \\times E$ 求二次函数的最值，就是最大的持续捕捞量了，此时 $E = \\dfrac{r}{2}$（好像和高中生物学的一样了）。<br> (其实和人口增长差不多)</li>\n<li>效益模型</li>\n<li>捕捞过度模型</li>\n</ol>\n<h4 id=\"战争模型\"><a href=\"#战争模型\" class=\"headerlink\" title=\"战争模型\"></a>战争模型</h4><p>「兰彻斯特平方定律」：作战部队的实力同投入战斗的士兵人数的平方成正比。</p>\n<ol>\n<li>正规战模型<br> 以 $x(t), y(t)$ 分别表示 t 时刻红军和蓝军的士兵人数，每队士兵的减员率和对方士兵的人数成正比，所以有方程 $\\frac{\\mathrm{d}x}{\\mathrm{d}t} = -ay, \\frac{\\mathrm{d}y}{\\mathrm{d}t} = -bx$，这两个式子相除，积分得到 $ay^2 - bx^2 = ay_0^{2} - bx_0^{2} = c$</li>\n<li>混合战模型<br> 红军游击队，蓝军正规部队，但是游击队伍位于不易发现的有利位置，所以把红军的人员损失方程再乘一个 x，表示损失与自身规模大小有关。<br> $\\frac{\\mathrm{d}x}{\\mathrm{d}t} = -cxy + f(t)$，f(t) 表示红军的增援情况。</li>\n<li>游击战模型<br> 双方都是游击队伍。就都变成上个模型红军的方程形式。</li>\n</ol>\n<p>恩格尔(Engel)将第二次世界大战时美军和日军争夺硫磺岛所进行的战斗资料进行分析，发现与兰彻斯特作战数学模型非常吻合，这说明兰彻斯特作战数学模型是可以来描述实际战争的。</p>\n<h4 id=\"对药物剂量开处方\"><a href=\"#对药物剂量开处方\" class=\"headerlink\" title=\"对药物剂量开处方\"></a>对药物剂量开处方</h4><h4 id=\"捕食者——食饵模型\"><a href=\"#捕食者——食饵模型\" class=\"headerlink\" title=\"捕食者——食饵模型\"></a>捕食者——食饵模型</h4><p>感觉和战争模型比较相似，不过这里的捕食者和被捕食者是会自然增长的（其实等价于战争模型中的援助）。</p>\n<h4 id=\"微分方程的数值解\"><a href=\"#微分方程的数值解\" class=\"headerlink\" title=\"微分方程的数值解\"></a>微分方程的数值解</h4><p>很多方程往往复杂且大多数情况下求不出解析解，因而在实际生产和科研中，常常是求满足精度要求的近似解。</p>\n<ol>\n<li>欧拉方法</li>\n<li>梯形方法</li>\n<li>龙格-库塔方法</li>\n</ol>\n"},{"title":"抢课脚本","date":"2023-09-11T09:12:35.000Z","description":"The key record of completing a select courses script.","_content":"本质上就是模拟一个请求。\n我们点击选课页面的时候，是将带有特定功能的数据包发送给对方，也就是服务器，然后得到服务器的反馈。\n> 之前 Github 上下载的学长写的选课脚本因为学校系统后台的更新没办法使用了，于是想为何不自己学习一下，自己写一个。\n\n#### 抓包 capture packet\n因为Web 表单中会有很多隐藏的字段，这些隐藏字段一般都有一些特殊的用途，比如收集用户的数据，预防 CRSF 攻击，防网络爬虫，以及一些其他用途。这些隐藏字段在界面上都看不到，如果想检测这些字段，就必须要使用抓包工具。\n使用 F12 开发者工具找了一圈也没找到 Github 上下载的 SDU 抢课脚本的路径，搜索了一下感觉就是运用了抓包。\n##### 抓包工具的原理\n那 Fiddler 举例，Fiddler 相当于一个「代理」，浏览器访问服务器页面时，就会先把 HTTP 请求先发送给 Fiddler，Fiddler 再把请求转发给服务器，当服务器返回数据时，Fiddler 拿到返回数据，再把数据交给浏览器。\n因此 Fiddler 对于浏览器和服务器之间的交互细节是非常清楚的，进而可以帮助我们完成相应的抓包工作(其实后来感觉浏览器自带的开发者工具中的「网络」就够用了)。\n{%asset_img fiddler.png%}\n\n#### url 编码\n这段文字中，`https://bkzhjx.wh.sdu.edu.cn/jsxsd/xsxkkc/xsxkGgxxkxk` 是 URL 基本部分，用于定位服务器上的特定资源或者页面。\n`?` 表示查询字符串的开始。然后在 `?` 后面，通常会带有一个或者多个参数，每个参数都有一个名称和一个对应的值，它们之间用等号`=`连接，并且多个参数之间使用和号`&`分隔。\n其中，参数的值是根据 `url` 编码的，因此需要 `url decoding` 来将他们还原为原始文本。\n可以直接使用 python\n```\nfrom urllib.parse import unquote\n\nencoded_value = \"%E6%96%87%E5%AD%A6\"\ndecoded_value = unquote(encoded_value, encoding='utf-8')\nprint(decoded_value)\n``` \n> 在计算机编程领域，特别是在处理字符串时，\"quote\" 通常表示在文本中添加引号或对特殊字符进行编码，而 \"unquote\" 则表示将文本中的引号或编码解除，还原为原始的形式。\n\n#### Referer\nReferer（也写作\"referrer\"，拼写时不包括第二个 \"e\"）是一个HTTP头部字段，通常在Web请求中使用。这个字段用于指示请求的来源或引用页面的URL。当您从一个网页点击链接跳转到另一个页面时，浏览器通常会在请求中包含Referer字段，以告知目标页面是从哪个页面链接过来的。\nReferer字段对于网站分析、统计和跟踪用户流量非常有用，因为它可以帮助网站所有者了解访问者是如何到达其网站的。例如，如果您运营一个电子商务网站，您可以使用Referer字段来确定哪些外部网站或广告渠道为您带来了最多的流量和销售。\n需要注意的是，虽然Referer字段通常包含有用的信息，但它并不是100%可信的，因为用户可以通过浏览器设置或浏览器插件来修改或禁用Referer字段。因此，在进行任何安全性或敏感性操作时，不应仅依赖于Referer字段来验证请求的来源。\n\n#### Network 栏\n这一栏通常会用来监视和分析与当前网页加载和网络请求相关的信息。下面是它的一些常见用途：\n1. 查看网络请求。`Network` 栏显示了当前页面加载期间发出的所有网络请求，包括HTML、CSS、JavaScript、图像、API请求等。\n2. 查看请求头和响应头。我们可以通过 `Network` 来查看 `RequestHeaders` 和 `ResponseHeaders`，这对于检查服务器返回的信息、设置请求头来模拟不同的客户端环境或者调试跨域问题很有帮助。\n3. 筛选和搜索请求。`Network` 栏通常提供了筛选和搜索功能，使你可以根据请求类型（XHR、Fetch、Document等）或关键字来查找特定的请求，从而更轻松地定位问题或查找特定资源。\n\n#### request 具体操作\n打开 F12，选择 `Network` 一栏。\n然后在找到上搜索自己想选择的课程，点击右侧的「选课」按键(即使课程已经被选满了也无所谓，我们需要的是课程数据包的来源信息)，此时观察 `Network` 栏目，最下方应该会出现一个 `ggxxkxk` 开头的文件，点击后会出现它的具体信息。\n如图：\n{%asset_img selectCourseInfo.png%}\n其中 `Request Url` 就是我们获得数据包的地址，`kcid` 和 `jx0404id` 后面的数字感觉没有什么实际意义，不过可以在 HTML 代码中「选课」按键的属性值中找到，也可以查看 HTML 代码对应一下而不需要点击「选课」按键。\n`Cookie` 代表的是我们的身份信息，是服务器辨识我们身份的信息，和 `User-Agent` 还有 `referer` 一起设置在请求头中。\n```\nimport json\nimport time\nimport requests\n\n\ndef selectCourse():\n    cur_num = 0\n    url = 'https://bkzhjx.wh.sdu.edu.cn/jsxsd/xsxkkc/ggxxkxkOper?kcid=xxxxxx' \\\n          '&cfbs=null&jx0404id=xxxxxxx&xkzy=&trjf='\n    cookie = '你的 Cookie'\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 '\n                      '(KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36',\n        'cookie': cookie,\n        'referer': 'https://bkzhjx.wh.sdu.edu.cn/jsxsd/xsxkkc/getGgxxk'\n    }\n    while True:\n        response = requests.get(url=url, headers=headers)\n        data = json.loads(response.content.decode(response.apparent_encoding))\n        cur_num = cur_num + 1\n        print(f\"{cur_num} {data['message']}\")\n        if data['message'] != '选课失败：此课堂选课人数已满！':\n            break\n        time.sleep(1)\n\n\nif __name__ == '__main__':\n    selectCourse()\n\n```\n\n#### 链接\nhttps://www.cnblogs.com/xubin97/p/10331558.html 抢课脚本链接\nhttps://blog.csdn.net/shenqueying/article/details/79426884 referer 的作用\nhttps://blog.csdn.net/weixin_43314519/article/details/107095245 讲的挺好，还用到了多线程\n","source":"_posts/抢课脚本.md","raw":"---\ntitle: 抢课脚本\ndate: 2023-09-11 17:12:35\ntags: JavaScript\ndescription: The key record of completing a select courses script. \n---\n本质上就是模拟一个请求。\n我们点击选课页面的时候，是将带有特定功能的数据包发送给对方，也就是服务器，然后得到服务器的反馈。\n> 之前 Github 上下载的学长写的选课脚本因为学校系统后台的更新没办法使用了，于是想为何不自己学习一下，自己写一个。\n\n#### 抓包 capture packet\n因为Web 表单中会有很多隐藏的字段，这些隐藏字段一般都有一些特殊的用途，比如收集用户的数据，预防 CRSF 攻击，防网络爬虫，以及一些其他用途。这些隐藏字段在界面上都看不到，如果想检测这些字段，就必须要使用抓包工具。\n使用 F12 开发者工具找了一圈也没找到 Github 上下载的 SDU 抢课脚本的路径，搜索了一下感觉就是运用了抓包。\n##### 抓包工具的原理\n那 Fiddler 举例，Fiddler 相当于一个「代理」，浏览器访问服务器页面时，就会先把 HTTP 请求先发送给 Fiddler，Fiddler 再把请求转发给服务器，当服务器返回数据时，Fiddler 拿到返回数据，再把数据交给浏览器。\n因此 Fiddler 对于浏览器和服务器之间的交互细节是非常清楚的，进而可以帮助我们完成相应的抓包工作(其实后来感觉浏览器自带的开发者工具中的「网络」就够用了)。\n{%asset_img fiddler.png%}\n\n#### url 编码\n这段文字中，`https://bkzhjx.wh.sdu.edu.cn/jsxsd/xsxkkc/xsxkGgxxkxk` 是 URL 基本部分，用于定位服务器上的特定资源或者页面。\n`?` 表示查询字符串的开始。然后在 `?` 后面，通常会带有一个或者多个参数，每个参数都有一个名称和一个对应的值，它们之间用等号`=`连接，并且多个参数之间使用和号`&`分隔。\n其中，参数的值是根据 `url` 编码的，因此需要 `url decoding` 来将他们还原为原始文本。\n可以直接使用 python\n```\nfrom urllib.parse import unquote\n\nencoded_value = \"%E6%96%87%E5%AD%A6\"\ndecoded_value = unquote(encoded_value, encoding='utf-8')\nprint(decoded_value)\n``` \n> 在计算机编程领域，特别是在处理字符串时，\"quote\" 通常表示在文本中添加引号或对特殊字符进行编码，而 \"unquote\" 则表示将文本中的引号或编码解除，还原为原始的形式。\n\n#### Referer\nReferer（也写作\"referrer\"，拼写时不包括第二个 \"e\"）是一个HTTP头部字段，通常在Web请求中使用。这个字段用于指示请求的来源或引用页面的URL。当您从一个网页点击链接跳转到另一个页面时，浏览器通常会在请求中包含Referer字段，以告知目标页面是从哪个页面链接过来的。\nReferer字段对于网站分析、统计和跟踪用户流量非常有用，因为它可以帮助网站所有者了解访问者是如何到达其网站的。例如，如果您运营一个电子商务网站，您可以使用Referer字段来确定哪些外部网站或广告渠道为您带来了最多的流量和销售。\n需要注意的是，虽然Referer字段通常包含有用的信息，但它并不是100%可信的，因为用户可以通过浏览器设置或浏览器插件来修改或禁用Referer字段。因此，在进行任何安全性或敏感性操作时，不应仅依赖于Referer字段来验证请求的来源。\n\n#### Network 栏\n这一栏通常会用来监视和分析与当前网页加载和网络请求相关的信息。下面是它的一些常见用途：\n1. 查看网络请求。`Network` 栏显示了当前页面加载期间发出的所有网络请求，包括HTML、CSS、JavaScript、图像、API请求等。\n2. 查看请求头和响应头。我们可以通过 `Network` 来查看 `RequestHeaders` 和 `ResponseHeaders`，这对于检查服务器返回的信息、设置请求头来模拟不同的客户端环境或者调试跨域问题很有帮助。\n3. 筛选和搜索请求。`Network` 栏通常提供了筛选和搜索功能，使你可以根据请求类型（XHR、Fetch、Document等）或关键字来查找特定的请求，从而更轻松地定位问题或查找特定资源。\n\n#### request 具体操作\n打开 F12，选择 `Network` 一栏。\n然后在找到上搜索自己想选择的课程，点击右侧的「选课」按键(即使课程已经被选满了也无所谓，我们需要的是课程数据包的来源信息)，此时观察 `Network` 栏目，最下方应该会出现一个 `ggxxkxk` 开头的文件，点击后会出现它的具体信息。\n如图：\n{%asset_img selectCourseInfo.png%}\n其中 `Request Url` 就是我们获得数据包的地址，`kcid` 和 `jx0404id` 后面的数字感觉没有什么实际意义，不过可以在 HTML 代码中「选课」按键的属性值中找到，也可以查看 HTML 代码对应一下而不需要点击「选课」按键。\n`Cookie` 代表的是我们的身份信息，是服务器辨识我们身份的信息，和 `User-Agent` 还有 `referer` 一起设置在请求头中。\n```\nimport json\nimport time\nimport requests\n\n\ndef selectCourse():\n    cur_num = 0\n    url = 'https://bkzhjx.wh.sdu.edu.cn/jsxsd/xsxkkc/ggxxkxkOper?kcid=xxxxxx' \\\n          '&cfbs=null&jx0404id=xxxxxxx&xkzy=&trjf='\n    cookie = '你的 Cookie'\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 '\n                      '(KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36',\n        'cookie': cookie,\n        'referer': 'https://bkzhjx.wh.sdu.edu.cn/jsxsd/xsxkkc/getGgxxk'\n    }\n    while True:\n        response = requests.get(url=url, headers=headers)\n        data = json.loads(response.content.decode(response.apparent_encoding))\n        cur_num = cur_num + 1\n        print(f\"{cur_num} {data['message']}\")\n        if data['message'] != '选课失败：此课堂选课人数已满！':\n            break\n        time.sleep(1)\n\n\nif __name__ == '__main__':\n    selectCourse()\n\n```\n\n#### 链接\nhttps://www.cnblogs.com/xubin97/p/10331558.html 抢课脚本链接\nhttps://blog.csdn.net/shenqueying/article/details/79426884 referer 的作用\nhttps://blog.csdn.net/weixin_43314519/article/details/107095245 讲的挺好，还用到了多线程\n","slug":"抢课脚本","published":1,"updated":"2023-09-11T16:09:18.291Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szob000z5oog1zlh07hg","content":"<p>本质上就是模拟一个请求。<br>我们点击选课页面的时候，是将带有特定功能的数据包发送给对方，也就是服务器，然后得到服务器的反馈。</p>\n<blockquote>\n<p>之前 Github 上下载的学长写的选课脚本因为学校系统后台的更新没办法使用了，于是想为何不自己学习一下，自己写一个。</p>\n</blockquote>\n<h4 id=\"抓包-capture-packet\"><a href=\"#抓包-capture-packet\" class=\"headerlink\" title=\"抓包 capture packet\"></a>抓包 capture packet</h4><p>因为Web 表单中会有很多隐藏的字段，这些隐藏字段一般都有一些特殊的用途，比如收集用户的数据，预防 CRSF 攻击，防网络爬虫，以及一些其他用途。这些隐藏字段在界面上都看不到，如果想检测这些字段，就必须要使用抓包工具。<br>使用 F12 开发者工具找了一圈也没找到 Github 上下载的 SDU 抢课脚本的路径，搜索了一下感觉就是运用了抓包。</p>\n<h5 id=\"抓包工具的原理\"><a href=\"#抓包工具的原理\" class=\"headerlink\" title=\"抓包工具的原理\"></a>抓包工具的原理</h5><p>那 Fiddler 举例，Fiddler 相当于一个「代理」，浏览器访问服务器页面时，就会先把 HTTP 请求先发送给 Fiddler，Fiddler 再把请求转发给服务器，当服务器返回数据时，Fiddler 拿到返回数据，再把数据交给浏览器。<br>因此 Fiddler 对于浏览器和服务器之间的交互细节是非常清楚的，进而可以帮助我们完成相应的抓包工作(其实后来感觉浏览器自带的开发者工具中的「网络」就够用了)。<br><img src=\"/2023/09/11/%E6%8A%A2%E8%AF%BE%E8%84%9A%E6%9C%AC/fiddler.png\" class=\"\"></p>\n<h4 id=\"url-编码\"><a href=\"#url-编码\" class=\"headerlink\" title=\"url 编码\"></a>url 编码</h4><p>这段文字中，<code>https://bkzhjx.wh.sdu.edu.cn/jsxsd/xsxkkc/xsxkGgxxkxk</code> 是 URL 基本部分，用于定位服务器上的特定资源或者页面。<br><code>?</code> 表示查询字符串的开始。然后在 <code>?</code> 后面，通常会带有一个或者多个参数，每个参数都有一个名称和一个对应的值，它们之间用等号<code>=</code>连接，并且多个参数之间使用和号<code>&amp;</code>分隔。<br>其中，参数的值是根据 <code>url</code> 编码的，因此需要 <code>url decoding</code> 来将他们还原为原始文本。<br>可以直接使用 python<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from urllib.parse import unquote</span><br><span class=\"line\"></span><br><span class=\"line\">encoded_value = &quot;%E6%96%87%E5%AD%A6&quot;</span><br><span class=\"line\">decoded_value = unquote(encoded_value, encoding=&#x27;utf-8&#x27;)</span><br><span class=\"line\">print(decoded_value)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>在计算机编程领域，特别是在处理字符串时，”quote” 通常表示在文本中添加引号或对特殊字符进行编码，而 “unquote” 则表示将文本中的引号或编码解除，还原为原始的形式。</p>\n</blockquote>\n<h4 id=\"Referer\"><a href=\"#Referer\" class=\"headerlink\" title=\"Referer\"></a>Referer</h4><p>Referer（也写作”referrer”，拼写时不包括第二个 “e”）是一个HTTP头部字段，通常在Web请求中使用。这个字段用于指示请求的来源或引用页面的URL。当您从一个网页点击链接跳转到另一个页面时，浏览器通常会在请求中包含Referer字段，以告知目标页面是从哪个页面链接过来的。<br>Referer字段对于网站分析、统计和跟踪用户流量非常有用，因为它可以帮助网站所有者了解访问者是如何到达其网站的。例如，如果您运营一个电子商务网站，您可以使用Referer字段来确定哪些外部网站或广告渠道为您带来了最多的流量和销售。<br>需要注意的是，虽然Referer字段通常包含有用的信息，但它并不是100%可信的，因为用户可以通过浏览器设置或浏览器插件来修改或禁用Referer字段。因此，在进行任何安全性或敏感性操作时，不应仅依赖于Referer字段来验证请求的来源。</p>\n<h4 id=\"Network-栏\"><a href=\"#Network-栏\" class=\"headerlink\" title=\"Network 栏\"></a>Network 栏</h4><p>这一栏通常会用来监视和分析与当前网页加载和网络请求相关的信息。下面是它的一些常见用途：</p>\n<ol>\n<li>查看网络请求。<code>Network</code> 栏显示了当前页面加载期间发出的所有网络请求，包括HTML、CSS、JavaScript、图像、API请求等。</li>\n<li>查看请求头和响应头。我们可以通过 <code>Network</code> 来查看 <code>RequestHeaders</code> 和 <code>ResponseHeaders</code>，这对于检查服务器返回的信息、设置请求头来模拟不同的客户端环境或者调试跨域问题很有帮助。</li>\n<li>筛选和搜索请求。<code>Network</code> 栏通常提供了筛选和搜索功能，使你可以根据请求类型（XHR、Fetch、Document等）或关键字来查找特定的请求，从而更轻松地定位问题或查找特定资源。</li>\n</ol>\n<h4 id=\"request-具体操作\"><a href=\"#request-具体操作\" class=\"headerlink\" title=\"request 具体操作\"></a>request 具体操作</h4><p>打开 F12，选择 <code>Network</code> 一栏。<br>然后在找到上搜索自己想选择的课程，点击右侧的「选课」按键(即使课程已经被选满了也无所谓，我们需要的是课程数据包的来源信息)，此时观察 <code>Network</code> 栏目，最下方应该会出现一个 <code>ggxxkxk</code> 开头的文件，点击后会出现它的具体信息。<br>如图：<br><img src=\"/2023/09/11/%E6%8A%A2%E8%AF%BE%E8%84%9A%E6%9C%AC/selectCourseInfo.png\" class=\"\"><br>其中 <code>Request Url</code> 就是我们获得数据包的地址，<code>kcid</code> 和 <code>jx0404id</code> 后面的数字感觉没有什么实际意义，不过可以在 HTML 代码中「选课」按键的属性值中找到，也可以查看 HTML 代码对应一下而不需要点击「选课」按键。<br><code>Cookie</code> 代表的是我们的身份信息，是服务器辨识我们身份的信息，和 <code>User-Agent</code> 还有 <code>referer</code> 一起设置在请求头中。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import json</span><br><span class=\"line\">import time</span><br><span class=\"line\">import requests</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def selectCourse():</span><br><span class=\"line\">    cur_num = 0</span><br><span class=\"line\">    url = &#x27;https://bkzhjx.wh.sdu.edu.cn/jsxsd/xsxkkc/ggxxkxkOper?kcid=xxxxxx&#x27; \\</span><br><span class=\"line\">          &#x27;&amp;cfbs=null&amp;jx0404id=xxxxxxx&amp;xkzy=&amp;trjf=&#x27;</span><br><span class=\"line\">    cookie = &#x27;你的 Cookie&#x27;</span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 &#x27;</span><br><span class=\"line\">                      &#x27;(KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;,</span><br><span class=\"line\">        &#x27;cookie&#x27;: cookie,</span><br><span class=\"line\">        &#x27;referer&#x27;: &#x27;https://bkzhjx.wh.sdu.edu.cn/jsxsd/xsxkkc/getGgxxk&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        response = requests.get(url=url, headers=headers)</span><br><span class=\"line\">        data = json.loads(response.content.decode(response.apparent_encoding))</span><br><span class=\"line\">        cur_num = cur_num + 1</span><br><span class=\"line\">        print(f&quot;&#123;cur_num&#125; &#123;data[&#x27;message&#x27;]&#125;&quot;)</span><br><span class=\"line\">        if data[&#x27;message&#x27;] != &#x27;选课失败：此课堂选课人数已满！&#x27;:</span><br><span class=\"line\">            break</span><br><span class=\"line\">        time.sleep(1)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    selectCourse()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h4><p><a href=\"https://www.cnblogs.com/xubin97/p/10331558.html\">https://www.cnblogs.com/xubin97/p/10331558.html</a> 抢课脚本链接<br><a href=\"https://blog.csdn.net/shenqueying/article/details/79426884\">https://blog.csdn.net/shenqueying/article/details/79426884</a> referer 的作用<br><a href=\"https://blog.csdn.net/weixin_43314519/article/details/107095245\">https://blog.csdn.net/weixin_43314519/article/details/107095245</a> 讲的挺好，还用到了多线程</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本质上就是模拟一个请求。<br>我们点击选课页面的时候，是将带有特定功能的数据包发送给对方，也就是服务器，然后得到服务器的反馈。</p>\n<blockquote>\n<p>之前 Github 上下载的学长写的选课脚本因为学校系统后台的更新没办法使用了，于是想为何不自己学习一下，自己写一个。</p>\n</blockquote>\n<h4 id=\"抓包-capture-packet\"><a href=\"#抓包-capture-packet\" class=\"headerlink\" title=\"抓包 capture packet\"></a>抓包 capture packet</h4><p>因为Web 表单中会有很多隐藏的字段，这些隐藏字段一般都有一些特殊的用途，比如收集用户的数据，预防 CRSF 攻击，防网络爬虫，以及一些其他用途。这些隐藏字段在界面上都看不到，如果想检测这些字段，就必须要使用抓包工具。<br>使用 F12 开发者工具找了一圈也没找到 Github 上下载的 SDU 抢课脚本的路径，搜索了一下感觉就是运用了抓包。</p>\n<h5 id=\"抓包工具的原理\"><a href=\"#抓包工具的原理\" class=\"headerlink\" title=\"抓包工具的原理\"></a>抓包工具的原理</h5><p>那 Fiddler 举例，Fiddler 相当于一个「代理」，浏览器访问服务器页面时，就会先把 HTTP 请求先发送给 Fiddler，Fiddler 再把请求转发给服务器，当服务器返回数据时，Fiddler 拿到返回数据，再把数据交给浏览器。<br>因此 Fiddler 对于浏览器和服务器之间的交互细节是非常清楚的，进而可以帮助我们完成相应的抓包工作(其实后来感觉浏览器自带的开发者工具中的「网络」就够用了)。<br><img src=\"/2023/09/11/%E6%8A%A2%E8%AF%BE%E8%84%9A%E6%9C%AC/fiddler.png\" class=\"\"></p>\n<h4 id=\"url-编码\"><a href=\"#url-编码\" class=\"headerlink\" title=\"url 编码\"></a>url 编码</h4><p>这段文字中，<code>https://bkzhjx.wh.sdu.edu.cn/jsxsd/xsxkkc/xsxkGgxxkxk</code> 是 URL 基本部分，用于定位服务器上的特定资源或者页面。<br><code>?</code> 表示查询字符串的开始。然后在 <code>?</code> 后面，通常会带有一个或者多个参数，每个参数都有一个名称和一个对应的值，它们之间用等号<code>=</code>连接，并且多个参数之间使用和号<code>&amp;</code>分隔。<br>其中，参数的值是根据 <code>url</code> 编码的，因此需要 <code>url decoding</code> 来将他们还原为原始文本。<br>可以直接使用 python<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from urllib.parse import unquote</span><br><span class=\"line\"></span><br><span class=\"line\">encoded_value = &quot;%E6%96%87%E5%AD%A6&quot;</span><br><span class=\"line\">decoded_value = unquote(encoded_value, encoding=&#x27;utf-8&#x27;)</span><br><span class=\"line\">print(decoded_value)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>在计算机编程领域，特别是在处理字符串时，”quote” 通常表示在文本中添加引号或对特殊字符进行编码，而 “unquote” 则表示将文本中的引号或编码解除，还原为原始的形式。</p>\n</blockquote>\n<h4 id=\"Referer\"><a href=\"#Referer\" class=\"headerlink\" title=\"Referer\"></a>Referer</h4><p>Referer（也写作”referrer”，拼写时不包括第二个 “e”）是一个HTTP头部字段，通常在Web请求中使用。这个字段用于指示请求的来源或引用页面的URL。当您从一个网页点击链接跳转到另一个页面时，浏览器通常会在请求中包含Referer字段，以告知目标页面是从哪个页面链接过来的。<br>Referer字段对于网站分析、统计和跟踪用户流量非常有用，因为它可以帮助网站所有者了解访问者是如何到达其网站的。例如，如果您运营一个电子商务网站，您可以使用Referer字段来确定哪些外部网站或广告渠道为您带来了最多的流量和销售。<br>需要注意的是，虽然Referer字段通常包含有用的信息，但它并不是100%可信的，因为用户可以通过浏览器设置或浏览器插件来修改或禁用Referer字段。因此，在进行任何安全性或敏感性操作时，不应仅依赖于Referer字段来验证请求的来源。</p>\n<h4 id=\"Network-栏\"><a href=\"#Network-栏\" class=\"headerlink\" title=\"Network 栏\"></a>Network 栏</h4><p>这一栏通常会用来监视和分析与当前网页加载和网络请求相关的信息。下面是它的一些常见用途：</p>\n<ol>\n<li>查看网络请求。<code>Network</code> 栏显示了当前页面加载期间发出的所有网络请求，包括HTML、CSS、JavaScript、图像、API请求等。</li>\n<li>查看请求头和响应头。我们可以通过 <code>Network</code> 来查看 <code>RequestHeaders</code> 和 <code>ResponseHeaders</code>，这对于检查服务器返回的信息、设置请求头来模拟不同的客户端环境或者调试跨域问题很有帮助。</li>\n<li>筛选和搜索请求。<code>Network</code> 栏通常提供了筛选和搜索功能，使你可以根据请求类型（XHR、Fetch、Document等）或关键字来查找特定的请求，从而更轻松地定位问题或查找特定资源。</li>\n</ol>\n<h4 id=\"request-具体操作\"><a href=\"#request-具体操作\" class=\"headerlink\" title=\"request 具体操作\"></a>request 具体操作</h4><p>打开 F12，选择 <code>Network</code> 一栏。<br>然后在找到上搜索自己想选择的课程，点击右侧的「选课」按键(即使课程已经被选满了也无所谓，我们需要的是课程数据包的来源信息)，此时观察 <code>Network</code> 栏目，最下方应该会出现一个 <code>ggxxkxk</code> 开头的文件，点击后会出现它的具体信息。<br>如图：<br><img src=\"/2023/09/11/%E6%8A%A2%E8%AF%BE%E8%84%9A%E6%9C%AC/selectCourseInfo.png\" class=\"\"><br>其中 <code>Request Url</code> 就是我们获得数据包的地址，<code>kcid</code> 和 <code>jx0404id</code> 后面的数字感觉没有什么实际意义，不过可以在 HTML 代码中「选课」按键的属性值中找到，也可以查看 HTML 代码对应一下而不需要点击「选课」按键。<br><code>Cookie</code> 代表的是我们的身份信息，是服务器辨识我们身份的信息，和 <code>User-Agent</code> 还有 <code>referer</code> 一起设置在请求头中。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import json</span><br><span class=\"line\">import time</span><br><span class=\"line\">import requests</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def selectCourse():</span><br><span class=\"line\">    cur_num = 0</span><br><span class=\"line\">    url = &#x27;https://bkzhjx.wh.sdu.edu.cn/jsxsd/xsxkkc/ggxxkxkOper?kcid=xxxxxx&#x27; \\</span><br><span class=\"line\">          &#x27;&amp;cfbs=null&amp;jx0404id=xxxxxxx&amp;xkzy=&amp;trjf=&#x27;</span><br><span class=\"line\">    cookie = &#x27;你的 Cookie&#x27;</span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 &#x27;</span><br><span class=\"line\">                      &#x27;(KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;,</span><br><span class=\"line\">        &#x27;cookie&#x27;: cookie,</span><br><span class=\"line\">        &#x27;referer&#x27;: &#x27;https://bkzhjx.wh.sdu.edu.cn/jsxsd/xsxkkc/getGgxxk&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        response = requests.get(url=url, headers=headers)</span><br><span class=\"line\">        data = json.loads(response.content.decode(response.apparent_encoding))</span><br><span class=\"line\">        cur_num = cur_num + 1</span><br><span class=\"line\">        print(f&quot;&#123;cur_num&#125; &#123;data[&#x27;message&#x27;]&#125;&quot;)</span><br><span class=\"line\">        if data[&#x27;message&#x27;] != &#x27;选课失败：此课堂选课人数已满！&#x27;:</span><br><span class=\"line\">            break</span><br><span class=\"line\">        time.sleep(1)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    selectCourse()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h4><p><a href=\"https://www.cnblogs.com/xubin97/p/10331558.html\">https://www.cnblogs.com/xubin97/p/10331558.html</a> 抢课脚本链接<br><a href=\"https://blog.csdn.net/shenqueying/article/details/79426884\">https://blog.csdn.net/shenqueying/article/details/79426884</a> referer 的作用<br><a href=\"https://blog.csdn.net/weixin_43314519/article/details/107095245\">https://blog.csdn.net/weixin_43314519/article/details/107095245</a> 讲的挺好，还用到了多线程</p>\n"},{"title":"决策分析方法","date":"2023-08-25T11:10:05.000Z","description":"The key record of mathematical modeling.","mathjax":true,"_content":"策略集、状态集和溢损函数是构成一个决策问题的三项最基本要素。\n\n#### 风险型决策\n风险型决策也称作随机决策，是在状态概率已知的条件下进行的决策。\n\n##### 最大可能准则\n在若干种自然状态发生的概率相差很大，而相对应的益损值又相差不大时，这种决策准则效果较好。但是如果若干种自然状态发生的概率都很小，而且相互很接近时，使用这种决策准则的效果不会好，甚至会引起很严重的错误。\n##### 期望值准则\n期望值准则就是选择期望益损值最大（或者最小）的方案作为最优方案。\n\n#### 决策树法\n采用决策树法的步骤：\n1. 画出决策树。一般是从左往右画，先画出决策点，再画出由决策点引起的方案分支。\n2. 计算方案的期望益损值。\n3. 根据期望益损值进行决策，将期望益损值小的舍去，而期望益损值大的方案则保留，这就是最优策略。\n\n#### 不确定型决策\n不确定型决策是在只有几种自然状态可能发生，但是这些状态发生的概率并不知道时做出的决策。\n由于不确定型问题不知道状态的概率，所以无法计算每种方案的益损值，于是这类问题在理论上没有一个最优决策准则提供决策者决策，它存在着几种不同的决策分析方法，每种都有合理性。\n##### 乐观准则\n从最乐观状态出发，每种方案都按照最有利状态来考虑。$R^{*} = \\max\\limits_i \\{\\max\\limits_j r_{ij}\\}$\n##### 悲观准则\n从最悲观的观点出发对每个方案按最不利的状态来考虑，然后从中选取最优方案。$R^{*} = \\max\\limits_{i} \\{\\min\\limits_{j} r_{ij}\\}$\n##### 折衷准则\n引入一个表达乐观程度的乐观系数。$R^{*} = \\max\\limits_i \\{\\lambda \\max\\limits_j r_{ij} +(1 - \\lambda) \\min\\limits_{j} r_{ij}\\}$\n##### 等可能准则\n假定每种自然状态发生的概率总是相同的。\n##### 后悔值准则\n后悔值准则是从后悔值考虑，希望能找到一个这样的策略，以使在实施这个策略时能产生较少的后悔。所谓后悔就是指每种状态下最大收益值与此状态下其他益损值之差。在所有方案的最大后悔值中选最小者，此时对应的方案为最优策略。 $R^{*}  =\\min\\limits_{i} \\{\\max\\limits_{j} RV_{ij}\\}$，其中 $RV_{ij} = \\max\\limits_{i} r_{ij} - r_{ij}$\n\n#### 层次分析法\n层次分析法是对一些较为复杂、模糊的问题做出决策的多准则决策方法，它特别适用于难以完全定量分析的问题。","source":"_posts/决策分析方法.md","raw":"---\ntitle: 决策分析方法\ndate: 2023-08-25 19:10:05\ntags: Mathematic\ndescription: The key record of mathematical modeling. \nmathjax: true\n---\n策略集、状态集和溢损函数是构成一个决策问题的三项最基本要素。\n\n#### 风险型决策\n风险型决策也称作随机决策，是在状态概率已知的条件下进行的决策。\n\n##### 最大可能准则\n在若干种自然状态发生的概率相差很大，而相对应的益损值又相差不大时，这种决策准则效果较好。但是如果若干种自然状态发生的概率都很小，而且相互很接近时，使用这种决策准则的效果不会好，甚至会引起很严重的错误。\n##### 期望值准则\n期望值准则就是选择期望益损值最大（或者最小）的方案作为最优方案。\n\n#### 决策树法\n采用决策树法的步骤：\n1. 画出决策树。一般是从左往右画，先画出决策点，再画出由决策点引起的方案分支。\n2. 计算方案的期望益损值。\n3. 根据期望益损值进行决策，将期望益损值小的舍去，而期望益损值大的方案则保留，这就是最优策略。\n\n#### 不确定型决策\n不确定型决策是在只有几种自然状态可能发生，但是这些状态发生的概率并不知道时做出的决策。\n由于不确定型问题不知道状态的概率，所以无法计算每种方案的益损值，于是这类问题在理论上没有一个最优决策准则提供决策者决策，它存在着几种不同的决策分析方法，每种都有合理性。\n##### 乐观准则\n从最乐观状态出发，每种方案都按照最有利状态来考虑。$R^{*} = \\max\\limits_i \\{\\max\\limits_j r_{ij}\\}$\n##### 悲观准则\n从最悲观的观点出发对每个方案按最不利的状态来考虑，然后从中选取最优方案。$R^{*} = \\max\\limits_{i} \\{\\min\\limits_{j} r_{ij}\\}$\n##### 折衷准则\n引入一个表达乐观程度的乐观系数。$R^{*} = \\max\\limits_i \\{\\lambda \\max\\limits_j r_{ij} +(1 - \\lambda) \\min\\limits_{j} r_{ij}\\}$\n##### 等可能准则\n假定每种自然状态发生的概率总是相同的。\n##### 后悔值准则\n后悔值准则是从后悔值考虑，希望能找到一个这样的策略，以使在实施这个策略时能产生较少的后悔。所谓后悔就是指每种状态下最大收益值与此状态下其他益损值之差。在所有方案的最大后悔值中选最小者，此时对应的方案为最优策略。 $R^{*}  =\\min\\limits_{i} \\{\\max\\limits_{j} RV_{ij}\\}$，其中 $RV_{ij} = \\max\\limits_{i} r_{ij} - r_{ij}$\n\n#### 层次分析法\n层次分析法是对一些较为复杂、模糊的问题做出决策的多准则决策方法，它特别适用于难以完全定量分析的问题。","slug":"决策分析方法","published":1,"updated":"2023-08-25T11:44:56.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szoc00115oogaazq0jfu","content":"<p>策略集、状态集和溢损函数是构成一个决策问题的三项最基本要素。</p>\n<h4 id=\"风险型决策\"><a href=\"#风险型决策\" class=\"headerlink\" title=\"风险型决策\"></a>风险型决策</h4><p>风险型决策也称作随机决策，是在状态概率已知的条件下进行的决策。</p>\n<h5 id=\"最大可能准则\"><a href=\"#最大可能准则\" class=\"headerlink\" title=\"最大可能准则\"></a>最大可能准则</h5><p>在若干种自然状态发生的概率相差很大，而相对应的益损值又相差不大时，这种决策准则效果较好。但是如果若干种自然状态发生的概率都很小，而且相互很接近时，使用这种决策准则的效果不会好，甚至会引起很严重的错误。</p>\n<h5 id=\"期望值准则\"><a href=\"#期望值准则\" class=\"headerlink\" title=\"期望值准则\"></a>期望值准则</h5><p>期望值准则就是选择期望益损值最大（或者最小）的方案作为最优方案。</p>\n<h4 id=\"决策树法\"><a href=\"#决策树法\" class=\"headerlink\" title=\"决策树法\"></a>决策树法</h4><p>采用决策树法的步骤：</p>\n<ol>\n<li>画出决策树。一般是从左往右画，先画出决策点，再画出由决策点引起的方案分支。</li>\n<li>计算方案的期望益损值。</li>\n<li>根据期望益损值进行决策，将期望益损值小的舍去，而期望益损值大的方案则保留，这就是最优策略。</li>\n</ol>\n<h4 id=\"不确定型决策\"><a href=\"#不确定型决策\" class=\"headerlink\" title=\"不确定型决策\"></a>不确定型决策</h4><p>不确定型决策是在只有几种自然状态可能发生，但是这些状态发生的概率并不知道时做出的决策。<br>由于不确定型问题不知道状态的概率，所以无法计算每种方案的益损值，于是这类问题在理论上没有一个最优决策准则提供决策者决策，它存在着几种不同的决策分析方法，每种都有合理性。</p>\n<h5 id=\"乐观准则\"><a href=\"#乐观准则\" class=\"headerlink\" title=\"乐观准则\"></a>乐观准则</h5><p>从最乐观状态出发，每种方案都按照最有利状态来考虑。$R^{*} = \\max\\limits_i \\{\\max\\limits_j r_{ij}\\}$</p>\n<h5 id=\"悲观准则\"><a href=\"#悲观准则\" class=\"headerlink\" title=\"悲观准则\"></a>悲观准则</h5><p>从最悲观的观点出发对每个方案按最不利的状态来考虑，然后从中选取最优方案。$R^{*} = \\max\\limits_{i} \\{\\min\\limits_{j} r_{ij}\\}$</p>\n<h5 id=\"折衷准则\"><a href=\"#折衷准则\" class=\"headerlink\" title=\"折衷准则\"></a>折衷准则</h5><p>引入一个表达乐观程度的乐观系数。$R^{*} = \\max\\limits_i \\{\\lambda \\max\\limits_j r_{ij} +(1 - \\lambda) \\min\\limits_{j} r_{ij}\\}$</p>\n<h5 id=\"等可能准则\"><a href=\"#等可能准则\" class=\"headerlink\" title=\"等可能准则\"></a>等可能准则</h5><p>假定每种自然状态发生的概率总是相同的。</p>\n<h5 id=\"后悔值准则\"><a href=\"#后悔值准则\" class=\"headerlink\" title=\"后悔值准则\"></a>后悔值准则</h5><p>后悔值准则是从后悔值考虑，希望能找到一个这样的策略，以使在实施这个策略时能产生较少的后悔。所谓后悔就是指每种状态下最大收益值与此状态下其他益损值之差。在所有方案的最大后悔值中选最小者，此时对应的方案为最优策略。 $R^{*}  =\\min\\limits_{i} \\{\\max\\limits_{j} RV_{ij}\\}$，其中 $RV_{ij} = \\max\\limits_{i} r_{ij} - r_{ij}$</p>\n<h4 id=\"层次分析法\"><a href=\"#层次分析法\" class=\"headerlink\" title=\"层次分析法\"></a>层次分析法</h4><p>层次分析法是对一些较为复杂、模糊的问题做出决策的多准则决策方法，它特别适用于难以完全定量分析的问题。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>策略集、状态集和溢损函数是构成一个决策问题的三项最基本要素。</p>\n<h4 id=\"风险型决策\"><a href=\"#风险型决策\" class=\"headerlink\" title=\"风险型决策\"></a>风险型决策</h4><p>风险型决策也称作随机决策，是在状态概率已知的条件下进行的决策。</p>\n<h5 id=\"最大可能准则\"><a href=\"#最大可能准则\" class=\"headerlink\" title=\"最大可能准则\"></a>最大可能准则</h5><p>在若干种自然状态发生的概率相差很大，而相对应的益损值又相差不大时，这种决策准则效果较好。但是如果若干种自然状态发生的概率都很小，而且相互很接近时，使用这种决策准则的效果不会好，甚至会引起很严重的错误。</p>\n<h5 id=\"期望值准则\"><a href=\"#期望值准则\" class=\"headerlink\" title=\"期望值准则\"></a>期望值准则</h5><p>期望值准则就是选择期望益损值最大（或者最小）的方案作为最优方案。</p>\n<h4 id=\"决策树法\"><a href=\"#决策树法\" class=\"headerlink\" title=\"决策树法\"></a>决策树法</h4><p>采用决策树法的步骤：</p>\n<ol>\n<li>画出决策树。一般是从左往右画，先画出决策点，再画出由决策点引起的方案分支。</li>\n<li>计算方案的期望益损值。</li>\n<li>根据期望益损值进行决策，将期望益损值小的舍去，而期望益损值大的方案则保留，这就是最优策略。</li>\n</ol>\n<h4 id=\"不确定型决策\"><a href=\"#不确定型决策\" class=\"headerlink\" title=\"不确定型决策\"></a>不确定型决策</h4><p>不确定型决策是在只有几种自然状态可能发生，但是这些状态发生的概率并不知道时做出的决策。<br>由于不确定型问题不知道状态的概率，所以无法计算每种方案的益损值，于是这类问题在理论上没有一个最优决策准则提供决策者决策，它存在着几种不同的决策分析方法，每种都有合理性。</p>\n<h5 id=\"乐观准则\"><a href=\"#乐观准则\" class=\"headerlink\" title=\"乐观准则\"></a>乐观准则</h5><p>从最乐观状态出发，每种方案都按照最有利状态来考虑。$R^{*} = \\max\\limits_i \\{\\max\\limits_j r_{ij}\\}$</p>\n<h5 id=\"悲观准则\"><a href=\"#悲观准则\" class=\"headerlink\" title=\"悲观准则\"></a>悲观准则</h5><p>从最悲观的观点出发对每个方案按最不利的状态来考虑，然后从中选取最优方案。$R^{*} = \\max\\limits_{i} \\{\\min\\limits_{j} r_{ij}\\}$</p>\n<h5 id=\"折衷准则\"><a href=\"#折衷准则\" class=\"headerlink\" title=\"折衷准则\"></a>折衷准则</h5><p>引入一个表达乐观程度的乐观系数。$R^{*} = \\max\\limits_i \\{\\lambda \\max\\limits_j r_{ij} +(1 - \\lambda) \\min\\limits_{j} r_{ij}\\}$</p>\n<h5 id=\"等可能准则\"><a href=\"#等可能准则\" class=\"headerlink\" title=\"等可能准则\"></a>等可能准则</h5><p>假定每种自然状态发生的概率总是相同的。</p>\n<h5 id=\"后悔值准则\"><a href=\"#后悔值准则\" class=\"headerlink\" title=\"后悔值准则\"></a>后悔值准则</h5><p>后悔值准则是从后悔值考虑，希望能找到一个这样的策略，以使在实施这个策略时能产生较少的后悔。所谓后悔就是指每种状态下最大收益值与此状态下其他益损值之差。在所有方案的最大后悔值中选最小者，此时对应的方案为最优策略。 $R^{*}  =\\min\\limits_{i} \\{\\max\\limits_{j} RV_{ij}\\}$，其中 $RV_{ij} = \\max\\limits_{i} r_{ij} - r_{ij}$</p>\n<h4 id=\"层次分析法\"><a href=\"#层次分析法\" class=\"headerlink\" title=\"层次分析法\"></a>层次分析法</h4><p>层次分析法是对一些较为复杂、模糊的问题做出决策的多准则决策方法，它特别适用于难以完全定量分析的问题。</p>\n"},{"title":"数据结构关键记录","date":"2023-09-06T06:06:06.000Z","description":"The key record of data structure.","mathjax":true,"_content":"### 课堂笔记\n2023-9-6\n#### 链表\n\nTO DO\n定义一个模板类 ? \n\n如何判断链表是否有环\n1. 使用 map 对于地址打上标记，如果同一个地址被访问了两次就是有环的。\n2. 快慢指针(Floyd's Cycle Detection Algorithm)，使用同余方程得到 $a + kp$ 和 $b + kq \\pmod{n}$，其中 a b 分别是两个指针进入环的初始步长，k 是一个未知常量，p q 分别是两个指针的步长，n 是环长，得到 $b - a \\equiv k(p - q)$ 它们的步长差值为 1 的时候可以始终保证同余。\n\n对于快慢指针法，我们一般是设快指针的步长为 2，慢指针的步长为 1，如果链表中有环，那么快指针始终会追上慢指针，如果没有环，快指针会先到达链表的末尾。\n下面是一段 Python 程序演示：\n```\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef hasCycle(head):\n    if not head or not head.next:\n        return False\n    \n    slow = head\n    fast = head.next\n    \n    while slow != fast:\n        if not fast or not fast.next:\n            return False\n        slow = slow.next\n        fast = fast.next.next\n    \n    return True\n```\n##### 找出有环链表的入环点\n可以看下面的这张图片，我们设快慢指针相遇的节点是 A 点，出发点是 S 点，入环点是 T 点，绿色的部分是慢指针所走过的路程。\n对于找出入环点，我们在快慢指针相遇的时候，在 A 点和 S 点分别再设一个指针，但是这一次它们都是每一次走一步，两个指针必定会相遇，这个第一相遇点就是链表的入环点。\n可以看下面的图片来理解，因为快指针比满指针路程多一倍，第一次相遇的时候又是快指针比慢指针多走了一个环的长度，所以一个环的长度就是现在慢指针所走过的长度，所以 ST 和 AT 的长度是相等的，所以第一个相遇的点就是入环点。\n{%asset_img 入环点.png%}\n\n##### Floyd 判圈算法和 Brent 判圈算法\n或者又称为「龟兔赛跑算法」，是一个可以在**有限状态机、迭代函数或者链表**上判断是否存在环，求出该环的起点和长度的算法。\n其实上面的快慢指针方法就是 Floyd 判圈算法，它不像哈希一样需要很大的空间，所以在空间上是更优的。\n还有一种判圈的算法，比它更快，就是 **Brent** 判圈算法，但是这种方式并没有解决计算换的长度、找出换的入口这两个问题。该算法同样会使用两个指针：快慢指针。当着两个指针相遇，就说明存在环。比如，龟和兔子同时出发，龟不动，兔子走一步，第二轮，乌龟跳到兔子的位置，兔子走两步，第三轮。。。。第 n 轮，乌龟跳到兔子的位置，兔子走$2^{n-1}$步。\n\n##### 扩展\n在申明类中的成员函数后面加上 `const` 函数就成了只读函数，如 `void append() const {}`，不能修改类的数据成员。\n\n函数指针，创建函数指针可以\n```\nint(*funPtr)(int, int, double, ...); // 没有参数就什么都不写\nint(*const funcPtr)(); // 这样可以创建静态的函数指针\n```\n> 静态函数指针是指指向静态函数的指针。在C语言和C++中，静态函数是指在函数定义前面加上关键字\"static\"的函数。静态函数的特点是它们只在定义它们的源文件中可见，不能被其他源文件访问。这意味着静态函数的作用域限制在定义它们的源文件内部。\n\n函数指针在赋值的时候，目标函数比如和函数指针定义的返回值类型和参数个数完全相同。下面两种情况是一样的。\n```\nint (*funcPtr1)() = foo;\nint (*funcPtr2)() = &foo; // c++会隐式得把foo转换成&foo，所以你无需再加入&\n```\n函数指针的应用：\n1. 把函数作为参数传入另一个函数\n```\n#include <iostream>\nint add(int a, int b){\n    return a+b;\n}\nint sub(int a, int b){\n    return a-b;\n}\nvoid func(int e, int d, int(*f)(int a, int b)){ // 这里才是我想说的，\n// 传入了一个int型，双参数，返回值为int的函数\n    std::cout<<f(e,d)<<std::endl;\n}\nint main()\n{\n    func(2,3,add);\n    func(2,3,sub);\n\n    return 0;\n}\n```\n2. 第二个例子，排序上的应用\n使用 `ascending` 和 `descending` 两个函数代替大小判断\n```\n#include <iostream>\ntemplate <typename T>\nbool ascending(T x, T y) {\n    return x > y; \n}\ntemplate <typename T>\nbool descending(T x, T y) {\n    return x < y;\n}\ntemplate<typename T>\nvoid bubblesort(T *a, int n, bool(*cmpfunc)(T, T)){\n    bool sorted = false;\n    while(!sorted){\n        sorted = true;\n        for (int i=0; i<n-1; i++)\n            if (cmpfunc(a[i], a[i+1])) {\n                std::swap(a[i], a[i+1]);\n                sorted = false;\n            }\n        n--;\n    }\n}\n\nint main()\n{\n    int a[8] = {5,2,5,7,1,-3,99,56};\n    int b[8] = {5,2,5,7,1,-3,99,56};\n\n    bubblesort<int>(a, 8, ascending);\n\n    for (auto e:a) std::cout << e << \" \";\n    std::cout << std::endl;\n\n    bubblesort<int>(b, 8, descending);\n\n    for (auto e:b) std::cout << e << \" \";\n\n    return 0;\n}\n```\nlambda 函数的书写结构：\n```\n[capture clause](parameter list) -> return type {\n    // Lambda函数体\n}\n```\n<!-- \n函数指针应用？lambda 函数？ \n```\nstruct FUN {\n    成员变量\n    void operator()(T t);\n}\nFUN fun;\nfun() 伪装为一个函数？\n``` -->\n\n<!-- STL 中的**迭代子类**？？ -->\n\n#### 分而治之 divide-and-conquer\n##### 归并排序\n一个典例就是归并排序，对于归并排序，为什么递归分成两部分以后排序程序就更快了呢？我感觉是\n> 整个数组是无序的，是性质很差的，我们如果想加快排序必需有一些比较好的性质。但是如果对于整个数组获得比较好的性质还不如直接排序？所以我们把数组分成两部分一直分，知道性质很明显，获得有序序列，然后 **性质滚性质**，一直带动，所以可以达到加速的目标。\n{%asset_img 时间复杂度计算.png%}\n\nTO DO:\n？？非递归版本的归并排序\n\n\n##### 快速排序\n<!-- 快速排序时间复杂度\n最坏 概率统计的意义下？ -->\n关于快速排序的过程，其实就是每一次取一个数作为基准，然后想把整个数组分为两个部分一个是小于这个基准的，另一个是大于这个基准的。然后有一种很好的方式就是建立两个指针，分别指向数组的左端点和右端点...\n{%asset_img 快速排序算法.png%}\n关于快速排序的时间复杂度，有最优复杂度、最差复杂度还有平均时间复杂度。\n{%asset_img 快速排序时间复杂度.png%}\n{%asset_img 快速排序平均时间复杂度.png%}\n上面摘自知乎 https://zhuanlan.zhihu.com/p/341201904\n##### 2-D maxima finding problem\n这是一个 maxima 问题，一般这种问题有两种解决方式。\n1. 排序法\n{%asset_img 排序法极大点.png%}\n2. 分治法\n{%asset_img 分治法极大点.png%}\n摘自知乎 https://zhuanlan.zhihu.com/p/27850478\n\nTO DO\n\n<!-- 平面极大点\n分别解决完左右后，找出右边的第一个 y 最大的点，把左侧的x 和 y 都低于它的点排除 -->\n\n##### the closest pair problem\n感觉 OI-Wiki 讲解的很全面\nhttps://oi-wiki.org/geometry/nearest-points/\n还有推广：平面最小周长三角形\n$\\dfrac{d \\times 2d}{\\frac{1}{4} \\times \\pi \\times (\\frac{d}{2})^{2}}$ 虽然不是最精确的，但是已经可以得到一个常数来界定这个范围\n\n<!-- 也是用一个竖线将平面分为左右两个部分，然后分别解决，假设左右的最短距离为 d，那么再遍历竖线左右两边距离 d 内的所有点，找出最小值。？（不缺定）\n\n时间复杂度？ -->\nTO DO\n\n##### the convex hull problem\nhttps://blog.csdn.net/lemonxiaoxiao/article/details/108619552\nTO DO\n\n<!-- ?\n一个著名算法，礼物算法？ Jarvis March\n首先最下面的点一定选择，然后逐渐旋转，遇到就选？逆时针还是顺时针呢？有一个判断是向量的叉乘，大于 0 还是小于 0 就是顺着还是逆着\n不对的时候是需要回退的，也可能不止一次 Grasham Scan 但是到了三维就不行了\n但是 divide-and-conquer 就不一样了，不仅仅更快，而且可以推广到三维空间里面去\n找到交点最高和最低，二维的时间复杂度就是 $O(n \\log n)$ 三维的就是找三角形了 -->\n\n##### matrix multiplication \n<!-- ?\nP Q R S T U V?\n时间复杂度大概是 $O(\\log_2(7)) \\approx O(n^{2.81})$?\n但是仍然不是最优的，具体可以自己去搜索一下 -->\n使用类实现的矩阵的一些基础操作，可以看 `Fibonacci.cpp`\nTO DO\n\n##### FFT\n分治做法，见 `FFT.md` 和 `FFT.cpp`(使用自带的 complex 类实现)\n其中，使用自己手写类实现的 FFT 在 `FFTClass.cpp`\n(注意，如果使用 reverse 函数，注意反转的 F 的区间范围，一开始这里错了，好长时间没找出来)\n\n##### Medians and Order Statistics\n对于 n 个数，找出 k-th 数，不排序如何做？因为一排序复杂度就 $O(n\\log{n})$ 了，我们如果只想要一个，可不可以做到 $O(n)$。\n每一次只选择半个部分，虽然是使用类似于 quick_sort 的方式，但是问题的效率越来越小，所以就得到了 $O(n)$ 的方式，但是 quick_sort 的时间复杂度并不是很稳定。\n还有一种递归的算法，分为 5 个数，\n\nnth_element() ?? 函数\n\nTO DO\n\n##### 扩展\n尽量不要写递归，但是可以按递归的思路来想，因为递归的程序一般是比较慢。\n只是几个简单的案例，但是对于每一个案例都是值得我们去深究的。\n为什么这次课讲这部分呢？我们也是要掌握算法思想的。除了分而治之呢，还有自上而下，多层次，自上而下思想等等。\n\n##### Abstract Data Type(ADT)\n抽象数据类型\n\n##### 扩展\n\nTO DO\n\nNode 是 List 下面下属的概念，没有必要将 Node 写在 List 外面。\n不想改变内部元素的时候记得加 const，如果不加的话，`void Func(const List& l) { l.print(); }` 其中不允许调用，因为 Func 有修改成员变量的风险。\n**常引用？**\n**把函数当作函数的参数？**\n派生类禁止父类的函数或者方法？ \n括号匹配问题 Bracket Matching Problem\n计算一个式子的值 postfix calculator 也可以适用于简单的四则运算的场合\n双端队列 dequeue\n环形数组\n\n#### 递归消除\n##### 一般性消除办法\n- 利用堆栈，模拟栈来实现，见 `Hanoi.cpp`\n\n汉诺塔问题 递归求解，如何去掉递归求解。\n$f_n = 2 f_{n - 1} + 1$，所以 $(f_n + 1) = 2(f_{n - 1} + 1)$\n\n##### 倒水问题\n这种任务方案其实挺多的。其实，背后对应的是**辗转相除法**。\n我们可以倒出来的水的数量就是余数。\n设一个杯子是 a 升，另一个杯子是 b 升，我们想获得 c 升水，就是 `ax + by = c`，如果有解，就是 $\\gcd{(a, b)} | c$\n\n##### 求解组合数\nhttps://oi-wiki.org/math/combinatorics/combination/ 见 OI-Wiki各种组合数公式\nhttps://zhuanlan.zhihu.com/p/602675596 二项式反演\n\n##### 扩展\n实现 Stack 的时候，太过于依赖于 List 的实现机理，比如说直接从底层指针上来做。但是这样的话，List 一旦修改，我们的 Stack 就会出现问题。这就是**过于耦合了**。所以，对于一个类来说，接口是很重要的。\n\n##### lowbit\n\n#### 树和二叉树\n树中所有节点度数的最大值叫做整个树的度。\n\n##### 树的表示\n一共有四种表示树的方式：\n1. 树形结构。很直观、形象\n2. 文氏图表示法。使用集合以及集合的包含关系描述树结构。\n3. 凹入表示法。使用线段的伸缩描述树结构。\n4. 括号表示法。将树的根节点写在括号的左边，除根节点以外的其余节点写在括号中并用逗号间隔来描述树结构。\n\n树的各种遍历，一般的树形结构上，大家不讨论中根的问题，一般都是先根和后根。\n\n按层次遍历二叉树，可能还是比较吃内存的。\nDLR LDR LRD \n前序 中序 后序 和 根的区别？\n\n##### 非递归遍历\n对于二叉树的非递归遍历，前序、后序以及获得括号形式都参见作业 `GetTreeOrderNor.cpp` \n递归形式参见 `GetTreeOrderRecursion.cpp` \n给定一个二叉树的括号形式，将其解析并且输出前序、中序、层序、后序遍历参见 `ParseTreeSequence.cpp`\n\n##### 中序遍历的线索二叉树\n\n这样也可以充分利用空间\n将叶子节点的右孩子指向下一个应改遍历的节点(因为一开始叶子节点的右孩子是 null，造成了浪费)\n并且加一个 bool 类型的变量，表示这个节点的右孩子是不是进行了修改。\n这样中序遍历的时候好像也会简单很多(在中序遍历的意义下，将二叉树变成了一个单链表)\n这样二叉树的遍历就不再依赖于堆栈，并且产生了向前向后的两个方向，和双链表的行为是比较相似的。\n\n##### 前序遍历的线索二叉树\n\n顺序建立就是修改右子树\n但是如果反过来会出现左孩子已经被占用的问题，此时需要借助堆栈\n\n##### 后序遍历的线索二叉树\n\n\n{%asset_img 线索二叉树.png%}\n\n#### 堆\n\n##### 二叉堆\n\n当我们谈论到堆(Heap)时，通常指的是二叉堆(Binary Heap)，它是一种特殊的树形结构，常用于实现优先队列和一些图算法(物理存储上是数组，但是逻辑结构上是二叉树，这也是为什么我们可以使用 vector 来模拟的原因)。\n\n堆的性质：\n1. 二叉树结构：堆是一种完全二叉树，除了最后一层，别的层的节点都是满的，最后一层的节点从左向右填充。\n2. 小根堆：任何父节点的值都小于等于其子节点的值。\n3. 不唯一性：对于给定的数据集，可能存在多个不同的最小堆或者最大堆。\n4. 只是保证了节点的权值大于两个儿子节点的权值，也就是说，堆维护的更是我们关注的相对大小关系，尤其是最顶部的元素大小，我们并不关心全序大小关系(也无法维护)。\n\n>   在实际中，实现堆（Heap）通常更倾向于使用向量（数组）来模拟二叉树的结构，而不是构建一个显式的二叉树数据结构。\n\n##### 二项堆\n\n##### Fibonacci 堆\n\n##### lazy 机制\n\n上面的最简单的二叉堆做法呢，我们很好地利用了二叉树序号之间的关系(父子的序号有关系)，但是我们在更新的时候每一次都是 $\\log{n}$ 的复杂度，不是很优，比如说有些元素我们以后根本用不到，而堆又本身不是关注全序关系的，所以我们可以利用 lazy 机制。\n\nTODO \n现在库里面的堆，基本上都不是基于 **二叉堆**(Binary Heap) 实现的。\nFibonacci 堆 也是希望我们去更多地了解一些堆。\n堆的合并、二叉堆的合并？\n二项堆\n重载运算符\n\n#### 编码问题\n\n结构光扫描中，我们如何马上知道这条光是第几条光？就要用到编码了\n能不能发明一种序列，使得连续的几个在序列中是唯一的，longest ？ 是多长？\n3 个颜色的话，先画出 27 个节点。RRR 的话，连接 RRG RRB(它的后继节点)\n寻找访问序列最长的，而且不能重复\n深度遍历可以吗？最好不要写递归，可以队列、栈\n\n#### 霍夫曼树\n\n每一次找权值最小两个节点，变为 n - 1 个节点\n1. 能不能构建出来\n2. 总体的最小代价\n可以搜索霍夫曼树的题目\n实现持久化的最小两个数？手写优先队列？平衡树？\n\n#### 左倾堆 / 左倾树 / 左偏堆 / 左偏树\n\n虽然二叉堆的插入、删除操作挺好的，但是不支持合并。所以我们想寻找一种数据结构使得堆在合并的时候比较高效。\n> Leftist Heap is a priority queue data structure that also supports merge of heaps in O(log n) time.\n\nFHQ Treap TODO\n\nhttps://www.luogu.com.cn/blog/qkhm/zuo-pian-shu-xue-xi-bi-ji TODO\n\n最优传输理论\n\n启发式合并堆\n\n#### 二叉平衡树\n\n可以证明平衡二叉树的高度为 $\\log{n}$ 吗？\n\nN(h) = 1 + N(h - 1) + N(h - 2); AVL 树的高度推导 N(h) 表示高度为 h 时最不平衡时的节点个数。\n\n我们是按照左右子树的树高度之差来定义的，这只是定义平衡的一种。但是还有很多别的方式，比如左右子树的节点。\n\n维护平衡的机制有很多种，比如说典型的 B 树，2-3-4树，它所有的叶子都在同一个高度上面。它最不满的情况就是一个满二叉树，所以它可以保证高度在 $\\log$ 级别。\n\nAVL B树 红黑树 234树 Treap\n红黑树的实际应用比较频繁，它的效率比较高一点。红黑树和 234树之间的关系？？ TODO\n\n插入的时候常常面临三种情形。\n\nhttps://www.luogu.com.cn/blog/MashPlant/solution2-p3369 B 树代码\n\nLCT问题？ Link Cut Tree\n\nTreap 的高度 log 证明？\n\n#### the mathematics of rubik's cube\n\n#### Dijkstra 算法\n\n正确性证明？\n\n多边形\n\n差分约束问题 线性规划问题 max \\sum d 要求比 dijkstra 更加严苛？\n\nGorubi \n\n最短路的话线性规划没有 dijkstra 更加优\n\nA* 算法？\n\n#### 二叉树在区间上？\n\n维护直接的 Rank 感觉代价过于高，因为每一次删除和插入都要把其余元素都改变一次，所以我们不直接维护 Rank。\n\n\n二叉树序列化？https://zhuanlan.zhihu.com/p/26418233\n\n#### 线段相交的问题\n\n两个结构：\n1. 处理事件的优先队列(关键位置停下来，遇到了水平线段的左端点，遇到了水平线段的右端点，遇到了竖直线段)(需要使用一个二叉树维护水平线段，包括水平竖直关系)(水平线段的 y 高度使用二叉树维护了？树套树？)\n2. 维护扫描的每个关键位置的全序列表\n\n#### kd 树\n\ngrid 2d tree\nquadtree(四叉树，每一个格子一分为 4) bsptree(每一次有一个平面，对于所在的平面二分，在二维的情况下就是直线)\n\n上面的结构，除了 grid 的应用都是很多的。各自在不同的应用场景下使用。\n\nkd 树其实是 bst 树的延申。可是很多时候一维数据是不够的，很多情况都是高维的东西。在机器学习中应用也很多。\nray tracing\n2d range serach\n\n从乱序中在 O(n) 的时间复杂度下找出中位数。\n\n1. 每一刀下去，都是将矩形分为两个部分。\n2. 奇偶相间，第一层竖线划分，第二层就是水平划分。(优化就是把点很紧密的包在一块？)\n\nnth_element 严格 O(n) 查找中位数\n\n#### 跳表 Skip List\n\n跳表是相对年轻的一个数据结构，1990 年由 Bill Pugh 提出。\n我们需要区分一下数据域和指针域\nhttps://www.cnblogs.com/bigsai/p/14193225.html\n\n#### KMP\n\n前缀和后缀的问题\n\nBM 算法？\n\nDFA\n\n#### 并查集(Union-find)\n\n虽然并查集的代码是最少的一个，但是确实非常有用的。它可以解决**等价类**相关的问题。\n\nlink-by-size 按照大小合并，此时最高高度不超过 log n\n当然也有按照 rank(height)高度合并。\n\n还有路径压缩(path compression)\n\n无路径压缩的时候，复杂度是 $m \\log n$\n有路径压缩的时候，复杂度是 $m \\alpha (m, n)$\n其中，$\\alpha$ 是反阿克曼函数。\n\n#### 图\n\n每一个节点有 in 和 out 两个邻接表\n\n矩阵的形式存储的时候，可能并行化运算的时候更加容易。\n\nprim 求最小生成树\n\ncut 割\n\n割中最小权值的边一定出现在最小生成树上 证明了 Prim 的正确性？\n\n### 作业\n\n1. 手写一个 List\n\n见 `List.cpp` `LinkList.h` `LinkList.cpp` \n其中，`List.cpp` 将 Node 和 List 两个类分开写了，所以在 List 中使用 Node 的时候要写成 `Node<T>*` 的形式。\n但是在 `LinkList.h` 中，将 Node 写在了 List 类里面，此时就不需要在 Node 后面额外加 `<T>` 了，这种形式也是我们更加推荐的。\n\n2. 手写一个面向对象的快速排序\n`quick_sort.cpp` 是一个递归版本的，但是我们一般不鼓励写递归，会比较慢\n其中，需要注意`函数对象`的写法。\n\n非递归版本：\n**双指针前移法**\n感觉很强，短小精悍\n见 `QuickSortNor.cpp`\n使用自己手写的栈，实现了对于类的非递归版本的快速排序。\n\n3.  \n<!-- 基于自己写的链表\n实现堆栈\n放在不同的文件中\n想规范一下大家写代码习惯 -->\n在这次的作业中，注意：\n我们在使用了模板类的 LinkList 中添加重载输出的友元函数。因为我们毕竟添加的是一个友元函数，是一个函数，所以我们需要在 LinkList 中再写一个 template<class E>\n```\ntemplate<class U>\nfriend std::ostream& operator<<(std::ostream& os, const LinkList<U>& list);\n```\n其中，ostream 是一种返回类型。\n\n4. \n- 以非递归的形式实现汉诺塔，并且尽量少内存。\n见 `Hanoi.cpp`\n- 写最大公约数递推的程序。给定两个整数，写出最大公约数的标准形式，d = ax + by，x y 可能是负数 我们规定 |x| < |y| 此时取值是唯一的。\n见 `exgcd.cpp`\n上面的扩展欧几里得是递归实现的，但是我们还是追求非递归版本，讲解参考下面的博客：\nhttps://www.cnblogs.com/zbhfz/p/11267438.html\n{%asset_img 非递归扩展欧几里得.png%}\n\n5. 非递归全排列\n康托展开\n非递归，根据排列规律输出所有的排列\n\n见 `CantorExpansion.cpp` `permutation.cpp` `next_permutation.cpp` \n\n6. 求斐波那契数列通项\n特征根法怎么来的呢？\n人们发现特征根对于分解递推式子是有帮助的\n对于一个具体的 n 输出 F_n\n矩阵加速递推\n见 `Fibonacci.cpp`\n\n7. 写一写二叉树的数据结构，支持几种遍历方式\n层次 先序 中序 后序 每一个节点都不保存父亲节点 可以使用堆栈来实现 不要递归\n\n如果给出了不同遍历方式得到的结果，如何获得原来树的结构？\n\n二叉树有一个函数，传入两个字符串序列，是不是都能恢复成原来的二叉树结构？最后输出括号表示方式的形式。\n\n见 `ParseTreeSequence.cpp` 和 `GetTreeOrderNor.cpp`\n\n还有一种比较简洁的方式可以参考 于老师代码中的 `parseTree.cpp`\n\n8. 如何形成中序遍历意义下的线索二叉树(双向的)\n并且用自己的线索二叉树再次实现双向遍历\n\n前序和后序不完美\n\n线索二叉树的必要？历史的产物？\n\n9. 自己搜索霍夫曼树的题目\n\n多叉树到二叉树的转化？\n\nWeighted Path Length of Tree, WPL\n\n中位数寻找？TODO\n\n为什么需要将 友元函数的定义直接写进去 ？ TODO\n\n10. 了解一下 Fibonacci 堆，有精力的同学可以尝试实现。\n\n11. 实现一个左偏堆\n\n12. 写一个 AVL 维护平衡，支持插入删除查找\n\n13. R G B 非递归扫描？搜索如何存储路径状态？(直接将一个 vector 作为参数传入)\n\n14. 实现 Treap Splay FHQTreap ?（附加）\n\n15. 魔方？rubik's cube?\n\n16. 若干不相交的多边形，输出从多边形外面一点到外面另一点的最短路径。\n\n17. 尝试完善代码，为二叉树每一个节点添加 size，同时提供一个接口，返回一个节点的 rank。\n\n18. 写一个 kd 树代码，支持最近邻的查询，查找一个框框有多少点？输入 n 个点，输出就是求最近的点，维护一个 kd 树的类，需要的基本行为还是最好支持一下，不过我们最关心的还是最近点。\n\n19. 快速排序进阶。多种排序方式组合实现一个高效的快速排序。\n使用快速排序(在其函数上进行修改)实现线性查找元素第 k 小。\n荷兰旗问题？\n\n20. 给定若干竖直和水平的随机长度的线段，并且保证一个 y 坐标或者一个 x 坐标下只有一条线段，求这些线段的交点个数。\n\n21. 最长公共子序列\n\n22. bitset 求解高维偏序问题\n\n23. k 短路问题\n\n24. 完成 KMP 算法\n\n25. 并查集实现 鼓励大家实现基于 rank 的 union，希望并查集中有路径压缩的功能（不需要新写一个函数，只需要在 find 时顺便修改）。\n\n26. 实现 Prim 算法","source":"_posts/数据结构关键记录.md","raw":"---\ntitle: 数据结构关键记录\ndate: 2023-09-06 14:06:06\ntags: DataStructure\ndescription: The key record of data structure.\nmathjax: true\n---\n### 课堂笔记\n2023-9-6\n#### 链表\n\nTO DO\n定义一个模板类 ? \n\n如何判断链表是否有环\n1. 使用 map 对于地址打上标记，如果同一个地址被访问了两次就是有环的。\n2. 快慢指针(Floyd's Cycle Detection Algorithm)，使用同余方程得到 $a + kp$ 和 $b + kq \\pmod{n}$，其中 a b 分别是两个指针进入环的初始步长，k 是一个未知常量，p q 分别是两个指针的步长，n 是环长，得到 $b - a \\equiv k(p - q)$ 它们的步长差值为 1 的时候可以始终保证同余。\n\n对于快慢指针法，我们一般是设快指针的步长为 2，慢指针的步长为 1，如果链表中有环，那么快指针始终会追上慢指针，如果没有环，快指针会先到达链表的末尾。\n下面是一段 Python 程序演示：\n```\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef hasCycle(head):\n    if not head or not head.next:\n        return False\n    \n    slow = head\n    fast = head.next\n    \n    while slow != fast:\n        if not fast or not fast.next:\n            return False\n        slow = slow.next\n        fast = fast.next.next\n    \n    return True\n```\n##### 找出有环链表的入环点\n可以看下面的这张图片，我们设快慢指针相遇的节点是 A 点，出发点是 S 点，入环点是 T 点，绿色的部分是慢指针所走过的路程。\n对于找出入环点，我们在快慢指针相遇的时候，在 A 点和 S 点分别再设一个指针，但是这一次它们都是每一次走一步，两个指针必定会相遇，这个第一相遇点就是链表的入环点。\n可以看下面的图片来理解，因为快指针比满指针路程多一倍，第一次相遇的时候又是快指针比慢指针多走了一个环的长度，所以一个环的长度就是现在慢指针所走过的长度，所以 ST 和 AT 的长度是相等的，所以第一个相遇的点就是入环点。\n{%asset_img 入环点.png%}\n\n##### Floyd 判圈算法和 Brent 判圈算法\n或者又称为「龟兔赛跑算法」，是一个可以在**有限状态机、迭代函数或者链表**上判断是否存在环，求出该环的起点和长度的算法。\n其实上面的快慢指针方法就是 Floyd 判圈算法，它不像哈希一样需要很大的空间，所以在空间上是更优的。\n还有一种判圈的算法，比它更快，就是 **Brent** 判圈算法，但是这种方式并没有解决计算换的长度、找出换的入口这两个问题。该算法同样会使用两个指针：快慢指针。当着两个指针相遇，就说明存在环。比如，龟和兔子同时出发，龟不动，兔子走一步，第二轮，乌龟跳到兔子的位置，兔子走两步，第三轮。。。。第 n 轮，乌龟跳到兔子的位置，兔子走$2^{n-1}$步。\n\n##### 扩展\n在申明类中的成员函数后面加上 `const` 函数就成了只读函数，如 `void append() const {}`，不能修改类的数据成员。\n\n函数指针，创建函数指针可以\n```\nint(*funPtr)(int, int, double, ...); // 没有参数就什么都不写\nint(*const funcPtr)(); // 这样可以创建静态的函数指针\n```\n> 静态函数指针是指指向静态函数的指针。在C语言和C++中，静态函数是指在函数定义前面加上关键字\"static\"的函数。静态函数的特点是它们只在定义它们的源文件中可见，不能被其他源文件访问。这意味着静态函数的作用域限制在定义它们的源文件内部。\n\n函数指针在赋值的时候，目标函数比如和函数指针定义的返回值类型和参数个数完全相同。下面两种情况是一样的。\n```\nint (*funcPtr1)() = foo;\nint (*funcPtr2)() = &foo; // c++会隐式得把foo转换成&foo，所以你无需再加入&\n```\n函数指针的应用：\n1. 把函数作为参数传入另一个函数\n```\n#include <iostream>\nint add(int a, int b){\n    return a+b;\n}\nint sub(int a, int b){\n    return a-b;\n}\nvoid func(int e, int d, int(*f)(int a, int b)){ // 这里才是我想说的，\n// 传入了一个int型，双参数，返回值为int的函数\n    std::cout<<f(e,d)<<std::endl;\n}\nint main()\n{\n    func(2,3,add);\n    func(2,3,sub);\n\n    return 0;\n}\n```\n2. 第二个例子，排序上的应用\n使用 `ascending` 和 `descending` 两个函数代替大小判断\n```\n#include <iostream>\ntemplate <typename T>\nbool ascending(T x, T y) {\n    return x > y; \n}\ntemplate <typename T>\nbool descending(T x, T y) {\n    return x < y;\n}\ntemplate<typename T>\nvoid bubblesort(T *a, int n, bool(*cmpfunc)(T, T)){\n    bool sorted = false;\n    while(!sorted){\n        sorted = true;\n        for (int i=0; i<n-1; i++)\n            if (cmpfunc(a[i], a[i+1])) {\n                std::swap(a[i], a[i+1]);\n                sorted = false;\n            }\n        n--;\n    }\n}\n\nint main()\n{\n    int a[8] = {5,2,5,7,1,-3,99,56};\n    int b[8] = {5,2,5,7,1,-3,99,56};\n\n    bubblesort<int>(a, 8, ascending);\n\n    for (auto e:a) std::cout << e << \" \";\n    std::cout << std::endl;\n\n    bubblesort<int>(b, 8, descending);\n\n    for (auto e:b) std::cout << e << \" \";\n\n    return 0;\n}\n```\nlambda 函数的书写结构：\n```\n[capture clause](parameter list) -> return type {\n    // Lambda函数体\n}\n```\n<!-- \n函数指针应用？lambda 函数？ \n```\nstruct FUN {\n    成员变量\n    void operator()(T t);\n}\nFUN fun;\nfun() 伪装为一个函数？\n``` -->\n\n<!-- STL 中的**迭代子类**？？ -->\n\n#### 分而治之 divide-and-conquer\n##### 归并排序\n一个典例就是归并排序，对于归并排序，为什么递归分成两部分以后排序程序就更快了呢？我感觉是\n> 整个数组是无序的，是性质很差的，我们如果想加快排序必需有一些比较好的性质。但是如果对于整个数组获得比较好的性质还不如直接排序？所以我们把数组分成两部分一直分，知道性质很明显，获得有序序列，然后 **性质滚性质**，一直带动，所以可以达到加速的目标。\n{%asset_img 时间复杂度计算.png%}\n\nTO DO:\n？？非递归版本的归并排序\n\n\n##### 快速排序\n<!-- 快速排序时间复杂度\n最坏 概率统计的意义下？ -->\n关于快速排序的过程，其实就是每一次取一个数作为基准，然后想把整个数组分为两个部分一个是小于这个基准的，另一个是大于这个基准的。然后有一种很好的方式就是建立两个指针，分别指向数组的左端点和右端点...\n{%asset_img 快速排序算法.png%}\n关于快速排序的时间复杂度，有最优复杂度、最差复杂度还有平均时间复杂度。\n{%asset_img 快速排序时间复杂度.png%}\n{%asset_img 快速排序平均时间复杂度.png%}\n上面摘自知乎 https://zhuanlan.zhihu.com/p/341201904\n##### 2-D maxima finding problem\n这是一个 maxima 问题，一般这种问题有两种解决方式。\n1. 排序法\n{%asset_img 排序法极大点.png%}\n2. 分治法\n{%asset_img 分治法极大点.png%}\n摘自知乎 https://zhuanlan.zhihu.com/p/27850478\n\nTO DO\n\n<!-- 平面极大点\n分别解决完左右后，找出右边的第一个 y 最大的点，把左侧的x 和 y 都低于它的点排除 -->\n\n##### the closest pair problem\n感觉 OI-Wiki 讲解的很全面\nhttps://oi-wiki.org/geometry/nearest-points/\n还有推广：平面最小周长三角形\n$\\dfrac{d \\times 2d}{\\frac{1}{4} \\times \\pi \\times (\\frac{d}{2})^{2}}$ 虽然不是最精确的，但是已经可以得到一个常数来界定这个范围\n\n<!-- 也是用一个竖线将平面分为左右两个部分，然后分别解决，假设左右的最短距离为 d，那么再遍历竖线左右两边距离 d 内的所有点，找出最小值。？（不缺定）\n\n时间复杂度？ -->\nTO DO\n\n##### the convex hull problem\nhttps://blog.csdn.net/lemonxiaoxiao/article/details/108619552\nTO DO\n\n<!-- ?\n一个著名算法，礼物算法？ Jarvis March\n首先最下面的点一定选择，然后逐渐旋转，遇到就选？逆时针还是顺时针呢？有一个判断是向量的叉乘，大于 0 还是小于 0 就是顺着还是逆着\n不对的时候是需要回退的，也可能不止一次 Grasham Scan 但是到了三维就不行了\n但是 divide-and-conquer 就不一样了，不仅仅更快，而且可以推广到三维空间里面去\n找到交点最高和最低，二维的时间复杂度就是 $O(n \\log n)$ 三维的就是找三角形了 -->\n\n##### matrix multiplication \n<!-- ?\nP Q R S T U V?\n时间复杂度大概是 $O(\\log_2(7)) \\approx O(n^{2.81})$?\n但是仍然不是最优的，具体可以自己去搜索一下 -->\n使用类实现的矩阵的一些基础操作，可以看 `Fibonacci.cpp`\nTO DO\n\n##### FFT\n分治做法，见 `FFT.md` 和 `FFT.cpp`(使用自带的 complex 类实现)\n其中，使用自己手写类实现的 FFT 在 `FFTClass.cpp`\n(注意，如果使用 reverse 函数，注意反转的 F 的区间范围，一开始这里错了，好长时间没找出来)\n\n##### Medians and Order Statistics\n对于 n 个数，找出 k-th 数，不排序如何做？因为一排序复杂度就 $O(n\\log{n})$ 了，我们如果只想要一个，可不可以做到 $O(n)$。\n每一次只选择半个部分，虽然是使用类似于 quick_sort 的方式，但是问题的效率越来越小，所以就得到了 $O(n)$ 的方式，但是 quick_sort 的时间复杂度并不是很稳定。\n还有一种递归的算法，分为 5 个数，\n\nnth_element() ?? 函数\n\nTO DO\n\n##### 扩展\n尽量不要写递归，但是可以按递归的思路来想，因为递归的程序一般是比较慢。\n只是几个简单的案例，但是对于每一个案例都是值得我们去深究的。\n为什么这次课讲这部分呢？我们也是要掌握算法思想的。除了分而治之呢，还有自上而下，多层次，自上而下思想等等。\n\n##### Abstract Data Type(ADT)\n抽象数据类型\n\n##### 扩展\n\nTO DO\n\nNode 是 List 下面下属的概念，没有必要将 Node 写在 List 外面。\n不想改变内部元素的时候记得加 const，如果不加的话，`void Func(const List& l) { l.print(); }` 其中不允许调用，因为 Func 有修改成员变量的风险。\n**常引用？**\n**把函数当作函数的参数？**\n派生类禁止父类的函数或者方法？ \n括号匹配问题 Bracket Matching Problem\n计算一个式子的值 postfix calculator 也可以适用于简单的四则运算的场合\n双端队列 dequeue\n环形数组\n\n#### 递归消除\n##### 一般性消除办法\n- 利用堆栈，模拟栈来实现，见 `Hanoi.cpp`\n\n汉诺塔问题 递归求解，如何去掉递归求解。\n$f_n = 2 f_{n - 1} + 1$，所以 $(f_n + 1) = 2(f_{n - 1} + 1)$\n\n##### 倒水问题\n这种任务方案其实挺多的。其实，背后对应的是**辗转相除法**。\n我们可以倒出来的水的数量就是余数。\n设一个杯子是 a 升，另一个杯子是 b 升，我们想获得 c 升水，就是 `ax + by = c`，如果有解，就是 $\\gcd{(a, b)} | c$\n\n##### 求解组合数\nhttps://oi-wiki.org/math/combinatorics/combination/ 见 OI-Wiki各种组合数公式\nhttps://zhuanlan.zhihu.com/p/602675596 二项式反演\n\n##### 扩展\n实现 Stack 的时候，太过于依赖于 List 的实现机理，比如说直接从底层指针上来做。但是这样的话，List 一旦修改，我们的 Stack 就会出现问题。这就是**过于耦合了**。所以，对于一个类来说，接口是很重要的。\n\n##### lowbit\n\n#### 树和二叉树\n树中所有节点度数的最大值叫做整个树的度。\n\n##### 树的表示\n一共有四种表示树的方式：\n1. 树形结构。很直观、形象\n2. 文氏图表示法。使用集合以及集合的包含关系描述树结构。\n3. 凹入表示法。使用线段的伸缩描述树结构。\n4. 括号表示法。将树的根节点写在括号的左边，除根节点以外的其余节点写在括号中并用逗号间隔来描述树结构。\n\n树的各种遍历，一般的树形结构上，大家不讨论中根的问题，一般都是先根和后根。\n\n按层次遍历二叉树，可能还是比较吃内存的。\nDLR LDR LRD \n前序 中序 后序 和 根的区别？\n\n##### 非递归遍历\n对于二叉树的非递归遍历，前序、后序以及获得括号形式都参见作业 `GetTreeOrderNor.cpp` \n递归形式参见 `GetTreeOrderRecursion.cpp` \n给定一个二叉树的括号形式，将其解析并且输出前序、中序、层序、后序遍历参见 `ParseTreeSequence.cpp`\n\n##### 中序遍历的线索二叉树\n\n这样也可以充分利用空间\n将叶子节点的右孩子指向下一个应改遍历的节点(因为一开始叶子节点的右孩子是 null，造成了浪费)\n并且加一个 bool 类型的变量，表示这个节点的右孩子是不是进行了修改。\n这样中序遍历的时候好像也会简单很多(在中序遍历的意义下，将二叉树变成了一个单链表)\n这样二叉树的遍历就不再依赖于堆栈，并且产生了向前向后的两个方向，和双链表的行为是比较相似的。\n\n##### 前序遍历的线索二叉树\n\n顺序建立就是修改右子树\n但是如果反过来会出现左孩子已经被占用的问题，此时需要借助堆栈\n\n##### 后序遍历的线索二叉树\n\n\n{%asset_img 线索二叉树.png%}\n\n#### 堆\n\n##### 二叉堆\n\n当我们谈论到堆(Heap)时，通常指的是二叉堆(Binary Heap)，它是一种特殊的树形结构，常用于实现优先队列和一些图算法(物理存储上是数组，但是逻辑结构上是二叉树，这也是为什么我们可以使用 vector 来模拟的原因)。\n\n堆的性质：\n1. 二叉树结构：堆是一种完全二叉树，除了最后一层，别的层的节点都是满的，最后一层的节点从左向右填充。\n2. 小根堆：任何父节点的值都小于等于其子节点的值。\n3. 不唯一性：对于给定的数据集，可能存在多个不同的最小堆或者最大堆。\n4. 只是保证了节点的权值大于两个儿子节点的权值，也就是说，堆维护的更是我们关注的相对大小关系，尤其是最顶部的元素大小，我们并不关心全序大小关系(也无法维护)。\n\n>   在实际中，实现堆（Heap）通常更倾向于使用向量（数组）来模拟二叉树的结构，而不是构建一个显式的二叉树数据结构。\n\n##### 二项堆\n\n##### Fibonacci 堆\n\n##### lazy 机制\n\n上面的最简单的二叉堆做法呢，我们很好地利用了二叉树序号之间的关系(父子的序号有关系)，但是我们在更新的时候每一次都是 $\\log{n}$ 的复杂度，不是很优，比如说有些元素我们以后根本用不到，而堆又本身不是关注全序关系的，所以我们可以利用 lazy 机制。\n\nTODO \n现在库里面的堆，基本上都不是基于 **二叉堆**(Binary Heap) 实现的。\nFibonacci 堆 也是希望我们去更多地了解一些堆。\n堆的合并、二叉堆的合并？\n二项堆\n重载运算符\n\n#### 编码问题\n\n结构光扫描中，我们如何马上知道这条光是第几条光？就要用到编码了\n能不能发明一种序列，使得连续的几个在序列中是唯一的，longest ？ 是多长？\n3 个颜色的话，先画出 27 个节点。RRR 的话，连接 RRG RRB(它的后继节点)\n寻找访问序列最长的，而且不能重复\n深度遍历可以吗？最好不要写递归，可以队列、栈\n\n#### 霍夫曼树\n\n每一次找权值最小两个节点，变为 n - 1 个节点\n1. 能不能构建出来\n2. 总体的最小代价\n可以搜索霍夫曼树的题目\n实现持久化的最小两个数？手写优先队列？平衡树？\n\n#### 左倾堆 / 左倾树 / 左偏堆 / 左偏树\n\n虽然二叉堆的插入、删除操作挺好的，但是不支持合并。所以我们想寻找一种数据结构使得堆在合并的时候比较高效。\n> Leftist Heap is a priority queue data structure that also supports merge of heaps in O(log n) time.\n\nFHQ Treap TODO\n\nhttps://www.luogu.com.cn/blog/qkhm/zuo-pian-shu-xue-xi-bi-ji TODO\n\n最优传输理论\n\n启发式合并堆\n\n#### 二叉平衡树\n\n可以证明平衡二叉树的高度为 $\\log{n}$ 吗？\n\nN(h) = 1 + N(h - 1) + N(h - 2); AVL 树的高度推导 N(h) 表示高度为 h 时最不平衡时的节点个数。\n\n我们是按照左右子树的树高度之差来定义的，这只是定义平衡的一种。但是还有很多别的方式，比如左右子树的节点。\n\n维护平衡的机制有很多种，比如说典型的 B 树，2-3-4树，它所有的叶子都在同一个高度上面。它最不满的情况就是一个满二叉树，所以它可以保证高度在 $\\log$ 级别。\n\nAVL B树 红黑树 234树 Treap\n红黑树的实际应用比较频繁，它的效率比较高一点。红黑树和 234树之间的关系？？ TODO\n\n插入的时候常常面临三种情形。\n\nhttps://www.luogu.com.cn/blog/MashPlant/solution2-p3369 B 树代码\n\nLCT问题？ Link Cut Tree\n\nTreap 的高度 log 证明？\n\n#### the mathematics of rubik's cube\n\n#### Dijkstra 算法\n\n正确性证明？\n\n多边形\n\n差分约束问题 线性规划问题 max \\sum d 要求比 dijkstra 更加严苛？\n\nGorubi \n\n最短路的话线性规划没有 dijkstra 更加优\n\nA* 算法？\n\n#### 二叉树在区间上？\n\n维护直接的 Rank 感觉代价过于高，因为每一次删除和插入都要把其余元素都改变一次，所以我们不直接维护 Rank。\n\n\n二叉树序列化？https://zhuanlan.zhihu.com/p/26418233\n\n#### 线段相交的问题\n\n两个结构：\n1. 处理事件的优先队列(关键位置停下来，遇到了水平线段的左端点，遇到了水平线段的右端点，遇到了竖直线段)(需要使用一个二叉树维护水平线段，包括水平竖直关系)(水平线段的 y 高度使用二叉树维护了？树套树？)\n2. 维护扫描的每个关键位置的全序列表\n\n#### kd 树\n\ngrid 2d tree\nquadtree(四叉树，每一个格子一分为 4) bsptree(每一次有一个平面，对于所在的平面二分，在二维的情况下就是直线)\n\n上面的结构，除了 grid 的应用都是很多的。各自在不同的应用场景下使用。\n\nkd 树其实是 bst 树的延申。可是很多时候一维数据是不够的，很多情况都是高维的东西。在机器学习中应用也很多。\nray tracing\n2d range serach\n\n从乱序中在 O(n) 的时间复杂度下找出中位数。\n\n1. 每一刀下去，都是将矩形分为两个部分。\n2. 奇偶相间，第一层竖线划分，第二层就是水平划分。(优化就是把点很紧密的包在一块？)\n\nnth_element 严格 O(n) 查找中位数\n\n#### 跳表 Skip List\n\n跳表是相对年轻的一个数据结构，1990 年由 Bill Pugh 提出。\n我们需要区分一下数据域和指针域\nhttps://www.cnblogs.com/bigsai/p/14193225.html\n\n#### KMP\n\n前缀和后缀的问题\n\nBM 算法？\n\nDFA\n\n#### 并查集(Union-find)\n\n虽然并查集的代码是最少的一个，但是确实非常有用的。它可以解决**等价类**相关的问题。\n\nlink-by-size 按照大小合并，此时最高高度不超过 log n\n当然也有按照 rank(height)高度合并。\n\n还有路径压缩(path compression)\n\n无路径压缩的时候，复杂度是 $m \\log n$\n有路径压缩的时候，复杂度是 $m \\alpha (m, n)$\n其中，$\\alpha$ 是反阿克曼函数。\n\n#### 图\n\n每一个节点有 in 和 out 两个邻接表\n\n矩阵的形式存储的时候，可能并行化运算的时候更加容易。\n\nprim 求最小生成树\n\ncut 割\n\n割中最小权值的边一定出现在最小生成树上 证明了 Prim 的正确性？\n\n### 作业\n\n1. 手写一个 List\n\n见 `List.cpp` `LinkList.h` `LinkList.cpp` \n其中，`List.cpp` 将 Node 和 List 两个类分开写了，所以在 List 中使用 Node 的时候要写成 `Node<T>*` 的形式。\n但是在 `LinkList.h` 中，将 Node 写在了 List 类里面，此时就不需要在 Node 后面额外加 `<T>` 了，这种形式也是我们更加推荐的。\n\n2. 手写一个面向对象的快速排序\n`quick_sort.cpp` 是一个递归版本的，但是我们一般不鼓励写递归，会比较慢\n其中，需要注意`函数对象`的写法。\n\n非递归版本：\n**双指针前移法**\n感觉很强，短小精悍\n见 `QuickSortNor.cpp`\n使用自己手写的栈，实现了对于类的非递归版本的快速排序。\n\n3.  \n<!-- 基于自己写的链表\n实现堆栈\n放在不同的文件中\n想规范一下大家写代码习惯 -->\n在这次的作业中，注意：\n我们在使用了模板类的 LinkList 中添加重载输出的友元函数。因为我们毕竟添加的是一个友元函数，是一个函数，所以我们需要在 LinkList 中再写一个 template<class E>\n```\ntemplate<class U>\nfriend std::ostream& operator<<(std::ostream& os, const LinkList<U>& list);\n```\n其中，ostream 是一种返回类型。\n\n4. \n- 以非递归的形式实现汉诺塔，并且尽量少内存。\n见 `Hanoi.cpp`\n- 写最大公约数递推的程序。给定两个整数，写出最大公约数的标准形式，d = ax + by，x y 可能是负数 我们规定 |x| < |y| 此时取值是唯一的。\n见 `exgcd.cpp`\n上面的扩展欧几里得是递归实现的，但是我们还是追求非递归版本，讲解参考下面的博客：\nhttps://www.cnblogs.com/zbhfz/p/11267438.html\n{%asset_img 非递归扩展欧几里得.png%}\n\n5. 非递归全排列\n康托展开\n非递归，根据排列规律输出所有的排列\n\n见 `CantorExpansion.cpp` `permutation.cpp` `next_permutation.cpp` \n\n6. 求斐波那契数列通项\n特征根法怎么来的呢？\n人们发现特征根对于分解递推式子是有帮助的\n对于一个具体的 n 输出 F_n\n矩阵加速递推\n见 `Fibonacci.cpp`\n\n7. 写一写二叉树的数据结构，支持几种遍历方式\n层次 先序 中序 后序 每一个节点都不保存父亲节点 可以使用堆栈来实现 不要递归\n\n如果给出了不同遍历方式得到的结果，如何获得原来树的结构？\n\n二叉树有一个函数，传入两个字符串序列，是不是都能恢复成原来的二叉树结构？最后输出括号表示方式的形式。\n\n见 `ParseTreeSequence.cpp` 和 `GetTreeOrderNor.cpp`\n\n还有一种比较简洁的方式可以参考 于老师代码中的 `parseTree.cpp`\n\n8. 如何形成中序遍历意义下的线索二叉树(双向的)\n并且用自己的线索二叉树再次实现双向遍历\n\n前序和后序不完美\n\n线索二叉树的必要？历史的产物？\n\n9. 自己搜索霍夫曼树的题目\n\n多叉树到二叉树的转化？\n\nWeighted Path Length of Tree, WPL\n\n中位数寻找？TODO\n\n为什么需要将 友元函数的定义直接写进去 ？ TODO\n\n10. 了解一下 Fibonacci 堆，有精力的同学可以尝试实现。\n\n11. 实现一个左偏堆\n\n12. 写一个 AVL 维护平衡，支持插入删除查找\n\n13. R G B 非递归扫描？搜索如何存储路径状态？(直接将一个 vector 作为参数传入)\n\n14. 实现 Treap Splay FHQTreap ?（附加）\n\n15. 魔方？rubik's cube?\n\n16. 若干不相交的多边形，输出从多边形外面一点到外面另一点的最短路径。\n\n17. 尝试完善代码，为二叉树每一个节点添加 size，同时提供一个接口，返回一个节点的 rank。\n\n18. 写一个 kd 树代码，支持最近邻的查询，查找一个框框有多少点？输入 n 个点，输出就是求最近的点，维护一个 kd 树的类，需要的基本行为还是最好支持一下，不过我们最关心的还是最近点。\n\n19. 快速排序进阶。多种排序方式组合实现一个高效的快速排序。\n使用快速排序(在其函数上进行修改)实现线性查找元素第 k 小。\n荷兰旗问题？\n\n20. 给定若干竖直和水平的随机长度的线段，并且保证一个 y 坐标或者一个 x 坐标下只有一条线段，求这些线段的交点个数。\n\n21. 最长公共子序列\n\n22. bitset 求解高维偏序问题\n\n23. k 短路问题\n\n24. 完成 KMP 算法\n\n25. 并查集实现 鼓励大家实现基于 rank 的 union，希望并查集中有路径压缩的功能（不需要新写一个函数，只需要在 find 时顺便修改）。\n\n26. 实现 Prim 算法","slug":"数据结构关键记录","published":1,"updated":"2023-11-06T01:50:45.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szoc00135oog9km45ios","content":"<h3 id=\"课堂笔记\"><a href=\"#课堂笔记\" class=\"headerlink\" title=\"课堂笔记\"></a>课堂笔记</h3><p>2023-9-6</p>\n<h4 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h4><p>TO DO<br>定义一个模板类 ? </p>\n<p>如何判断链表是否有环</p>\n<ol>\n<li>使用 map 对于地址打上标记，如果同一个地址被访问了两次就是有环的。</li>\n<li>快慢指针(Floyd’s Cycle Detection Algorithm)，使用同余方程得到 $a + kp$ 和 $b + kq \\pmod{n}$，其中 a b 分别是两个指针进入环的初始步长，k 是一个未知常量，p q 分别是两个指针的步长，n 是环长，得到 $b - a \\equiv k(p - q)$ 它们的步长差值为 1 的时候可以始终保证同余。</li>\n</ol>\n<p>对于快慢指针法，我们一般是设快指针的步长为 2，慢指针的步长为 1，如果链表中有环，那么快指针始终会追上慢指针，如果没有环，快指针会先到达链表的末尾。<br>下面是一段 Python 程序演示：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ListNode:</span><br><span class=\"line\">    def __init__(self, val=0, next=None):</span><br><span class=\"line\">        self.val = val</span><br><span class=\"line\">        self.next = next</span><br><span class=\"line\"></span><br><span class=\"line\">def hasCycle(head):</span><br><span class=\"line\">    if not head or not head.next:</span><br><span class=\"line\">        return False</span><br><span class=\"line\">    </span><br><span class=\"line\">    slow = head</span><br><span class=\"line\">    fast = head.next</span><br><span class=\"line\">    </span><br><span class=\"line\">    while slow != fast:</span><br><span class=\"line\">        if not fast or not fast.next:</span><br><span class=\"line\">            return False</span><br><span class=\"line\">        slow = slow.next</span><br><span class=\"line\">        fast = fast.next.next</span><br><span class=\"line\">    </span><br><span class=\"line\">    return True</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"找出有环链表的入环点\"><a href=\"#找出有环链表的入环点\" class=\"headerlink\" title=\"找出有环链表的入环点\"></a>找出有环链表的入环点</h5><p>可以看下面的这张图片，我们设快慢指针相遇的节点是 A 点，出发点是 S 点，入环点是 T 点，绿色的部分是慢指针所走过的路程。<br>对于找出入环点，我们在快慢指针相遇的时候，在 A 点和 S 点分别再设一个指针，但是这一次它们都是每一次走一步，两个指针必定会相遇，这个第一相遇点就是链表的入环点。<br>可以看下面的图片来理解，因为快指针比满指针路程多一倍，第一次相遇的时候又是快指针比慢指针多走了一个环的长度，所以一个环的长度就是现在慢指针所走过的长度，所以 ST 和 AT 的长度是相等的，所以第一个相遇的点就是入环点。<br><img src=\"/2023/09/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%B3%E9%94%AE%E8%AE%B0%E5%BD%95/%E5%85%A5%E7%8E%AF%E7%82%B9.png\" class=\"\"></p>\n<h5 id=\"Floyd-判圈算法和-Brent-判圈算法\"><a href=\"#Floyd-判圈算法和-Brent-判圈算法\" class=\"headerlink\" title=\"Floyd 判圈算法和 Brent 判圈算法\"></a>Floyd 判圈算法和 Brent 判圈算法</h5><p>或者又称为「龟兔赛跑算法」，是一个可以在<strong>有限状态机、迭代函数或者链表</strong>上判断是否存在环，求出该环的起点和长度的算法。<br>其实上面的快慢指针方法就是 Floyd 判圈算法，它不像哈希一样需要很大的空间，所以在空间上是更优的。<br>还有一种判圈的算法，比它更快，就是 <strong>Brent</strong> 判圈算法，但是这种方式并没有解决计算换的长度、找出换的入口这两个问题。该算法同样会使用两个指针：快慢指针。当着两个指针相遇，就说明存在环。比如，龟和兔子同时出发，龟不动，兔子走一步，第二轮，乌龟跳到兔子的位置，兔子走两步，第三轮。。。。第 n 轮，乌龟跳到兔子的位置，兔子走$2^{n-1}$步。</p>\n<h5 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h5><p>在申明类中的成员函数后面加上 <code>const</code> 函数就成了只读函数，如 <code>void append() const &#123;&#125;</code>，不能修改类的数据成员。</p>\n<p>函数指针，创建函数指针可以<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int(*funPtr)(int, int, double, ...); // 没有参数就什么都不写</span><br><span class=\"line\">int(*const funcPtr)(); // 这样可以创建静态的函数指针</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>静态函数指针是指指向静态函数的指针。在C语言和C++中，静态函数是指在函数定义前面加上关键字”static”的函数。静态函数的特点是它们只在定义它们的源文件中可见，不能被其他源文件访问。这意味着静态函数的作用域限制在定义它们的源文件内部。</p>\n</blockquote>\n<p>函数指针在赋值的时候，目标函数比如和函数指针定义的返回值类型和参数个数完全相同。下面两种情况是一样的。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int (*funcPtr1)() = foo;</span><br><span class=\"line\">int (*funcPtr2)() = &amp;foo; // c++会隐式得把foo转换成&amp;foo，所以你无需再加入&amp;</span><br></pre></td></tr></table></figure><br>函数指针的应用：</p>\n<ol>\n<li>把函数作为参数传入另一个函数<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">int add(int a, int b)&#123;</span><br><span class=\"line\">    return a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int sub(int a, int b)&#123;</span><br><span class=\"line\">    return a-b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void func(int e, int d, int(*f)(int a, int b))&#123; // 这里才是我想说的，</span><br><span class=\"line\">// 传入了一个int型，双参数，返回值为int的函数</span><br><span class=\"line\">    std::cout&lt;&lt;f(e,d)&lt;&lt;std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    func(2,3,add);</span><br><span class=\"line\">    func(2,3,sub);</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>第二个例子，排序上的应用<br>使用 <code>ascending</code> 和 <code>descending</code> 两个函数代替大小判断</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">template &lt;typename T&gt;</span><br><span class=\"line\">bool ascending(T x, T y) &#123;</span><br><span class=\"line\">    return x &gt; y; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">template &lt;typename T&gt;</span><br><span class=\"line\">bool descending(T x, T y) &#123;</span><br><span class=\"line\">    return x &lt; y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">template&lt;typename T&gt;</span><br><span class=\"line\">void bubblesort(T *a, int n, bool(*cmpfunc)(T, T))&#123;</span><br><span class=\"line\">    bool sorted = false;</span><br><span class=\"line\">    while(!sorted)&#123;</span><br><span class=\"line\">        sorted = true;</span><br><span class=\"line\">        for (int i=0; i&lt;n-1; i++)</span><br><span class=\"line\">            if (cmpfunc(a[i], a[i+1])) &#123;</span><br><span class=\"line\">                std::swap(a[i], a[i+1]);</span><br><span class=\"line\">                sorted = false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        n--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int a[8] = &#123;5,2,5,7,1,-3,99,56&#125;;</span><br><span class=\"line\">    int b[8] = &#123;5,2,5,7,1,-3,99,56&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    bubblesort&lt;int&gt;(a, 8, ascending);</span><br><span class=\"line\"></span><br><span class=\"line\">    for (auto e:a) std::cout &lt;&lt; e &lt;&lt; &quot; &quot;;</span><br><span class=\"line\">    std::cout &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    bubblesort&lt;int&gt;(b, 8, descending);</span><br><span class=\"line\"></span><br><span class=\"line\">    for (auto e:b) std::cout &lt;&lt; e &lt;&lt; &quot; &quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>lambda 函数的书写结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[capture clause](parameter list) -&gt; return type &#123;</span><br><span class=\"line\">    // Lambda函数体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<!-- \n函数指针应用？lambda 函数？ \n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct FUN &#123;</span><br><span class=\"line\">    成员变量</span><br><span class=\"line\">    void operator()(T t);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">FUN fun;</span><br><span class=\"line\">fun() 伪装为一个函数？</span><br><span class=\"line\">``` --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- STL 中的**迭代子类**？？ --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#### 分而治之 divide-and-conquer</span><br><span class=\"line\">##### 归并排序</span><br><span class=\"line\">一个典例就是归并排序，对于归并排序，为什么递归分成两部分以后排序程序就更快了呢？我感觉是</span><br><span class=\"line\">&gt; 整个数组是无序的，是性质很差的，我们如果想加快排序必需有一些比较好的性质。但是如果对于整个数组获得比较好的性质还不如直接排序？所以我们把数组分成两部分一直分，知道性质很明显，获得有序序列，然后 **性质滚性质**，一直带动，所以可以达到加速的目标。</span><br><span class=\"line\">&#123;%asset_img 时间复杂度计算.png%&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">TO DO:</span><br><span class=\"line\">？？非递归版本的归并排序</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">##### 快速排序</span><br><span class=\"line\">&lt;!-- 快速排序时间复杂度</span><br><span class=\"line\">最坏 概率统计的意义下？ --&gt;</span><br><span class=\"line\">关于快速排序的过程，其实就是每一次取一个数作为基准，然后想把整个数组分为两个部分一个是小于这个基准的，另一个是大于这个基准的。然后有一种很好的方式就是建立两个指针，分别指向数组的左端点和右端点...</span><br><span class=\"line\">&#123;%asset_img 快速排序算法.png%&#125;</span><br><span class=\"line\">关于快速排序的时间复杂度，有最优复杂度、最差复杂度还有平均时间复杂度。</span><br><span class=\"line\">&#123;%asset_img 快速排序时间复杂度.png%&#125;</span><br><span class=\"line\">&#123;%asset_img 快速排序平均时间复杂度.png%&#125;</span><br><span class=\"line\">上面摘自知乎 https://zhuanlan.zhihu.com/p/341201904</span><br><span class=\"line\">##### 2-D maxima finding problem</span><br><span class=\"line\">这是一个 maxima 问题，一般这种问题有两种解决方式。</span><br><span class=\"line\">1. 排序法</span><br><span class=\"line\">&#123;%asset_img 排序法极大点.png%&#125;</span><br><span class=\"line\">2. 分治法</span><br><span class=\"line\">&#123;%asset_img 分治法极大点.png%&#125;</span><br><span class=\"line\">摘自知乎 https://zhuanlan.zhihu.com/p/27850478</span><br><span class=\"line\"></span><br><span class=\"line\">TO DO</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 平面极大点</span><br><span class=\"line\">分别解决完左右后，找出右边的第一个 y 最大的点，把左侧的x 和 y 都低于它的点排除 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">##### the closest pair problem</span><br><span class=\"line\">感觉 OI-Wiki 讲解的很全面</span><br><span class=\"line\">https://oi-wiki.org/geometry/nearest-points/</span><br><span class=\"line\">还有推广：平面最小周长三角形</span><br><span class=\"line\">$\\dfrac&#123;d \\times 2d&#125;&#123;\\frac&#123;1&#125;&#123;4&#125; \\times \\pi \\times (\\frac&#123;d&#125;&#123;2&#125;)^&#123;2&#125;&#125;$ 虽然不是最精确的，但是已经可以得到一个常数来界定这个范围</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 也是用一个竖线将平面分为左右两个部分，然后分别解决，假设左右的最短距离为 d，那么再遍历竖线左右两边距离 d 内的所有点，找出最小值。？（不缺定）</span><br><span class=\"line\"></span><br><span class=\"line\">时间复杂度？ --&gt;</span><br><span class=\"line\">TO DO</span><br><span class=\"line\"></span><br><span class=\"line\">##### the convex hull problem</span><br><span class=\"line\">https://blog.csdn.net/lemonxiaoxiao/article/details/108619552</span><br><span class=\"line\">TO DO</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- ?</span><br><span class=\"line\">一个著名算法，礼物算法？ Jarvis March</span><br><span class=\"line\">首先最下面的点一定选择，然后逐渐旋转，遇到就选？逆时针还是顺时针呢？有一个判断是向量的叉乘，大于 0 还是小于 0 就是顺着还是逆着</span><br><span class=\"line\">不对的时候是需要回退的，也可能不止一次 Grasham Scan 但是到了三维就不行了</span><br><span class=\"line\">但是 divide-and-conquer 就不一样了，不仅仅更快，而且可以推广到三维空间里面去</span><br><span class=\"line\">找到交点最高和最低，二维的时间复杂度就是 $O(n \\log n)$ 三维的就是找三角形了 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">##### matrix multiplication </span><br><span class=\"line\">&lt;!-- ?</span><br><span class=\"line\">P Q R S T U V?</span><br><span class=\"line\">时间复杂度大概是 $O(\\log_2(7)) \\approx O(n^&#123;2.81&#125;)$?</span><br><span class=\"line\">但是仍然不是最优的，具体可以自己去搜索一下 --&gt;</span><br><span class=\"line\">使用类实现的矩阵的一些基础操作，可以看 `Fibonacci.cpp`</span><br><span class=\"line\">TO DO</span><br><span class=\"line\"></span><br><span class=\"line\">##### FFT</span><br><span class=\"line\">分治做法，见 `FFT.md` 和 `FFT.cpp`(使用自带的 complex 类实现)</span><br><span class=\"line\">其中，使用自己手写类实现的 FFT 在 `FFTClass.cpp`</span><br><span class=\"line\">(注意，如果使用 reverse 函数，注意反转的 F 的区间范围，一开始这里错了，好长时间没找出来)</span><br><span class=\"line\"></span><br><span class=\"line\">##### Medians and Order Statistics</span><br><span class=\"line\">对于 n 个数，找出 k-th 数，不排序如何做？因为一排序复杂度就 $O(n\\log&#123;n&#125;)$ 了，我们如果只想要一个，可不可以做到 $O(n)$。</span><br><span class=\"line\">每一次只选择半个部分，虽然是使用类似于 quick_sort 的方式，但是问题的效率越来越小，所以就得到了 $O(n)$ 的方式，但是 quick_sort 的时间复杂度并不是很稳定。</span><br><span class=\"line\">还有一种递归的算法，分为 5 个数，</span><br><span class=\"line\"></span><br><span class=\"line\">nth_element() ?? 函数</span><br><span class=\"line\"></span><br><span class=\"line\">TO DO</span><br><span class=\"line\"></span><br><span class=\"line\">##### 扩展</span><br><span class=\"line\">尽量不要写递归，但是可以按递归的思路来想，因为递归的程序一般是比较慢。</span><br><span class=\"line\">只是几个简单的案例，但是对于每一个案例都是值得我们去深究的。</span><br><span class=\"line\">为什么这次课讲这部分呢？我们也是要掌握算法思想的。除了分而治之呢，还有自上而下，多层次，自上而下思想等等。</span><br><span class=\"line\"></span><br><span class=\"line\">##### Abstract Data Type(ADT)</span><br><span class=\"line\">抽象数据类型</span><br><span class=\"line\"></span><br><span class=\"line\">##### 扩展</span><br><span class=\"line\"></span><br><span class=\"line\">TO DO</span><br><span class=\"line\"></span><br><span class=\"line\">Node 是 List 下面下属的概念，没有必要将 Node 写在 List 外面。</span><br><span class=\"line\">不想改变内部元素的时候记得加 const，如果不加的话，`void Func(const List&amp; l) &#123; l.print(); &#125;` 其中不允许调用，因为 Func 有修改成员变量的风险。</span><br><span class=\"line\">**常引用？**</span><br><span class=\"line\">**把函数当作函数的参数？**</span><br><span class=\"line\">派生类禁止父类的函数或者方法？ </span><br><span class=\"line\">括号匹配问题 Bracket Matching Problem</span><br><span class=\"line\">计算一个式子的值 postfix calculator 也可以适用于简单的四则运算的场合</span><br><span class=\"line\">双端队列 dequeue</span><br><span class=\"line\">环形数组</span><br><span class=\"line\"></span><br><span class=\"line\">#### 递归消除</span><br><span class=\"line\">##### 一般性消除办法</span><br><span class=\"line\">- 利用堆栈，模拟栈来实现，见 `Hanoi.cpp`</span><br><span class=\"line\"></span><br><span class=\"line\">汉诺塔问题 递归求解，如何去掉递归求解。</span><br><span class=\"line\">$f_n = 2 f_&#123;n - 1&#125; + 1$，所以 $(f_n + 1) = 2(f_&#123;n - 1&#125; + 1)$</span><br><span class=\"line\"></span><br><span class=\"line\">##### 倒水问题</span><br><span class=\"line\">这种任务方案其实挺多的。其实，背后对应的是**辗转相除法**。</span><br><span class=\"line\">我们可以倒出来的水的数量就是余数。</span><br><span class=\"line\">设一个杯子是 a 升，另一个杯子是 b 升，我们想获得 c 升水，就是 `ax + by = c`，如果有解，就是 $\\gcd&#123;(a, b)&#125; | c$</span><br><span class=\"line\"></span><br><span class=\"line\">##### 求解组合数</span><br><span class=\"line\">https://oi-wiki.org/math/combinatorics/combination/ 见 OI-Wiki各种组合数公式</span><br><span class=\"line\">https://zhuanlan.zhihu.com/p/602675596 二项式反演</span><br><span class=\"line\"></span><br><span class=\"line\">##### 扩展</span><br><span class=\"line\">实现 Stack 的时候，太过于依赖于 List 的实现机理，比如说直接从底层指针上来做。但是这样的话，List 一旦修改，我们的 Stack 就会出现问题。这就是**过于耦合了**。所以，对于一个类来说，接口是很重要的。</span><br><span class=\"line\"></span><br><span class=\"line\">##### lowbit</span><br><span class=\"line\"></span><br><span class=\"line\">#### 树和二叉树</span><br><span class=\"line\">树中所有节点度数的最大值叫做整个树的度。</span><br><span class=\"line\"></span><br><span class=\"line\">##### 树的表示</span><br><span class=\"line\">一共有四种表示树的方式：</span><br><span class=\"line\">1. 树形结构。很直观、形象</span><br><span class=\"line\">2. 文氏图表示法。使用集合以及集合的包含关系描述树结构。</span><br><span class=\"line\">3. 凹入表示法。使用线段的伸缩描述树结构。</span><br><span class=\"line\">4. 括号表示法。将树的根节点写在括号的左边，除根节点以外的其余节点写在括号中并用逗号间隔来描述树结构。</span><br><span class=\"line\"></span><br><span class=\"line\">树的各种遍历，一般的树形结构上，大家不讨论中根的问题，一般都是先根和后根。</span><br><span class=\"line\"></span><br><span class=\"line\">按层次遍历二叉树，可能还是比较吃内存的。</span><br><span class=\"line\">DLR LDR LRD </span><br><span class=\"line\">前序 中序 后序 和 根的区别？</span><br><span class=\"line\"></span><br><span class=\"line\">##### 非递归遍历</span><br><span class=\"line\">对于二叉树的非递归遍历，前序、后序以及获得括号形式都参见作业 `GetTreeOrderNor.cpp` </span><br><span class=\"line\">递归形式参见 `GetTreeOrderRecursion.cpp` </span><br><span class=\"line\">给定一个二叉树的括号形式，将其解析并且输出前序、中序、层序、后序遍历参见 `ParseTreeSequence.cpp`</span><br><span class=\"line\"></span><br><span class=\"line\">##### 中序遍历的线索二叉树</span><br><span class=\"line\"></span><br><span class=\"line\">这样也可以充分利用空间</span><br><span class=\"line\">将叶子节点的右孩子指向下一个应改遍历的节点(因为一开始叶子节点的右孩子是 null，造成了浪费)</span><br><span class=\"line\">并且加一个 bool 类型的变量，表示这个节点的右孩子是不是进行了修改。</span><br><span class=\"line\">这样中序遍历的时候好像也会简单很多(在中序遍历的意义下，将二叉树变成了一个单链表)</span><br><span class=\"line\">这样二叉树的遍历就不再依赖于堆栈，并且产生了向前向后的两个方向，和双链表的行为是比较相似的。</span><br><span class=\"line\"></span><br><span class=\"line\">##### 前序遍历的线索二叉树</span><br><span class=\"line\"></span><br><span class=\"line\">顺序建立就是修改右子树</span><br><span class=\"line\">但是如果反过来会出现左孩子已经被占用的问题，此时需要借助堆栈</span><br><span class=\"line\"></span><br><span class=\"line\">##### 后序遍历的线索二叉树</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;%asset_img 线索二叉树.png%&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#### 堆</span><br><span class=\"line\"></span><br><span class=\"line\">##### 二叉堆</span><br><span class=\"line\"></span><br><span class=\"line\">当我们谈论到堆(Heap)时，通常指的是二叉堆(Binary Heap)，它是一种特殊的树形结构，常用于实现优先队列和一些图算法(物理存储上是数组，但是逻辑结构上是二叉树，这也是为什么我们可以使用 vector 来模拟的原因)。</span><br><span class=\"line\"></span><br><span class=\"line\">堆的性质：</span><br><span class=\"line\">1. 二叉树结构：堆是一种完全二叉树，除了最后一层，别的层的节点都是满的，最后一层的节点从左向右填充。</span><br><span class=\"line\">2. 小根堆：任何父节点的值都小于等于其子节点的值。</span><br><span class=\"line\">3. 不唯一性：对于给定的数据集，可能存在多个不同的最小堆或者最大堆。</span><br><span class=\"line\">4. 只是保证了节点的权值大于两个儿子节点的权值，也就是说，堆维护的更是我们关注的相对大小关系，尤其是最顶部的元素大小，我们并不关心全序大小关系(也无法维护)。</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;   在实际中，实现堆（Heap）通常更倾向于使用向量（数组）来模拟二叉树的结构，而不是构建一个显式的二叉树数据结构。</span><br><span class=\"line\"></span><br><span class=\"line\">##### 二项堆</span><br><span class=\"line\"></span><br><span class=\"line\">##### Fibonacci 堆</span><br><span class=\"line\"></span><br><span class=\"line\">##### lazy 机制</span><br><span class=\"line\"></span><br><span class=\"line\">上面的最简单的二叉堆做法呢，我们很好地利用了二叉树序号之间的关系(父子的序号有关系)，但是我们在更新的时候每一次都是 $\\log&#123;n&#125;$ 的复杂度，不是很优，比如说有些元素我们以后根本用不到，而堆又本身不是关注全序关系的，所以我们可以利用 lazy 机制。</span><br><span class=\"line\"></span><br><span class=\"line\">TODO </span><br><span class=\"line\">现在库里面的堆，基本上都不是基于 **二叉堆**(Binary Heap) 实现的。</span><br><span class=\"line\">Fibonacci 堆 也是希望我们去更多地了解一些堆。</span><br><span class=\"line\">堆的合并、二叉堆的合并？</span><br><span class=\"line\">二项堆</span><br><span class=\"line\">重载运算符</span><br><span class=\"line\"></span><br><span class=\"line\">#### 编码问题</span><br><span class=\"line\"></span><br><span class=\"line\">结构光扫描中，我们如何马上知道这条光是第几条光？就要用到编码了</span><br><span class=\"line\">能不能发明一种序列，使得连续的几个在序列中是唯一的，longest ？ 是多长？</span><br><span class=\"line\">3 个颜色的话，先画出 27 个节点。RRR 的话，连接 RRG RRB(它的后继节点)</span><br><span class=\"line\">寻找访问序列最长的，而且不能重复</span><br><span class=\"line\">深度遍历可以吗？最好不要写递归，可以队列、栈</span><br><span class=\"line\"></span><br><span class=\"line\">#### 霍夫曼树</span><br><span class=\"line\"></span><br><span class=\"line\">每一次找权值最小两个节点，变为 n - 1 个节点</span><br><span class=\"line\">1. 能不能构建出来</span><br><span class=\"line\">2. 总体的最小代价</span><br><span class=\"line\">可以搜索霍夫曼树的题目</span><br><span class=\"line\">实现持久化的最小两个数？手写优先队列？平衡树？</span><br><span class=\"line\"></span><br><span class=\"line\">#### 左倾堆 / 左倾树 / 左偏堆 / 左偏树</span><br><span class=\"line\"></span><br><span class=\"line\">虽然二叉堆的插入、删除操作挺好的，但是不支持合并。所以我们想寻找一种数据结构使得堆在合并的时候比较高效。</span><br><span class=\"line\">&gt; Leftist Heap is a priority queue data structure that also supports merge of heaps in O(log n) time.</span><br><span class=\"line\"></span><br><span class=\"line\">FHQ Treap TODO</span><br><span class=\"line\"></span><br><span class=\"line\">https://www.luogu.com.cn/blog/qkhm/zuo-pian-shu-xue-xi-bi-ji TODO</span><br><span class=\"line\"></span><br><span class=\"line\">最优传输理论</span><br><span class=\"line\"></span><br><span class=\"line\">启发式合并堆</span><br><span class=\"line\"></span><br><span class=\"line\">#### 二叉平衡树</span><br><span class=\"line\"></span><br><span class=\"line\">可以证明平衡二叉树的高度为 $\\log&#123;n&#125;$ 吗？</span><br><span class=\"line\"></span><br><span class=\"line\">N(h) = 1 + N(h - 1) + N(h - 2); AVL 树的高度推导 N(h) 表示高度为 h 时最不平衡时的节点个数。</span><br><span class=\"line\"></span><br><span class=\"line\">我们是按照左右子树的树高度之差来定义的，这只是定义平衡的一种。但是还有很多别的方式，比如左右子树的节点。</span><br><span class=\"line\"></span><br><span class=\"line\">维护平衡的机制有很多种，比如说典型的 B 树，2-3-4树，它所有的叶子都在同一个高度上面。它最不满的情况就是一个满二叉树，所以它可以保证高度在 $\\log$ 级别。</span><br><span class=\"line\"></span><br><span class=\"line\">AVL B树 红黑树 234树 Treap</span><br><span class=\"line\">红黑树的实际应用比较频繁，它的效率比较高一点。红黑树和 234树之间的关系？？ TODO</span><br><span class=\"line\"></span><br><span class=\"line\">插入的时候常常面临三种情形。</span><br><span class=\"line\"></span><br><span class=\"line\">https://www.luogu.com.cn/blog/MashPlant/solution2-p3369 B 树代码</span><br><span class=\"line\"></span><br><span class=\"line\">LCT问题？ Link Cut Tree</span><br><span class=\"line\"></span><br><span class=\"line\">Treap 的高度 log 证明？</span><br><span class=\"line\"></span><br><span class=\"line\">#### the mathematics of rubik&#x27;s cube</span><br><span class=\"line\"></span><br><span class=\"line\">#### Dijkstra 算法</span><br><span class=\"line\"></span><br><span class=\"line\">正确性证明？</span><br><span class=\"line\"></span><br><span class=\"line\">多边形</span><br><span class=\"line\"></span><br><span class=\"line\">差分约束问题 线性规划问题 max \\sum d 要求比 dijkstra 更加严苛？</span><br><span class=\"line\"></span><br><span class=\"line\">Gorubi </span><br><span class=\"line\"></span><br><span class=\"line\">最短路的话线性规划没有 dijkstra 更加优</span><br><span class=\"line\"></span><br><span class=\"line\">A* 算法？</span><br><span class=\"line\"></span><br><span class=\"line\">#### 二叉树在区间上？</span><br><span class=\"line\"></span><br><span class=\"line\">维护直接的 Rank 感觉代价过于高，因为每一次删除和插入都要把其余元素都改变一次，所以我们不直接维护 Rank。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">二叉树序列化？https://zhuanlan.zhihu.com/p/26418233</span><br><span class=\"line\"></span><br><span class=\"line\">#### 线段相交的问题</span><br><span class=\"line\"></span><br><span class=\"line\">两个结构：</span><br><span class=\"line\">1. 处理事件的优先队列(关键位置停下来，遇到了水平线段的左端点，遇到了水平线段的右端点，遇到了竖直线段)(需要使用一个二叉树维护水平线段，包括水平竖直关系)(水平线段的 y 高度使用二叉树维护了？树套树？)</span><br><span class=\"line\">2. 维护扫描的每个关键位置的全序列表</span><br><span class=\"line\"></span><br><span class=\"line\">#### kd 树</span><br><span class=\"line\"></span><br><span class=\"line\">grid 2d tree</span><br><span class=\"line\">quadtree(四叉树，每一个格子一分为 4) bsptree(每一次有一个平面，对于所在的平面二分，在二维的情况下就是直线)</span><br><span class=\"line\"></span><br><span class=\"line\">上面的结构，除了 grid 的应用都是很多的。各自在不同的应用场景下使用。</span><br><span class=\"line\"></span><br><span class=\"line\">kd 树其实是 bst 树的延申。可是很多时候一维数据是不够的，很多情况都是高维的东西。在机器学习中应用也很多。</span><br><span class=\"line\">ray tracing</span><br><span class=\"line\">2d range serach</span><br><span class=\"line\"></span><br><span class=\"line\">从乱序中在 O(n) 的时间复杂度下找出中位数。</span><br><span class=\"line\"></span><br><span class=\"line\">1. 每一刀下去，都是将矩形分为两个部分。</span><br><span class=\"line\">2. 奇偶相间，第一层竖线划分，第二层就是水平划分。(优化就是把点很紧密的包在一块？)</span><br><span class=\"line\"></span><br><span class=\"line\">nth_element 严格 O(n) 查找中位数</span><br><span class=\"line\"></span><br><span class=\"line\">#### 跳表 Skip List</span><br><span class=\"line\"></span><br><span class=\"line\">跳表是相对年轻的一个数据结构，1990 年由 Bill Pugh 提出。</span><br><span class=\"line\">我们需要区分一下数据域和指针域</span><br><span class=\"line\">https://www.cnblogs.com/bigsai/p/14193225.html</span><br><span class=\"line\"></span><br><span class=\"line\">#### KMP</span><br><span class=\"line\"></span><br><span class=\"line\">前缀和后缀的问题</span><br><span class=\"line\"></span><br><span class=\"line\">BM 算法？</span><br><span class=\"line\"></span><br><span class=\"line\">DFA</span><br><span class=\"line\"></span><br><span class=\"line\">#### 并查集(Union-find)</span><br><span class=\"line\"></span><br><span class=\"line\">虽然并查集的代码是最少的一个，但是确实非常有用的。它可以解决**等价类**相关的问题。</span><br><span class=\"line\"></span><br><span class=\"line\">link-by-size 按照大小合并，此时最高高度不超过 log n</span><br><span class=\"line\">当然也有按照 rank(height)高度合并。</span><br><span class=\"line\"></span><br><span class=\"line\">还有路径压缩(path compression)</span><br><span class=\"line\"></span><br><span class=\"line\">无路径压缩的时候，复杂度是 $m \\log n$</span><br><span class=\"line\">有路径压缩的时候，复杂度是 $m \\alpha (m, n)$</span><br><span class=\"line\">其中，$\\alpha$ 是反阿克曼函数。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 图</span><br><span class=\"line\"></span><br><span class=\"line\">每一个节点有 in 和 out 两个邻接表</span><br><span class=\"line\"></span><br><span class=\"line\">矩阵的形式存储的时候，可能并行化运算的时候更加容易。</span><br><span class=\"line\"></span><br><span class=\"line\">prim 求最小生成树</span><br><span class=\"line\"></span><br><span class=\"line\">cut 割</span><br><span class=\"line\"></span><br><span class=\"line\">割中最小权值的边一定出现在最小生成树上 证明了 Prim 的正确性？</span><br><span class=\"line\"></span><br><span class=\"line\">### 作业</span><br><span class=\"line\"></span><br><span class=\"line\">1. 手写一个 List</span><br><span class=\"line\"></span><br><span class=\"line\">见 `List.cpp` `LinkList.h` `LinkList.cpp` </span><br><span class=\"line\">其中，`List.cpp` 将 Node 和 List 两个类分开写了，所以在 List 中使用 Node 的时候要写成 `Node&lt;T&gt;*` 的形式。</span><br><span class=\"line\">但是在 `LinkList.h` 中，将 Node 写在了 List 类里面，此时就不需要在 Node 后面额外加 `&lt;T&gt;` 了，这种形式也是我们更加推荐的。</span><br><span class=\"line\"></span><br><span class=\"line\">2. 手写一个面向对象的快速排序</span><br><span class=\"line\">`quick_sort.cpp` 是一个递归版本的，但是我们一般不鼓励写递归，会比较慢</span><br><span class=\"line\">其中，需要注意`函数对象`的写法。</span><br><span class=\"line\"></span><br><span class=\"line\">非递归版本：</span><br><span class=\"line\">**双指针前移法**</span><br><span class=\"line\">感觉很强，短小精悍</span><br><span class=\"line\">见 `QuickSortNor.cpp`</span><br><span class=\"line\">使用自己手写的栈，实现了对于类的非递归版本的快速排序。</span><br><span class=\"line\"></span><br><span class=\"line\">3.  </span><br><span class=\"line\">&lt;!-- 基于自己写的链表</span><br><span class=\"line\">实现堆栈</span><br><span class=\"line\">放在不同的文件中</span><br><span class=\"line\">想规范一下大家写代码习惯 --&gt;</span><br><span class=\"line\">在这次的作业中，注意：</span><br><span class=\"line\">我们在使用了模板类的 LinkList 中添加重载输出的友元函数。因为我们毕竟添加的是一个友元函数，是一个函数，所以我们需要在 LinkList 中再写一个 template&lt;class E&gt;</span><br></pre></td></tr></table></figure>\n<p>template<class U><br>friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const LinkList<U>&amp; list);<br>```<br>其中，ostream 是一种返回类型。</p>\n</li>\n<li></li>\n</ol>\n<ul>\n<li>以非递归的形式实现汉诺塔，并且尽量少内存。<br>见 <code>Hanoi.cpp</code></li>\n<li>写最大公约数递推的程序。给定两个整数，写出最大公约数的标准形式，d = ax + by，x y 可能是负数 我们规定 |x| &lt; |y| 此时取值是唯一的。<br>见 <code>exgcd.cpp</code><br>上面的扩展欧几里得是递归实现的，但是我们还是追求非递归版本，讲解参考下面的博客：<br><a href=\"https://www.cnblogs.com/zbhfz/p/11267438.html\">https://www.cnblogs.com/zbhfz/p/11267438.html</a>\n</li>\n</ul>\n<ol>\n<li>非递归全排列<br>康托展开<br>非递归，根据排列规律输出所有的排列</li>\n</ol>\n<p>见 <code>CantorExpansion.cpp</code> <code>permutation.cpp</code> <code>next_permutation.cpp</code> </p>\n<ol>\n<li><p>求斐波那契数列通项<br>特征根法怎么来的呢？<br>人们发现特征根对于分解递推式子是有帮助的<br>对于一个具体的 n 输出 F_n<br>矩阵加速递推<br>见 <code>Fibonacci.cpp</code></p>\n</li>\n<li><p>写一写二叉树的数据结构，支持几种遍历方式<br>层次 先序 中序 后序 每一个节点都不保存父亲节点 可以使用堆栈来实现 不要递归</p>\n</li>\n</ol>\n<p>如果给出了不同遍历方式得到的结果，如何获得原来树的结构？</p>\n<p>二叉树有一个函数，传入两个字符串序列，是不是都能恢复成原来的二叉树结构？最后输出括号表示方式的形式。</p>\n<p>见 <code>ParseTreeSequence.cpp</code> 和 <code>GetTreeOrderNor.cpp</code></p>\n<p>还有一种比较简洁的方式可以参考 于老师代码中的 <code>parseTree.cpp</code></p>\n<ol>\n<li>如何形成中序遍历意义下的线索二叉树(双向的)<br>并且用自己的线索二叉树再次实现双向遍历</li>\n</ol>\n<p>前序和后序不完美</p>\n<p>线索二叉树的必要？历史的产物？</p>\n<ol>\n<li>自己搜索霍夫曼树的题目</li>\n</ol>\n<p>多叉树到二叉树的转化？</p>\n<p>Weighted Path Length of Tree, WPL</p>\n<p>中位数寻找？TODO</p>\n<p>为什么需要将 友元函数的定义直接写进去 ？ TODO</p>\n<ol>\n<li><p>了解一下 Fibonacci 堆，有精力的同学可以尝试实现。</p>\n</li>\n<li><p>实现一个左偏堆</p>\n</li>\n<li><p>写一个 AVL 维护平衡，支持插入删除查找</p>\n</li>\n<li><p>R G B 非递归扫描？搜索如何存储路径状态？(直接将一个 vector 作为参数传入)</p>\n</li>\n<li><p>实现 Treap Splay FHQTreap ?（附加）</p>\n</li>\n<li><p>魔方？rubik’s cube?</p>\n</li>\n<li><p>若干不相交的多边形，输出从多边形外面一点到外面另一点的最短路径。</p>\n</li>\n<li><p>尝试完善代码，为二叉树每一个节点添加 size，同时提供一个接口，返回一个节点的 rank。</p>\n</li>\n<li><p>写一个 kd 树代码，支持最近邻的查询，查找一个框框有多少点？输入 n 个点，输出就是求最近的点，维护一个 kd 树的类，需要的基本行为还是最好支持一下，不过我们最关心的还是最近点。</p>\n</li>\n<li><p>快速排序进阶。多种排序方式组合实现一个高效的快速排序。<br>使用快速排序(在其函数上进行修改)实现线性查找元素第 k 小。<br>荷兰旗问题？</p>\n</li>\n<li><p>给定若干竖直和水平的随机长度的线段，并且保证一个 y 坐标或者一个 x 坐标下只有一条线段，求这些线段的交点个数。</p>\n</li>\n<li><p>最长公共子序列</p>\n</li>\n<li><p>bitset 求解高维偏序问题</p>\n</li>\n<li><p>k 短路问题</p>\n</li>\n<li><p>完成 KMP 算法</p>\n</li>\n<li><p>并查集实现 鼓励大家实现基于 rank 的 union，希望并查集中有路径压缩的功能（不需要新写一个函数，只需要在 find 时顺便修改）。</p>\n</li>\n<li><p>实现 Prim 算法</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"课堂笔记\"><a href=\"#课堂笔记\" class=\"headerlink\" title=\"课堂笔记\"></a>课堂笔记</h3><p>2023-9-6</p>\n<h4 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h4><p>TO DO<br>定义一个模板类 ? </p>\n<p>如何判断链表是否有环</p>\n<ol>\n<li>使用 map 对于地址打上标记，如果同一个地址被访问了两次就是有环的。</li>\n<li>快慢指针(Floyd’s Cycle Detection Algorithm)，使用同余方程得到 $a + kp$ 和 $b + kq \\pmod{n}$，其中 a b 分别是两个指针进入环的初始步长，k 是一个未知常量，p q 分别是两个指针的步长，n 是环长，得到 $b - a \\equiv k(p - q)$ 它们的步长差值为 1 的时候可以始终保证同余。</li>\n</ol>\n<p>对于快慢指针法，我们一般是设快指针的步长为 2，慢指针的步长为 1，如果链表中有环，那么快指针始终会追上慢指针，如果没有环，快指针会先到达链表的末尾。<br>下面是一段 Python 程序演示：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ListNode:</span><br><span class=\"line\">    def __init__(self, val=0, next=None):</span><br><span class=\"line\">        self.val = val</span><br><span class=\"line\">        self.next = next</span><br><span class=\"line\"></span><br><span class=\"line\">def hasCycle(head):</span><br><span class=\"line\">    if not head or not head.next:</span><br><span class=\"line\">        return False</span><br><span class=\"line\">    </span><br><span class=\"line\">    slow = head</span><br><span class=\"line\">    fast = head.next</span><br><span class=\"line\">    </span><br><span class=\"line\">    while slow != fast:</span><br><span class=\"line\">        if not fast or not fast.next:</span><br><span class=\"line\">            return False</span><br><span class=\"line\">        slow = slow.next</span><br><span class=\"line\">        fast = fast.next.next</span><br><span class=\"line\">    </span><br><span class=\"line\">    return True</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"找出有环链表的入环点\"><a href=\"#找出有环链表的入环点\" class=\"headerlink\" title=\"找出有环链表的入环点\"></a>找出有环链表的入环点</h5><p>可以看下面的这张图片，我们设快慢指针相遇的节点是 A 点，出发点是 S 点，入环点是 T 点，绿色的部分是慢指针所走过的路程。<br>对于找出入环点，我们在快慢指针相遇的时候，在 A 点和 S 点分别再设一个指针，但是这一次它们都是每一次走一步，两个指针必定会相遇，这个第一相遇点就是链表的入环点。<br>可以看下面的图片来理解，因为快指针比满指针路程多一倍，第一次相遇的时候又是快指针比慢指针多走了一个环的长度，所以一个环的长度就是现在慢指针所走过的长度，所以 ST 和 AT 的长度是相等的，所以第一个相遇的点就是入环点。<br><img src=\"/2023/09/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%B3%E9%94%AE%E8%AE%B0%E5%BD%95/%E5%85%A5%E7%8E%AF%E7%82%B9.png\" class=\"\"></p>\n<h5 id=\"Floyd-判圈算法和-Brent-判圈算法\"><a href=\"#Floyd-判圈算法和-Brent-判圈算法\" class=\"headerlink\" title=\"Floyd 判圈算法和 Brent 判圈算法\"></a>Floyd 判圈算法和 Brent 判圈算法</h5><p>或者又称为「龟兔赛跑算法」，是一个可以在<strong>有限状态机、迭代函数或者链表</strong>上判断是否存在环，求出该环的起点和长度的算法。<br>其实上面的快慢指针方法就是 Floyd 判圈算法，它不像哈希一样需要很大的空间，所以在空间上是更优的。<br>还有一种判圈的算法，比它更快，就是 <strong>Brent</strong> 判圈算法，但是这种方式并没有解决计算换的长度、找出换的入口这两个问题。该算法同样会使用两个指针：快慢指针。当着两个指针相遇，就说明存在环。比如，龟和兔子同时出发，龟不动，兔子走一步，第二轮，乌龟跳到兔子的位置，兔子走两步，第三轮。。。。第 n 轮，乌龟跳到兔子的位置，兔子走$2^{n-1}$步。</p>\n<h5 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h5><p>在申明类中的成员函数后面加上 <code>const</code> 函数就成了只读函数，如 <code>void append() const &#123;&#125;</code>，不能修改类的数据成员。</p>\n<p>函数指针，创建函数指针可以<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int(*funPtr)(int, int, double, ...); // 没有参数就什么都不写</span><br><span class=\"line\">int(*const funcPtr)(); // 这样可以创建静态的函数指针</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>静态函数指针是指指向静态函数的指针。在C语言和C++中，静态函数是指在函数定义前面加上关键字”static”的函数。静态函数的特点是它们只在定义它们的源文件中可见，不能被其他源文件访问。这意味着静态函数的作用域限制在定义它们的源文件内部。</p>\n</blockquote>\n<p>函数指针在赋值的时候，目标函数比如和函数指针定义的返回值类型和参数个数完全相同。下面两种情况是一样的。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int (*funcPtr1)() = foo;</span><br><span class=\"line\">int (*funcPtr2)() = &amp;foo; // c++会隐式得把foo转换成&amp;foo，所以你无需再加入&amp;</span><br></pre></td></tr></table></figure><br>函数指针的应用：</p>\n<ol>\n<li>把函数作为参数传入另一个函数<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">int add(int a, int b)&#123;</span><br><span class=\"line\">    return a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int sub(int a, int b)&#123;</span><br><span class=\"line\">    return a-b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void func(int e, int d, int(*f)(int a, int b))&#123; // 这里才是我想说的，</span><br><span class=\"line\">// 传入了一个int型，双参数，返回值为int的函数</span><br><span class=\"line\">    std::cout&lt;&lt;f(e,d)&lt;&lt;std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    func(2,3,add);</span><br><span class=\"line\">    func(2,3,sub);</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>第二个例子，排序上的应用<br>使用 <code>ascending</code> 和 <code>descending</code> 两个函数代替大小判断</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">template &lt;typename T&gt;</span><br><span class=\"line\">bool ascending(T x, T y) &#123;</span><br><span class=\"line\">    return x &gt; y; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">template &lt;typename T&gt;</span><br><span class=\"line\">bool descending(T x, T y) &#123;</span><br><span class=\"line\">    return x &lt; y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">template&lt;typename T&gt;</span><br><span class=\"line\">void bubblesort(T *a, int n, bool(*cmpfunc)(T, T))&#123;</span><br><span class=\"line\">    bool sorted = false;</span><br><span class=\"line\">    while(!sorted)&#123;</span><br><span class=\"line\">        sorted = true;</span><br><span class=\"line\">        for (int i=0; i&lt;n-1; i++)</span><br><span class=\"line\">            if (cmpfunc(a[i], a[i+1])) &#123;</span><br><span class=\"line\">                std::swap(a[i], a[i+1]);</span><br><span class=\"line\">                sorted = false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        n--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int a[8] = &#123;5,2,5,7,1,-3,99,56&#125;;</span><br><span class=\"line\">    int b[8] = &#123;5,2,5,7,1,-3,99,56&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    bubblesort&lt;int&gt;(a, 8, ascending);</span><br><span class=\"line\"></span><br><span class=\"line\">    for (auto e:a) std::cout &lt;&lt; e &lt;&lt; &quot; &quot;;</span><br><span class=\"line\">    std::cout &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    bubblesort&lt;int&gt;(b, 8, descending);</span><br><span class=\"line\"></span><br><span class=\"line\">    for (auto e:b) std::cout &lt;&lt; e &lt;&lt; &quot; &quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>lambda 函数的书写结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[capture clause](parameter list) -&gt; return type &#123;</span><br><span class=\"line\">    // Lambda函数体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<!-- \n函数指针应用？lambda 函数？ \n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct FUN &#123;</span><br><span class=\"line\">    成员变量</span><br><span class=\"line\">    void operator()(T t);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">FUN fun;</span><br><span class=\"line\">fun() 伪装为一个函数？</span><br><span class=\"line\">``` --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- STL 中的**迭代子类**？？ --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#### 分而治之 divide-and-conquer</span><br><span class=\"line\">##### 归并排序</span><br><span class=\"line\">一个典例就是归并排序，对于归并排序，为什么递归分成两部分以后排序程序就更快了呢？我感觉是</span><br><span class=\"line\">&gt; 整个数组是无序的，是性质很差的，我们如果想加快排序必需有一些比较好的性质。但是如果对于整个数组获得比较好的性质还不如直接排序？所以我们把数组分成两部分一直分，知道性质很明显，获得有序序列，然后 **性质滚性质**，一直带动，所以可以达到加速的目标。</span><br><span class=\"line\">&#123;%asset_img 时间复杂度计算.png%&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">TO DO:</span><br><span class=\"line\">？？非递归版本的归并排序</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">##### 快速排序</span><br><span class=\"line\">&lt;!-- 快速排序时间复杂度</span><br><span class=\"line\">最坏 概率统计的意义下？ --&gt;</span><br><span class=\"line\">关于快速排序的过程，其实就是每一次取一个数作为基准，然后想把整个数组分为两个部分一个是小于这个基准的，另一个是大于这个基准的。然后有一种很好的方式就是建立两个指针，分别指向数组的左端点和右端点...</span><br><span class=\"line\">&#123;%asset_img 快速排序算法.png%&#125;</span><br><span class=\"line\">关于快速排序的时间复杂度，有最优复杂度、最差复杂度还有平均时间复杂度。</span><br><span class=\"line\">&#123;%asset_img 快速排序时间复杂度.png%&#125;</span><br><span class=\"line\">&#123;%asset_img 快速排序平均时间复杂度.png%&#125;</span><br><span class=\"line\">上面摘自知乎 https://zhuanlan.zhihu.com/p/341201904</span><br><span class=\"line\">##### 2-D maxima finding problem</span><br><span class=\"line\">这是一个 maxima 问题，一般这种问题有两种解决方式。</span><br><span class=\"line\">1. 排序法</span><br><span class=\"line\">&#123;%asset_img 排序法极大点.png%&#125;</span><br><span class=\"line\">2. 分治法</span><br><span class=\"line\">&#123;%asset_img 分治法极大点.png%&#125;</span><br><span class=\"line\">摘自知乎 https://zhuanlan.zhihu.com/p/27850478</span><br><span class=\"line\"></span><br><span class=\"line\">TO DO</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 平面极大点</span><br><span class=\"line\">分别解决完左右后，找出右边的第一个 y 最大的点，把左侧的x 和 y 都低于它的点排除 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">##### the closest pair problem</span><br><span class=\"line\">感觉 OI-Wiki 讲解的很全面</span><br><span class=\"line\">https://oi-wiki.org/geometry/nearest-points/</span><br><span class=\"line\">还有推广：平面最小周长三角形</span><br><span class=\"line\">$\\dfrac&#123;d \\times 2d&#125;&#123;\\frac&#123;1&#125;&#123;4&#125; \\times \\pi \\times (\\frac&#123;d&#125;&#123;2&#125;)^&#123;2&#125;&#125;$ 虽然不是最精确的，但是已经可以得到一个常数来界定这个范围</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 也是用一个竖线将平面分为左右两个部分，然后分别解决，假设左右的最短距离为 d，那么再遍历竖线左右两边距离 d 内的所有点，找出最小值。？（不缺定）</span><br><span class=\"line\"></span><br><span class=\"line\">时间复杂度？ --&gt;</span><br><span class=\"line\">TO DO</span><br><span class=\"line\"></span><br><span class=\"line\">##### the convex hull problem</span><br><span class=\"line\">https://blog.csdn.net/lemonxiaoxiao/article/details/108619552</span><br><span class=\"line\">TO DO</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- ?</span><br><span class=\"line\">一个著名算法，礼物算法？ Jarvis March</span><br><span class=\"line\">首先最下面的点一定选择，然后逐渐旋转，遇到就选？逆时针还是顺时针呢？有一个判断是向量的叉乘，大于 0 还是小于 0 就是顺着还是逆着</span><br><span class=\"line\">不对的时候是需要回退的，也可能不止一次 Grasham Scan 但是到了三维就不行了</span><br><span class=\"line\">但是 divide-and-conquer 就不一样了，不仅仅更快，而且可以推广到三维空间里面去</span><br><span class=\"line\">找到交点最高和最低，二维的时间复杂度就是 $O(n \\log n)$ 三维的就是找三角形了 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">##### matrix multiplication </span><br><span class=\"line\">&lt;!-- ?</span><br><span class=\"line\">P Q R S T U V?</span><br><span class=\"line\">时间复杂度大概是 $O(\\log_2(7)) \\approx O(n^&#123;2.81&#125;)$?</span><br><span class=\"line\">但是仍然不是最优的，具体可以自己去搜索一下 --&gt;</span><br><span class=\"line\">使用类实现的矩阵的一些基础操作，可以看 `Fibonacci.cpp`</span><br><span class=\"line\">TO DO</span><br><span class=\"line\"></span><br><span class=\"line\">##### FFT</span><br><span class=\"line\">分治做法，见 `FFT.md` 和 `FFT.cpp`(使用自带的 complex 类实现)</span><br><span class=\"line\">其中，使用自己手写类实现的 FFT 在 `FFTClass.cpp`</span><br><span class=\"line\">(注意，如果使用 reverse 函数，注意反转的 F 的区间范围，一开始这里错了，好长时间没找出来)</span><br><span class=\"line\"></span><br><span class=\"line\">##### Medians and Order Statistics</span><br><span class=\"line\">对于 n 个数，找出 k-th 数，不排序如何做？因为一排序复杂度就 $O(n\\log&#123;n&#125;)$ 了，我们如果只想要一个，可不可以做到 $O(n)$。</span><br><span class=\"line\">每一次只选择半个部分，虽然是使用类似于 quick_sort 的方式，但是问题的效率越来越小，所以就得到了 $O(n)$ 的方式，但是 quick_sort 的时间复杂度并不是很稳定。</span><br><span class=\"line\">还有一种递归的算法，分为 5 个数，</span><br><span class=\"line\"></span><br><span class=\"line\">nth_element() ?? 函数</span><br><span class=\"line\"></span><br><span class=\"line\">TO DO</span><br><span class=\"line\"></span><br><span class=\"line\">##### 扩展</span><br><span class=\"line\">尽量不要写递归，但是可以按递归的思路来想，因为递归的程序一般是比较慢。</span><br><span class=\"line\">只是几个简单的案例，但是对于每一个案例都是值得我们去深究的。</span><br><span class=\"line\">为什么这次课讲这部分呢？我们也是要掌握算法思想的。除了分而治之呢，还有自上而下，多层次，自上而下思想等等。</span><br><span class=\"line\"></span><br><span class=\"line\">##### Abstract Data Type(ADT)</span><br><span class=\"line\">抽象数据类型</span><br><span class=\"line\"></span><br><span class=\"line\">##### 扩展</span><br><span class=\"line\"></span><br><span class=\"line\">TO DO</span><br><span class=\"line\"></span><br><span class=\"line\">Node 是 List 下面下属的概念，没有必要将 Node 写在 List 外面。</span><br><span class=\"line\">不想改变内部元素的时候记得加 const，如果不加的话，`void Func(const List&amp; l) &#123; l.print(); &#125;` 其中不允许调用，因为 Func 有修改成员变量的风险。</span><br><span class=\"line\">**常引用？**</span><br><span class=\"line\">**把函数当作函数的参数？**</span><br><span class=\"line\">派生类禁止父类的函数或者方法？ </span><br><span class=\"line\">括号匹配问题 Bracket Matching Problem</span><br><span class=\"line\">计算一个式子的值 postfix calculator 也可以适用于简单的四则运算的场合</span><br><span class=\"line\">双端队列 dequeue</span><br><span class=\"line\">环形数组</span><br><span class=\"line\"></span><br><span class=\"line\">#### 递归消除</span><br><span class=\"line\">##### 一般性消除办法</span><br><span class=\"line\">- 利用堆栈，模拟栈来实现，见 `Hanoi.cpp`</span><br><span class=\"line\"></span><br><span class=\"line\">汉诺塔问题 递归求解，如何去掉递归求解。</span><br><span class=\"line\">$f_n = 2 f_&#123;n - 1&#125; + 1$，所以 $(f_n + 1) = 2(f_&#123;n - 1&#125; + 1)$</span><br><span class=\"line\"></span><br><span class=\"line\">##### 倒水问题</span><br><span class=\"line\">这种任务方案其实挺多的。其实，背后对应的是**辗转相除法**。</span><br><span class=\"line\">我们可以倒出来的水的数量就是余数。</span><br><span class=\"line\">设一个杯子是 a 升，另一个杯子是 b 升，我们想获得 c 升水，就是 `ax + by = c`，如果有解，就是 $\\gcd&#123;(a, b)&#125; | c$</span><br><span class=\"line\"></span><br><span class=\"line\">##### 求解组合数</span><br><span class=\"line\">https://oi-wiki.org/math/combinatorics/combination/ 见 OI-Wiki各种组合数公式</span><br><span class=\"line\">https://zhuanlan.zhihu.com/p/602675596 二项式反演</span><br><span class=\"line\"></span><br><span class=\"line\">##### 扩展</span><br><span class=\"line\">实现 Stack 的时候，太过于依赖于 List 的实现机理，比如说直接从底层指针上来做。但是这样的话，List 一旦修改，我们的 Stack 就会出现问题。这就是**过于耦合了**。所以，对于一个类来说，接口是很重要的。</span><br><span class=\"line\"></span><br><span class=\"line\">##### lowbit</span><br><span class=\"line\"></span><br><span class=\"line\">#### 树和二叉树</span><br><span class=\"line\">树中所有节点度数的最大值叫做整个树的度。</span><br><span class=\"line\"></span><br><span class=\"line\">##### 树的表示</span><br><span class=\"line\">一共有四种表示树的方式：</span><br><span class=\"line\">1. 树形结构。很直观、形象</span><br><span class=\"line\">2. 文氏图表示法。使用集合以及集合的包含关系描述树结构。</span><br><span class=\"line\">3. 凹入表示法。使用线段的伸缩描述树结构。</span><br><span class=\"line\">4. 括号表示法。将树的根节点写在括号的左边，除根节点以外的其余节点写在括号中并用逗号间隔来描述树结构。</span><br><span class=\"line\"></span><br><span class=\"line\">树的各种遍历，一般的树形结构上，大家不讨论中根的问题，一般都是先根和后根。</span><br><span class=\"line\"></span><br><span class=\"line\">按层次遍历二叉树，可能还是比较吃内存的。</span><br><span class=\"line\">DLR LDR LRD </span><br><span class=\"line\">前序 中序 后序 和 根的区别？</span><br><span class=\"line\"></span><br><span class=\"line\">##### 非递归遍历</span><br><span class=\"line\">对于二叉树的非递归遍历，前序、后序以及获得括号形式都参见作业 `GetTreeOrderNor.cpp` </span><br><span class=\"line\">递归形式参见 `GetTreeOrderRecursion.cpp` </span><br><span class=\"line\">给定一个二叉树的括号形式，将其解析并且输出前序、中序、层序、后序遍历参见 `ParseTreeSequence.cpp`</span><br><span class=\"line\"></span><br><span class=\"line\">##### 中序遍历的线索二叉树</span><br><span class=\"line\"></span><br><span class=\"line\">这样也可以充分利用空间</span><br><span class=\"line\">将叶子节点的右孩子指向下一个应改遍历的节点(因为一开始叶子节点的右孩子是 null，造成了浪费)</span><br><span class=\"line\">并且加一个 bool 类型的变量，表示这个节点的右孩子是不是进行了修改。</span><br><span class=\"line\">这样中序遍历的时候好像也会简单很多(在中序遍历的意义下，将二叉树变成了一个单链表)</span><br><span class=\"line\">这样二叉树的遍历就不再依赖于堆栈，并且产生了向前向后的两个方向，和双链表的行为是比较相似的。</span><br><span class=\"line\"></span><br><span class=\"line\">##### 前序遍历的线索二叉树</span><br><span class=\"line\"></span><br><span class=\"line\">顺序建立就是修改右子树</span><br><span class=\"line\">但是如果反过来会出现左孩子已经被占用的问题，此时需要借助堆栈</span><br><span class=\"line\"></span><br><span class=\"line\">##### 后序遍历的线索二叉树</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;%asset_img 线索二叉树.png%&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#### 堆</span><br><span class=\"line\"></span><br><span class=\"line\">##### 二叉堆</span><br><span class=\"line\"></span><br><span class=\"line\">当我们谈论到堆(Heap)时，通常指的是二叉堆(Binary Heap)，它是一种特殊的树形结构，常用于实现优先队列和一些图算法(物理存储上是数组，但是逻辑结构上是二叉树，这也是为什么我们可以使用 vector 来模拟的原因)。</span><br><span class=\"line\"></span><br><span class=\"line\">堆的性质：</span><br><span class=\"line\">1. 二叉树结构：堆是一种完全二叉树，除了最后一层，别的层的节点都是满的，最后一层的节点从左向右填充。</span><br><span class=\"line\">2. 小根堆：任何父节点的值都小于等于其子节点的值。</span><br><span class=\"line\">3. 不唯一性：对于给定的数据集，可能存在多个不同的最小堆或者最大堆。</span><br><span class=\"line\">4. 只是保证了节点的权值大于两个儿子节点的权值，也就是说，堆维护的更是我们关注的相对大小关系，尤其是最顶部的元素大小，我们并不关心全序大小关系(也无法维护)。</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;   在实际中，实现堆（Heap）通常更倾向于使用向量（数组）来模拟二叉树的结构，而不是构建一个显式的二叉树数据结构。</span><br><span class=\"line\"></span><br><span class=\"line\">##### 二项堆</span><br><span class=\"line\"></span><br><span class=\"line\">##### Fibonacci 堆</span><br><span class=\"line\"></span><br><span class=\"line\">##### lazy 机制</span><br><span class=\"line\"></span><br><span class=\"line\">上面的最简单的二叉堆做法呢，我们很好地利用了二叉树序号之间的关系(父子的序号有关系)，但是我们在更新的时候每一次都是 $\\log&#123;n&#125;$ 的复杂度，不是很优，比如说有些元素我们以后根本用不到，而堆又本身不是关注全序关系的，所以我们可以利用 lazy 机制。</span><br><span class=\"line\"></span><br><span class=\"line\">TODO </span><br><span class=\"line\">现在库里面的堆，基本上都不是基于 **二叉堆**(Binary Heap) 实现的。</span><br><span class=\"line\">Fibonacci 堆 也是希望我们去更多地了解一些堆。</span><br><span class=\"line\">堆的合并、二叉堆的合并？</span><br><span class=\"line\">二项堆</span><br><span class=\"line\">重载运算符</span><br><span class=\"line\"></span><br><span class=\"line\">#### 编码问题</span><br><span class=\"line\"></span><br><span class=\"line\">结构光扫描中，我们如何马上知道这条光是第几条光？就要用到编码了</span><br><span class=\"line\">能不能发明一种序列，使得连续的几个在序列中是唯一的，longest ？ 是多长？</span><br><span class=\"line\">3 个颜色的话，先画出 27 个节点。RRR 的话，连接 RRG RRB(它的后继节点)</span><br><span class=\"line\">寻找访问序列最长的，而且不能重复</span><br><span class=\"line\">深度遍历可以吗？最好不要写递归，可以队列、栈</span><br><span class=\"line\"></span><br><span class=\"line\">#### 霍夫曼树</span><br><span class=\"line\"></span><br><span class=\"line\">每一次找权值最小两个节点，变为 n - 1 个节点</span><br><span class=\"line\">1. 能不能构建出来</span><br><span class=\"line\">2. 总体的最小代价</span><br><span class=\"line\">可以搜索霍夫曼树的题目</span><br><span class=\"line\">实现持久化的最小两个数？手写优先队列？平衡树？</span><br><span class=\"line\"></span><br><span class=\"line\">#### 左倾堆 / 左倾树 / 左偏堆 / 左偏树</span><br><span class=\"line\"></span><br><span class=\"line\">虽然二叉堆的插入、删除操作挺好的，但是不支持合并。所以我们想寻找一种数据结构使得堆在合并的时候比较高效。</span><br><span class=\"line\">&gt; Leftist Heap is a priority queue data structure that also supports merge of heaps in O(log n) time.</span><br><span class=\"line\"></span><br><span class=\"line\">FHQ Treap TODO</span><br><span class=\"line\"></span><br><span class=\"line\">https://www.luogu.com.cn/blog/qkhm/zuo-pian-shu-xue-xi-bi-ji TODO</span><br><span class=\"line\"></span><br><span class=\"line\">最优传输理论</span><br><span class=\"line\"></span><br><span class=\"line\">启发式合并堆</span><br><span class=\"line\"></span><br><span class=\"line\">#### 二叉平衡树</span><br><span class=\"line\"></span><br><span class=\"line\">可以证明平衡二叉树的高度为 $\\log&#123;n&#125;$ 吗？</span><br><span class=\"line\"></span><br><span class=\"line\">N(h) = 1 + N(h - 1) + N(h - 2); AVL 树的高度推导 N(h) 表示高度为 h 时最不平衡时的节点个数。</span><br><span class=\"line\"></span><br><span class=\"line\">我们是按照左右子树的树高度之差来定义的，这只是定义平衡的一种。但是还有很多别的方式，比如左右子树的节点。</span><br><span class=\"line\"></span><br><span class=\"line\">维护平衡的机制有很多种，比如说典型的 B 树，2-3-4树，它所有的叶子都在同一个高度上面。它最不满的情况就是一个满二叉树，所以它可以保证高度在 $\\log$ 级别。</span><br><span class=\"line\"></span><br><span class=\"line\">AVL B树 红黑树 234树 Treap</span><br><span class=\"line\">红黑树的实际应用比较频繁，它的效率比较高一点。红黑树和 234树之间的关系？？ TODO</span><br><span class=\"line\"></span><br><span class=\"line\">插入的时候常常面临三种情形。</span><br><span class=\"line\"></span><br><span class=\"line\">https://www.luogu.com.cn/blog/MashPlant/solution2-p3369 B 树代码</span><br><span class=\"line\"></span><br><span class=\"line\">LCT问题？ Link Cut Tree</span><br><span class=\"line\"></span><br><span class=\"line\">Treap 的高度 log 证明？</span><br><span class=\"line\"></span><br><span class=\"line\">#### the mathematics of rubik&#x27;s cube</span><br><span class=\"line\"></span><br><span class=\"line\">#### Dijkstra 算法</span><br><span class=\"line\"></span><br><span class=\"line\">正确性证明？</span><br><span class=\"line\"></span><br><span class=\"line\">多边形</span><br><span class=\"line\"></span><br><span class=\"line\">差分约束问题 线性规划问题 max \\sum d 要求比 dijkstra 更加严苛？</span><br><span class=\"line\"></span><br><span class=\"line\">Gorubi </span><br><span class=\"line\"></span><br><span class=\"line\">最短路的话线性规划没有 dijkstra 更加优</span><br><span class=\"line\"></span><br><span class=\"line\">A* 算法？</span><br><span class=\"line\"></span><br><span class=\"line\">#### 二叉树在区间上？</span><br><span class=\"line\"></span><br><span class=\"line\">维护直接的 Rank 感觉代价过于高，因为每一次删除和插入都要把其余元素都改变一次，所以我们不直接维护 Rank。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">二叉树序列化？https://zhuanlan.zhihu.com/p/26418233</span><br><span class=\"line\"></span><br><span class=\"line\">#### 线段相交的问题</span><br><span class=\"line\"></span><br><span class=\"line\">两个结构：</span><br><span class=\"line\">1. 处理事件的优先队列(关键位置停下来，遇到了水平线段的左端点，遇到了水平线段的右端点，遇到了竖直线段)(需要使用一个二叉树维护水平线段，包括水平竖直关系)(水平线段的 y 高度使用二叉树维护了？树套树？)</span><br><span class=\"line\">2. 维护扫描的每个关键位置的全序列表</span><br><span class=\"line\"></span><br><span class=\"line\">#### kd 树</span><br><span class=\"line\"></span><br><span class=\"line\">grid 2d tree</span><br><span class=\"line\">quadtree(四叉树，每一个格子一分为 4) bsptree(每一次有一个平面，对于所在的平面二分，在二维的情况下就是直线)</span><br><span class=\"line\"></span><br><span class=\"line\">上面的结构，除了 grid 的应用都是很多的。各自在不同的应用场景下使用。</span><br><span class=\"line\"></span><br><span class=\"line\">kd 树其实是 bst 树的延申。可是很多时候一维数据是不够的，很多情况都是高维的东西。在机器学习中应用也很多。</span><br><span class=\"line\">ray tracing</span><br><span class=\"line\">2d range serach</span><br><span class=\"line\"></span><br><span class=\"line\">从乱序中在 O(n) 的时间复杂度下找出中位数。</span><br><span class=\"line\"></span><br><span class=\"line\">1. 每一刀下去，都是将矩形分为两个部分。</span><br><span class=\"line\">2. 奇偶相间，第一层竖线划分，第二层就是水平划分。(优化就是把点很紧密的包在一块？)</span><br><span class=\"line\"></span><br><span class=\"line\">nth_element 严格 O(n) 查找中位数</span><br><span class=\"line\"></span><br><span class=\"line\">#### 跳表 Skip List</span><br><span class=\"line\"></span><br><span class=\"line\">跳表是相对年轻的一个数据结构，1990 年由 Bill Pugh 提出。</span><br><span class=\"line\">我们需要区分一下数据域和指针域</span><br><span class=\"line\">https://www.cnblogs.com/bigsai/p/14193225.html</span><br><span class=\"line\"></span><br><span class=\"line\">#### KMP</span><br><span class=\"line\"></span><br><span class=\"line\">前缀和后缀的问题</span><br><span class=\"line\"></span><br><span class=\"line\">BM 算法？</span><br><span class=\"line\"></span><br><span class=\"line\">DFA</span><br><span class=\"line\"></span><br><span class=\"line\">#### 并查集(Union-find)</span><br><span class=\"line\"></span><br><span class=\"line\">虽然并查集的代码是最少的一个，但是确实非常有用的。它可以解决**等价类**相关的问题。</span><br><span class=\"line\"></span><br><span class=\"line\">link-by-size 按照大小合并，此时最高高度不超过 log n</span><br><span class=\"line\">当然也有按照 rank(height)高度合并。</span><br><span class=\"line\"></span><br><span class=\"line\">还有路径压缩(path compression)</span><br><span class=\"line\"></span><br><span class=\"line\">无路径压缩的时候，复杂度是 $m \\log n$</span><br><span class=\"line\">有路径压缩的时候，复杂度是 $m \\alpha (m, n)$</span><br><span class=\"line\">其中，$\\alpha$ 是反阿克曼函数。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 图</span><br><span class=\"line\"></span><br><span class=\"line\">每一个节点有 in 和 out 两个邻接表</span><br><span class=\"line\"></span><br><span class=\"line\">矩阵的形式存储的时候，可能并行化运算的时候更加容易。</span><br><span class=\"line\"></span><br><span class=\"line\">prim 求最小生成树</span><br><span class=\"line\"></span><br><span class=\"line\">cut 割</span><br><span class=\"line\"></span><br><span class=\"line\">割中最小权值的边一定出现在最小生成树上 证明了 Prim 的正确性？</span><br><span class=\"line\"></span><br><span class=\"line\">### 作业</span><br><span class=\"line\"></span><br><span class=\"line\">1. 手写一个 List</span><br><span class=\"line\"></span><br><span class=\"line\">见 `List.cpp` `LinkList.h` `LinkList.cpp` </span><br><span class=\"line\">其中，`List.cpp` 将 Node 和 List 两个类分开写了，所以在 List 中使用 Node 的时候要写成 `Node&lt;T&gt;*` 的形式。</span><br><span class=\"line\">但是在 `LinkList.h` 中，将 Node 写在了 List 类里面，此时就不需要在 Node 后面额外加 `&lt;T&gt;` 了，这种形式也是我们更加推荐的。</span><br><span class=\"line\"></span><br><span class=\"line\">2. 手写一个面向对象的快速排序</span><br><span class=\"line\">`quick_sort.cpp` 是一个递归版本的，但是我们一般不鼓励写递归，会比较慢</span><br><span class=\"line\">其中，需要注意`函数对象`的写法。</span><br><span class=\"line\"></span><br><span class=\"line\">非递归版本：</span><br><span class=\"line\">**双指针前移法**</span><br><span class=\"line\">感觉很强，短小精悍</span><br><span class=\"line\">见 `QuickSortNor.cpp`</span><br><span class=\"line\">使用自己手写的栈，实现了对于类的非递归版本的快速排序。</span><br><span class=\"line\"></span><br><span class=\"line\">3.  </span><br><span class=\"line\">&lt;!-- 基于自己写的链表</span><br><span class=\"line\">实现堆栈</span><br><span class=\"line\">放在不同的文件中</span><br><span class=\"line\">想规范一下大家写代码习惯 --&gt;</span><br><span class=\"line\">在这次的作业中，注意：</span><br><span class=\"line\">我们在使用了模板类的 LinkList 中添加重载输出的友元函数。因为我们毕竟添加的是一个友元函数，是一个函数，所以我们需要在 LinkList 中再写一个 template&lt;class E&gt;</span><br></pre></td></tr></table></figure>\n<p>template<class U><br>friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const LinkList<U>&amp; list);<br>```<br>其中，ostream 是一种返回类型。</p>\n</li>\n<li></li>\n</ol>\n<ul>\n<li>以非递归的形式实现汉诺塔，并且尽量少内存。<br>见 <code>Hanoi.cpp</code></li>\n<li>写最大公约数递推的程序。给定两个整数，写出最大公约数的标准形式，d = ax + by，x y 可能是负数 我们规定 |x| &lt; |y| 此时取值是唯一的。<br>见 <code>exgcd.cpp</code><br>上面的扩展欧几里得是递归实现的，但是我们还是追求非递归版本，讲解参考下面的博客：<br><a href=\"https://www.cnblogs.com/zbhfz/p/11267438.html\">https://www.cnblogs.com/zbhfz/p/11267438.html</a>\n</li>\n</ul>\n<ol>\n<li>非递归全排列<br>康托展开<br>非递归，根据排列规律输出所有的排列</li>\n</ol>\n<p>见 <code>CantorExpansion.cpp</code> <code>permutation.cpp</code> <code>next_permutation.cpp</code> </p>\n<ol>\n<li><p>求斐波那契数列通项<br>特征根法怎么来的呢？<br>人们发现特征根对于分解递推式子是有帮助的<br>对于一个具体的 n 输出 F_n<br>矩阵加速递推<br>见 <code>Fibonacci.cpp</code></p>\n</li>\n<li><p>写一写二叉树的数据结构，支持几种遍历方式<br>层次 先序 中序 后序 每一个节点都不保存父亲节点 可以使用堆栈来实现 不要递归</p>\n</li>\n</ol>\n<p>如果给出了不同遍历方式得到的结果，如何获得原来树的结构？</p>\n<p>二叉树有一个函数，传入两个字符串序列，是不是都能恢复成原来的二叉树结构？最后输出括号表示方式的形式。</p>\n<p>见 <code>ParseTreeSequence.cpp</code> 和 <code>GetTreeOrderNor.cpp</code></p>\n<p>还有一种比较简洁的方式可以参考 于老师代码中的 <code>parseTree.cpp</code></p>\n<ol>\n<li>如何形成中序遍历意义下的线索二叉树(双向的)<br>并且用自己的线索二叉树再次实现双向遍历</li>\n</ol>\n<p>前序和后序不完美</p>\n<p>线索二叉树的必要？历史的产物？</p>\n<ol>\n<li>自己搜索霍夫曼树的题目</li>\n</ol>\n<p>多叉树到二叉树的转化？</p>\n<p>Weighted Path Length of Tree, WPL</p>\n<p>中位数寻找？TODO</p>\n<p>为什么需要将 友元函数的定义直接写进去 ？ TODO</p>\n<ol>\n<li><p>了解一下 Fibonacci 堆，有精力的同学可以尝试实现。</p>\n</li>\n<li><p>实现一个左偏堆</p>\n</li>\n<li><p>写一个 AVL 维护平衡，支持插入删除查找</p>\n</li>\n<li><p>R G B 非递归扫描？搜索如何存储路径状态？(直接将一个 vector 作为参数传入)</p>\n</li>\n<li><p>实现 Treap Splay FHQTreap ?（附加）</p>\n</li>\n<li><p>魔方？rubik’s cube?</p>\n</li>\n<li><p>若干不相交的多边形，输出从多边形外面一点到外面另一点的最短路径。</p>\n</li>\n<li><p>尝试完善代码，为二叉树每一个节点添加 size，同时提供一个接口，返回一个节点的 rank。</p>\n</li>\n<li><p>写一个 kd 树代码，支持最近邻的查询，查找一个框框有多少点？输入 n 个点，输出就是求最近的点，维护一个 kd 树的类，需要的基本行为还是最好支持一下，不过我们最关心的还是最近点。</p>\n</li>\n<li><p>快速排序进阶。多种排序方式组合实现一个高效的快速排序。<br>使用快速排序(在其函数上进行修改)实现线性查找元素第 k 小。<br>荷兰旗问题？</p>\n</li>\n<li><p>给定若干竖直和水平的随机长度的线段，并且保证一个 y 坐标或者一个 x 坐标下只有一条线段，求这些线段的交点个数。</p>\n</li>\n<li><p>最长公共子序列</p>\n</li>\n<li><p>bitset 求解高维偏序问题</p>\n</li>\n<li><p>k 短路问题</p>\n</li>\n<li><p>完成 KMP 算法</p>\n</li>\n<li><p>并查集实现 鼓励大家实现基于 rank 的 union，希望并查集中有路径压缩的功能（不需要新写一个函数，只需要在 find 时顺便修改）。</p>\n</li>\n<li><p>实现 Prim 算法</p>\n</li>\n</ol>\n"},{"title":"快速排序的几种实现","date":"2023-09-17T14:02:43.000Z","description":"the extension of sort implement.","_content":"#### 双指针前移法\n```\n#include <iostream>\n#include <vector>\n#include <stack>\nusing namespace std;\n\nconst int N = 1e5 + 5;\nint n;\n\nint partition(vector<int>& v, int left, int right) {\n\tint pre = left;\n\tint cur = pre + 1;\n\tint key = v[left];\n\twhile (cur <= right) {\n\t\tif (v[cur] < key && ++pre != cur) swap(v[cur], v[pre]);\n\t\t++cur;\n\t}\n\tswap(v[left], v[pre]); // 将基准元素放回正确的位置\n\treturn pre;\n}\n\nvoid quickSort(vector<int>& v, int left, int right) {\n\tstack<int> s;\n\ts.push(left);\n\ts.push(right);\n\twhile (!s.empty()) {\n\t\tint r = s.top();\n\t\ts.pop();\n\t\tint l = s.top();\n\t\ts.pop();\n\t\tif (l >= r) continue;\n\t\tint boundary = partition(v, l, r);\n\t\ts.push(l);\n\t\ts.push(boundary - 1);\n\t\ts.push(boundary + 1);\n\t\ts.push(r);\n\t}\n} \n\nint main() {\n\tcin >> n;\n\tvector<int> v;\t\n\tint x;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tcin >> x;\n\t\tv.push_back(x);\n\t}\t\n\tquickSort(v, 0, n - 1);\n\tfor (auto element : v) {\n\t\tcout << element << \" \";\n\t}\n\treturn 0;\n}\n```\n\n","source":"_posts/快速排序的几种实现.md","raw":"---\ntitle: 快速排序的几种实现\ndate: 2023-09-17 22:02:43\ntags: Data Structure\ndescription: the extension of sort implement. \n---\n#### 双指针前移法\n```\n#include <iostream>\n#include <vector>\n#include <stack>\nusing namespace std;\n\nconst int N = 1e5 + 5;\nint n;\n\nint partition(vector<int>& v, int left, int right) {\n\tint pre = left;\n\tint cur = pre + 1;\n\tint key = v[left];\n\twhile (cur <= right) {\n\t\tif (v[cur] < key && ++pre != cur) swap(v[cur], v[pre]);\n\t\t++cur;\n\t}\n\tswap(v[left], v[pre]); // 将基准元素放回正确的位置\n\treturn pre;\n}\n\nvoid quickSort(vector<int>& v, int left, int right) {\n\tstack<int> s;\n\ts.push(left);\n\ts.push(right);\n\twhile (!s.empty()) {\n\t\tint r = s.top();\n\t\ts.pop();\n\t\tint l = s.top();\n\t\ts.pop();\n\t\tif (l >= r) continue;\n\t\tint boundary = partition(v, l, r);\n\t\ts.push(l);\n\t\ts.push(boundary - 1);\n\t\ts.push(boundary + 1);\n\t\ts.push(r);\n\t}\n} \n\nint main() {\n\tcin >> n;\n\tvector<int> v;\t\n\tint x;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tcin >> x;\n\t\tv.push_back(x);\n\t}\t\n\tquickSort(v, 0, n - 1);\n\tfor (auto element : v) {\n\t\tcout << element << \" \";\n\t}\n\treturn 0;\n}\n```\n\n","slug":"快速排序的几种实现","published":1,"updated":"2023-11-12T10:54:08.850Z","_id":"clov7szod00155oogb5qua40k","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"双指针前移法\"><a href=\"#双指针前移法\" class=\"headerlink\" title=\"双指针前移法\"></a>双指针前移法</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;stack&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">const int N = 1e5 + 5;</span><br><span class=\"line\">int n;</span><br><span class=\"line\"></span><br><span class=\"line\">int partition(vector&lt;int&gt;&amp; v, int left, int right) &#123;</span><br><span class=\"line\">\tint pre = left;</span><br><span class=\"line\">\tint cur = pre + 1;</span><br><span class=\"line\">\tint key = v[left];</span><br><span class=\"line\">\twhile (cur &lt;= right) &#123;</span><br><span class=\"line\">\t\tif (v[cur] &lt; key &amp;&amp; ++pre != cur) swap(v[cur], v[pre]);</span><br><span class=\"line\">\t\t++cur;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tswap(v[left], v[pre]); // 将基准元素放回正确的位置</span><br><span class=\"line\">\treturn pre;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void quickSort(vector&lt;int&gt;&amp; v, int left, int right) &#123;</span><br><span class=\"line\">\tstack&lt;int&gt; s;</span><br><span class=\"line\">\ts.push(left);</span><br><span class=\"line\">\ts.push(right);</span><br><span class=\"line\">\twhile (!s.empty()) &#123;</span><br><span class=\"line\">\t\tint r = s.top();</span><br><span class=\"line\">\t\ts.pop();</span><br><span class=\"line\">\t\tint l = s.top();</span><br><span class=\"line\">\t\ts.pop();</span><br><span class=\"line\">\t\tif (l &gt;= r) continue;</span><br><span class=\"line\">\t\tint boundary = partition(v, l, r);</span><br><span class=\"line\">\t\ts.push(l);</span><br><span class=\"line\">\t\ts.push(boundary - 1);</span><br><span class=\"line\">\t\ts.push(boundary + 1);</span><br><span class=\"line\">\t\ts.push(r);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\tvector&lt;int&gt; v;\t</span><br><span class=\"line\">\tint x;</span><br><span class=\"line\">\tfor (int i = 1; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\tcin &gt;&gt; x;</span><br><span class=\"line\">\t\tv.push_back(x);</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\tquickSort(v, 0, n - 1);</span><br><span class=\"line\">\tfor (auto element : v) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; element &lt;&lt; &quot; &quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"双指针前移法\"><a href=\"#双指针前移法\" class=\"headerlink\" title=\"双指针前移法\"></a>双指针前移法</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;stack&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">const int N = 1e5 + 5;</span><br><span class=\"line\">int n;</span><br><span class=\"line\"></span><br><span class=\"line\">int partition(vector&lt;int&gt;&amp; v, int left, int right) &#123;</span><br><span class=\"line\">\tint pre = left;</span><br><span class=\"line\">\tint cur = pre + 1;</span><br><span class=\"line\">\tint key = v[left];</span><br><span class=\"line\">\twhile (cur &lt;= right) &#123;</span><br><span class=\"line\">\t\tif (v[cur] &lt; key &amp;&amp; ++pre != cur) swap(v[cur], v[pre]);</span><br><span class=\"line\">\t\t++cur;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tswap(v[left], v[pre]); // 将基准元素放回正确的位置</span><br><span class=\"line\">\treturn pre;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void quickSort(vector&lt;int&gt;&amp; v, int left, int right) &#123;</span><br><span class=\"line\">\tstack&lt;int&gt; s;</span><br><span class=\"line\">\ts.push(left);</span><br><span class=\"line\">\ts.push(right);</span><br><span class=\"line\">\twhile (!s.empty()) &#123;</span><br><span class=\"line\">\t\tint r = s.top();</span><br><span class=\"line\">\t\ts.pop();</span><br><span class=\"line\">\t\tint l = s.top();</span><br><span class=\"line\">\t\ts.pop();</span><br><span class=\"line\">\t\tif (l &gt;= r) continue;</span><br><span class=\"line\">\t\tint boundary = partition(v, l, r);</span><br><span class=\"line\">\t\ts.push(l);</span><br><span class=\"line\">\t\ts.push(boundary - 1);</span><br><span class=\"line\">\t\ts.push(boundary + 1);</span><br><span class=\"line\">\t\ts.push(r);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\tvector&lt;int&gt; v;\t</span><br><span class=\"line\">\tint x;</span><br><span class=\"line\">\tfor (int i = 1; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\tcin &gt;&gt; x;</span><br><span class=\"line\">\t\tv.push_back(x);</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\tquickSort(v, 0, n - 1);</span><br><span class=\"line\">\tfor (auto element : v) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; element &lt;&lt; &quot; &quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"差分方程模型","date":"2023-08-24T02:37:05.000Z","description":"The key record of mathematical modeling.","mathjax":true,"_content":"> 在连续系统里，我们用常微分方程表示时域；\n> 而在离散系统里，由于输入 | 输出都是离散信号，微分失去了意义，所以用差分计算。\n\n设有未知序列 $\\{x_n\\}$，称 $F(n;x_n,x_{n + 1}, ..., x_{n + k}) = 0$ 为 k 阶差分方程。\n\n关于差分方程的解，可以参考文章 https://zhuanlan.zhihu.com/p/385787482 \n\n#### 金融问题中的差分方程模型\n\n现在有一笔 p 万元的贷款，贷款期是 n 年，月利率是 r，采用等额还款的方式逐月偿还，计算每月的还款数。\n设 k 个月后，欠额为 $A_k$，每月还款 m 元，则有 $A_{k + 1} = (1 +r)A_k - m$\n\n#### 养老保险模型\n\n设 k 个月后所交资金以及利息总和为 $F_k$，则有 $F_k = (1 + r)F_{k - 1} + p, k <= N$ 和 $F_k = (1 +r)F_{k - 1} - q, N < k <= M$，N 个月后，不再交钱，只拿钱。\n\n#### 市场经济中的蛛网模型\n\n在自由竞争的社会中，很多领域会出现 **循环波动** 的现象，比如说自由市场上商品的价格。\n将时间离散化为时段，一个时期相当于商品的一个生产周期。设 k 时段商品数量为 $x_k$，商品价格为 $y_k$\n\n同一时段商品的价格取决于该段商品的数量，$y_k = f(x_k)$，称为需求函数，我们自然地认为这个函数是单调下降函数。\n\n下一段商品的数量取决于上一个时段的商品价格，$x_{k + 1} = g(y_k)$，称为供应函数，假设为单调上升函数。\n\n在进行市场经济分析中，f 取决于消费者对于某种产品的需求程度以及消费水平，g 取决于生产能力和管理水平。\n\n两个曲线的交点 $P(x_0, y_0)$ 处，$|f'(x_0)| < |g'(x_0)|$ 时，P 点稳定，反之不稳定。\n\n设 $|f'(x_0)| = \\alpha, |g'(y_0)| = \\frac{1}{\\beta}$，在 P 点附近取 $y_k - y_0 = -\\alpha(x_k - x_0), x_{k + 1} - x_0 = \\beta(y_k - y_0)$，消去 $y_k$，得到 $x_k$ 的递推式，可以求出通项，求极限和上面的条件等价。\n\n#### 简单的种群增长模型\n\n利用了矩阵的特征方程求解。对角化或者化为若尔当标准型。\n\n","source":"_posts/差分方程模型.md","raw":"---\ntitle: 差分方程模型\ndate: 2023-08-24 10:37:05\ntags: Mathematic\ndescription: The key record of mathematical modeling. \nmathjax: true\n---\n> 在连续系统里，我们用常微分方程表示时域；\n> 而在离散系统里，由于输入 | 输出都是离散信号，微分失去了意义，所以用差分计算。\n\n设有未知序列 $\\{x_n\\}$，称 $F(n;x_n,x_{n + 1}, ..., x_{n + k}) = 0$ 为 k 阶差分方程。\n\n关于差分方程的解，可以参考文章 https://zhuanlan.zhihu.com/p/385787482 \n\n#### 金融问题中的差分方程模型\n\n现在有一笔 p 万元的贷款，贷款期是 n 年，月利率是 r，采用等额还款的方式逐月偿还，计算每月的还款数。\n设 k 个月后，欠额为 $A_k$，每月还款 m 元，则有 $A_{k + 1} = (1 +r)A_k - m$\n\n#### 养老保险模型\n\n设 k 个月后所交资金以及利息总和为 $F_k$，则有 $F_k = (1 + r)F_{k - 1} + p, k <= N$ 和 $F_k = (1 +r)F_{k - 1} - q, N < k <= M$，N 个月后，不再交钱，只拿钱。\n\n#### 市场经济中的蛛网模型\n\n在自由竞争的社会中，很多领域会出现 **循环波动** 的现象，比如说自由市场上商品的价格。\n将时间离散化为时段，一个时期相当于商品的一个生产周期。设 k 时段商品数量为 $x_k$，商品价格为 $y_k$\n\n同一时段商品的价格取决于该段商品的数量，$y_k = f(x_k)$，称为需求函数，我们自然地认为这个函数是单调下降函数。\n\n下一段商品的数量取决于上一个时段的商品价格，$x_{k + 1} = g(y_k)$，称为供应函数，假设为单调上升函数。\n\n在进行市场经济分析中，f 取决于消费者对于某种产品的需求程度以及消费水平，g 取决于生产能力和管理水平。\n\n两个曲线的交点 $P(x_0, y_0)$ 处，$|f'(x_0)| < |g'(x_0)|$ 时，P 点稳定，反之不稳定。\n\n设 $|f'(x_0)| = \\alpha, |g'(y_0)| = \\frac{1}{\\beta}$，在 P 点附近取 $y_k - y_0 = -\\alpha(x_k - x_0), x_{k + 1} - x_0 = \\beta(y_k - y_0)$，消去 $y_k$，得到 $x_k$ 的递推式，可以求出通项，求极限和上面的条件等价。\n\n#### 简单的种群增长模型\n\n利用了矩阵的特征方程求解。对角化或者化为若尔当标准型。\n\n","slug":"差分方程模型","published":1,"updated":"2023-08-24T08:41:45.605Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szod00175oog15dh58oy","content":"<blockquote>\n<p>在连续系统里，我们用常微分方程表示时域；<br>而在离散系统里，由于输入 | 输出都是离散信号，微分失去了意义，所以用差分计算。</p>\n</blockquote>\n<p>设有未知序列 $\\{x_n\\}$，称 $F(n;x_n,x_{n + 1}, …, x_{n + k}) = 0$ 为 k 阶差分方程。</p>\n<p>关于差分方程的解，可以参考文章 <a href=\"https://zhuanlan.zhihu.com/p/385787482\">https://zhuanlan.zhihu.com/p/385787482</a> </p>\n<h4 id=\"金融问题中的差分方程模型\"><a href=\"#金融问题中的差分方程模型\" class=\"headerlink\" title=\"金融问题中的差分方程模型\"></a>金融问题中的差分方程模型</h4><p>现在有一笔 p 万元的贷款，贷款期是 n 年，月利率是 r，采用等额还款的方式逐月偿还，计算每月的还款数。<br>设 k 个月后，欠额为 $A_k$，每月还款 m 元，则有 $A_{k + 1} = (1 +r)A_k - m$</p>\n<h4 id=\"养老保险模型\"><a href=\"#养老保险模型\" class=\"headerlink\" title=\"养老保险模型\"></a>养老保险模型</h4><p>设 k 个月后所交资金以及利息总和为 $F_k$，则有 $F_k = (1 + r)F_{k - 1} + p, k &lt;= N$ 和 $F_k = (1 +r)F_{k - 1} - q, N &lt; k &lt;= M$，N 个月后，不再交钱，只拿钱。</p>\n<h4 id=\"市场经济中的蛛网模型\"><a href=\"#市场经济中的蛛网模型\" class=\"headerlink\" title=\"市场经济中的蛛网模型\"></a>市场经济中的蛛网模型</h4><p>在自由竞争的社会中，很多领域会出现 <strong>循环波动</strong> 的现象，比如说自由市场上商品的价格。<br>将时间离散化为时段，一个时期相当于商品的一个生产周期。设 k 时段商品数量为 $x_k$，商品价格为 $y_k$</p>\n<p>同一时段商品的价格取决于该段商品的数量，$y_k = f(x_k)$，称为需求函数，我们自然地认为这个函数是单调下降函数。</p>\n<p>下一段商品的数量取决于上一个时段的商品价格，$x_{k + 1} = g(y_k)$，称为供应函数，假设为单调上升函数。</p>\n<p>在进行市场经济分析中，f 取决于消费者对于某种产品的需求程度以及消费水平，g 取决于生产能力和管理水平。</p>\n<p>两个曲线的交点 $P(x_0, y_0)$ 处，$|f’(x_0)| &lt; |g’(x_0)|$ 时，P 点稳定，反之不稳定。</p>\n<p>设 $|f’(x_0)| = \\alpha, |g’(y_0)| = \\frac{1}{\\beta}$，在 P 点附近取 $y_k - y_0 = -\\alpha(x_k - x_0), x_{k + 1} - x_0 = \\beta(y_k - y_0)$，消去 $y_k$，得到 $x_k$ 的递推式，可以求出通项，求极限和上面的条件等价。</p>\n<h4 id=\"简单的种群增长模型\"><a href=\"#简单的种群增长模型\" class=\"headerlink\" title=\"简单的种群增长模型\"></a>简单的种群增长模型</h4><p>利用了矩阵的特征方程求解。对角化或者化为若尔当标准型。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在连续系统里，我们用常微分方程表示时域；<br>而在离散系统里，由于输入 | 输出都是离散信号，微分失去了意义，所以用差分计算。</p>\n</blockquote>\n<p>设有未知序列 $\\{x_n\\}$，称 $F(n;x_n,x_{n + 1}, …, x_{n + k}) = 0$ 为 k 阶差分方程。</p>\n<p>关于差分方程的解，可以参考文章 <a href=\"https://zhuanlan.zhihu.com/p/385787482\">https://zhuanlan.zhihu.com/p/385787482</a> </p>\n<h4 id=\"金融问题中的差分方程模型\"><a href=\"#金融问题中的差分方程模型\" class=\"headerlink\" title=\"金融问题中的差分方程模型\"></a>金融问题中的差分方程模型</h4><p>现在有一笔 p 万元的贷款，贷款期是 n 年，月利率是 r，采用等额还款的方式逐月偿还，计算每月的还款数。<br>设 k 个月后，欠额为 $A_k$，每月还款 m 元，则有 $A_{k + 1} = (1 +r)A_k - m$</p>\n<h4 id=\"养老保险模型\"><a href=\"#养老保险模型\" class=\"headerlink\" title=\"养老保险模型\"></a>养老保险模型</h4><p>设 k 个月后所交资金以及利息总和为 $F_k$，则有 $F_k = (1 + r)F_{k - 1} + p, k &lt;= N$ 和 $F_k = (1 +r)F_{k - 1} - q, N &lt; k &lt;= M$，N 个月后，不再交钱，只拿钱。</p>\n<h4 id=\"市场经济中的蛛网模型\"><a href=\"#市场经济中的蛛网模型\" class=\"headerlink\" title=\"市场经济中的蛛网模型\"></a>市场经济中的蛛网模型</h4><p>在自由竞争的社会中，很多领域会出现 <strong>循环波动</strong> 的现象，比如说自由市场上商品的价格。<br>将时间离散化为时段，一个时期相当于商品的一个生产周期。设 k 时段商品数量为 $x_k$，商品价格为 $y_k$</p>\n<p>同一时段商品的价格取决于该段商品的数量，$y_k = f(x_k)$，称为需求函数，我们自然地认为这个函数是单调下降函数。</p>\n<p>下一段商品的数量取决于上一个时段的商品价格，$x_{k + 1} = g(y_k)$，称为供应函数，假设为单调上升函数。</p>\n<p>在进行市场经济分析中，f 取决于消费者对于某种产品的需求程度以及消费水平，g 取决于生产能力和管理水平。</p>\n<p>两个曲线的交点 $P(x_0, y_0)$ 处，$|f’(x_0)| &lt; |g’(x_0)|$ 时，P 点稳定，反之不稳定。</p>\n<p>设 $|f’(x_0)| = \\alpha, |g’(y_0)| = \\frac{1}{\\beta}$，在 P 点附近取 $y_k - y_0 = -\\alpha(x_k - x_0), x_{k + 1} - x_0 = \\beta(y_k - y_0)$，消去 $y_k$，得到 $x_k$ 的递推式，可以求出通项，求极限和上面的条件等价。</p>\n<h4 id=\"简单的种群增长模型\"><a href=\"#简单的种群增长模型\" class=\"headerlink\" title=\"简单的种群增长模型\"></a>简单的种群增长模型</h4><p>利用了矩阵的特征方程求解。对角化或者化为若尔当标准型。</p>\n"},{"title":"斐波那契堆","date":"2023-10-09T09:20:20.000Z","description":"the key record of Fibonacci heap.","_content":"\n斐波那契堆数据结构有两种用途。\n\n1. 支持一系列操作，这些操作构成了所谓的「可合并堆」\n2. 斐波那契的一系列操作可以在常数时间内完成，这使得这种数据结构非常适合需要频繁调用这些操作的应用。\n\n#### 优势与劣势\n\n斐波那契堆有着更好的均摊时间复杂度，但是最坏情况下的时间复杂度会比较高。在一些很多条边的稠密图中，每一次调用 DECREASE-KEY 需要 O(1) 此时比普通的二项堆是要好一些的。\n\n但是从实际角度出发，除了某些需要管理大量数据的应用以外，对于大多数应用，斐波那契堆的常数因子和编程复杂性使得它比普通的二项堆或者(K 项堆)并不那么适用。\n\n#### 插入操作\n\n斐波那契堆的根链表是「双向链表」，我们将 min 节点看作为双向链表的表头。后面插入节点的时候就是将节点插入到 min 节点之前，也就是双向链表的末尾。\n\n#### 合并操作\n\n合并操作就是将一个堆的根链表插入到另一个堆的根链表上。\n\n#### 减小节点值\n\n难点在于，如果我们减小节点值后，破坏了「最小堆」的性质，应该如何维护呢？\n\n1. 首先，将「被减小节点」它所在的最小堆剥离出来，然后将该节点或者其子树(如果有的话)关联到根链中。\n2. 对于「被减少节点」的原父节点进行「级联剪切」。所谓级联剪切，就是在被减小节点破坏了最小堆性质，并且被切下来以后，再从它的父节点递归进行级联剪切的操作。\n   级联剪切具体地：如果父节点的 marked 为 false，赋值为 true，然后退出。\n   否则，将父节点也从最小堆中切下来，继续递归。\n   marked标记的作用就是用来标记\"该节点的子节点是否有被删除过\"，它的作用是来实现级联剪切。而级联剪切的真正目的是为了防止\"最小堆\"由二叉树演化成链表。\n\n#### 增加节点值\n\n\n\n​\t\n\n#### 代码\n\n```C++\n#ifndef FIBONACCI_HPP\n#define FIBONACCI_HPP\n\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <cmath>\n\ntemplate<class T>\nclass FibonacciHeapNode {\npublic:\n    T value;\n    int degree;\n    bool marked;\n    FibonacciHeapNode<T>* parent;\n    FibonacciHeapNode<T>* child;\n    FibonacciHeapNode<T>* nxt;\n    FibonacciHeapNode<T>* prev;\n    FibonacciHeapNode(T val)\n        : value(val)\n        , degree(0)\n        , marked(false)\n        , parent(nullptr)\n        , child(nullptr)\n        , nxt(this)\n        , prev(this) {}\n};\n\ntemplate<class T>\nclass FibonacciHeap {\n    public:\n        FibonacciHeapNode<T>* minNode; \n        // 外部访问接口\n        void insert(T);\n        void pop();\n        FibonacciHeapNode<T>* extractMin();\n        FibonacciHeap()\n            : minNode(nullptr)\n            , size(0)\n            , maxDegree(0) {}\n    private: // 内部实现细节\n        int size;\n        int maxDegree;\n        void insertNode(FibonacciHeapNode<T>*);\n        void removeNode(FibonacciHeapNode<T>*);\n        void consolidate();\n        void decrease(FibonacciHeapNode<T>*, T);\n        void cutNode(FibonacciHeapNode<T>*, FibonacciHeapNode<T>*);\n        void cascading(FibonacciHeapNode<T>*);\n};\n\ntemplate<class T>\nvoid FibonacciHeap<T>::insert(T val) {\n    insertNode(new FibonacciHeapNode(val));\n}\n\ntemplate<class T>\nvoid FibonacciHeap<T>::insertNode(FibonacciHeapNode<T>* cur) {\n    if (size == 0) {\n        minNode = cur;\n        maxDegree = 1; // Initialize maxDegree\n        return;\n    } else {\n        cur->prev = minNode->prev;\n        cur->nxt = minNode;\n        minNode->prev->nxt = cur;\n        minNode->prev = cur;\n        if (cur->value < minNode->value) {\n            minNode = cur;\n        }\n    }\n    size++;\n}\n\ntemplate<class T>\nvoid linkAdd(FibonacciHeapNode<T>* x, FibonacciHeapNode<T>* y) {\n    FibonacciHeapNode<T>* temp;\n    temp = x->nxt;\n    x->nxt = y->nxt;\n    y->nxt->nxt = x;\n    y->nxt = temp;\n    temp->prev = y;\n}\n\ntemplate<class T>\nvoid FibonacciHeap<T>::pop() {\n    extractMin();\n}\n\ntemplate<class T>\nvoid FibonacciHeap<T>::removeNode(FibonacciHeapNode<T>* x) {\n    x->prev->nxt = x->nxt;\n    x->nxt->prev = x->prev;\n}\n\ntemplate<class T>\nFibonacciHeap<T>* heapUnion(FibonacciHeap<T>* h1, FibonacciHeap<T>* h2) {\n    FibonacciHeap<T>* temp;\n    if (h1 == nullptr) {\n        return h2;\n    } else if (h2 == nullptr) {\n        return h1;\n    }\n    if (h2->maxDegree > h1->maxDegree) {\n        temp = h1;\n        h1 = h2;\n        h2 = temp;\n    }\n    if (h1->minNode == nullptr) {\n        h1->minNode = h2->minNode;\n        h1->size = h2->size;\n        h1->maxDegree = h2->maxDegree;\n        delete h2;\n    } else if (h2->minNode == nullptr) {\n        delete h2;\n    } else {\n        linkAdd(h1->minNode, h2->minNode);\n        if (h1->minNode->value > h2->minNode->value)\n            h1->minNode = h2->minNode;\n        delete h2;\n    }\n    return h1;\n}\n\ntemplate<class T>\nFibonacciHeapNode<T>* FibonacciHeap<T>::extractMin() {\n    if (minNode == nullptr) return nullptr;\n    FibonacciHeapNode<T>* child = nullptr;\n    FibonacciHeapNode<T>* Min = minNode;\n    while (Min->child != nullptr) {\n        child = Min->child;\n        removeNode(child);\n        if (child->nxt == child)\n            Min->child = nullptr;\n        else \n            Min->child = child->nxt;\n        linkAdd(child, minNode);\n        child->parent = nullptr;\n    }\n    removeNode(Min);\n    if (Min->nxt == Min) {\n        minNode = nullptr;\n    } else {\n        minNode = Min->nxt;\n        consolidate();\n    }\n    --size;\n    return Min;\n}\n\ntemplate<class T>\nvoid FibonacciHeap<T>::consolidate() {\n    int maxDegreePossible = static_cast<int>(log2(size)) + 1;\n    std::vector<FibonacciHeapNode<T>*> degreeTable(maxDegreePossible, nullptr);\n\n    // Iterate through the root list and consolidate nodes with the same degree\n    FibonacciHeapNode<T>* cur = minNode;\n    std::vector<FibonacciHeapNode<T>*> rootsToVisit;\n    do {\n        rootsToVisit.push_back(cur);\n        cur = cur->nxt;\n    } while (cur != minNode);\n\n    for (FibonacciHeapNode<T>* node : rootsToVisit) {\n        int degree = node->degree;\n        while (degreeTable[degree] != nullptr) {\n            FibonacciHeapNode<T>* other = degreeTable[degree];\n            if (node->value > other->value) {\n                // Swap the nodes if necessary\n                FibonacciHeapNode<T>* temp = node;\n                node = other;\n                other = temp;\n            }\n            // Link other as a child of node\n            linkAdd(node, other);\n            degreeTable[degree] = nullptr;\n            degree++;\n        }\n        degreeTable[degree] = node;\n    }\n\n    // Rebuild the root list with consolidated nodes\n    minNode = nullptr;\n    for (int i = 0; i < maxDegreePossible; ++i) {\n        if (degreeTable[i] != nullptr) {\n            if (minNode == nullptr) {\n                minNode = degreeTable[i];\n                minNode->nxt = minNode;\n                minNode->prev = minNode;\n            } else {\n                insertNode(degreeTable[i]);\n            }\n        }\n    }\n}\n\n// template<class T>\n// void FibonacciHeap<T>::decrease(FibonacciHeapNode<T>* cur, T value) {\n//     FibonacciHeapNode<T>* parent;\n//     if (minNode == nullptr || cur == nullptr) return ;\n//     if (value >= cur->value) {\n//         throw std::runtime_error(\"illegal decreasing.\");\n//         return ;\n//     }\n//     cur->value = value;\n//     if (parent != null && cur->value < parent->value) {\n//         cutNode(cur, parent);\n//         cascading(parent);\n//     }\n//     if (cur->value < minNode)\n//         minNode = cur;\n// }\n\n// template<class T>\n// void FibonacciHeap<T>::cutNode(FibonacciHeapNode<T>* cur, FibonacciHeapNode<T>* parent) {\n//     removeNode(cur);\n\n// }\n\n// template<class T>\n// void FibonacciHeap<T>::cascading(FibonacciHeapNode<T>* parent) {\n\n// }\n\n#endif\n\n```\n\n\n\n#### 参考文章\n\nhttps://www.cnblogs.com/skywang12345/p/3659060.html\n算法导论\n\nhttps://www.cnblogs.com/junyuhuang/p/4463758.html\n\nhttps://wangkuiwu.github.io/2013/03/05/fabonacci-cpp/\n\nhttps://blog.csdn.net/u013148167/article/details/54236076\n","source":"_posts/斐波那契堆.md","raw":"---\ntitle: 斐波那契堆\ndate: 2023-10-09 17:20:20\ntags:\ndescription: the key record of Fibonacci heap. \n---\n\n斐波那契堆数据结构有两种用途。\n\n1. 支持一系列操作，这些操作构成了所谓的「可合并堆」\n2. 斐波那契的一系列操作可以在常数时间内完成，这使得这种数据结构非常适合需要频繁调用这些操作的应用。\n\n#### 优势与劣势\n\n斐波那契堆有着更好的均摊时间复杂度，但是最坏情况下的时间复杂度会比较高。在一些很多条边的稠密图中，每一次调用 DECREASE-KEY 需要 O(1) 此时比普通的二项堆是要好一些的。\n\n但是从实际角度出发，除了某些需要管理大量数据的应用以外，对于大多数应用，斐波那契堆的常数因子和编程复杂性使得它比普通的二项堆或者(K 项堆)并不那么适用。\n\n#### 插入操作\n\n斐波那契堆的根链表是「双向链表」，我们将 min 节点看作为双向链表的表头。后面插入节点的时候就是将节点插入到 min 节点之前，也就是双向链表的末尾。\n\n#### 合并操作\n\n合并操作就是将一个堆的根链表插入到另一个堆的根链表上。\n\n#### 减小节点值\n\n难点在于，如果我们减小节点值后，破坏了「最小堆」的性质，应该如何维护呢？\n\n1. 首先，将「被减小节点」它所在的最小堆剥离出来，然后将该节点或者其子树(如果有的话)关联到根链中。\n2. 对于「被减少节点」的原父节点进行「级联剪切」。所谓级联剪切，就是在被减小节点破坏了最小堆性质，并且被切下来以后，再从它的父节点递归进行级联剪切的操作。\n   级联剪切具体地：如果父节点的 marked 为 false，赋值为 true，然后退出。\n   否则，将父节点也从最小堆中切下来，继续递归。\n   marked标记的作用就是用来标记\"该节点的子节点是否有被删除过\"，它的作用是来实现级联剪切。而级联剪切的真正目的是为了防止\"最小堆\"由二叉树演化成链表。\n\n#### 增加节点值\n\n\n\n​\t\n\n#### 代码\n\n```C++\n#ifndef FIBONACCI_HPP\n#define FIBONACCI_HPP\n\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <cmath>\n\ntemplate<class T>\nclass FibonacciHeapNode {\npublic:\n    T value;\n    int degree;\n    bool marked;\n    FibonacciHeapNode<T>* parent;\n    FibonacciHeapNode<T>* child;\n    FibonacciHeapNode<T>* nxt;\n    FibonacciHeapNode<T>* prev;\n    FibonacciHeapNode(T val)\n        : value(val)\n        , degree(0)\n        , marked(false)\n        , parent(nullptr)\n        , child(nullptr)\n        , nxt(this)\n        , prev(this) {}\n};\n\ntemplate<class T>\nclass FibonacciHeap {\n    public:\n        FibonacciHeapNode<T>* minNode; \n        // 外部访问接口\n        void insert(T);\n        void pop();\n        FibonacciHeapNode<T>* extractMin();\n        FibonacciHeap()\n            : minNode(nullptr)\n            , size(0)\n            , maxDegree(0) {}\n    private: // 内部实现细节\n        int size;\n        int maxDegree;\n        void insertNode(FibonacciHeapNode<T>*);\n        void removeNode(FibonacciHeapNode<T>*);\n        void consolidate();\n        void decrease(FibonacciHeapNode<T>*, T);\n        void cutNode(FibonacciHeapNode<T>*, FibonacciHeapNode<T>*);\n        void cascading(FibonacciHeapNode<T>*);\n};\n\ntemplate<class T>\nvoid FibonacciHeap<T>::insert(T val) {\n    insertNode(new FibonacciHeapNode(val));\n}\n\ntemplate<class T>\nvoid FibonacciHeap<T>::insertNode(FibonacciHeapNode<T>* cur) {\n    if (size == 0) {\n        minNode = cur;\n        maxDegree = 1; // Initialize maxDegree\n        return;\n    } else {\n        cur->prev = minNode->prev;\n        cur->nxt = minNode;\n        minNode->prev->nxt = cur;\n        minNode->prev = cur;\n        if (cur->value < minNode->value) {\n            minNode = cur;\n        }\n    }\n    size++;\n}\n\ntemplate<class T>\nvoid linkAdd(FibonacciHeapNode<T>* x, FibonacciHeapNode<T>* y) {\n    FibonacciHeapNode<T>* temp;\n    temp = x->nxt;\n    x->nxt = y->nxt;\n    y->nxt->nxt = x;\n    y->nxt = temp;\n    temp->prev = y;\n}\n\ntemplate<class T>\nvoid FibonacciHeap<T>::pop() {\n    extractMin();\n}\n\ntemplate<class T>\nvoid FibonacciHeap<T>::removeNode(FibonacciHeapNode<T>* x) {\n    x->prev->nxt = x->nxt;\n    x->nxt->prev = x->prev;\n}\n\ntemplate<class T>\nFibonacciHeap<T>* heapUnion(FibonacciHeap<T>* h1, FibonacciHeap<T>* h2) {\n    FibonacciHeap<T>* temp;\n    if (h1 == nullptr) {\n        return h2;\n    } else if (h2 == nullptr) {\n        return h1;\n    }\n    if (h2->maxDegree > h1->maxDegree) {\n        temp = h1;\n        h1 = h2;\n        h2 = temp;\n    }\n    if (h1->minNode == nullptr) {\n        h1->minNode = h2->minNode;\n        h1->size = h2->size;\n        h1->maxDegree = h2->maxDegree;\n        delete h2;\n    } else if (h2->minNode == nullptr) {\n        delete h2;\n    } else {\n        linkAdd(h1->minNode, h2->minNode);\n        if (h1->minNode->value > h2->minNode->value)\n            h1->minNode = h2->minNode;\n        delete h2;\n    }\n    return h1;\n}\n\ntemplate<class T>\nFibonacciHeapNode<T>* FibonacciHeap<T>::extractMin() {\n    if (minNode == nullptr) return nullptr;\n    FibonacciHeapNode<T>* child = nullptr;\n    FibonacciHeapNode<T>* Min = minNode;\n    while (Min->child != nullptr) {\n        child = Min->child;\n        removeNode(child);\n        if (child->nxt == child)\n            Min->child = nullptr;\n        else \n            Min->child = child->nxt;\n        linkAdd(child, minNode);\n        child->parent = nullptr;\n    }\n    removeNode(Min);\n    if (Min->nxt == Min) {\n        minNode = nullptr;\n    } else {\n        minNode = Min->nxt;\n        consolidate();\n    }\n    --size;\n    return Min;\n}\n\ntemplate<class T>\nvoid FibonacciHeap<T>::consolidate() {\n    int maxDegreePossible = static_cast<int>(log2(size)) + 1;\n    std::vector<FibonacciHeapNode<T>*> degreeTable(maxDegreePossible, nullptr);\n\n    // Iterate through the root list and consolidate nodes with the same degree\n    FibonacciHeapNode<T>* cur = minNode;\n    std::vector<FibonacciHeapNode<T>*> rootsToVisit;\n    do {\n        rootsToVisit.push_back(cur);\n        cur = cur->nxt;\n    } while (cur != minNode);\n\n    for (FibonacciHeapNode<T>* node : rootsToVisit) {\n        int degree = node->degree;\n        while (degreeTable[degree] != nullptr) {\n            FibonacciHeapNode<T>* other = degreeTable[degree];\n            if (node->value > other->value) {\n                // Swap the nodes if necessary\n                FibonacciHeapNode<T>* temp = node;\n                node = other;\n                other = temp;\n            }\n            // Link other as a child of node\n            linkAdd(node, other);\n            degreeTable[degree] = nullptr;\n            degree++;\n        }\n        degreeTable[degree] = node;\n    }\n\n    // Rebuild the root list with consolidated nodes\n    minNode = nullptr;\n    for (int i = 0; i < maxDegreePossible; ++i) {\n        if (degreeTable[i] != nullptr) {\n            if (minNode == nullptr) {\n                minNode = degreeTable[i];\n                minNode->nxt = minNode;\n                minNode->prev = minNode;\n            } else {\n                insertNode(degreeTable[i]);\n            }\n        }\n    }\n}\n\n// template<class T>\n// void FibonacciHeap<T>::decrease(FibonacciHeapNode<T>* cur, T value) {\n//     FibonacciHeapNode<T>* parent;\n//     if (minNode == nullptr || cur == nullptr) return ;\n//     if (value >= cur->value) {\n//         throw std::runtime_error(\"illegal decreasing.\");\n//         return ;\n//     }\n//     cur->value = value;\n//     if (parent != null && cur->value < parent->value) {\n//         cutNode(cur, parent);\n//         cascading(parent);\n//     }\n//     if (cur->value < minNode)\n//         minNode = cur;\n// }\n\n// template<class T>\n// void FibonacciHeap<T>::cutNode(FibonacciHeapNode<T>* cur, FibonacciHeapNode<T>* parent) {\n//     removeNode(cur);\n\n// }\n\n// template<class T>\n// void FibonacciHeap<T>::cascading(FibonacciHeapNode<T>* parent) {\n\n// }\n\n#endif\n\n```\n\n\n\n#### 参考文章\n\nhttps://www.cnblogs.com/skywang12345/p/3659060.html\n算法导论\n\nhttps://www.cnblogs.com/junyuhuang/p/4463758.html\n\nhttps://wangkuiwu.github.io/2013/03/05/fabonacci-cpp/\n\nhttps://blog.csdn.net/u013148167/article/details/54236076\n","slug":"斐波那契堆","published":1,"updated":"2023-10-18T03:35:12.933Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szod00195oog4mbletfn","content":"<p>斐波那契堆数据结构有两种用途。</p>\n<ol>\n<li>支持一系列操作，这些操作构成了所谓的「可合并堆」</li>\n<li>斐波那契的一系列操作可以在常数时间内完成，这使得这种数据结构非常适合需要频繁调用这些操作的应用。</li>\n</ol>\n<h4 id=\"优势与劣势\"><a href=\"#优势与劣势\" class=\"headerlink\" title=\"优势与劣势\"></a>优势与劣势</h4><p>斐波那契堆有着更好的均摊时间复杂度，但是最坏情况下的时间复杂度会比较高。在一些很多条边的稠密图中，每一次调用 DECREASE-KEY 需要 O(1) 此时比普通的二项堆是要好一些的。</p>\n<p>但是从实际角度出发，除了某些需要管理大量数据的应用以外，对于大多数应用，斐波那契堆的常数因子和编程复杂性使得它比普通的二项堆或者(K 项堆)并不那么适用。</p>\n<h4 id=\"插入操作\"><a href=\"#插入操作\" class=\"headerlink\" title=\"插入操作\"></a>插入操作</h4><p>斐波那契堆的根链表是「双向链表」，我们将 min 节点看作为双向链表的表头。后面插入节点的时候就是将节点插入到 min 节点之前，也就是双向链表的末尾。</p>\n<h4 id=\"合并操作\"><a href=\"#合并操作\" class=\"headerlink\" title=\"合并操作\"></a>合并操作</h4><p>合并操作就是将一个堆的根链表插入到另一个堆的根链表上。</p>\n<h4 id=\"减小节点值\"><a href=\"#减小节点值\" class=\"headerlink\" title=\"减小节点值\"></a>减小节点值</h4><p>难点在于，如果我们减小节点值后，破坏了「最小堆」的性质，应该如何维护呢？</p>\n<ol>\n<li>首先，将「被减小节点」它所在的最小堆剥离出来，然后将该节点或者其子树(如果有的话)关联到根链中。</li>\n<li>对于「被减少节点」的原父节点进行「级联剪切」。所谓级联剪切，就是在被减小节点破坏了最小堆性质，并且被切下来以后，再从它的父节点递归进行级联剪切的操作。<br>级联剪切具体地：如果父节点的 marked 为 false，赋值为 true，然后退出。<br>否则，将父节点也从最小堆中切下来，继续递归。<br>marked标记的作用就是用来标记”该节点的子节点是否有被删除过”，它的作用是来实现级联剪切。而级联剪切的真正目的是为了防止”最小堆”由二叉树演化成链表。</li>\n</ol>\n<h4 id=\"增加节点值\"><a href=\"#增加节点值\" class=\"headerlink\" title=\"增加节点值\"></a>增加节点值</h4><p>​    </p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> FIBONACCI_HPP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> FIBONACCI_HPP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FibonacciHeapNode</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    T value;</span><br><span class=\"line\">    <span class=\"type\">int</span> degree;</span><br><span class=\"line\">    <span class=\"type\">bool</span> marked;</span><br><span class=\"line\">    FibonacciHeapNode&lt;T&gt;* parent;</span><br><span class=\"line\">    FibonacciHeapNode&lt;T&gt;* child;</span><br><span class=\"line\">    FibonacciHeapNode&lt;T&gt;* nxt;</span><br><span class=\"line\">    FibonacciHeapNode&lt;T&gt;* prev;</span><br><span class=\"line\">    <span class=\"built_in\">FibonacciHeapNode</span>(T val)</span><br><span class=\"line\">        : <span class=\"built_in\">value</span>(val)</span><br><span class=\"line\">        , <span class=\"built_in\">degree</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">        , <span class=\"built_in\">marked</span>(<span class=\"literal\">false</span>)</span><br><span class=\"line\">        , <span class=\"built_in\">parent</span>(<span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">        , <span class=\"built_in\">child</span>(<span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">        , <span class=\"built_in\">nxt</span>(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        , <span class=\"built_in\">prev</span>(<span class=\"keyword\">this</span>) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FibonacciHeap</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        FibonacciHeapNode&lt;T&gt;* minNode; </span><br><span class=\"line\">        <span class=\"comment\">// 外部访问接口</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(T)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"function\">FibonacciHeapNode&lt;T&gt;* <span class=\"title\">extractMin</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"built_in\">FibonacciHeap</span>()</span><br><span class=\"line\">            : <span class=\"built_in\">minNode</span>(<span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">            , <span class=\"built_in\">size</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">            , <span class=\"built_in\">maxDegree</span>(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>: <span class=\"comment\">// 内部实现细节</span></span><br><span class=\"line\">        <span class=\"type\">int</span> size;</span><br><span class=\"line\">        <span class=\"type\">int</span> maxDegree;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insertNode</span><span class=\"params\">(FibonacciHeapNode&lt;T&gt;*)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">removeNode</span><span class=\"params\">(FibonacciHeapNode&lt;T&gt;*)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">consolidate</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">decrease</span><span class=\"params\">(FibonacciHeapNode&lt;T&gt;*, T)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">cutNode</span><span class=\"params\">(FibonacciHeapNode&lt;T&gt;*, FibonacciHeapNode&lt;T&gt;*)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">cascading</span><span class=\"params\">(FibonacciHeapNode&lt;T&gt;*)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> FibonacciHeap&lt;T&gt;::<span class=\"built_in\">insert</span>(T val) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">insertNode</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">FibonacciHeapNode</span>(val));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> FibonacciHeap&lt;T&gt;::<span class=\"built_in\">insertNode</span>(FibonacciHeapNode&lt;T&gt;* cur) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        minNode = cur;</span><br><span class=\"line\">        maxDegree = <span class=\"number\">1</span>; <span class=\"comment\">// Initialize maxDegree</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cur-&gt;prev = minNode-&gt;prev;</span><br><span class=\"line\">        cur-&gt;nxt = minNode;</span><br><span class=\"line\">        minNode-&gt;prev-&gt;nxt = cur;</span><br><span class=\"line\">        minNode-&gt;prev = cur;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cur-&gt;value &lt; minNode-&gt;value) &#123;</span><br><span class=\"line\">            minNode = cur;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">linkAdd</span><span class=\"params\">(FibonacciHeapNode&lt;T&gt;* x, FibonacciHeapNode&lt;T&gt;* y)</span> </span>&#123;</span><br><span class=\"line\">    FibonacciHeapNode&lt;T&gt;* temp;</span><br><span class=\"line\">    temp = x-&gt;nxt;</span><br><span class=\"line\">    x-&gt;nxt = y-&gt;nxt;</span><br><span class=\"line\">    y-&gt;nxt-&gt;nxt = x;</span><br><span class=\"line\">    y-&gt;nxt = temp;</span><br><span class=\"line\">    temp-&gt;prev = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> FibonacciHeap&lt;T&gt;::<span class=\"built_in\">pop</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">extractMin</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> FibonacciHeap&lt;T&gt;::<span class=\"built_in\">removeNode</span>(FibonacciHeapNode&lt;T&gt;* x) &#123;</span><br><span class=\"line\">    x-&gt;prev-&gt;nxt = x-&gt;nxt;</span><br><span class=\"line\">    x-&gt;nxt-&gt;prev = x-&gt;prev;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\">FibonacciHeap&lt;T&gt;* <span class=\"title\">heapUnion</span><span class=\"params\">(FibonacciHeap&lt;T&gt;* h1, FibonacciHeap&lt;T&gt;* h2)</span> </span>&#123;</span><br><span class=\"line\">    FibonacciHeap&lt;T&gt;* temp;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (h1 == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> h2;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (h2 == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> h1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (h2-&gt;maxDegree &gt; h1-&gt;maxDegree) &#123;</span><br><span class=\"line\">        temp = h1;</span><br><span class=\"line\">        h1 = h2;</span><br><span class=\"line\">        h2 = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (h1-&gt;minNode == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        h1-&gt;minNode = h2-&gt;minNode;</span><br><span class=\"line\">        h1-&gt;size = h2-&gt;size;</span><br><span class=\"line\">        h1-&gt;maxDegree = h2-&gt;maxDegree;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> h2;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (h2-&gt;minNode == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> h2;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">linkAdd</span>(h1-&gt;minNode, h2-&gt;minNode);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h1-&gt;minNode-&gt;value &gt; h2-&gt;minNode-&gt;value)</span><br><span class=\"line\">            h1-&gt;minNode = h2-&gt;minNode;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> h2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">FibonacciHeapNode&lt;T&gt;* FibonacciHeap&lt;T&gt;::<span class=\"built_in\">extractMin</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minNode == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    FibonacciHeapNode&lt;T&gt;* child = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    FibonacciHeapNode&lt;T&gt;* Min = minNode;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (Min-&gt;child != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        child = Min-&gt;child;</span><br><span class=\"line\">        <span class=\"built_in\">removeNode</span>(child);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (child-&gt;nxt == child)</span><br><span class=\"line\">            Min-&gt;child = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> </span><br><span class=\"line\">            Min-&gt;child = child-&gt;nxt;</span><br><span class=\"line\">        <span class=\"built_in\">linkAdd</span>(child, minNode);</span><br><span class=\"line\">        child-&gt;parent = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">removeNode</span>(Min);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Min-&gt;nxt == Min) &#123;</span><br><span class=\"line\">        minNode = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        minNode = Min-&gt;nxt;</span><br><span class=\"line\">        <span class=\"built_in\">consolidate</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    --size;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Min;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> FibonacciHeap&lt;T&gt;::<span class=\"built_in\">consolidate</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> maxDegreePossible = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"built_in\">log2</span>(size)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    std::vector&lt;FibonacciHeapNode&lt;T&gt;*&gt; <span class=\"built_in\">degreeTable</span>(maxDegreePossible, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Iterate through the root list and consolidate nodes with the same degree</span></span><br><span class=\"line\">    FibonacciHeapNode&lt;T&gt;* cur = minNode;</span><br><span class=\"line\">    std::vector&lt;FibonacciHeapNode&lt;T&gt;*&gt; rootsToVisit;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        rootsToVisit.<span class=\"built_in\">push_back</span>(cur);</span><br><span class=\"line\">        cur = cur-&gt;nxt;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (cur != minNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (FibonacciHeapNode&lt;T&gt;* node : rootsToVisit) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> degree = node-&gt;degree;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (degreeTable[degree] != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            FibonacciHeapNode&lt;T&gt;* other = degreeTable[degree];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node-&gt;value &gt; other-&gt;value) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Swap the nodes if necessary</span></span><br><span class=\"line\">                FibonacciHeapNode&lt;T&gt;* temp = node;</span><br><span class=\"line\">                node = other;</span><br><span class=\"line\">                other = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// Link other as a child of node</span></span><br><span class=\"line\">            <span class=\"built_in\">linkAdd</span>(node, other);</span><br><span class=\"line\">            degreeTable[degree] = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            degree++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        degreeTable[degree] = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Rebuild the root list with consolidated nodes</span></span><br><span class=\"line\">    minNode = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; maxDegreePossible; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (degreeTable[i] != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (minNode == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">                minNode = degreeTable[i];</span><br><span class=\"line\">                minNode-&gt;nxt = minNode;</span><br><span class=\"line\">                minNode-&gt;prev = minNode;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">insertNode</span>(degreeTable[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// template&lt;class T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// void FibonacciHeap&lt;T&gt;::decrease(FibonacciHeapNode&lt;T&gt;* cur, T value) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     FibonacciHeapNode&lt;T&gt;* parent;</span></span><br><span class=\"line\"><span class=\"comment\">//     if (minNode == nullptr || cur == nullptr) return ;</span></span><br><span class=\"line\"><span class=\"comment\">//     if (value &gt;= cur-&gt;value) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         throw std::runtime_error(&quot;illegal decreasing.&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//         return ;</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//     cur-&gt;value = value;</span></span><br><span class=\"line\"><span class=\"comment\">//     if (parent != null &amp;&amp; cur-&gt;value &lt; parent-&gt;value) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         cutNode(cur, parent);</span></span><br><span class=\"line\"><span class=\"comment\">//         cascading(parent);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//     if (cur-&gt;value &lt; minNode)</span></span><br><span class=\"line\"><span class=\"comment\">//         minNode = cur;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// template&lt;class T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// void FibonacciHeap&lt;T&gt;::cutNode(FibonacciHeapNode&lt;T&gt;* cur, FibonacciHeapNode&lt;T&gt;* parent) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     removeNode(cur);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// template&lt;class T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// void FibonacciHeap&lt;T&gt;::cascading(FibonacciHeapNode&lt;T&gt;* parent) &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h4><p><a href=\"https://www.cnblogs.com/skywang12345/p/3659060.html\">https://www.cnblogs.com/skywang12345/p/3659060.html</a><br>算法导论</p>\n<p><a href=\"https://www.cnblogs.com/junyuhuang/p/4463758.html\">https://www.cnblogs.com/junyuhuang/p/4463758.html</a></p>\n<p><a href=\"https://wangkuiwu.github.io/2013/03/05/fabonacci-cpp/\">https://wangkuiwu.github.io/2013/03/05/fabonacci-cpp/</a></p>\n<p><a href=\"https://blog.csdn.net/u013148167/article/details/54236076\">https://blog.csdn.net/u013148167/article/details/54236076</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>斐波那契堆数据结构有两种用途。</p>\n<ol>\n<li>支持一系列操作，这些操作构成了所谓的「可合并堆」</li>\n<li>斐波那契的一系列操作可以在常数时间内完成，这使得这种数据结构非常适合需要频繁调用这些操作的应用。</li>\n</ol>\n<h4 id=\"优势与劣势\"><a href=\"#优势与劣势\" class=\"headerlink\" title=\"优势与劣势\"></a>优势与劣势</h4><p>斐波那契堆有着更好的均摊时间复杂度，但是最坏情况下的时间复杂度会比较高。在一些很多条边的稠密图中，每一次调用 DECREASE-KEY 需要 O(1) 此时比普通的二项堆是要好一些的。</p>\n<p>但是从实际角度出发，除了某些需要管理大量数据的应用以外，对于大多数应用，斐波那契堆的常数因子和编程复杂性使得它比普通的二项堆或者(K 项堆)并不那么适用。</p>\n<h4 id=\"插入操作\"><a href=\"#插入操作\" class=\"headerlink\" title=\"插入操作\"></a>插入操作</h4><p>斐波那契堆的根链表是「双向链表」，我们将 min 节点看作为双向链表的表头。后面插入节点的时候就是将节点插入到 min 节点之前，也就是双向链表的末尾。</p>\n<h4 id=\"合并操作\"><a href=\"#合并操作\" class=\"headerlink\" title=\"合并操作\"></a>合并操作</h4><p>合并操作就是将一个堆的根链表插入到另一个堆的根链表上。</p>\n<h4 id=\"减小节点值\"><a href=\"#减小节点值\" class=\"headerlink\" title=\"减小节点值\"></a>减小节点值</h4><p>难点在于，如果我们减小节点值后，破坏了「最小堆」的性质，应该如何维护呢？</p>\n<ol>\n<li>首先，将「被减小节点」它所在的最小堆剥离出来，然后将该节点或者其子树(如果有的话)关联到根链中。</li>\n<li>对于「被减少节点」的原父节点进行「级联剪切」。所谓级联剪切，就是在被减小节点破坏了最小堆性质，并且被切下来以后，再从它的父节点递归进行级联剪切的操作。<br>级联剪切具体地：如果父节点的 marked 为 false，赋值为 true，然后退出。<br>否则，将父节点也从最小堆中切下来，继续递归。<br>marked标记的作用就是用来标记”该节点的子节点是否有被删除过”，它的作用是来实现级联剪切。而级联剪切的真正目的是为了防止”最小堆”由二叉树演化成链表。</li>\n</ol>\n<h4 id=\"增加节点值\"><a href=\"#增加节点值\" class=\"headerlink\" title=\"增加节点值\"></a>增加节点值</h4><p>​    </p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> FIBONACCI_HPP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> FIBONACCI_HPP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FibonacciHeapNode</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    T value;</span><br><span class=\"line\">    <span class=\"type\">int</span> degree;</span><br><span class=\"line\">    <span class=\"type\">bool</span> marked;</span><br><span class=\"line\">    FibonacciHeapNode&lt;T&gt;* parent;</span><br><span class=\"line\">    FibonacciHeapNode&lt;T&gt;* child;</span><br><span class=\"line\">    FibonacciHeapNode&lt;T&gt;* nxt;</span><br><span class=\"line\">    FibonacciHeapNode&lt;T&gt;* prev;</span><br><span class=\"line\">    <span class=\"built_in\">FibonacciHeapNode</span>(T val)</span><br><span class=\"line\">        : <span class=\"built_in\">value</span>(val)</span><br><span class=\"line\">        , <span class=\"built_in\">degree</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">        , <span class=\"built_in\">marked</span>(<span class=\"literal\">false</span>)</span><br><span class=\"line\">        , <span class=\"built_in\">parent</span>(<span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">        , <span class=\"built_in\">child</span>(<span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">        , <span class=\"built_in\">nxt</span>(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        , <span class=\"built_in\">prev</span>(<span class=\"keyword\">this</span>) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FibonacciHeap</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        FibonacciHeapNode&lt;T&gt;* minNode; </span><br><span class=\"line\">        <span class=\"comment\">// 外部访问接口</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(T)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"function\">FibonacciHeapNode&lt;T&gt;* <span class=\"title\">extractMin</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"built_in\">FibonacciHeap</span>()</span><br><span class=\"line\">            : <span class=\"built_in\">minNode</span>(<span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">            , <span class=\"built_in\">size</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">            , <span class=\"built_in\">maxDegree</span>(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>: <span class=\"comment\">// 内部实现细节</span></span><br><span class=\"line\">        <span class=\"type\">int</span> size;</span><br><span class=\"line\">        <span class=\"type\">int</span> maxDegree;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insertNode</span><span class=\"params\">(FibonacciHeapNode&lt;T&gt;*)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">removeNode</span><span class=\"params\">(FibonacciHeapNode&lt;T&gt;*)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">consolidate</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">decrease</span><span class=\"params\">(FibonacciHeapNode&lt;T&gt;*, T)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">cutNode</span><span class=\"params\">(FibonacciHeapNode&lt;T&gt;*, FibonacciHeapNode&lt;T&gt;*)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">cascading</span><span class=\"params\">(FibonacciHeapNode&lt;T&gt;*)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> FibonacciHeap&lt;T&gt;::<span class=\"built_in\">insert</span>(T val) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">insertNode</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">FibonacciHeapNode</span>(val));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> FibonacciHeap&lt;T&gt;::<span class=\"built_in\">insertNode</span>(FibonacciHeapNode&lt;T&gt;* cur) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        minNode = cur;</span><br><span class=\"line\">        maxDegree = <span class=\"number\">1</span>; <span class=\"comment\">// Initialize maxDegree</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cur-&gt;prev = minNode-&gt;prev;</span><br><span class=\"line\">        cur-&gt;nxt = minNode;</span><br><span class=\"line\">        minNode-&gt;prev-&gt;nxt = cur;</span><br><span class=\"line\">        minNode-&gt;prev = cur;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cur-&gt;value &lt; minNode-&gt;value) &#123;</span><br><span class=\"line\">            minNode = cur;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">linkAdd</span><span class=\"params\">(FibonacciHeapNode&lt;T&gt;* x, FibonacciHeapNode&lt;T&gt;* y)</span> </span>&#123;</span><br><span class=\"line\">    FibonacciHeapNode&lt;T&gt;* temp;</span><br><span class=\"line\">    temp = x-&gt;nxt;</span><br><span class=\"line\">    x-&gt;nxt = y-&gt;nxt;</span><br><span class=\"line\">    y-&gt;nxt-&gt;nxt = x;</span><br><span class=\"line\">    y-&gt;nxt = temp;</span><br><span class=\"line\">    temp-&gt;prev = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> FibonacciHeap&lt;T&gt;::<span class=\"built_in\">pop</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">extractMin</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> FibonacciHeap&lt;T&gt;::<span class=\"built_in\">removeNode</span>(FibonacciHeapNode&lt;T&gt;* x) &#123;</span><br><span class=\"line\">    x-&gt;prev-&gt;nxt = x-&gt;nxt;</span><br><span class=\"line\">    x-&gt;nxt-&gt;prev = x-&gt;prev;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\">FibonacciHeap&lt;T&gt;* <span class=\"title\">heapUnion</span><span class=\"params\">(FibonacciHeap&lt;T&gt;* h1, FibonacciHeap&lt;T&gt;* h2)</span> </span>&#123;</span><br><span class=\"line\">    FibonacciHeap&lt;T&gt;* temp;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (h1 == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> h2;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (h2 == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> h1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (h2-&gt;maxDegree &gt; h1-&gt;maxDegree) &#123;</span><br><span class=\"line\">        temp = h1;</span><br><span class=\"line\">        h1 = h2;</span><br><span class=\"line\">        h2 = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (h1-&gt;minNode == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        h1-&gt;minNode = h2-&gt;minNode;</span><br><span class=\"line\">        h1-&gt;size = h2-&gt;size;</span><br><span class=\"line\">        h1-&gt;maxDegree = h2-&gt;maxDegree;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> h2;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (h2-&gt;minNode == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> h2;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">linkAdd</span>(h1-&gt;minNode, h2-&gt;minNode);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h1-&gt;minNode-&gt;value &gt; h2-&gt;minNode-&gt;value)</span><br><span class=\"line\">            h1-&gt;minNode = h2-&gt;minNode;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> h2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">FibonacciHeapNode&lt;T&gt;* FibonacciHeap&lt;T&gt;::<span class=\"built_in\">extractMin</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minNode == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    FibonacciHeapNode&lt;T&gt;* child = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    FibonacciHeapNode&lt;T&gt;* Min = minNode;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (Min-&gt;child != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        child = Min-&gt;child;</span><br><span class=\"line\">        <span class=\"built_in\">removeNode</span>(child);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (child-&gt;nxt == child)</span><br><span class=\"line\">            Min-&gt;child = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> </span><br><span class=\"line\">            Min-&gt;child = child-&gt;nxt;</span><br><span class=\"line\">        <span class=\"built_in\">linkAdd</span>(child, minNode);</span><br><span class=\"line\">        child-&gt;parent = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">removeNode</span>(Min);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Min-&gt;nxt == Min) &#123;</span><br><span class=\"line\">        minNode = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        minNode = Min-&gt;nxt;</span><br><span class=\"line\">        <span class=\"built_in\">consolidate</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    --size;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Min;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> FibonacciHeap&lt;T&gt;::<span class=\"built_in\">consolidate</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> maxDegreePossible = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"built_in\">log2</span>(size)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    std::vector&lt;FibonacciHeapNode&lt;T&gt;*&gt; <span class=\"built_in\">degreeTable</span>(maxDegreePossible, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Iterate through the root list and consolidate nodes with the same degree</span></span><br><span class=\"line\">    FibonacciHeapNode&lt;T&gt;* cur = minNode;</span><br><span class=\"line\">    std::vector&lt;FibonacciHeapNode&lt;T&gt;*&gt; rootsToVisit;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        rootsToVisit.<span class=\"built_in\">push_back</span>(cur);</span><br><span class=\"line\">        cur = cur-&gt;nxt;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (cur != minNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (FibonacciHeapNode&lt;T&gt;* node : rootsToVisit) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> degree = node-&gt;degree;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (degreeTable[degree] != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            FibonacciHeapNode&lt;T&gt;* other = degreeTable[degree];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node-&gt;value &gt; other-&gt;value) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Swap the nodes if necessary</span></span><br><span class=\"line\">                FibonacciHeapNode&lt;T&gt;* temp = node;</span><br><span class=\"line\">                node = other;</span><br><span class=\"line\">                other = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// Link other as a child of node</span></span><br><span class=\"line\">            <span class=\"built_in\">linkAdd</span>(node, other);</span><br><span class=\"line\">            degreeTable[degree] = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            degree++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        degreeTable[degree] = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Rebuild the root list with consolidated nodes</span></span><br><span class=\"line\">    minNode = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; maxDegreePossible; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (degreeTable[i] != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (minNode == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">                minNode = degreeTable[i];</span><br><span class=\"line\">                minNode-&gt;nxt = minNode;</span><br><span class=\"line\">                minNode-&gt;prev = minNode;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">insertNode</span>(degreeTable[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// template&lt;class T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// void FibonacciHeap&lt;T&gt;::decrease(FibonacciHeapNode&lt;T&gt;* cur, T value) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     FibonacciHeapNode&lt;T&gt;* parent;</span></span><br><span class=\"line\"><span class=\"comment\">//     if (minNode == nullptr || cur == nullptr) return ;</span></span><br><span class=\"line\"><span class=\"comment\">//     if (value &gt;= cur-&gt;value) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         throw std::runtime_error(&quot;illegal decreasing.&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//         return ;</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//     cur-&gt;value = value;</span></span><br><span class=\"line\"><span class=\"comment\">//     if (parent != null &amp;&amp; cur-&gt;value &lt; parent-&gt;value) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         cutNode(cur, parent);</span></span><br><span class=\"line\"><span class=\"comment\">//         cascading(parent);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//     if (cur-&gt;value &lt; minNode)</span></span><br><span class=\"line\"><span class=\"comment\">//         minNode = cur;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// template&lt;class T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// void FibonacciHeap&lt;T&gt;::cutNode(FibonacciHeapNode&lt;T&gt;* cur, FibonacciHeapNode&lt;T&gt;* parent) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     removeNode(cur);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// template&lt;class T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// void FibonacciHeap&lt;T&gt;::cascading(FibonacciHeapNode&lt;T&gt;* parent) &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h4><p><a href=\"https://www.cnblogs.com/skywang12345/p/3659060.html\">https://www.cnblogs.com/skywang12345/p/3659060.html</a><br>算法导论</p>\n<p><a href=\"https://www.cnblogs.com/junyuhuang/p/4463758.html\">https://www.cnblogs.com/junyuhuang/p/4463758.html</a></p>\n<p><a href=\"https://wangkuiwu.github.io/2013/03/05/fabonacci-cpp/\">https://wangkuiwu.github.io/2013/03/05/fabonacci-cpp/</a></p>\n<p><a href=\"https://blog.csdn.net/u013148167/article/details/54236076\">https://blog.csdn.net/u013148167/article/details/54236076</a></p>\n"},{"title":"数据结构关键记录2","date":"2023-11-08T06:00:37.000Z","description":"the key record of data structure.","_content":"\n#### 树状数组\n\n树状数组或二元索引树(Binary Indexed Tree)，又以其发明者命名为 Fenwick 树。其初衷是解决数据压缩里面的累计频率(Cumulative Frequency)的计算问题。\n\n满足差分性质？\n不满足差分性质的实现？\n\n树状数组倍增？\n\n多维树状数组\n\n#### Treap\n\n有旋和非旋。一种弱平衡的二叉搜索树。\n\n删除操作，可以找到后继以后交换值，然后向右删除？还是一直旋转操作？\n\n无旋 splite 和合并\n\n复杂度正确性证明？？\n\nhttps://www.luogu.com.cn/problem/solution/P3369?page=3\n\n#### sqrt tree\n\n开方树\n\n\n\n\n\n\n使用场合？复杂度证明？代码实现？同类之间的区别？\n\n\n#### 线段树\n\n求解最大和子段？区间染色问题？\n线段树的动态开点\n\n主席树\n\n是不是都能解决区间乘积 区间 min max gcd？","source":"_posts/数据结构关键记录2.md","raw":"---\ntitle: 数据结构关键记录2\ndate: 2023-11-08 14:00:37\ntags: Data Structure\ndescription: the key record of data structure.\n---\n\n#### 树状数组\n\n树状数组或二元索引树(Binary Indexed Tree)，又以其发明者命名为 Fenwick 树。其初衷是解决数据压缩里面的累计频率(Cumulative Frequency)的计算问题。\n\n满足差分性质？\n不满足差分性质的实现？\n\n树状数组倍增？\n\n多维树状数组\n\n#### Treap\n\n有旋和非旋。一种弱平衡的二叉搜索树。\n\n删除操作，可以找到后继以后交换值，然后向右删除？还是一直旋转操作？\n\n无旋 splite 和合并\n\n复杂度正确性证明？？\n\nhttps://www.luogu.com.cn/problem/solution/P3369?page=3\n\n#### sqrt tree\n\n开方树\n\n\n\n\n\n\n使用场合？复杂度证明？代码实现？同类之间的区别？\n\n\n#### 线段树\n\n求解最大和子段？区间染色问题？\n线段树的动态开点\n\n主席树\n\n是不是都能解决区间乘积 区间 min max gcd？","slug":"数据结构关键记录2","published":1,"updated":"2023-11-12T10:47:45.673Z","_id":"clov7szog001n5ooga14m9cr6","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"树状数组\"><a href=\"#树状数组\" class=\"headerlink\" title=\"树状数组\"></a>树状数组</h4><p>树状数组或二元索引树(Binary Indexed Tree)，又以其发明者命名为 Fenwick 树。其初衷是解决数据压缩里面的累计频率(Cumulative Frequency)的计算问题。</p>\n<p>满足差分性质？<br>不满足差分性质的实现？</p>\n<p>树状数组倍增？</p>\n<p>多维树状数组</p>\n<h4 id=\"Treap\"><a href=\"#Treap\" class=\"headerlink\" title=\"Treap\"></a>Treap</h4><p>有旋和非旋。一种弱平衡的二叉搜索树。</p>\n<p>删除操作，可以找到后继以后交换值，然后向右删除？还是一直旋转操作？</p>\n<p>无旋 splite 和合并</p>\n<p>复杂度正确性证明？？</p>\n<p><a href=\"https://www.luogu.com.cn/problem/solution/P3369?page=3\">https://www.luogu.com.cn/problem/solution/P3369?page=3</a></p>\n<h4 id=\"sqrt-tree\"><a href=\"#sqrt-tree\" class=\"headerlink\" title=\"sqrt tree\"></a>sqrt tree</h4><p>开方树</p>\n<p>使用场合？复杂度证明？代码实现？同类之间的区别？</p>\n<h4 id=\"线段树\"><a href=\"#线段树\" class=\"headerlink\" title=\"线段树\"></a>线段树</h4><p>求解最大和子段？区间染色问题？<br>线段树的动态开点</p>\n<p>主席树</p>\n<p>是不是都能解决区间乘积 区间 min max gcd？</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"树状数组\"><a href=\"#树状数组\" class=\"headerlink\" title=\"树状数组\"></a>树状数组</h4><p>树状数组或二元索引树(Binary Indexed Tree)，又以其发明者命名为 Fenwick 树。其初衷是解决数据压缩里面的累计频率(Cumulative Frequency)的计算问题。</p>\n<p>满足差分性质？<br>不满足差分性质的实现？</p>\n<p>树状数组倍增？</p>\n<p>多维树状数组</p>\n<h4 id=\"Treap\"><a href=\"#Treap\" class=\"headerlink\" title=\"Treap\"></a>Treap</h4><p>有旋和非旋。一种弱平衡的二叉搜索树。</p>\n<p>删除操作，可以找到后继以后交换值，然后向右删除？还是一直旋转操作？</p>\n<p>无旋 splite 和合并</p>\n<p>复杂度正确性证明？？</p>\n<p><a href=\"https://www.luogu.com.cn/problem/solution/P3369?page=3\">https://www.luogu.com.cn/problem/solution/P3369?page=3</a></p>\n<h4 id=\"sqrt-tree\"><a href=\"#sqrt-tree\" class=\"headerlink\" title=\"sqrt tree\"></a>sqrt tree</h4><p>开方树</p>\n<p>使用场合？复杂度证明？代码实现？同类之间的区别？</p>\n<h4 id=\"线段树\"><a href=\"#线段树\" class=\"headerlink\" title=\"线段树\"></a>线段树</h4><p>求解最大和子段？区间染色问题？<br>线段树的动态开点</p>\n<p>主席树</p>\n<p>是不是都能解决区间乘积 区间 min max gcd？</p>\n"},{"title":"现代优化算法","date":"2023-08-25T06:21:42.000Z","description":"The key record of mathematical modeling.","mathjax":true,"_content":"20 世纪 70 年代初期，随着计算复杂性的理论逐步形成，科学工作者发现并证明了大量来源于实际生活中的组合最优化问题是非常难解的，即所谓的 NP 完全问题和 NP 难问题。\n80 年代一些现代化优化算法，如遗传算法、模拟退火算法、人工神经网络算法等。这些算法可以比较容易的解决一些复杂的、常规算法很难解决的问题。\n\n#### 遗传算法(Genetic Algorithm, GA)\n\n","source":"_posts/现代优化算法.md","raw":"---\ntitle: 现代优化算法\ndate: 2023-08-25 14:21:42\ntags: Mathematic\ndescription: The key record of mathematical modeling. \nmathjax: true\n---\n20 世纪 70 年代初期，随着计算复杂性的理论逐步形成，科学工作者发现并证明了大量来源于实际生活中的组合最优化问题是非常难解的，即所谓的 NP 完全问题和 NP 难问题。\n80 年代一些现代化优化算法，如遗传算法、模拟退火算法、人工神经网络算法等。这些算法可以比较容易的解决一些复杂的、常规算法很难解决的问题。\n\n#### 遗传算法(Genetic Algorithm, GA)\n\n","slug":"现代优化算法","published":1,"updated":"2023-08-25T09:06:12.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szog001o5oog7fq12xn6","content":"<p>20 世纪 70 年代初期，随着计算复杂性的理论逐步形成，科学工作者发现并证明了大量来源于实际生活中的组合最优化问题是非常难解的，即所谓的 NP 完全问题和 NP 难问题。<br>80 年代一些现代化优化算法，如遗传算法、模拟退火算法、人工神经网络算法等。这些算法可以比较容易的解决一些复杂的、常规算法很难解决的问题。</p>\n<h4 id=\"遗传算法-Genetic-Algorithm-GA\"><a href=\"#遗传算法-Genetic-Algorithm-GA\" class=\"headerlink\" title=\"遗传算法(Genetic Algorithm, GA)\"></a>遗传算法(Genetic Algorithm, GA)</h4>","site":{"data":{}},"excerpt":"","more":"<p>20 世纪 70 年代初期，随着计算复杂性的理论逐步形成，科学工作者发现并证明了大量来源于实际生活中的组合最优化问题是非常难解的，即所谓的 NP 完全问题和 NP 难问题。<br>80 年代一些现代化优化算法，如遗传算法、模拟退火算法、人工神经网络算法等。这些算法可以比较容易的解决一些复杂的、常规算法很难解决的问题。</p>\n<h4 id=\"遗传算法-Genetic-Algorithm-GA\"><a href=\"#遗传算法-Genetic-Algorithm-GA\" class=\"headerlink\" title=\"遗传算法(Genetic Algorithm, GA)\"></a>遗传算法(Genetic Algorithm, GA)</h4>"},{"title":"登录实现","date":"2023-09-07T07:19:08.000Z","description":"The key record of implementing login authentication.","_content":"一个讲解 https://www.jianshu.com/p/53e687c198b5","source":"_posts/登录实现.md","raw":"---\ntitle: 登录实现\ndate: 2023-09-07 15:19:08\ntags: web\ndescription: The key record of implementing login authentication. \n---\n一个讲解 https://www.jianshu.com/p/53e687c198b5","slug":"登录实现","published":1,"updated":"2023-09-07T07:21:22.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szoh001p5oogdnjbefvw","content":"<p>一个讲解 <a href=\"https://www.jianshu.com/p/53e687c198b5\">https://www.jianshu.com/p/53e687c198b5</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>一个讲解 <a href=\"https://www.jianshu.com/p/53e687c198b5\">https://www.jianshu.com/p/53e687c198b5</a></p>\n"},{"title":"矩阵求导","date":"2023-08-24T12:35:35.000Z","description":"Introduce the principle of matrix derivative.","mathjax":true,"_content":"#### 向量变元的实值函数\n\n单纯的对于**向量**求导和实数的求导大同小异，也是常数为 0，乘法有链式法则，除法的形式也是一样的。\n其中有行向量形式和列向量形式（也叫做**梯度向量形式**，记作 $\\nabla _{x}f(\\boldsymbol{x})$）\n然后就是几个比较重要的常见公式\n\n#### 几个重要的向量变元求导公式\n\n符合分子布局或者分母布局的形式(谁是列向量就是什么布局)\n\n{%asset_img 矩阵求导.png 矩阵求导公式%}\n\n#### 矩阵变元的实值函数\n\n实值函数的求导其实还是比较容易理解的。对于矩阵变元无非是对于矩阵中每一个元素求导。\n和对于向量变元的实值函数求导差不多，也是有着四个求导法则，分别对应常数、线性相加、乘法和商。\n\n#### 几个重要的矩阵变元的求导公式\n\n{%asset_img 矩阵变元求导公式.png 矩阵变元常用求导公式%}\n\n#### 更详细证明了解链接\n\n比较懒，贴几个链接，更深的内容可以看 **矩阵分析** 相关的书籍。\nhttps://www.zhihu.com/question/352174717/answer/1436808747 \nhttps://zhuanlan.zhihu.com/p/263777564 \nhttps://zhuanlan.zhihu.com/p/273729929\n讲解最小二乘法的高维形式 https://zhuanlan.zhihu.com/p/38128785\n\n\n","source":"_posts/矩阵求导.md","raw":"---\ntitle: 矩阵求导\ndate: 2023-08-24 20:35:35\ntags: Mathematic\ndescription: Introduce the principle of matrix derivative. \nmathjax: true\n---\n#### 向量变元的实值函数\n\n单纯的对于**向量**求导和实数的求导大同小异，也是常数为 0，乘法有链式法则，除法的形式也是一样的。\n其中有行向量形式和列向量形式（也叫做**梯度向量形式**，记作 $\\nabla _{x}f(\\boldsymbol{x})$）\n然后就是几个比较重要的常见公式\n\n#### 几个重要的向量变元求导公式\n\n符合分子布局或者分母布局的形式(谁是列向量就是什么布局)\n\n{%asset_img 矩阵求导.png 矩阵求导公式%}\n\n#### 矩阵变元的实值函数\n\n实值函数的求导其实还是比较容易理解的。对于矩阵变元无非是对于矩阵中每一个元素求导。\n和对于向量变元的实值函数求导差不多，也是有着四个求导法则，分别对应常数、线性相加、乘法和商。\n\n#### 几个重要的矩阵变元的求导公式\n\n{%asset_img 矩阵变元求导公式.png 矩阵变元常用求导公式%}\n\n#### 更详细证明了解链接\n\n比较懒，贴几个链接，更深的内容可以看 **矩阵分析** 相关的书籍。\nhttps://www.zhihu.com/question/352174717/answer/1436808747 \nhttps://zhuanlan.zhihu.com/p/263777564 \nhttps://zhuanlan.zhihu.com/p/273729929\n讲解最小二乘法的高维形式 https://zhuanlan.zhihu.com/p/38128785\n\n\n","slug":"矩阵求导","published":1,"updated":"2023-09-05T04:53:04.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szoh001r5ooge6ex7xzo","content":"<h4 id=\"向量变元的实值函数\"><a href=\"#向量变元的实值函数\" class=\"headerlink\" title=\"向量变元的实值函数\"></a>向量变元的实值函数</h4><p>单纯的对于<strong>向量</strong>求导和实数的求导大同小异，也是常数为 0，乘法有链式法则，除法的形式也是一样的。<br>其中有行向量形式和列向量形式（也叫做<strong>梯度向量形式</strong>，记作 $\\nabla _{x}f(\\boldsymbol{x})$）<br>然后就是几个比较重要的常见公式</p>\n<h4 id=\"几个重要的向量变元求导公式\"><a href=\"#几个重要的向量变元求导公式\" class=\"headerlink\" title=\"几个重要的向量变元求导公式\"></a>几个重要的向量变元求导公式</h4><p>符合分子布局或者分母布局的形式(谁是列向量就是什么布局)</p>\n<img src=\"/2023/08/24/%E7%9F%A9%E9%98%B5%E6%B1%82%E5%AF%BC/%E7%9F%A9%E9%98%B5%E6%B1%82%E5%AF%BC.png\" class=\"\" title=\"矩阵求导公式\">\n<h4 id=\"矩阵变元的实值函数\"><a href=\"#矩阵变元的实值函数\" class=\"headerlink\" title=\"矩阵变元的实值函数\"></a>矩阵变元的实值函数</h4><p>实值函数的求导其实还是比较容易理解的。对于矩阵变元无非是对于矩阵中每一个元素求导。<br>和对于向量变元的实值函数求导差不多，也是有着四个求导法则，分别对应常数、线性相加、乘法和商。</p>\n<h4 id=\"几个重要的矩阵变元的求导公式\"><a href=\"#几个重要的矩阵变元的求导公式\" class=\"headerlink\" title=\"几个重要的矩阵变元的求导公式\"></a>几个重要的矩阵变元的求导公式</h4><img src=\"/2023/08/24/%E7%9F%A9%E9%98%B5%E6%B1%82%E5%AF%BC/%E7%9F%A9%E9%98%B5%E5%8F%98%E5%85%83%E6%B1%82%E5%AF%BC%E5%85%AC%E5%BC%8F.png\" class=\"\" title=\"矩阵变元常用求导公式\">\n<h4 id=\"更详细证明了解链接\"><a href=\"#更详细证明了解链接\" class=\"headerlink\" title=\"更详细证明了解链接\"></a>更详细证明了解链接</h4><p>比较懒，贴几个链接，更深的内容可以看 <strong>矩阵分析</strong> 相关的书籍。<br><a href=\"https://www.zhihu.com/question/352174717/answer/1436808747\">https://www.zhihu.com/question/352174717/answer/1436808747</a><br><a href=\"https://zhuanlan.zhihu.com/p/263777564\">https://zhuanlan.zhihu.com/p/263777564</a><br><a href=\"https://zhuanlan.zhihu.com/p/273729929\">https://zhuanlan.zhihu.com/p/273729929</a><br>讲解最小二乘法的高维形式 <a href=\"https://zhuanlan.zhihu.com/p/38128785\">https://zhuanlan.zhihu.com/p/38128785</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"向量变元的实值函数\"><a href=\"#向量变元的实值函数\" class=\"headerlink\" title=\"向量变元的实值函数\"></a>向量变元的实值函数</h4><p>单纯的对于<strong>向量</strong>求导和实数的求导大同小异，也是常数为 0，乘法有链式法则，除法的形式也是一样的。<br>其中有行向量形式和列向量形式（也叫做<strong>梯度向量形式</strong>，记作 $\\nabla _{x}f(\\boldsymbol{x})$）<br>然后就是几个比较重要的常见公式</p>\n<h4 id=\"几个重要的向量变元求导公式\"><a href=\"#几个重要的向量变元求导公式\" class=\"headerlink\" title=\"几个重要的向量变元求导公式\"></a>几个重要的向量变元求导公式</h4><p>符合分子布局或者分母布局的形式(谁是列向量就是什么布局)</p>\n<img src=\"/2023/08/24/%E7%9F%A9%E9%98%B5%E6%B1%82%E5%AF%BC/%E7%9F%A9%E9%98%B5%E6%B1%82%E5%AF%BC.png\" class=\"\" title=\"矩阵求导公式\">\n<h4 id=\"矩阵变元的实值函数\"><a href=\"#矩阵变元的实值函数\" class=\"headerlink\" title=\"矩阵变元的实值函数\"></a>矩阵变元的实值函数</h4><p>实值函数的求导其实还是比较容易理解的。对于矩阵变元无非是对于矩阵中每一个元素求导。<br>和对于向量变元的实值函数求导差不多，也是有着四个求导法则，分别对应常数、线性相加、乘法和商。</p>\n<h4 id=\"几个重要的矩阵变元的求导公式\"><a href=\"#几个重要的矩阵变元的求导公式\" class=\"headerlink\" title=\"几个重要的矩阵变元的求导公式\"></a>几个重要的矩阵变元的求导公式</h4><img src=\"/2023/08/24/%E7%9F%A9%E9%98%B5%E6%B1%82%E5%AF%BC/%E7%9F%A9%E9%98%B5%E5%8F%98%E5%85%83%E6%B1%82%E5%AF%BC%E5%85%AC%E5%BC%8F.png\" class=\"\" title=\"矩阵变元常用求导公式\">\n<h4 id=\"更详细证明了解链接\"><a href=\"#更详细证明了解链接\" class=\"headerlink\" title=\"更详细证明了解链接\"></a>更详细证明了解链接</h4><p>比较懒，贴几个链接，更深的内容可以看 <strong>矩阵分析</strong> 相关的书籍。<br><a href=\"https://www.zhihu.com/question/352174717/answer/1436808747\">https://www.zhihu.com/question/352174717/answer/1436808747</a><br><a href=\"https://zhuanlan.zhihu.com/p/263777564\">https://zhuanlan.zhihu.com/p/263777564</a><br><a href=\"https://zhuanlan.zhihu.com/p/273729929\">https://zhuanlan.zhihu.com/p/273729929</a><br>讲解最小二乘法的高维形式 <a href=\"https://zhuanlan.zhihu.com/p/38128785\">https://zhuanlan.zhihu.com/p/38128785</a></p>\n"},{"title":"概率论中各种分布","date":"2023-10-24T01:08:47.000Z","description":"the record of various distribution also my mid-term examination.","mathjax":true,"_content":"![img](file:///C:\\Users\\24964\\Documents\\Tencent Files\\2496438098\\nt_qq\\nt_data\\Pic\\2023-10\\Ori\\78e67b20b808405a7fe8f2e1746f58c6.png)\n\n### 离散分布\n\n#### Bernoulli 分布(Bernoulli Distribution)\n\n##### 符号：$X \\sim B(1, p)$\n##### 概率：$P(X = k) = p^{k}(1-p)^{1-k}$\n\n##### 期望：$E(X) = 0\\times (1-p) + 1 \\times p = p$ \n\n##### 方差：$D(X) = E(X^{2}) - E(X)^{2} = p - p^2 = p(1-p)$\n\n##### 性质：\n\n##### 应用：\n\n#### 二项分布(Binomial Distribution)\n\n##### 符号：$X\\sim B(n, p)$\n##### 概率：\n\n$$\nP(X = k) = \\begin{pmatrix}\n\nn \\\\\nk\n\\end{pmatrix} (1-p)^{n - k}p^k\n$$\n\n##### 期望：\n\n$$\nE(X)= \\sum\\limits_{k = 0}^{n}kp(X = k) =\\sum\\limits_{k = 0}^{n} k\\begin{pmatrix}\nn \\\\\nk\n\\end{pmatrix} (1-p)^{n - k}p^k \\\\\n= \\sum\\limits_{k = 1}^{n}\\begin{pmatrix} n - 1\\\\ m - 1\\end{pmatrix}p^{k}(1-p)^{n - k} \\quad \\quad \\quad \\\\\n= \\sum\\limits_{k = 0}^{n - 1}np\\begin{pmatrix}n - 1 \\\\ k \\end{pmatrix} p^{k}(1-p)^{n - 1 - k} \\quad \\\\\n= np\\times (p + (1 - p))^{n - 1} \\quad \\quad \\quad \\quad \\quad  \\\\\n= np \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad\n$$\n##### 方差：\n\n$$\nD(X) = E(X^{2}) - E(X)^{2} =E(X(X-1)+X) - E(X)^{2} \\\\\n=E(X(X-1)) + E(X) - E(X)^{2} \\quad \\quad \\quad \\quad  \\\\\n\nE(X(X-1)) = \\sum\\limits_{k = 0}^{n}k(k - 1)\\begin{pmatrix} n \\\\ k\\end{pmatrix} p^{k}(1-p)^{n - k} \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad  \\\\ = n(n - 1)\\sum\\limits_{k = 2}^{n} \\begin{pmatrix} n - 2\\\\ k - 2\\end{pmatrix} p^{k}(1 - p)^{n - l} \\quad \\quad \\\\\n= n(n - 1)\\sum\\limits_{k = 0}^{n - 2}\\begin{pmatrix} n - 2 \\\\ k \\end{pmatrix} p^{k + 2}(1-p)^{n - 2 - k} \\\\\n= n(n - 1) p^{2} (1 + (1 - p))^{n - 2} \\ \\ \\ \\  \\quad \\quad \\quad \\quad  \\\\\n= n(n - 1)p^{2} \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\ \\ \\ \\quad \\quad \\\\\n\nD(X) = n(n -1)p^{2} + np - n^{2}p^{2}  = np(1-p) \\quad \\quad \\quad\n$$\n\n##### 性质：\n\n##### 应用：\n\n1. 一段时间内物理实验仪器捕获的粒子数目。\n2. 一段时间内计算机病毒的入侵数。\n3. 一本书中的错字数。\n\n#### 多项分布(Multinomial Distribution)\n\n多项分布(Multinomial Distribution)，它是二项分布的推广。二项分布的试验结果只有两个(成功和失败)，而多项分布的试验结果则多于两个。\n\n##### 联合概率函数：\n\n$$\nP(X_1 = x_1, X_2 = x_2, ..., X_k = x_k) = \\dfrac{n!}{x_1!x_2!...x_k!} p_1^{x_1}p_2^{x_2}...p_{k}^{x_k}\n$$\n多项分布对于每一个结果都有均值和方差，分别为：\n\n##### 期望：\n\n$$\nE(X_i) = np_i\n$$\n##### 方差：\n\n$$\nD(X_i) = np_i(1-p_i)\n$$\n\n#### 泊松分布(Possion Distribution)\n\n##### 符号：$X\\sim P(\\lambda)$\n##### 概率：$P(X = x) = \\dfrac{e^{-\\lambda}\\lambda^{x}}{x!}$\n\n证明：\n由 $\\lambda$ 的定义，单位时间内随机事件发生 $\\lambda$ 次，并且每一次事件发生都是独立的，和时间没有关系的。\n\n所以如果我们将单位单位时间划分为 n 份，当 n 趋近于正无穷的时候，我们可以认为每一段时间内事件发生的次数是均匀的。所以每一段时间事件发生的概率都是 $\\dfrac{\\lambda}{n}$ \n$$\nP(X = x) = \\lim\\limits_{n \\to +\\infty}\\begin{pmatrix} n \\\\ x\\end{pmatrix} (\\dfrac{\\lambda}{n})^{x}(1 - \\dfrac{\\lambda}{n})^{n - x} = \\dfrac{\\lambda^{k}}{k!}e^{-\\lambda}\n$$\n\n##### 期望：\n\n$$\n\\begin{aligned}\nE(X) &= \\sum\\limits_{k=0}^{+\\infty} k \\dfrac{\\lambda^{k}}{k!}e^{-\\lambda} \\\\\n&= \\lambda e^{-\\lambda} \\sum\\limits_{k = 1}^{+\\infty} \\dfrac{\\lambda^{k - 1}}{(k - 1)!} \\\\\n&= \\lambda e^{-\\lambda} e^{\\lambda} \\\\\n&= \\lambda\n\\end{aligned}\n$$\n\n##### 方差：\n\n$$\nE(X^{2}) = E(X(X - 1) + X) = E(X(X-1)) + E(X) \\\\\n$$\n\n$$\n\\begin{aligned}\n\nE(X(X - 1)) &= \\sum\\limits_{k = 1}^{+\\infty} k(k - 1) \\dfrac{\\lambda^{k}}{k!}e^{-\\lambda} \\\\\n&=\\sum\\limits_{k = 2}^{+\\infty}\\dfrac{\\lambda^{k}}{(k - 2)!}e^{-\\lambda} \\\\\n&= \\lambda^{2}e^{-\\lambda}\\sum\\limits_{k = 0}^{+\\infty}\\dfrac{\\lambda^{k}}{k!}\\\\\n&= \\lambda^{2}\n\\end{aligned}\n$$\n\n\n$$\n\\begin{aligned}\nD(X) &= E(X^{2}) - E(X)^{2} \\\\\n&= E(X(X - 1)) + E(X) - E(X)^{2} \\\\\n&= \\lambda^{2} + \\lambda - \\lambda^{2}\\\\\n&= \\lambda\n\\end{aligned}\n$$\n\n##### 性质：\n\n1. 伯努利分布是二项分布的特殊情况，当 n = 1 的时候，二项分布变为伯努利分布。泊松分布可以被看作是二项分布的极端情况，在试验次数非常多或者成功概率非常小的情况下，可以近似为泊松分布。指数分布也可以由泊松分布推导而来。\n2. 泊松分布中 $\\lambda$ 表示单位时间内随机事件的平均发生次数。在一个特定时间内，某一个事件都会在任意时刻发生(前提是，每次发生都是独立的，并且跟事件没有关系)。\n\n##### 应用：\n\n泊松分布是用来描述在给定时间段内随机事件发生次数的分布。例如一天之间收到的电子邮件数量。\n\n#### 几何分布(Geometric Distribution)\n\n##### 符号：$X\\sim G(p)$\n\n##### 概率：$P(X = k) = (1-p)^{k - 1}p$\n\n##### 期望：\n\n$$\n\\begin{aligned}\nE(X) &= \\sum\\limits_{k = 1}^{+\\infty} k \\cdot (1-p)^{k - 1}p \\\\\n&=p \\sum\\limits_{k = 1}^{+\\infty} \\left( \\int k \\cdot (1-p)^{k - 1}\\right)' \\\\\n&= p \\left(-\\sum\\limits_{k = 1}^{+\\infty}(1-p)^{k} \\right)' \\\\\n&= p \\cdot \\dfrac{1}{p^{2}} \\\\\n&= \\dfrac{1}{p}\n\\end{aligned}\n$$\n##### 方差：\n\n$$\n\\begin{aligned}\nD(X) &= E(X^{2}) - E(X)^{2} \\\\\n&= \\sum\\limits_{k = 1}^{+\\infty} k^{2}(1 - p)^{k - 1}p - \\dfrac{1}{p^{2}} \\\\\n&= p \\left[\\sum\\limits_{k = 1}^{+\\infty}(k+ 1)kq^{k - 1} - \\sum\\limits_{k = 1}^{+\\infty} kq^{k - 1} \\right] - \\dfrac{1}{p^{2}} \\\\\n&= \\dfrac{1 - p}{p^{2}}\n\\end{aligned}\n$$\n\n##### 性质：\n\n#### 超几何分布(Hypergeometric Distribution)\n\n##### 符号：\n\n##### 概率：$P(X = k) = \\frac{\\begin{pmatrix} M \\\\ k\\end{pmatrix} \\begin{pmatrix} N - M \\\\ n - k\\end{pmatrix}}{\\begin{pmatrix} N \\\\ M\\end{pmatrix}}, k \\leq \\min(n, M) = k_1$\n\n##### 期望：\n\n$$\n\\begin{aligned}\nE(X) &= \\sum\\limits_{k = 1}^{k_1} k \\cdot \\frac{\\begin{pmatrix} M \\\\ k\\end{pmatrix} \\begin{pmatrix} N - M \\\\ n - k\\end{pmatrix}}{\\begin{pmatrix} N \\\\ M\\end{pmatrix}} \\\\\n&= \\sum\\limits_{k = 1}^{k_1} \\begin{pmatrix} N - M \\\\ n - k\\end{pmatrix}\\times \\frac{\\frac{M(M - 1)!}{(k - 1)!(M - k)!}}{\\frac{N(N - 1)!}{n(n - 1)!(N-n)!}} \\\\\n&= \\dfrac{nM}{N}\\sum\\limits_{k = 1}^{k_1} \\frac{\\begin{pmatrix} M - 1 \\\\ k - 1\\end{pmatrix}\\begin{pmatrix}N - M \\\\ n - k \\end{pmatrix} }{\\begin{pmatrix} N - 1\\\\ n - 1\\end{pmatrix}}\\\\\n&= \\dfrac{nM}{N} \\frac{\\sum\\limits_{k = 1}^{k_1} \\begin{pmatrix} M - 1 \\\\ k - 1\\end{pmatrix}\\begin{pmatrix}N - 1 - (M - 1) \\\\ n - 1 - (k - 1) \\end{pmatrix}}{\\begin{pmatrix} N - 1 \\\\ n - 1\\end{pmatrix}} \\\\\n&= \\dfrac{nM}{N}\n\\end{aligned}\n$$\n##### 方差：\n\n$$\nE(X^{2})= E(X(X - 1) + X) = E(X(X - 1)) + E(X)\n$$\n\n$$\n\\begin{aligned}\nE(X(X - 1))) &= \\sum\\limits_{k = 0}^{k_1} k(k - 1) \\frac{\\begin{pmatrix}M \\\\k \\end{pmatrix} \\begin{pmatrix} N - M \\\\ n - k\\end{pmatrix}}{\\begin{pmatrix} N \\\\ n\\end{pmatrix}} \\\\\n&= \\frac{nM(n - 1)(M - 1)}{N(N - 1)} \\sum\\limits_{k = 2}^{k_1} \\frac{\\begin{pmatrix} M - 2 \\\\ k - 2\\end{pmatrix} \\begin{pmatrix} N - M \\\\ n - k\\end{pmatrix}}{\\begin{pmatrix} N - 2 \\\\ n - 2\\end{pmatrix}} \\\\\n&= \\frac{nM(n - 1)(M - 1)}{N(N - 1)}\n\\end{aligned}\n$$\n\n$$\nD(X) = E(X(X - 1))) + E(X) - E(X)^{2}  = \\frac{nM(N - M)(N - n)}{N^{2}(N - 1)}\n$$\n\n\n\n##### 性质：\n\n1. 当总物品个数远远大于选的个数，或者总物品个数区域无穷大的时候，超几何分布可以近似为二项分布。\n2. \n\n##### 应用：\n\n#### 负二项分布(帕斯卡分布, Negative Binomial Distribution, Pascal Distribution)\n\n##### 符号：$X \\sim \\text{Pascal}(n, p)$\n\n##### 概率：$P(X = x) = \\begin{pmatrix} x - 1\\ \\\\ r - 1\\end{pmatrix}p^{r}(1  -p)^{x - r}$\n\n![image-20231024232853695](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231024232853695.png)\n\n##### 期望：\n\n$$\n\\begin{aligned}\nE(X) &= \\sum\\limits_{x = r}^{+\\infty} x f(x) \\\\\n&= \\sum\\limits_{x = r}^{+\\infty} x\\begin{pmatrix} x - 1 \\\\ r - 1\\end{pmatrix} p^{r}(1 - p)^{x - r} \\\\\n&= \\frac{r}{p} \\sum\\limits_{x = r}^{+\\infty} \\begin{pmatrix}x  \\\\ r \\end{pmatrix} p^{r + 1} (1 - p)^{x  - r} \\\\\n&= \\frac{rp}{1 - p}\n\\end{aligned}\n$$\n##### 方差：\n\n$$\n\\begin{aligned}\nE(X^{2}) &= \\sum\\limits_{x = r}^{+\\infty} x^{2}f(x) \\\\\n&= \\sum\\limits_{x = r}^{+\\infty} x^{2} \\begin{pmatrix}x - 1 \\\\ r-  1 \\end{pmatrix}p^{r}(1 - p)^{x - r} \\\\\n&= \\frac{r}{p} \\sum\\limits_{x = r}^{+\\infty} x\\begin{pmatrix} x \\\\ r\\end{pmatrix}p^{r + 1} (1 - p)^{x- r} \\\\\n&= \\frac{r}{p} \\left[\\sum\\limits_{x = r}^{+\\infty}(x + 1)\\begin{pmatrix} x  \\\\ r\\end{pmatrix} p^{r+ 1}(1 - p)^{x - r} - \\sum\\limits_{x = r}^{+\\infty}\\begin{pmatrix} x \\\\ r\\end{pmatrix} p^{r+ 1}(1 - p)^{x - r}\\right] \\\\\n&= \\frac{r}{p}(\\frac{r + 1}{p} - 1) \\\\\n&= \\frac{r(r - p + 1)}{p^{2}}\n\\end{aligned}\n$$\n\n$$\nD(X) = E(X^{2}) - E(X)^{2} = \\frac{r(1 - p)}{p^{2}}\n$$\n\n##### 性质：\n\nBinomial 分布和 Negative Binomial 分布都是多次重复的 Bernoulli 实验。\n\nBinomial关注的是，重复Bernoulli实验成功概率为p，条件为总共实验N次，随机变量为N次实验中成功实验次数k（k∈Z,k∈[0,N]），该随机变量[概率分布为Binomial分布。\n\nNegative Binomial关注的是，重复Bernoulli实验成功概率为p，条件为累计出现r次失败，随机变量为成功实验次数k（k∈Z,k∈[0,+∞)），该随机变量的概率分布为Negative Binomial分布。\n\nBinomial和Negative Binomial分布的随机变量都是成功实验次数，条件不同。从定义上来看，”负“可以理解为站在失败次数的角度看成功。\n\n##### 应用：\n\n#### 伽马-泊松分布(Gamma-Poisson Distribution)\n\n##### 符号：$X \\sim \\text{gamma-Poisson}(\\alpha, \\beta)$\n\n##### 概率密度函数：\n\n$$\nf(x) = \\dfrac{\\Gamma(x + \\beta) \\alpha^{x}}{\\Gamma(\\beta)(1+\\alpha)^{\\beta + x}x!}\n$$\n![image-20231024233912306](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231024233912306.png)\n\n##### 期望：\n\n$$\nE(X) = \\alpha\\beta\n$$\n##### 方差：\n\n$$\nD(X) = \\alpha \\beta + \\alpha^{2}\\beta\n$$\n##### 性质：\n\n1. 做变换：$\\alpha = (1 - p) / p, \\beta = n$，就得到 Pascal 分布\n\n#### Zeta 分布(Zeta Distribution)\n\n##### 符号：$X \\sim \\text{Zeta}(\\alpha)$\n\n##### 概率函数：\n\n$$\nf(x) = \\dfrac{1}{x^{\\alpha}\\sum\\limits_{i = 1}^{+\\infty}(1/i)^{\\alpha}} \\quad x = 1, 2, 3, ...\n$$\n\n![image-20231026215915467](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231026215915467.png)\n\n##### 累计分布函数\n\n$$\nF(x) = P(X \\leq x) = \\dfrac{\\sum\\limits_{i = 1}^{x} (1/i)^{\\alpha}}{\\zeta(\\alpha)} \\quad x = 1, 2, ...\n$$\n\n##### 期望：\n\n$$\nE(X) = \\dfrac{\\zeta(\\alpha - 1)}{\\zeta(\\alpha)}\n$$\n\n##### 方差：\n\n$$\nD(X) = \\dfrac{\\zeta(\\alpha)\\zeta(\\alpha - 2) - \\zeta(\\alpha - 1)^{2}}{\\zeta(\\alpha)^{2}}\n$$\n\n#### Zipf 分布(齐夫定律)\n\n##### 符号：$X \\sim \\text{Zipf}(\\alpha, n)$\n\n##### 概率函数：\n\n$$\nf(x) = \\dfrac{1}{x^{\\alpha}\\sum\\limits_{i = 1}^{n}(1 / i)^{\\alpha}} \\quad  x = 1, 2, 3, ..., n\n$$\n\n下面是 $\\alpha = 1, n = 10$\n\n![image-20231026224615881](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231026224615881.png)\n\n我们记 $H_{n, \\alpha} = \\sum\\limits_{i = 1}^{n} \\left(\\dfrac{1}{i}\\right)^{\\alpha}$\n\n##### 期望：\n\n$$\nE(X) = \\dfrac{H_{n, \\alpha - 1}}{H_{n, \\alpha}}\n$$\n\n##### 方差：\n\n$$\nD(X) = \\dfrac{H_{n, \\alpha - 2}H_{n, \\alpha} - H_{n, \\alpha}^{2}}{H_{n, \\alpha}^{2}}\n$$\n\n##### 齐夫定律：\n\n在自然语言的语料库里，一个单词出现的率与它在频\n率表里的排名成反比。所以，频率最高的单词出现的频率大约是出现频率第二位的单词的2\n倍，而出现频率第二位的单词侧是出现频率第四位的单词的2倍。这个定律被作为任何与幂\n定律概率分布有关的事物的参考。\n\n##### 应用 or 遵循该定律的现象：\n\n1. 英文单词或中文汉字的出现频率：不仅适用于语料全体，也适用于单独的一篇文章\n2. 网页访问频率\n3. 城镇人口与城镇等级的关系\n4. 收入前3%的人的收入\n5. 地震震级\n6. 固体破碎时的碎片大小\n\n### 连续分布\n\n#### 均匀分布(Uniform Distribution)\n\n##### 符号：$X \\sim U(a, b)$\n##### 概率密度函数：\n\n$$\nf(x) = \\begin{cases} \\dfrac{1}{b - a} , a < x < b \\\\\n0\\end{cases}\n$$\n##### 分布函数：\n\n$$\nF(x) = \\begin{cases}\n\\frac{x - a}{b - a}, &a < x < b \\\\\n0,&x < a \\\\\n1,&x > b\n\\end{cases}\n$$\n\n##### 期望：\n\n$$\n\\begin{aligned}\nE(X) &= \\int_{-\\infty}^{+\\infty} x \\cdot f(x) \\mathrm{d}x \\\\\n&= \\int_{a}^{b} \\dfrac{x}{b - a} \\mathrm{d}x \\\\\n&= \\dfrac{a + b}{2}\n\\end{aligned}\n$$\n##### 方差：\n\n$$\nE(X^{2}) &= \\int_{a}^{b} \\dfrac{x^{2}}{b - a} \\mathrm{d}x\\\\\n&= \\dfrac{a^{2}+ab + b^{2}}{3}\n$$\n\n$$\n\\begin{aligned}\nD(X) &= E(X^{2}) - E(X)^{2} \\\\\n&= \\dfrac{a^{2}+ab + b^{2}}{3} - \\left( \\dfrac{a+b}{2}\\right)^{2} \\\\\n&= \\dfrac{(b - a)^{2}}{12}\n\\end{aligned}\n$$\n\n##### 性质：\n\n##### 应用：\n\n#### 指数分布(Exponential Distribution)\n\n指数分布一个很重要的特征就是无记忆性 $P(x > s | x > t) = P(x > s - t), s > t$ 。如果我们使用 x 表示等待的时间。那么这个式子的含义就是 **未来我还需要等到多少时间和我已经等待了多长时间没有关系**。\n\n无记忆性的离散版本是 **几何分布。**\n\n##### 符号：$X\\sim E(\\lambda)$\n\n##### 概率密度函数：\n\n$$\nf(x) = \\begin{cases}\n\\lambda e^{-\\lambda x}, &x > 0 \\\\\n\\\\\n0, &x \\leq 0\n\\end{cases}\n$$\n\n推导：\n\n我们根据实际情况来考虑，如果一个产品的使用寿命是 T，分布函数是 $F(t)$，那么寿命大于 t 的概率为 $S(t) = 1- F(t)$\n\n如果一个产品已经使用 t 时间，那么在 $(t, t + \\Delta t)$ 这一段时间内，死亡的「风险」为:\n$$\n\\lambda(t) = \\lim\\limits_{\\Delta t \\to 0} \\dfrac{P(t \\leq T \\leq t + \\Delta t)}{\\mathrm{d}t \\cdot S(t)} = \\dfrac{f(t)}{S(t)} = -\\dfrac{S'(t)}{S(t)} = -\\dfrac{\\mathrm{d}}{\\mathrm{d}t}\\ln(S(t))\n$$\n> 解释：因为我们首先需要活到这个时间，然后在这个时间段死亡，所以有 $S(t) \\cdot \\lambda(t) = p(T = t)$\n\n我们称这个 $\\lambda(t)$ 为风险函数（到这里还没有涉及到无记忆性，这个 $\\lambda(t)$ 是一个普遍的风险函数）\n\n如果我们要满足无记忆性，就要有 $\\lambda(t) = \\text{Const}$（也就是我们在每一个时间下「死亡」的概率都是等大的）\n\n或者我们由「无记忆性」的直接式子推导：$P(T > s | T > t) = P(T > s - t) \\Rightarrow P(t \\leq T \\leq t + \\Delta t) = P(T < \\mathrm{d}t) \\cdot S(t)$ 也是得到 $\\lambda(t) = \\text{Const}$ \n\n所以有\n$$\n-\\dfrac{\\mathrm{d}}{\\mathrm{d}t}\\ln(S(t)) = \\text{Const}\n$$\n解得 $F(t) = 1 - e^{-\\text{Const} \\cdot t}$\n\n其中，$\\text{Const}$ 表示每一个时间点死亡的风险大小，也就是每一个时间点死亡的概率大小。\n\n##### 分布函数：\n\n$$\nF(x) = \\begin{cases}\n1 - e^{-\\lambda x}, &x > 0 \\\\\n0, &x \\leq 0\n\\end{cases}\n$$\n##### 期望：\n\n$$\n\\begin{aligned}\nE(X) &= \\int_{-\\infty}^{+\\infty} x \\cdot f(x) \\mathrm{d}x \\\\\n&= \\int_0^{+\\infty} x \\cdot \\lambda e^{-\\lambda x} \\mathrm{d}x \\\\\n&= x(-e^{-\\lambda x})|_{0}^{+\\infty} - \\int_{0}^{+\\infty} -e^{-\\lambda x} \\mathrm{d}x \\\\\n&= \\frac{1}{\\lambda}\n\\end{aligned}\n$$\n##### 方差：\n\n$$\n\\begin{aligned}\nE(X^{2}) &= \\int_0^{+\\infty} x^{2} \\cdot \\lambda e^{-\\lambda x} \\mathrm{d}x \\\\\n&= \\int_0^{+\\infty} x^{2} \\mathrm{d}(-e^{-\\lambda x}) \\\\\n&= x^{2}(-e^{-\\lambda x})|_{0}^{+\\infty} + 2\\int_0^{+\\infty}xe^{-\\lambda x} \\mathrm{d}x \\\\\n&= \\frac{2}{\\lambda^{2}}\n\\end{aligned}\n$$\n\n$$\nD(X) = E(X^{2}) - E(X)^{2} = \\frac{1}{\\lambda^{2}}\n$$\n\n##### 性质：\n\n指数分布通常用来建模持续时间，只不过指数分布能够建模的持续时间具有比较特殊的性质，也就是所谓的“无记忆性”\n\n无记忆性：\n$$\n\n$$\n\n##### 应用：\n\n1. 泊松分布、指数分布、二项分布、伯努利分布之间的关系：\n\n   当 n 趋近于无穷大时，二项分布可以近似为泊松分布；当 $\\lambda$ 趋近于无穷大\n   时，泊松分布可以近似为正态分布；而指数分布则是泊松分布在连续时间上的推广，因此也与泊松\n   分布有一定的联系。但是，这些分布之间的应用场景和特点是不同的，需要根据实际问题选择合适\n   的分布模型。\n\n2. \n\n#### 正态分布(高斯分布, Normal Distribution)\n\n##### 符号：$X\\sim N(\\mu, \\sigma^{2})$\n\n##### 概率密度函数：\n\n$$\nf(x) = \\dfrac{1}{\\sqrt{2\\pi} \\sigma}e^{-\\frac{-(x-\\mu)^{2}}{2\\sigma^{2}}}(\\mu \\in R, \\sigma > 0)\n$$\n##### 分布函数：\n\n##### 期望：\n\n$$\n\\begin{aligned}\nE(X) &= \\int_{-\\infty}^{+\\infty} x \\cdot \\frac{1}{\\sqrt{2 \\pi} \\sigma}e^{-\\frac{-(x-\\mu)^{2}}{2\\sigma^{2}}} \\mathrm{d}x \\\\\n&=\\int_{-\\infty}^{+\\infty}(x - \\mu + \\mu) \\cdot \\frac{1}{\\sqrt{2\\pi}\\sigma}e^{-\\frac{(x - \\mu)^{2}}{2\\sigma^{2}}} \\mathrm{d}(x - \\mu)\\\\\n&= \\int_{-\\infty}^{+\\infty} \\frac{t}{\\sqrt{2\\pi}\\sigma}e^{-\\frac{t^{2}}{2\\sigma^{2}}} \\mathrm{d}t + \\mu \\int_{-\\infty}^{+\\infty}\\frac{1}{\\sqrt{2\\pi}\\sigma} e^{-\\frac{(x - \\mu)^{2}}{2\\sigma^{2}}} \\mathrm{d}x \\\\\n&= 0 + \\mu \\\\\n&= \\mu\n\\end{aligned}\n$$\n##### 方差：\n\n$$\n\\begin{aligned}\nD(X) &= \\int_{-\\infty}^{+\\infty} x^{2} \\cdot \\frac{1}{\\sqrt{2 \\pi} \\sigma}e^{-\\frac{-(x-\\mu)^{2}}{2\\sigma^{2}}} \\mathrm{d}x \\\\\n&= \\int_{-\\infty}^{+\\infty}(x - \\mu)^{2} f(x) \\mathrm{d}x + 2\\mu \\int_{-\\infty}^{+\\infty}x \\cdot f(x) \\mathrm{d}x - \\mu^{2} \\int_{-\\infty}^{+\\infty} f(x)\\mathrm{d}x \\\\\n&= \\frac{1}{\\sqrt{2\\pi} \\sigma}\\int_{0}^{+\\infty} \\sqrt{t}e^{\\frac{t}{2\\sigma^{2}}} \\mathrm{d}t + 2\\mu^{2} - \\mu^{2}\\\\\n&= \\sigma^{2}\n\\end{aligned}\n$$\n##### 性质：\n\n标准正态分布：\n\n\n\n##### 应用：\n\n#### 多元高斯分布(Multivariate Gaussian Distribution)\n\n##### 概率密度函数：\n\n##### 应用：多元高斯分布的性质和应用在统计学、机器学习、信号处理和贝叶斯推断等领域中都非常重要。\n\n#### 混合高斯分布(Mixture of Gaussian Distributions)\n\n\n\n##### 应用：\n\n混合高斯模型在许多领域中有广泛的应用，如模式识别、聚类分析、异常检测和图像分割。它允许建模复杂的数据分布，其中数据点可以由多个不同的分布生成，而不仅仅是单一的高斯分布。这使得混合高斯模型成为数据建模和分析中的强大工具。\n\n#### 对数正态分布(Log-Normal Distribution)\n\n#### 伽马分布(Gamma Distribution)\n\n##### 符号：$X \\sim Ga(\\alpha, \\lambda)$\n\n##### 概率密度函数：\n\n$$\nf(x) = \\begin{cases}\n\\dfrac{\\lambda^{\\alpha}}{\\Gamma(\\alpha)} x^{\\alpha - 1}e^{-\\lambda x}, &x \\geq 0\\\\\n0 & x < 0\n\\end{cases}\n$$\n##### 期望：\n\n$$\n\\begin{aligned}\nE(X) &= \\dfrac{\\lambda^{\\alpha}}{\\Gamma(\\alpha)}\\int_{0}^{+\\infty} x^{\\alpha} e^{-\\lambda x} \\mathrm{d}x \\\\ &= \\dfrac{\\lambda^{\\alpha}}{\\Gamma(\\alpha)} \\int_{0}^{+\\infty} \\dfrac{t^{\\alpha}}{\\lambda ^{\\alpha + 1}}e^{-t} \\mathrm{d}t \\\\\n&= \\dfrac{\\Gamma(\\alpha  +1)}{\\Gamma(\\alpha) \\cdot \\lambda} \\\\\n&= \\frac{\\alpha}{\\lambda}\n\\end{aligned}\n$$\n##### 方差：\n\n$$\n\\begin{aligned}\nE(X^{2}) &= \\int_{0}^{+\\infty} x^{2} \\cdot \\dfrac{\\lambda^{\\alpha}}{\\Gamma(\\alpha)} x^{\\alpha - 1}e^{-\\lambda x} \\mathrm{d}x \\\\\n&= \\dfrac{1}{\\lambda^{2}\\Gamma(\\alpha)} \\int_0^{+\\infty} t^{\\alpha+1}e^{-t}\\mathrm{d}t \\\\\n&= \\dfrac{\\alpha(\\alpha + 1)}{\\lambda^{2}}\n\\end{aligned}\n$$\n\n$$\nD(X) = E(X^{2}) - E(X)^{2}  = \\dfrac{\\alpha}{\\lambda^{2}}\n$$\n##### 性质：\n\n1. $\\alpha  = 1$ 的时候，伽马分布与指数分布之间的关系就建立起来了，有 $Ga(1, \\lambda ) = E(\\lambda)$\n\n2. 当 $\\alpha = \\dfrac{n}{2}, \\lambda = \\dfrac{1}{2}$ 的时候，伽马分布和卡方分布之间的关系就建立起来了，有 $Ga(\\dfrac{n}{2}, \\dfrac{1}{2}) = \\mathcal{X}^{2}(n)$\n3. 伽马分布的可加性。![image-20231024194312138](C:\\Users\\梁云森\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231024194312138.png)\n\n4. \n\n##### 应用：\n\n#### 对数伽马分布(Log-Gamma Distribution)\n\n##### 符号：$X \\sim \\text{log-gamma}(\\alpha, \\beta)$\n\n##### 概率密度函数：\n\n$$\nf(x) = \\dfrac{e^{\\beta x}e^{-e^{x} / a}}{\\alpha^{\\beta}\\Gamma(\\beta)} -\\infty < x < +\\infty\n$$\n![image-20231024233520269](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231024233520269.png)\n\n#### 贝塔分布(Beta Distribution)\n\n##### 符号：$X \\sim \\Beta(\\alpha, \\beta)$\n\n##### 概率密度函数：\n\n$$\nf(x) = \\begin{cases}\n\\dfrac{1}{\\Beta(\\alpha, \\beta)} x^{\\alpha - 1}(1-x)^{\\beta - 1}, 0 < x < 1 \\\\\n0\n\\end{cases}\n$$\n##### 分布函数：\n\n##### 期望：\n\n$$\n\\begin{aligned}\nE(X) &= \\int_0^{1}x \\cdot \\dfrac{1}{\\Beta(\\alpha, \\beta)} x^{\\alpha - 1}(1-x)^{\\beta - 1} \\mathrm{d}x \\\\\n&= \\dfrac{\\Beta(\\alpha + 1, \\beta)}{\\Beta(\\alpha, \\beta)} \\int_0^{1}\\dfrac{1}{\\Beta(\\alpha + 1, \\beta)} x^{(\\alpha + 1) - 1}(1-x)^{\\beta - 1} \\mathrm{d}x \\\\\n&= \\dfrac{\\Gamma(\\alpha + 1)\\Gamma(\\beta)}{\\Gamma(\\alpha + \\beta + 1)} \\cdot \\dfrac{\\Gamma(\\alpha + \\beta)}{\\Gamma(\\alpha)\\Gamma(\\beta)} \\\\\n&= \\dfrac{\\alpha}{\\alpha + \\beta}\n\\end{aligned}\n$$\n##### 方差：\n\n$$\n\\begin{aligned}\nE(X^{2}) &= \\int_0^{1} \\dfrac{1}{\\Beta(\\alpha, \\beta)}x^{(\\alpha + 2) - 1}(1 - x)^{\\beta - 1} \\mathrm{d}x \\\\\n&= \\dfrac{\\Beta(\\alpha + 2, \\beta)}{\\Beta(\\alpha, \\beta)} \\\\\n&= \\dfrac{\\alpha(\\alpha + 1)}{(\\alpha + \\beta)(\\alpha + \\beta + 1)}\n\\end{aligned}\n$$\n\n$$\nD(X) = E(X^{2}) - E(X)^{2} = \\dfrac{\\alpha \\beta}{(\\alpha + \\beta)^{2}(\\alpha + \\beta + 1)}\n$$\n\n##### 性质：\n\n1. $Beta(1, 1) = U(0, 1)$\n\n##### 应用：\n\n#### 威布尔分布(韦伯分布，Weibull Distribution)\n\n概率密度函数：\n$$\nf(x;\\lambda, k) = \\begin{cases}\n\\dfrac{k}{\\lambda}(\\dfrac{x}{\\lambda})^{k - 1}e^{-(\\dfrac{x}{\\lambda})^k}, &x \\geq 0 \\\\\n0, &x < 0\n\\end{cases}\n$$\n其中，x 是随机变量，$\\lambda > 0$ 是比例系数(scale parameter)，$k > 0$ 是形状参数(shape parameter)。显然，它的累计分布函数是扩展的指数分布函数。 \n\n##### 期望：\n\n$$\nE(X) = \\lambda \\Gamma(1 + \\dfrac{1}{k})\n$$\n##### 方差：\n\n$$\nD(X) = \\lambda^{2}\\left[\\Gamma(1 + \\dfrac{2}{k}) - \\Gamma^{2}(1 + \\dfrac{1}{k})\\right]\n$$\n##### 应用：\n\n威布尔分布在[可靠性工程](https://baike.baidu.com/item/可靠性工程/3129248?fromModule=lemma_inlink)中被广泛应用。\n\n1. 研究生产过程和运输时间关系\n2. 预测天气\n3. 可靠性和失效分析\n4. 雷达系统\n5. 对接受的杂波信号依分布建模\n6. 量化寿险模型的重复索赔\n7. 描述风速分布\n\n#### 瑞利分布(Rayleigh Distribution)\n\n瑞利分布就是两个垂直分量服从独立且均值为0,标准差相同的高斯分布叠加之后的模。\n换句话说，复高斯分布的模服从瑞利分布。\n\n[瑞利分布的推导过程 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/573644622) 瑞利分布\n\n#### 柯西分布(柯西-洛伦兹分布，Cauchy Distribution)\n\n##### 符号：$X \\sim \\text{Cauthy}(a, \\alpha)$\n\n##### 概率密度函数：\n\n$$\nf(x) = \\dfrac{1}{\\alpha\\pi[1 + ((x - a) / \\alpha)^{2}]} \\quad \\quad -\\infty < x < +\\infty\n$$\n![image-20231025112236557](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231025112236557.png)\n\n##### 由来推导：\n\n柯西分布描述了以随机角度倾斜的线段切割 x 轴的水平距离分布。\n\n![image-20231025113546164](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231025113546164.png)\n$$\n\\tan(\\theta) = \\dfrac{x}{b} \\\\\n\\theta = \\arctan{\\dfrac{x}{b}} \\\\\n\\mathrm{d}\\theta = \\dfrac{1}{1 + \\frac{x^{2}}{b^{2}}} \\dfrac{\\mathrm{d}x}{b}\n$$\n所以可以使用 $\\dfrac{\\mathrm{d}\\theta}{\\pi} = \\dfrac{1}{\\pi} \\dfrac{b\\mathrm{d}x}{b^2 + x ^{2}}$ 来计算关于 x 的分布。\n$$\n\\int_{-\\frac{\\pi}{2}}^{\\frac{\\pi}{2}} \\dfrac{\\theta}{\\pi} = 1 \\Rightarrow \\int_{-\\infty}^{+\\infty} \\dfrac{1}{\\pi} \\dfrac{b \\mathrm{d}x}{b^2 + x^{2}} = 1\n$$\n所以，$P(X = x) = \\dfrac{1}{\\pi} \\dfrac{b}{(x - m)^{2} + b^2}$\n\n##### 分布函数：\n\n$$\nF(x) = P(X \\leq x) = \\dfrac{1}{2\\pi}\\left(\\pi - 2\\arctan(\\dfrac{a - x}{\\alpha})\\right) \\quad -\\infty < x < +\\infty\n$$\n##### 期望：\n\n不存在\n\n##### 方差：\n不存在\n\n##### 应用：\n\n1.  柯西分布，也称为柯西-洛伦兹分布或洛伦兹分布，是描述共振行为的连续分布。它还描述了以随机角度倾斜的线段切割 x 轴的水平距离分布。\n2. 在量子世界，粒子和粒子距离很远，比如，电子到原子核的距离，就好比一个汽车到三千公里外的一个城市距离，因此，要显著描述电子的位置分布，只能是柯西-洛伦兹分布，不能用高斯分布刻画，因为高斯分布尺度不够，信号太弱，噪声将把电子的电磁能量淹没，模型无效。\n\n##### 性质：\n\n1.  柯西分布的取值范围非常广，很大的值也有一定概率取到，因而柯西分布也称为heavy-tail distribution。并且相比于gaussian，概率密度的最大取值只有0.1，就是x=0的那个地方。\n\n#### 拉普拉斯分布(双指数分布，Laplace Distribution)\n\n##### 符号：$X \\sim \\text{Laplace}(\\alpha_1, \\alpha_2)$\n\n##### 概率密度函数：\n\n$$\nf(x) = \\begin{cases}\n\\dfrac{1}{\\alpha_1 + \\alpha_2}e^{-\\frac{x}{\\alpha_1}}, &x < 0 \\\\\n\\dfrac{1}{\\alpha_1 + \\alpha_2}e^{-\\frac{x}{\\alpha_2}}, & x \\geq 0\n\\end{cases}\n$$\n\n>The Laplace distribution is an alternative to the normal distribution with heavier tails. The probability density function for three different parameters settings is illustrated below.\n\n![image-20231024230803046](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231024230803046.png)\n\n##### 分布函数：\n\n$$\nF(x) = P(X \\leq x) = \\begin{cases}\n\\dfrac{\\alpha_1}{\\alpha_1 + \\alpha_2}e^{-\\frac{x}{\\alpha_1}} &x < 0 \\\\\n1 - \\dfrac{\\alpha_2}{\\alpha_1 + \\alpha_2}e^{-\\frac{x}{\\alpha_2}}&x \\geq 0\n\\end{cases}\n$$\n##### 期望：\n\n$$\n\\begin{aligned}\nE(X) &= \\int_{-\\infty}^{0} x \\cdot f(x)\\mathrm{d}x + \\int_0^{+\\infty} x \\cdot f(x) \\mathrm{d}x\\\\\n&= \\alpha_2 - \\alpha_1\n\\end{aligned}\n$$\n##### 方差：\n\n$$\n\\begin{aligned}\nD(X) &= \\int_{-\\infty}^{0} x^2 \\cdot f(x)\\mathrm{d}x + \\int_0^{+\\infty} x^2 \\cdot f(x) \\mathrm{d}x\\\\\n&= \\alpha_1^{2} + \\alpha_2^{2}\n\\end{aligned}\n$$\n##### 性质：\n\n1. 可看作两平移指数分布背靠背拼接在一起，因此又称双指数分布 (Double exponential distribution)\n\n##### 应用：\n\n#### 玻尔兹曼分布(Boltzmann Distribution)\n\n\n\n#### 幂律分布(Power Distribution)\n\n##### 符号：$X\\sim \\text{Power}(1, \\beta)$\n\n##### 概率密度函数：\n\n$$\nf(x) = \\beta x^{\\beta - 1} \\quad \\quad 0 < x < 1\n$$\n![image-20231024235040777](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231024235040777.png)\n\n##### 分布函数：\n\n$$\nF(x) = P(X \\leq x) = x^{\\beta}\n$$\n##### 期望：\n\n$$\nE(X) = \n$$\n##### 方差：\n\n#### 三角分布(Standard Triangular Distribution)\n\n##### 符号：$X \\sim \\text{Triangular}(-1, 1, 1)$\n\n##### 概率密度函数：\n\n$$\nf(x) = \\begin{cases}\nx + 1, &-1 < x < 0 \\\\\n1 - x, & 0 \\leq x < 1\n\\end{cases}\n$$\n![image-20231025114540132](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231025114540132.png)\n\n##### 分布函数：\n\n$$\nF(x) = \\begin{cases}\n\\frac{1}{2}x^{2} + x + \\frac{1}{2}, &-1 < x < 0 \\\\\n-\\frac{1}{2}x^{2} + x + \\frac{1}{2}, &0 \\leq x < 1\n\\end{cases}\n$$\n##### 期望：\n\n$$\nE(X) = 0\n$$\n##### 方差：\n\n$$\nD(X) = \\dfrac{1}{6}\n$$\n更一般的，三角形分布是底限为 a，众数为 c，上限为 b 的连续概率分布。\n$$\nf(x|a, b, c) = \\begin{cases}\n\\dfrac{2(x - a)}{(b - a)(c - a)} \\quad a \\leq x \\leq c \\\\\n\\\\\n\\dfrac{2(b - x)}{(b - a)(b - c)} \\quad c \\leq x \\leq b\n\\end{cases}\n$$\n![image-20231025124956772](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231025124956772.png)\n\n\n\n#### 逻辑斯谛分布(增长分布, Log-Logistic Distribution)\n\n##### 符号：$X \\sim \\text{loglogistic}(\\lambda, \\kappa)$\n\n##### 概率密度函数：\n\n$$\nf(x) = \\dfrac{\\lambda\\kappa(\\lambda\\kappa)^{\\kappa - 1}}{(1 + (\\lambda x)^{\\kappa})^{2}} \\quad x > 0\n$$\n![image-20231025130217056](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231025130217056.png)\n\n##### 分布函数：\n\n$$\nF(x) = P(X <= x) = \\dfrac{(\\lambda x)^{\\kappa}}{1 + (\\lambda x)^{\\kappa}}  \\quad x > 0\n$$\n##### 期望：\n\n$$\n\\begin{aligned}\nE(X) &= \\int_0^{+\\infty} x \\cdot f(x) \\mathrm{d}x \\\\\n&= \\dfrac{1}{\\lambda} \\int_0^{+\\infty}\\dfrac{m^{\\frac{1}{k}}}{(1+m)^{2}} \\mathrm{d}m \\\\\n&= \\dfrac{1}{\\kappa \\lambda} \\cdot \\dfrac{\\pi}{\\sin (\\frac{\\pi}{\\kappa})} \\\\\n&= \\dfrac{\\pi}{\\kappa \\lambda(\\sin (\\frac{\\pi}{\\kappa})}\n\\end{aligned}\n$$\n其中，计算的时候可以使用留数定理。\n\n##### 方差：\n\n$$\nD(X) = \\dfrac{\\pi \\left(2\\kappa(1 - \\cos (\\frac{\\pi}{\\kappa})^{2}) + \\pi\\sin(\\frac{\\pi(\\kappa + 2)}{\\kappa}) \\right)}{\\left(\\sin (\\frac{\\pi(\\kappa + 2)}{\\kappa}) \\right)\\left( \\cos(\\frac{\\pi}{\\kappa})^{2} - 1\\right)(\\lambda \\kappa)^{2}}\n$$\n\n#### 逻辑分布(Logistic Distribution)\n\n##### 符号：$X \\sim \\text{logistic}(\\lambda, \\kappa)$\n\n##### 概率密度函数：\n\n$$\nf(x) = \\dfrac{\\lambda^{\\kappa}\\kappa e^{\\kappa x}}{(1 + (\\lambda e^{x})^{\\kappa})^{2}} \\quad -\\infty < x < +\\infty\n$$\n![image-20231025134453817](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231025134453817.png)\n\n##### 分布函数：\n\n$$\nF(x) = P(X \\leq x) = \\dfrac{\\lambda^{\\kappa}e^{\\kappa x}}{1 + \\lambda^{\\kappa}e^{x}} \\quad -\\infty < x < +\\infty\n$$\n##### 期望：\n\n$$\nE(X) = -\\ln \\lambda\n$$\n##### 方差：\n\n$$\nD(X) = \\dfrac{\\pi ^{2}}{3\\kappa^{2}}\n$$\n\n#### t 分布(T Distribution)\n\n如果 $X\\sim N(0, 1), Y \\sim \\chi^{2}(n)$，则有 $Z = \\dfrac{X}{\\sqrt{\\frac{Y}{n}}} \\sim t(n)$\n\n##### 概率密度函数：\n\n$$\n\\begin{aligned}\nf(z) =\\dfrac{\\Gamma(\\frac{n + 1}{2})}{\\sqrt{n\\pi}\\Gamma(\\frac{n}{2})}\\left(\\dfrac{z^{2}}{n} + 1\\right)^{-\\frac{n + 1}{2}}\n\\end{aligned}\n$$\n##### 推导：\n\n做变换：\n$$\n\\begin{aligned}\n\\begin{cases}\nu = \\dfrac{X}{\\sqrt{\\frac{Y}{n}}} \\\\\n\\\\\nv = Y\n\\end{cases}\n\\end{aligned}\n$$\n所以有反函数：\n$$\n\\begin{cases}\nX = u\\sqrt{\\dfrac{v}{n}} \\\\\n\\\\\nY = v\n\\end{cases}\n$$\n雅可比行列式是：\n$$\n|J| = \n$$\n所以原问题的分布函数变为：\n$$\n\\begin{aligned}\n\\iint\\limits_{A}f(x,y)\\mathrm{d}x\\mathrm{d}y &= \\iint\\limits_{B}f(x(u, v),y(u, v)) |J| \\mathrm{d}u \\mathrm{d}v \\\\\n&= \\int_{-\\infty}^{z}\\int_{0}^{+\\infty}f_X(u\\sqrt{\\dfrac{v}{u}})f_Y(v) (\\dfrac{v}{n})^{-\\frac{1}{2}} \\mathrm{d}u \\mathrm{d}v \\\\\n\n\\end{aligned}\n$$\n有\n$$\n\\begin{aligned}\nf_X(x) = \\dfrac{1}{\\sqrt{2\\pi}}e^{-\\frac{x^{2}}{2}} \\\\\nf_Y(y) = \\dfrac{1}{2^{\\frac{n}{2}}\\Gamma(\\frac{n}{2})}y^{\\frac{n}{2}- 1}e^{-\\frac{y}{2}}\n\\end{aligned}\n$$\n所以：\n$$\n\\begin{aligned}\nF(Z) &= \\int_{-\\infty}^{z}\\int_0^{+\\infty} \\dfrac{1}{\\sqrt{2\\pi}}e^{-\\frac{1}{2}u^{2}\\frac{v}{n}} \\dfrac{1}{2^{\\frac{n}{2}}\\Gamma(\\frac{n}{2})}v^{\\frac{n}{2} - 1} e^{-\\frac{v}{2}}(\\dfrac{v}{n})^{-\\frac{1}{2}} \\mathrm{d}v\\mathrm{d}u \\\\\n&= \\int_{-\\infty}^{z}\\dfrac{1}{\\sqrt{n\\pi}\\sqrt{2}}\\dfrac{1}{2^{\\frac{n}{2}} \\Gamma(\\frac{n}{2})} \\int_0^{+\\infty}e^{-\\frac{1}{2}u^{2}\\frac{v}{n} - \\frac{v}{2}}v^{\\frac{n - 1}{2}} \\mathrm{d}u \\mathrm{d}v\n\\end{aligned}\n$$\n\n##### 期望：\n\n$$\nE(X) = 0\n$$\n\n##### 方差：\n\n$$\nV(X) = \\dfrac{n}{n - 2}\n$$\n\n##### 性质：\n\n##### 应用：\n\n#### F 分布(F Distribution)\n\nF 分布也被称为「方差比分布(Variance Ratio Distribution)」和「Fisher-Snedecor Distribution」。\n\n设 $U \\sim \\chi^{2}(n_1), V \\sim \\chi^{2}(n_2)$，并且 U 和 V 相互独立，则称随机变量 $F = \\dfrac{U / n_1}{V / n_2}$ 服从自由度为 $(n_1, n_2)$ 的 F 分布\n\n##### 概率密度函数：\n\n$$\nf(z) = \\dfrac{\\Gamma(\\frac{n_1 + n_2}{2})(\\frac{n_1}{n_2})^{\\frac{n_1}{2}}z^{\\frac{n_1}{2} - 1}}{\\Gamma(\\frac{n_1}{2})\\Gamma(\\frac{n_2}{2})\\left[1 + \\frac{n_1}{n_2}z\\right]^{\\frac{n_1 + n_2}{2}}}\n$$\n\n##### 推导：\n\n$\\text{lemma1}:$ \n$$\nf_{\\frac{Y}{X}}(z) = \\int_{-\\infty}^{+\\infty}|x|f(x, xz)\\mathrm{d}x\n$$\n$\\text{lemma2}:$\n$$\nf_{aX + b} = \\dfrac{1}{|a|}f_X(\\dfrac{y - b}{a}) \\quad a \\neq 0\n$$\n所以我们可以得到 $Y = \\dfrac{U}{n_1}, X = \\dfrac{V}{n_2}$ 的概率密度函数为：\n$$\nf_Y(y) = \\dfrac{(\\frac{n_1}{2})^{\\frac{n_1}{2}}}{\\Gamma(\\frac{n_1}{2})}y^{\\frac{n_1}{2} - 1}e^{-\\frac{n_1y}{2}} \\quad y > 0\n$$\n\n$$\nf_X(x) = \\dfrac{(\\frac{n_2}{2})^{\\frac{n_2}{2}}}{\\Gamma(\\frac{n_2}{2})}y^{\\frac{n_2}{2} - 1}e^{-\\frac{n_2y}{2}} \\quad x > 0\n$$\n\n$$\n\\begin{aligned}\nf_F(z) &= f_{\\frac{Y}{X}}(z) \\\\\n&= \\int_0^{+\\infty} xf(x, xz) \\mathrm{d}x \\\\\n&= \\int_0^{+\\infty} xf_Y(xz)f_X(x) \\mathrm{d}x \\\\\n&= \\int_0^{+\\infty} x \\dfrac{(\\frac{n_1}{2})^{\\frac{n_1}{2}}}{\\Gamma(\\frac{n_1}{2})}(xz)^{\\frac{n_1}{2} - 1}e^{-\\frac{n_1y}{2}} \\cdot  \\dfrac{(\\frac{n_2}{2})^{\\frac{n_2}{2}}}{\\Gamma(\\frac{n_2}{2})}y^{\\frac{n_2}{2} - 1}e^{-\\frac{n_2y}{2}} \\mathrm{d}x \\\\\n&= \\dfrac{(n_1 / 2)^{n_1 / 2}(n_2 / 2)^{n_2 / 2}}{\\Gamma(\\frac{n_1}{2}) \\Gamma(\\frac{n_2}{2})}z^{\\frac{n_1}{n_2} - 1}\\int_0^{+\\infty}x^{\\frac{n_1 + n_2}{2} - 1}e^{\\frac{-x}{2}(n_1z + n_2)} \\mathrm{d}x \\\\\n\\end{aligned}\n$$\n\n设 $u = \\dfrac{x}{2}(n_1z + n_2)$\n\n最后得到：\n$$\nf(z) = \\dfrac{\\Gamma(\\frac{n_1 + n_2}{2})(\\frac{n_1}{n_2})^{\\frac{n_1}{2}}z^{\\frac{n_1}{2} - 1}}{\\Gamma(\\frac{n_1}{2})\\Gamma(\\frac{n_2}{2})\\left[1 + \\frac{n_1}{n_2}z\\right]^{\\frac{n_1 + n_2}{2}}}\n$$\n\n##### 期望：\n\n$$\nE(X) = \\dfrac{n_2}{n_2 - 2}\n$$\n\n##### 方差：\n\n$$\nV(X) = \\dfrac{2n_2^{2}(n_1+ n_2 - 2)}{n_1}\n$$\n\n##### 性质：\n\n1. $F_{1 - \\alpha}(n_1, n_2) = \\dfrac{1}{F_{\\alpha}(n_2, n_1)}$\n   证明：\n   $$\n   \\begin{aligned}\n   1 - \\alpha &= P\\{F > F_{1 - \\alpha}(n_1, n_2)\\} \\\\\n   &= P\\{\\dfrac{1}{F} < \\dfrac{1}{F_{1 - \\alpha}(n_1, n_2)}\\} \\\\\n   &= 1 - P\\{\\dfrac{1}{F} \\geq \\dfrac{1}{F_{1 - \\alpha}(n_1, n_2)}\\} \\\\\n   &= 1 - P\\{\\dfrac{1}{F} > \\dfrac{1}{F_{1 - \\alpha}(n_1, n_2)}\\} \\\\\n   \\end{aligned}\n   $$\n   所以 $P\\{\\dfrac{1}{F} > \\dfrac{1}{F_{1 - \\alpha}(n_1, n_2)}\\} = \\alpha$ 并且 $\\dfrac{1}{F} \\sim F(n_2, n_1)$，所以 $F_{1 - \\alpha}(n_1, n_2) = \\dfrac{1}{F_{\\alpha}(n_2, n_1)}$\n\n2. [F分布概率密度公式推导 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/453635917)\n\n##### 应用：\n\n\n\n#### $\\chi 分布$(卡方分布, $\\chi$ Distribution)\n\n$Z_1, Z_2, ..., Z_k$ 是独立、标准正态分布的随机变量，把他们的平方和记为 Q，则有 $Q = \\sum\\limits_{i = 1}^{k} Z_i^{2}$\n\n这个 Q 是服从自由度为 K 的卡方分布的。通常会被记为 $Q \\sim \\chi^{2}(k)$\n\n##### 符号：$Q \\sim \\chi^{2}(k)$\n\n##### 概率密度函数：\n\n$$\nf(x) = \\dfrac{1}{2^{\\frac{n}{2}}\\Gamma(\\dfrac{n}{2})}x^{^{\\frac{n}{2}} - 1}e^{-\\frac{x^{2}}{2}} \\quad z > 0\n$$\n\n![image-20231026212407458](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231026212407458.png)\n\n##### K 阶矩\n\n$$\n\\begin{aligned}\nE(X^{k}) &= \\int_0^{+\\infty} x^{k} \\cdot \\dfrac{1}{2^{\\frac{n}{2}}\\Gamma(\\dfrac{n}{2})}x^{^{\\frac{n}{2}} - 1}e^{-\\frac{x^{2}}{2}} \\mathrm{d}x \\\\\n\\end{aligned}\n$$\n\n设 $\\dfrac{x^{2}}{2}= t$，式子变为：\n$$\n\\begin{aligned}\nE(X^{k}) &= \\dfrac{2^{\\frac{k}{2}}}{\\Gamma(\\frac{n}{2})}\\int_0^{+\\infty} t^{\\frac{n + k}{2} - 1}e^{-t}\\mathrm{d}t \\\\\n&= \\dfrac{2^{k / 2}\\Gamma(\\frac{n + k}{2})}{\\Gamma(n / 2)}\n\\end{aligned}\n$$\n\n##### 期望：\n\n$$\nE(X) = \\dfrac{\\sqrt{2}\\Gamma(\\frac{n + 1}{2})}{\\Gamma(n / 2)}\n$$\n\n##### 方差：\n\n$$\nE(X^{2}) = \\dfrac{2\\Gamma(n / 2 + 1)}{\\Gamma(n / 2)} = n\n$$\n\n所以\n$$\nD(X) = E(X^{2}) - E(X)^{2} = n^{2} - E(X)^{2}\n$$\n\n##### 性质：\n\n##### 应用：\n\n#### 狄拉克分布\n\n\n\n#### 多项式分布和迪利克雷分布\n\n\n\n#### 帕累托分布(布拉德福分布, Pareto Distribution)\n\n这个分布是是从大量真实世界的现象中发现的[幂定律](https://zh.wikipedia.org/wiki/冪定律)分布。这个分布在经济学以外，也被称为**布拉德福分布**。\n\n##### 分布函数：\n\n$$\nP(X > x) = \\left(\\dfrac{x}{x_{\\min}} \\right)^{-k}\n$$\n\n其中，x 是任何一个大于 $x_{\\min}$ 的数，$x_{\\min}$ 是 X 最小的可能值(正数)。\n\n##### 概率密度：\n\n$$\n\\begin{aligned}\np(x) = \\begin{cases}\n0 \\quad x < x_{\\min} \\\\\n\\\\\n\\\\\n\\dfrac{kx_{\\min}^{k}}{x^{k + 1}} \\quad x > x_{\\min}\n\n\\end{cases}\n\\end{aligned}\n$$\n\n\n\n帕累托分布属于连续概率分布。「齐夫定律」也被称为「Zeta 分布」，也可以被认为是在离散概率分布中的帕累托分布。\n\n![image-20231026223709526](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231026223709526.png)\n\n##### 期望：\n\n$$\nE(X) = \\int_0^{+\\infty} x\\cdot f(x) \\mathrm{d}x = \\dfrac{x_\\min k}{k - 1}\n$$\n\n##### 方差：\n\n$$\nD(X) = \\dfrac{x_\\min}{k - 1}\\sqrt{\\dfrac{k}{k - 2}}\n$$\n\n##### 应用：\n\n1. 财富在个人之间的分布\n2. 人类居住区的大小\n3. 对维基百科条目的访问\n4. 接近绝对零度时，玻色一爱因斯坦疑聚的团簇\n5. 在互联网流量中文件尺寸的分布\n6. 油田的石油储备数量\n7. 龙卷风带来的灾难的数量\n\n##### 引申：\n\n帕累托法则(Pareto Principle)，或者叫做「二八定律」，「关键少数法则」，「巴莱多定律」。这个定律指出，约仅有 20% 的因素影响了 80% 的结果。也就是说，所有变因中，最重要的仅有 20%，虽然剩余的 80% 占了大多数。\n\n#### 反正弦分布(Arcsin Distribution)\n\n##### 符号：$X \\sim \\text{arcsin}(x)$\n\n##### 概率密度函数：\n\n$$\nf(x) = \\dfrac{1}{\\pi \\sqrt{x(1 - x)}} \\quad 0 < x < 1\n$$\n\n![image-20231026220704838](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231026220704838.png)\n\n##### 累计分布函数：\n\n$$\nF(x) = P(X \\leq x) = \\dfrac{\\pi + 2\\arcsin(2x - 1)}{2\\pi}\n$$\n\n##### 期望：\n\n$$\nE(X) = \\dfrac{1}{2}\n$$\n\n##### 方差：\n\n$$\nD(X) = \\dfrac{1}{8}\n$$\n\n##### 性质：\n\n对于积分 $\\int_{a}^{b}\\dfrac{\\mathrm{d}x}{\\sqrt{(x - a)(b - x)}}$ 它的结果是$\\pi$\n\n对于这样类型的积分，我们一般是通过换元进行计算 $x  =a\\cos^{2}\\theta + b\\sin^{2}\\theta$，那么原来的积分可以变为一个简单的积分：\n$$\n\\int_a^{b}\\dfrac{\\mathrm{d}x}{\\sqrt{(x - a)(b - x)}} = 2\\int_0^{\\frac{\\pi}{2}} \\mathrm{d}\\theta = \\pi\n$$\n对于这个式子的含义继续深究\n\n![image-20231026221614582](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231026221614582.png)\n\n所以原来的定积分就正好代表了上半圆的弧长，也就是整个圆的半周长。\n\n![image-20231026221707845](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231026221707845.png)\n\n### 参考\n\nhttps://zhuanlan.zhihu.com/p/517424307\n\nhttps://zhuanlan.zhihu.com/p/164883777\n\n[常见分布的数学期望和方差及相关证明 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/449733211)\n\nhttps://zhuanlan.zhihu.com/p/578567547 特征函数推导\n\nhttps://zhuanlan.zhihu.com/p/353187472 https://www.zhihu.com/question/354825596/answer/893242882 指数分布\n\nhttps://zhuanlan.zhihu.com/p/503557666 正态分布\n\n怎么来理解伽玛（gamma）分布？ - 知之的回答 - 知乎 https://www.zhihu.com/question/34866983/answer/60191363 伽马分布和其他分布之间的关系\n\n伽马分布，指数分布，卡方分布之间的关系及期望，方差 - 拾柒的文章 - 知乎 https://zhuanlan.zhihu.com/p/379131967\n\n[深入理解高斯分布 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/303359921) 多元高斯分布\n\n[混合高斯分布与其参数估计 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/596023351) 混合高斯分布\n\n","source":"_posts/概率论中各种分布.md","raw":"---\ntitle: 概率论中各种分布\ndate: 2023-10-24 09:08:47\ntags: Mathematic\ndescription: the record of various distribution also my mid-term examination. \nmathjax: true\n---\n![img](file:///C:\\Users\\24964\\Documents\\Tencent Files\\2496438098\\nt_qq\\nt_data\\Pic\\2023-10\\Ori\\78e67b20b808405a7fe8f2e1746f58c6.png)\n\n### 离散分布\n\n#### Bernoulli 分布(Bernoulli Distribution)\n\n##### 符号：$X \\sim B(1, p)$\n##### 概率：$P(X = k) = p^{k}(1-p)^{1-k}$\n\n##### 期望：$E(X) = 0\\times (1-p) + 1 \\times p = p$ \n\n##### 方差：$D(X) = E(X^{2}) - E(X)^{2} = p - p^2 = p(1-p)$\n\n##### 性质：\n\n##### 应用：\n\n#### 二项分布(Binomial Distribution)\n\n##### 符号：$X\\sim B(n, p)$\n##### 概率：\n\n$$\nP(X = k) = \\begin{pmatrix}\n\nn \\\\\nk\n\\end{pmatrix} (1-p)^{n - k}p^k\n$$\n\n##### 期望：\n\n$$\nE(X)= \\sum\\limits_{k = 0}^{n}kp(X = k) =\\sum\\limits_{k = 0}^{n} k\\begin{pmatrix}\nn \\\\\nk\n\\end{pmatrix} (1-p)^{n - k}p^k \\\\\n= \\sum\\limits_{k = 1}^{n}\\begin{pmatrix} n - 1\\\\ m - 1\\end{pmatrix}p^{k}(1-p)^{n - k} \\quad \\quad \\quad \\\\\n= \\sum\\limits_{k = 0}^{n - 1}np\\begin{pmatrix}n - 1 \\\\ k \\end{pmatrix} p^{k}(1-p)^{n - 1 - k} \\quad \\\\\n= np\\times (p + (1 - p))^{n - 1} \\quad \\quad \\quad \\quad \\quad  \\\\\n= np \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad\n$$\n##### 方差：\n\n$$\nD(X) = E(X^{2}) - E(X)^{2} =E(X(X-1)+X) - E(X)^{2} \\\\\n=E(X(X-1)) + E(X) - E(X)^{2} \\quad \\quad \\quad \\quad  \\\\\n\nE(X(X-1)) = \\sum\\limits_{k = 0}^{n}k(k - 1)\\begin{pmatrix} n \\\\ k\\end{pmatrix} p^{k}(1-p)^{n - k} \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad  \\\\ = n(n - 1)\\sum\\limits_{k = 2}^{n} \\begin{pmatrix} n - 2\\\\ k - 2\\end{pmatrix} p^{k}(1 - p)^{n - l} \\quad \\quad \\\\\n= n(n - 1)\\sum\\limits_{k = 0}^{n - 2}\\begin{pmatrix} n - 2 \\\\ k \\end{pmatrix} p^{k + 2}(1-p)^{n - 2 - k} \\\\\n= n(n - 1) p^{2} (1 + (1 - p))^{n - 2} \\ \\ \\ \\  \\quad \\quad \\quad \\quad  \\\\\n= n(n - 1)p^{2} \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\ \\ \\ \\quad \\quad \\\\\n\nD(X) = n(n -1)p^{2} + np - n^{2}p^{2}  = np(1-p) \\quad \\quad \\quad\n$$\n\n##### 性质：\n\n##### 应用：\n\n1. 一段时间内物理实验仪器捕获的粒子数目。\n2. 一段时间内计算机病毒的入侵数。\n3. 一本书中的错字数。\n\n#### 多项分布(Multinomial Distribution)\n\n多项分布(Multinomial Distribution)，它是二项分布的推广。二项分布的试验结果只有两个(成功和失败)，而多项分布的试验结果则多于两个。\n\n##### 联合概率函数：\n\n$$\nP(X_1 = x_1, X_2 = x_2, ..., X_k = x_k) = \\dfrac{n!}{x_1!x_2!...x_k!} p_1^{x_1}p_2^{x_2}...p_{k}^{x_k}\n$$\n多项分布对于每一个结果都有均值和方差，分别为：\n\n##### 期望：\n\n$$\nE(X_i) = np_i\n$$\n##### 方差：\n\n$$\nD(X_i) = np_i(1-p_i)\n$$\n\n#### 泊松分布(Possion Distribution)\n\n##### 符号：$X\\sim P(\\lambda)$\n##### 概率：$P(X = x) = \\dfrac{e^{-\\lambda}\\lambda^{x}}{x!}$\n\n证明：\n由 $\\lambda$ 的定义，单位时间内随机事件发生 $\\lambda$ 次，并且每一次事件发生都是独立的，和时间没有关系的。\n\n所以如果我们将单位单位时间划分为 n 份，当 n 趋近于正无穷的时候，我们可以认为每一段时间内事件发生的次数是均匀的。所以每一段时间事件发生的概率都是 $\\dfrac{\\lambda}{n}$ \n$$\nP(X = x) = \\lim\\limits_{n \\to +\\infty}\\begin{pmatrix} n \\\\ x\\end{pmatrix} (\\dfrac{\\lambda}{n})^{x}(1 - \\dfrac{\\lambda}{n})^{n - x} = \\dfrac{\\lambda^{k}}{k!}e^{-\\lambda}\n$$\n\n##### 期望：\n\n$$\n\\begin{aligned}\nE(X) &= \\sum\\limits_{k=0}^{+\\infty} k \\dfrac{\\lambda^{k}}{k!}e^{-\\lambda} \\\\\n&= \\lambda e^{-\\lambda} \\sum\\limits_{k = 1}^{+\\infty} \\dfrac{\\lambda^{k - 1}}{(k - 1)!} \\\\\n&= \\lambda e^{-\\lambda} e^{\\lambda} \\\\\n&= \\lambda\n\\end{aligned}\n$$\n\n##### 方差：\n\n$$\nE(X^{2}) = E(X(X - 1) + X) = E(X(X-1)) + E(X) \\\\\n$$\n\n$$\n\\begin{aligned}\n\nE(X(X - 1)) &= \\sum\\limits_{k = 1}^{+\\infty} k(k - 1) \\dfrac{\\lambda^{k}}{k!}e^{-\\lambda} \\\\\n&=\\sum\\limits_{k = 2}^{+\\infty}\\dfrac{\\lambda^{k}}{(k - 2)!}e^{-\\lambda} \\\\\n&= \\lambda^{2}e^{-\\lambda}\\sum\\limits_{k = 0}^{+\\infty}\\dfrac{\\lambda^{k}}{k!}\\\\\n&= \\lambda^{2}\n\\end{aligned}\n$$\n\n\n$$\n\\begin{aligned}\nD(X) &= E(X^{2}) - E(X)^{2} \\\\\n&= E(X(X - 1)) + E(X) - E(X)^{2} \\\\\n&= \\lambda^{2} + \\lambda - \\lambda^{2}\\\\\n&= \\lambda\n\\end{aligned}\n$$\n\n##### 性质：\n\n1. 伯努利分布是二项分布的特殊情况，当 n = 1 的时候，二项分布变为伯努利分布。泊松分布可以被看作是二项分布的极端情况，在试验次数非常多或者成功概率非常小的情况下，可以近似为泊松分布。指数分布也可以由泊松分布推导而来。\n2. 泊松分布中 $\\lambda$ 表示单位时间内随机事件的平均发生次数。在一个特定时间内，某一个事件都会在任意时刻发生(前提是，每次发生都是独立的，并且跟事件没有关系)。\n\n##### 应用：\n\n泊松分布是用来描述在给定时间段内随机事件发生次数的分布。例如一天之间收到的电子邮件数量。\n\n#### 几何分布(Geometric Distribution)\n\n##### 符号：$X\\sim G(p)$\n\n##### 概率：$P(X = k) = (1-p)^{k - 1}p$\n\n##### 期望：\n\n$$\n\\begin{aligned}\nE(X) &= \\sum\\limits_{k = 1}^{+\\infty} k \\cdot (1-p)^{k - 1}p \\\\\n&=p \\sum\\limits_{k = 1}^{+\\infty} \\left( \\int k \\cdot (1-p)^{k - 1}\\right)' \\\\\n&= p \\left(-\\sum\\limits_{k = 1}^{+\\infty}(1-p)^{k} \\right)' \\\\\n&= p \\cdot \\dfrac{1}{p^{2}} \\\\\n&= \\dfrac{1}{p}\n\\end{aligned}\n$$\n##### 方差：\n\n$$\n\\begin{aligned}\nD(X) &= E(X^{2}) - E(X)^{2} \\\\\n&= \\sum\\limits_{k = 1}^{+\\infty} k^{2}(1 - p)^{k - 1}p - \\dfrac{1}{p^{2}} \\\\\n&= p \\left[\\sum\\limits_{k = 1}^{+\\infty}(k+ 1)kq^{k - 1} - \\sum\\limits_{k = 1}^{+\\infty} kq^{k - 1} \\right] - \\dfrac{1}{p^{2}} \\\\\n&= \\dfrac{1 - p}{p^{2}}\n\\end{aligned}\n$$\n\n##### 性质：\n\n#### 超几何分布(Hypergeometric Distribution)\n\n##### 符号：\n\n##### 概率：$P(X = k) = \\frac{\\begin{pmatrix} M \\\\ k\\end{pmatrix} \\begin{pmatrix} N - M \\\\ n - k\\end{pmatrix}}{\\begin{pmatrix} N \\\\ M\\end{pmatrix}}, k \\leq \\min(n, M) = k_1$\n\n##### 期望：\n\n$$\n\\begin{aligned}\nE(X) &= \\sum\\limits_{k = 1}^{k_1} k \\cdot \\frac{\\begin{pmatrix} M \\\\ k\\end{pmatrix} \\begin{pmatrix} N - M \\\\ n - k\\end{pmatrix}}{\\begin{pmatrix} N \\\\ M\\end{pmatrix}} \\\\\n&= \\sum\\limits_{k = 1}^{k_1} \\begin{pmatrix} N - M \\\\ n - k\\end{pmatrix}\\times \\frac{\\frac{M(M - 1)!}{(k - 1)!(M - k)!}}{\\frac{N(N - 1)!}{n(n - 1)!(N-n)!}} \\\\\n&= \\dfrac{nM}{N}\\sum\\limits_{k = 1}^{k_1} \\frac{\\begin{pmatrix} M - 1 \\\\ k - 1\\end{pmatrix}\\begin{pmatrix}N - M \\\\ n - k \\end{pmatrix} }{\\begin{pmatrix} N - 1\\\\ n - 1\\end{pmatrix}}\\\\\n&= \\dfrac{nM}{N} \\frac{\\sum\\limits_{k = 1}^{k_1} \\begin{pmatrix} M - 1 \\\\ k - 1\\end{pmatrix}\\begin{pmatrix}N - 1 - (M - 1) \\\\ n - 1 - (k - 1) \\end{pmatrix}}{\\begin{pmatrix} N - 1 \\\\ n - 1\\end{pmatrix}} \\\\\n&= \\dfrac{nM}{N}\n\\end{aligned}\n$$\n##### 方差：\n\n$$\nE(X^{2})= E(X(X - 1) + X) = E(X(X - 1)) + E(X)\n$$\n\n$$\n\\begin{aligned}\nE(X(X - 1))) &= \\sum\\limits_{k = 0}^{k_1} k(k - 1) \\frac{\\begin{pmatrix}M \\\\k \\end{pmatrix} \\begin{pmatrix} N - M \\\\ n - k\\end{pmatrix}}{\\begin{pmatrix} N \\\\ n\\end{pmatrix}} \\\\\n&= \\frac{nM(n - 1)(M - 1)}{N(N - 1)} \\sum\\limits_{k = 2}^{k_1} \\frac{\\begin{pmatrix} M - 2 \\\\ k - 2\\end{pmatrix} \\begin{pmatrix} N - M \\\\ n - k\\end{pmatrix}}{\\begin{pmatrix} N - 2 \\\\ n - 2\\end{pmatrix}} \\\\\n&= \\frac{nM(n - 1)(M - 1)}{N(N - 1)}\n\\end{aligned}\n$$\n\n$$\nD(X) = E(X(X - 1))) + E(X) - E(X)^{2}  = \\frac{nM(N - M)(N - n)}{N^{2}(N - 1)}\n$$\n\n\n\n##### 性质：\n\n1. 当总物品个数远远大于选的个数，或者总物品个数区域无穷大的时候，超几何分布可以近似为二项分布。\n2. \n\n##### 应用：\n\n#### 负二项分布(帕斯卡分布, Negative Binomial Distribution, Pascal Distribution)\n\n##### 符号：$X \\sim \\text{Pascal}(n, p)$\n\n##### 概率：$P(X = x) = \\begin{pmatrix} x - 1\\ \\\\ r - 1\\end{pmatrix}p^{r}(1  -p)^{x - r}$\n\n![image-20231024232853695](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231024232853695.png)\n\n##### 期望：\n\n$$\n\\begin{aligned}\nE(X) &= \\sum\\limits_{x = r}^{+\\infty} x f(x) \\\\\n&= \\sum\\limits_{x = r}^{+\\infty} x\\begin{pmatrix} x - 1 \\\\ r - 1\\end{pmatrix} p^{r}(1 - p)^{x - r} \\\\\n&= \\frac{r}{p} \\sum\\limits_{x = r}^{+\\infty} \\begin{pmatrix}x  \\\\ r \\end{pmatrix} p^{r + 1} (1 - p)^{x  - r} \\\\\n&= \\frac{rp}{1 - p}\n\\end{aligned}\n$$\n##### 方差：\n\n$$\n\\begin{aligned}\nE(X^{2}) &= \\sum\\limits_{x = r}^{+\\infty} x^{2}f(x) \\\\\n&= \\sum\\limits_{x = r}^{+\\infty} x^{2} \\begin{pmatrix}x - 1 \\\\ r-  1 \\end{pmatrix}p^{r}(1 - p)^{x - r} \\\\\n&= \\frac{r}{p} \\sum\\limits_{x = r}^{+\\infty} x\\begin{pmatrix} x \\\\ r\\end{pmatrix}p^{r + 1} (1 - p)^{x- r} \\\\\n&= \\frac{r}{p} \\left[\\sum\\limits_{x = r}^{+\\infty}(x + 1)\\begin{pmatrix} x  \\\\ r\\end{pmatrix} p^{r+ 1}(1 - p)^{x - r} - \\sum\\limits_{x = r}^{+\\infty}\\begin{pmatrix} x \\\\ r\\end{pmatrix} p^{r+ 1}(1 - p)^{x - r}\\right] \\\\\n&= \\frac{r}{p}(\\frac{r + 1}{p} - 1) \\\\\n&= \\frac{r(r - p + 1)}{p^{2}}\n\\end{aligned}\n$$\n\n$$\nD(X) = E(X^{2}) - E(X)^{2} = \\frac{r(1 - p)}{p^{2}}\n$$\n\n##### 性质：\n\nBinomial 分布和 Negative Binomial 分布都是多次重复的 Bernoulli 实验。\n\nBinomial关注的是，重复Bernoulli实验成功概率为p，条件为总共实验N次，随机变量为N次实验中成功实验次数k（k∈Z,k∈[0,N]），该随机变量[概率分布为Binomial分布。\n\nNegative Binomial关注的是，重复Bernoulli实验成功概率为p，条件为累计出现r次失败，随机变量为成功实验次数k（k∈Z,k∈[0,+∞)），该随机变量的概率分布为Negative Binomial分布。\n\nBinomial和Negative Binomial分布的随机变量都是成功实验次数，条件不同。从定义上来看，”负“可以理解为站在失败次数的角度看成功。\n\n##### 应用：\n\n#### 伽马-泊松分布(Gamma-Poisson Distribution)\n\n##### 符号：$X \\sim \\text{gamma-Poisson}(\\alpha, \\beta)$\n\n##### 概率密度函数：\n\n$$\nf(x) = \\dfrac{\\Gamma(x + \\beta) \\alpha^{x}}{\\Gamma(\\beta)(1+\\alpha)^{\\beta + x}x!}\n$$\n![image-20231024233912306](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231024233912306.png)\n\n##### 期望：\n\n$$\nE(X) = \\alpha\\beta\n$$\n##### 方差：\n\n$$\nD(X) = \\alpha \\beta + \\alpha^{2}\\beta\n$$\n##### 性质：\n\n1. 做变换：$\\alpha = (1 - p) / p, \\beta = n$，就得到 Pascal 分布\n\n#### Zeta 分布(Zeta Distribution)\n\n##### 符号：$X \\sim \\text{Zeta}(\\alpha)$\n\n##### 概率函数：\n\n$$\nf(x) = \\dfrac{1}{x^{\\alpha}\\sum\\limits_{i = 1}^{+\\infty}(1/i)^{\\alpha}} \\quad x = 1, 2, 3, ...\n$$\n\n![image-20231026215915467](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231026215915467.png)\n\n##### 累计分布函数\n\n$$\nF(x) = P(X \\leq x) = \\dfrac{\\sum\\limits_{i = 1}^{x} (1/i)^{\\alpha}}{\\zeta(\\alpha)} \\quad x = 1, 2, ...\n$$\n\n##### 期望：\n\n$$\nE(X) = \\dfrac{\\zeta(\\alpha - 1)}{\\zeta(\\alpha)}\n$$\n\n##### 方差：\n\n$$\nD(X) = \\dfrac{\\zeta(\\alpha)\\zeta(\\alpha - 2) - \\zeta(\\alpha - 1)^{2}}{\\zeta(\\alpha)^{2}}\n$$\n\n#### Zipf 分布(齐夫定律)\n\n##### 符号：$X \\sim \\text{Zipf}(\\alpha, n)$\n\n##### 概率函数：\n\n$$\nf(x) = \\dfrac{1}{x^{\\alpha}\\sum\\limits_{i = 1}^{n}(1 / i)^{\\alpha}} \\quad  x = 1, 2, 3, ..., n\n$$\n\n下面是 $\\alpha = 1, n = 10$\n\n![image-20231026224615881](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231026224615881.png)\n\n我们记 $H_{n, \\alpha} = \\sum\\limits_{i = 1}^{n} \\left(\\dfrac{1}{i}\\right)^{\\alpha}$\n\n##### 期望：\n\n$$\nE(X) = \\dfrac{H_{n, \\alpha - 1}}{H_{n, \\alpha}}\n$$\n\n##### 方差：\n\n$$\nD(X) = \\dfrac{H_{n, \\alpha - 2}H_{n, \\alpha} - H_{n, \\alpha}^{2}}{H_{n, \\alpha}^{2}}\n$$\n\n##### 齐夫定律：\n\n在自然语言的语料库里，一个单词出现的率与它在频\n率表里的排名成反比。所以，频率最高的单词出现的频率大约是出现频率第二位的单词的2\n倍，而出现频率第二位的单词侧是出现频率第四位的单词的2倍。这个定律被作为任何与幂\n定律概率分布有关的事物的参考。\n\n##### 应用 or 遵循该定律的现象：\n\n1. 英文单词或中文汉字的出现频率：不仅适用于语料全体，也适用于单独的一篇文章\n2. 网页访问频率\n3. 城镇人口与城镇等级的关系\n4. 收入前3%的人的收入\n5. 地震震级\n6. 固体破碎时的碎片大小\n\n### 连续分布\n\n#### 均匀分布(Uniform Distribution)\n\n##### 符号：$X \\sim U(a, b)$\n##### 概率密度函数：\n\n$$\nf(x) = \\begin{cases} \\dfrac{1}{b - a} , a < x < b \\\\\n0\\end{cases}\n$$\n##### 分布函数：\n\n$$\nF(x) = \\begin{cases}\n\\frac{x - a}{b - a}, &a < x < b \\\\\n0,&x < a \\\\\n1,&x > b\n\\end{cases}\n$$\n\n##### 期望：\n\n$$\n\\begin{aligned}\nE(X) &= \\int_{-\\infty}^{+\\infty} x \\cdot f(x) \\mathrm{d}x \\\\\n&= \\int_{a}^{b} \\dfrac{x}{b - a} \\mathrm{d}x \\\\\n&= \\dfrac{a + b}{2}\n\\end{aligned}\n$$\n##### 方差：\n\n$$\nE(X^{2}) &= \\int_{a}^{b} \\dfrac{x^{2}}{b - a} \\mathrm{d}x\\\\\n&= \\dfrac{a^{2}+ab + b^{2}}{3}\n$$\n\n$$\n\\begin{aligned}\nD(X) &= E(X^{2}) - E(X)^{2} \\\\\n&= \\dfrac{a^{2}+ab + b^{2}}{3} - \\left( \\dfrac{a+b}{2}\\right)^{2} \\\\\n&= \\dfrac{(b - a)^{2}}{12}\n\\end{aligned}\n$$\n\n##### 性质：\n\n##### 应用：\n\n#### 指数分布(Exponential Distribution)\n\n指数分布一个很重要的特征就是无记忆性 $P(x > s | x > t) = P(x > s - t), s > t$ 。如果我们使用 x 表示等待的时间。那么这个式子的含义就是 **未来我还需要等到多少时间和我已经等待了多长时间没有关系**。\n\n无记忆性的离散版本是 **几何分布。**\n\n##### 符号：$X\\sim E(\\lambda)$\n\n##### 概率密度函数：\n\n$$\nf(x) = \\begin{cases}\n\\lambda e^{-\\lambda x}, &x > 0 \\\\\n\\\\\n0, &x \\leq 0\n\\end{cases}\n$$\n\n推导：\n\n我们根据实际情况来考虑，如果一个产品的使用寿命是 T，分布函数是 $F(t)$，那么寿命大于 t 的概率为 $S(t) = 1- F(t)$\n\n如果一个产品已经使用 t 时间，那么在 $(t, t + \\Delta t)$ 这一段时间内，死亡的「风险」为:\n$$\n\\lambda(t) = \\lim\\limits_{\\Delta t \\to 0} \\dfrac{P(t \\leq T \\leq t + \\Delta t)}{\\mathrm{d}t \\cdot S(t)} = \\dfrac{f(t)}{S(t)} = -\\dfrac{S'(t)}{S(t)} = -\\dfrac{\\mathrm{d}}{\\mathrm{d}t}\\ln(S(t))\n$$\n> 解释：因为我们首先需要活到这个时间，然后在这个时间段死亡，所以有 $S(t) \\cdot \\lambda(t) = p(T = t)$\n\n我们称这个 $\\lambda(t)$ 为风险函数（到这里还没有涉及到无记忆性，这个 $\\lambda(t)$ 是一个普遍的风险函数）\n\n如果我们要满足无记忆性，就要有 $\\lambda(t) = \\text{Const}$（也就是我们在每一个时间下「死亡」的概率都是等大的）\n\n或者我们由「无记忆性」的直接式子推导：$P(T > s | T > t) = P(T > s - t) \\Rightarrow P(t \\leq T \\leq t + \\Delta t) = P(T < \\mathrm{d}t) \\cdot S(t)$ 也是得到 $\\lambda(t) = \\text{Const}$ \n\n所以有\n$$\n-\\dfrac{\\mathrm{d}}{\\mathrm{d}t}\\ln(S(t)) = \\text{Const}\n$$\n解得 $F(t) = 1 - e^{-\\text{Const} \\cdot t}$\n\n其中，$\\text{Const}$ 表示每一个时间点死亡的风险大小，也就是每一个时间点死亡的概率大小。\n\n##### 分布函数：\n\n$$\nF(x) = \\begin{cases}\n1 - e^{-\\lambda x}, &x > 0 \\\\\n0, &x \\leq 0\n\\end{cases}\n$$\n##### 期望：\n\n$$\n\\begin{aligned}\nE(X) &= \\int_{-\\infty}^{+\\infty} x \\cdot f(x) \\mathrm{d}x \\\\\n&= \\int_0^{+\\infty} x \\cdot \\lambda e^{-\\lambda x} \\mathrm{d}x \\\\\n&= x(-e^{-\\lambda x})|_{0}^{+\\infty} - \\int_{0}^{+\\infty} -e^{-\\lambda x} \\mathrm{d}x \\\\\n&= \\frac{1}{\\lambda}\n\\end{aligned}\n$$\n##### 方差：\n\n$$\n\\begin{aligned}\nE(X^{2}) &= \\int_0^{+\\infty} x^{2} \\cdot \\lambda e^{-\\lambda x} \\mathrm{d}x \\\\\n&= \\int_0^{+\\infty} x^{2} \\mathrm{d}(-e^{-\\lambda x}) \\\\\n&= x^{2}(-e^{-\\lambda x})|_{0}^{+\\infty} + 2\\int_0^{+\\infty}xe^{-\\lambda x} \\mathrm{d}x \\\\\n&= \\frac{2}{\\lambda^{2}}\n\\end{aligned}\n$$\n\n$$\nD(X) = E(X^{2}) - E(X)^{2} = \\frac{1}{\\lambda^{2}}\n$$\n\n##### 性质：\n\n指数分布通常用来建模持续时间，只不过指数分布能够建模的持续时间具有比较特殊的性质，也就是所谓的“无记忆性”\n\n无记忆性：\n$$\n\n$$\n\n##### 应用：\n\n1. 泊松分布、指数分布、二项分布、伯努利分布之间的关系：\n\n   当 n 趋近于无穷大时，二项分布可以近似为泊松分布；当 $\\lambda$ 趋近于无穷大\n   时，泊松分布可以近似为正态分布；而指数分布则是泊松分布在连续时间上的推广，因此也与泊松\n   分布有一定的联系。但是，这些分布之间的应用场景和特点是不同的，需要根据实际问题选择合适\n   的分布模型。\n\n2. \n\n#### 正态分布(高斯分布, Normal Distribution)\n\n##### 符号：$X\\sim N(\\mu, \\sigma^{2})$\n\n##### 概率密度函数：\n\n$$\nf(x) = \\dfrac{1}{\\sqrt{2\\pi} \\sigma}e^{-\\frac{-(x-\\mu)^{2}}{2\\sigma^{2}}}(\\mu \\in R, \\sigma > 0)\n$$\n##### 分布函数：\n\n##### 期望：\n\n$$\n\\begin{aligned}\nE(X) &= \\int_{-\\infty}^{+\\infty} x \\cdot \\frac{1}{\\sqrt{2 \\pi} \\sigma}e^{-\\frac{-(x-\\mu)^{2}}{2\\sigma^{2}}} \\mathrm{d}x \\\\\n&=\\int_{-\\infty}^{+\\infty}(x - \\mu + \\mu) \\cdot \\frac{1}{\\sqrt{2\\pi}\\sigma}e^{-\\frac{(x - \\mu)^{2}}{2\\sigma^{2}}} \\mathrm{d}(x - \\mu)\\\\\n&= \\int_{-\\infty}^{+\\infty} \\frac{t}{\\sqrt{2\\pi}\\sigma}e^{-\\frac{t^{2}}{2\\sigma^{2}}} \\mathrm{d}t + \\mu \\int_{-\\infty}^{+\\infty}\\frac{1}{\\sqrt{2\\pi}\\sigma} e^{-\\frac{(x - \\mu)^{2}}{2\\sigma^{2}}} \\mathrm{d}x \\\\\n&= 0 + \\mu \\\\\n&= \\mu\n\\end{aligned}\n$$\n##### 方差：\n\n$$\n\\begin{aligned}\nD(X) &= \\int_{-\\infty}^{+\\infty} x^{2} \\cdot \\frac{1}{\\sqrt{2 \\pi} \\sigma}e^{-\\frac{-(x-\\mu)^{2}}{2\\sigma^{2}}} \\mathrm{d}x \\\\\n&= \\int_{-\\infty}^{+\\infty}(x - \\mu)^{2} f(x) \\mathrm{d}x + 2\\mu \\int_{-\\infty}^{+\\infty}x \\cdot f(x) \\mathrm{d}x - \\mu^{2} \\int_{-\\infty}^{+\\infty} f(x)\\mathrm{d}x \\\\\n&= \\frac{1}{\\sqrt{2\\pi} \\sigma}\\int_{0}^{+\\infty} \\sqrt{t}e^{\\frac{t}{2\\sigma^{2}}} \\mathrm{d}t + 2\\mu^{2} - \\mu^{2}\\\\\n&= \\sigma^{2}\n\\end{aligned}\n$$\n##### 性质：\n\n标准正态分布：\n\n\n\n##### 应用：\n\n#### 多元高斯分布(Multivariate Gaussian Distribution)\n\n##### 概率密度函数：\n\n##### 应用：多元高斯分布的性质和应用在统计学、机器学习、信号处理和贝叶斯推断等领域中都非常重要。\n\n#### 混合高斯分布(Mixture of Gaussian Distributions)\n\n\n\n##### 应用：\n\n混合高斯模型在许多领域中有广泛的应用，如模式识别、聚类分析、异常检测和图像分割。它允许建模复杂的数据分布，其中数据点可以由多个不同的分布生成，而不仅仅是单一的高斯分布。这使得混合高斯模型成为数据建模和分析中的强大工具。\n\n#### 对数正态分布(Log-Normal Distribution)\n\n#### 伽马分布(Gamma Distribution)\n\n##### 符号：$X \\sim Ga(\\alpha, \\lambda)$\n\n##### 概率密度函数：\n\n$$\nf(x) = \\begin{cases}\n\\dfrac{\\lambda^{\\alpha}}{\\Gamma(\\alpha)} x^{\\alpha - 1}e^{-\\lambda x}, &x \\geq 0\\\\\n0 & x < 0\n\\end{cases}\n$$\n##### 期望：\n\n$$\n\\begin{aligned}\nE(X) &= \\dfrac{\\lambda^{\\alpha}}{\\Gamma(\\alpha)}\\int_{0}^{+\\infty} x^{\\alpha} e^{-\\lambda x} \\mathrm{d}x \\\\ &= \\dfrac{\\lambda^{\\alpha}}{\\Gamma(\\alpha)} \\int_{0}^{+\\infty} \\dfrac{t^{\\alpha}}{\\lambda ^{\\alpha + 1}}e^{-t} \\mathrm{d}t \\\\\n&= \\dfrac{\\Gamma(\\alpha  +1)}{\\Gamma(\\alpha) \\cdot \\lambda} \\\\\n&= \\frac{\\alpha}{\\lambda}\n\\end{aligned}\n$$\n##### 方差：\n\n$$\n\\begin{aligned}\nE(X^{2}) &= \\int_{0}^{+\\infty} x^{2} \\cdot \\dfrac{\\lambda^{\\alpha}}{\\Gamma(\\alpha)} x^{\\alpha - 1}e^{-\\lambda x} \\mathrm{d}x \\\\\n&= \\dfrac{1}{\\lambda^{2}\\Gamma(\\alpha)} \\int_0^{+\\infty} t^{\\alpha+1}e^{-t}\\mathrm{d}t \\\\\n&= \\dfrac{\\alpha(\\alpha + 1)}{\\lambda^{2}}\n\\end{aligned}\n$$\n\n$$\nD(X) = E(X^{2}) - E(X)^{2}  = \\dfrac{\\alpha}{\\lambda^{2}}\n$$\n##### 性质：\n\n1. $\\alpha  = 1$ 的时候，伽马分布与指数分布之间的关系就建立起来了，有 $Ga(1, \\lambda ) = E(\\lambda)$\n\n2. 当 $\\alpha = \\dfrac{n}{2}, \\lambda = \\dfrac{1}{2}$ 的时候，伽马分布和卡方分布之间的关系就建立起来了，有 $Ga(\\dfrac{n}{2}, \\dfrac{1}{2}) = \\mathcal{X}^{2}(n)$\n3. 伽马分布的可加性。![image-20231024194312138](C:\\Users\\梁云森\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231024194312138.png)\n\n4. \n\n##### 应用：\n\n#### 对数伽马分布(Log-Gamma Distribution)\n\n##### 符号：$X \\sim \\text{log-gamma}(\\alpha, \\beta)$\n\n##### 概率密度函数：\n\n$$\nf(x) = \\dfrac{e^{\\beta x}e^{-e^{x} / a}}{\\alpha^{\\beta}\\Gamma(\\beta)} -\\infty < x < +\\infty\n$$\n![image-20231024233520269](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231024233520269.png)\n\n#### 贝塔分布(Beta Distribution)\n\n##### 符号：$X \\sim \\Beta(\\alpha, \\beta)$\n\n##### 概率密度函数：\n\n$$\nf(x) = \\begin{cases}\n\\dfrac{1}{\\Beta(\\alpha, \\beta)} x^{\\alpha - 1}(1-x)^{\\beta - 1}, 0 < x < 1 \\\\\n0\n\\end{cases}\n$$\n##### 分布函数：\n\n##### 期望：\n\n$$\n\\begin{aligned}\nE(X) &= \\int_0^{1}x \\cdot \\dfrac{1}{\\Beta(\\alpha, \\beta)} x^{\\alpha - 1}(1-x)^{\\beta - 1} \\mathrm{d}x \\\\\n&= \\dfrac{\\Beta(\\alpha + 1, \\beta)}{\\Beta(\\alpha, \\beta)} \\int_0^{1}\\dfrac{1}{\\Beta(\\alpha + 1, \\beta)} x^{(\\alpha + 1) - 1}(1-x)^{\\beta - 1} \\mathrm{d}x \\\\\n&= \\dfrac{\\Gamma(\\alpha + 1)\\Gamma(\\beta)}{\\Gamma(\\alpha + \\beta + 1)} \\cdot \\dfrac{\\Gamma(\\alpha + \\beta)}{\\Gamma(\\alpha)\\Gamma(\\beta)} \\\\\n&= \\dfrac{\\alpha}{\\alpha + \\beta}\n\\end{aligned}\n$$\n##### 方差：\n\n$$\n\\begin{aligned}\nE(X^{2}) &= \\int_0^{1} \\dfrac{1}{\\Beta(\\alpha, \\beta)}x^{(\\alpha + 2) - 1}(1 - x)^{\\beta - 1} \\mathrm{d}x \\\\\n&= \\dfrac{\\Beta(\\alpha + 2, \\beta)}{\\Beta(\\alpha, \\beta)} \\\\\n&= \\dfrac{\\alpha(\\alpha + 1)}{(\\alpha + \\beta)(\\alpha + \\beta + 1)}\n\\end{aligned}\n$$\n\n$$\nD(X) = E(X^{2}) - E(X)^{2} = \\dfrac{\\alpha \\beta}{(\\alpha + \\beta)^{2}(\\alpha + \\beta + 1)}\n$$\n\n##### 性质：\n\n1. $Beta(1, 1) = U(0, 1)$\n\n##### 应用：\n\n#### 威布尔分布(韦伯分布，Weibull Distribution)\n\n概率密度函数：\n$$\nf(x;\\lambda, k) = \\begin{cases}\n\\dfrac{k}{\\lambda}(\\dfrac{x}{\\lambda})^{k - 1}e^{-(\\dfrac{x}{\\lambda})^k}, &x \\geq 0 \\\\\n0, &x < 0\n\\end{cases}\n$$\n其中，x 是随机变量，$\\lambda > 0$ 是比例系数(scale parameter)，$k > 0$ 是形状参数(shape parameter)。显然，它的累计分布函数是扩展的指数分布函数。 \n\n##### 期望：\n\n$$\nE(X) = \\lambda \\Gamma(1 + \\dfrac{1}{k})\n$$\n##### 方差：\n\n$$\nD(X) = \\lambda^{2}\\left[\\Gamma(1 + \\dfrac{2}{k}) - \\Gamma^{2}(1 + \\dfrac{1}{k})\\right]\n$$\n##### 应用：\n\n威布尔分布在[可靠性工程](https://baike.baidu.com/item/可靠性工程/3129248?fromModule=lemma_inlink)中被广泛应用。\n\n1. 研究生产过程和运输时间关系\n2. 预测天气\n3. 可靠性和失效分析\n4. 雷达系统\n5. 对接受的杂波信号依分布建模\n6. 量化寿险模型的重复索赔\n7. 描述风速分布\n\n#### 瑞利分布(Rayleigh Distribution)\n\n瑞利分布就是两个垂直分量服从独立且均值为0,标准差相同的高斯分布叠加之后的模。\n换句话说，复高斯分布的模服从瑞利分布。\n\n[瑞利分布的推导过程 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/573644622) 瑞利分布\n\n#### 柯西分布(柯西-洛伦兹分布，Cauchy Distribution)\n\n##### 符号：$X \\sim \\text{Cauthy}(a, \\alpha)$\n\n##### 概率密度函数：\n\n$$\nf(x) = \\dfrac{1}{\\alpha\\pi[1 + ((x - a) / \\alpha)^{2}]} \\quad \\quad -\\infty < x < +\\infty\n$$\n![image-20231025112236557](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231025112236557.png)\n\n##### 由来推导：\n\n柯西分布描述了以随机角度倾斜的线段切割 x 轴的水平距离分布。\n\n![image-20231025113546164](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231025113546164.png)\n$$\n\\tan(\\theta) = \\dfrac{x}{b} \\\\\n\\theta = \\arctan{\\dfrac{x}{b}} \\\\\n\\mathrm{d}\\theta = \\dfrac{1}{1 + \\frac{x^{2}}{b^{2}}} \\dfrac{\\mathrm{d}x}{b}\n$$\n所以可以使用 $\\dfrac{\\mathrm{d}\\theta}{\\pi} = \\dfrac{1}{\\pi} \\dfrac{b\\mathrm{d}x}{b^2 + x ^{2}}$ 来计算关于 x 的分布。\n$$\n\\int_{-\\frac{\\pi}{2}}^{\\frac{\\pi}{2}} \\dfrac{\\theta}{\\pi} = 1 \\Rightarrow \\int_{-\\infty}^{+\\infty} \\dfrac{1}{\\pi} \\dfrac{b \\mathrm{d}x}{b^2 + x^{2}} = 1\n$$\n所以，$P(X = x) = \\dfrac{1}{\\pi} \\dfrac{b}{(x - m)^{2} + b^2}$\n\n##### 分布函数：\n\n$$\nF(x) = P(X \\leq x) = \\dfrac{1}{2\\pi}\\left(\\pi - 2\\arctan(\\dfrac{a - x}{\\alpha})\\right) \\quad -\\infty < x < +\\infty\n$$\n##### 期望：\n\n不存在\n\n##### 方差：\n不存在\n\n##### 应用：\n\n1.  柯西分布，也称为柯西-洛伦兹分布或洛伦兹分布，是描述共振行为的连续分布。它还描述了以随机角度倾斜的线段切割 x 轴的水平距离分布。\n2. 在量子世界，粒子和粒子距离很远，比如，电子到原子核的距离，就好比一个汽车到三千公里外的一个城市距离，因此，要显著描述电子的位置分布，只能是柯西-洛伦兹分布，不能用高斯分布刻画，因为高斯分布尺度不够，信号太弱，噪声将把电子的电磁能量淹没，模型无效。\n\n##### 性质：\n\n1.  柯西分布的取值范围非常广，很大的值也有一定概率取到，因而柯西分布也称为heavy-tail distribution。并且相比于gaussian，概率密度的最大取值只有0.1，就是x=0的那个地方。\n\n#### 拉普拉斯分布(双指数分布，Laplace Distribution)\n\n##### 符号：$X \\sim \\text{Laplace}(\\alpha_1, \\alpha_2)$\n\n##### 概率密度函数：\n\n$$\nf(x) = \\begin{cases}\n\\dfrac{1}{\\alpha_1 + \\alpha_2}e^{-\\frac{x}{\\alpha_1}}, &x < 0 \\\\\n\\dfrac{1}{\\alpha_1 + \\alpha_2}e^{-\\frac{x}{\\alpha_2}}, & x \\geq 0\n\\end{cases}\n$$\n\n>The Laplace distribution is an alternative to the normal distribution with heavier tails. The probability density function for three different parameters settings is illustrated below.\n\n![image-20231024230803046](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231024230803046.png)\n\n##### 分布函数：\n\n$$\nF(x) = P(X \\leq x) = \\begin{cases}\n\\dfrac{\\alpha_1}{\\alpha_1 + \\alpha_2}e^{-\\frac{x}{\\alpha_1}} &x < 0 \\\\\n1 - \\dfrac{\\alpha_2}{\\alpha_1 + \\alpha_2}e^{-\\frac{x}{\\alpha_2}}&x \\geq 0\n\\end{cases}\n$$\n##### 期望：\n\n$$\n\\begin{aligned}\nE(X) &= \\int_{-\\infty}^{0} x \\cdot f(x)\\mathrm{d}x + \\int_0^{+\\infty} x \\cdot f(x) \\mathrm{d}x\\\\\n&= \\alpha_2 - \\alpha_1\n\\end{aligned}\n$$\n##### 方差：\n\n$$\n\\begin{aligned}\nD(X) &= \\int_{-\\infty}^{0} x^2 \\cdot f(x)\\mathrm{d}x + \\int_0^{+\\infty} x^2 \\cdot f(x) \\mathrm{d}x\\\\\n&= \\alpha_1^{2} + \\alpha_2^{2}\n\\end{aligned}\n$$\n##### 性质：\n\n1. 可看作两平移指数分布背靠背拼接在一起，因此又称双指数分布 (Double exponential distribution)\n\n##### 应用：\n\n#### 玻尔兹曼分布(Boltzmann Distribution)\n\n\n\n#### 幂律分布(Power Distribution)\n\n##### 符号：$X\\sim \\text{Power}(1, \\beta)$\n\n##### 概率密度函数：\n\n$$\nf(x) = \\beta x^{\\beta - 1} \\quad \\quad 0 < x < 1\n$$\n![image-20231024235040777](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231024235040777.png)\n\n##### 分布函数：\n\n$$\nF(x) = P(X \\leq x) = x^{\\beta}\n$$\n##### 期望：\n\n$$\nE(X) = \n$$\n##### 方差：\n\n#### 三角分布(Standard Triangular Distribution)\n\n##### 符号：$X \\sim \\text{Triangular}(-1, 1, 1)$\n\n##### 概率密度函数：\n\n$$\nf(x) = \\begin{cases}\nx + 1, &-1 < x < 0 \\\\\n1 - x, & 0 \\leq x < 1\n\\end{cases}\n$$\n![image-20231025114540132](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231025114540132.png)\n\n##### 分布函数：\n\n$$\nF(x) = \\begin{cases}\n\\frac{1}{2}x^{2} + x + \\frac{1}{2}, &-1 < x < 0 \\\\\n-\\frac{1}{2}x^{2} + x + \\frac{1}{2}, &0 \\leq x < 1\n\\end{cases}\n$$\n##### 期望：\n\n$$\nE(X) = 0\n$$\n##### 方差：\n\n$$\nD(X) = \\dfrac{1}{6}\n$$\n更一般的，三角形分布是底限为 a，众数为 c，上限为 b 的连续概率分布。\n$$\nf(x|a, b, c) = \\begin{cases}\n\\dfrac{2(x - a)}{(b - a)(c - a)} \\quad a \\leq x \\leq c \\\\\n\\\\\n\\dfrac{2(b - x)}{(b - a)(b - c)} \\quad c \\leq x \\leq b\n\\end{cases}\n$$\n![image-20231025124956772](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231025124956772.png)\n\n\n\n#### 逻辑斯谛分布(增长分布, Log-Logistic Distribution)\n\n##### 符号：$X \\sim \\text{loglogistic}(\\lambda, \\kappa)$\n\n##### 概率密度函数：\n\n$$\nf(x) = \\dfrac{\\lambda\\kappa(\\lambda\\kappa)^{\\kappa - 1}}{(1 + (\\lambda x)^{\\kappa})^{2}} \\quad x > 0\n$$\n![image-20231025130217056](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231025130217056.png)\n\n##### 分布函数：\n\n$$\nF(x) = P(X <= x) = \\dfrac{(\\lambda x)^{\\kappa}}{1 + (\\lambda x)^{\\kappa}}  \\quad x > 0\n$$\n##### 期望：\n\n$$\n\\begin{aligned}\nE(X) &= \\int_0^{+\\infty} x \\cdot f(x) \\mathrm{d}x \\\\\n&= \\dfrac{1}{\\lambda} \\int_0^{+\\infty}\\dfrac{m^{\\frac{1}{k}}}{(1+m)^{2}} \\mathrm{d}m \\\\\n&= \\dfrac{1}{\\kappa \\lambda} \\cdot \\dfrac{\\pi}{\\sin (\\frac{\\pi}{\\kappa})} \\\\\n&= \\dfrac{\\pi}{\\kappa \\lambda(\\sin (\\frac{\\pi}{\\kappa})}\n\\end{aligned}\n$$\n其中，计算的时候可以使用留数定理。\n\n##### 方差：\n\n$$\nD(X) = \\dfrac{\\pi \\left(2\\kappa(1 - \\cos (\\frac{\\pi}{\\kappa})^{2}) + \\pi\\sin(\\frac{\\pi(\\kappa + 2)}{\\kappa}) \\right)}{\\left(\\sin (\\frac{\\pi(\\kappa + 2)}{\\kappa}) \\right)\\left( \\cos(\\frac{\\pi}{\\kappa})^{2} - 1\\right)(\\lambda \\kappa)^{2}}\n$$\n\n#### 逻辑分布(Logistic Distribution)\n\n##### 符号：$X \\sim \\text{logistic}(\\lambda, \\kappa)$\n\n##### 概率密度函数：\n\n$$\nf(x) = \\dfrac{\\lambda^{\\kappa}\\kappa e^{\\kappa x}}{(1 + (\\lambda e^{x})^{\\kappa})^{2}} \\quad -\\infty < x < +\\infty\n$$\n![image-20231025134453817](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231025134453817.png)\n\n##### 分布函数：\n\n$$\nF(x) = P(X \\leq x) = \\dfrac{\\lambda^{\\kappa}e^{\\kappa x}}{1 + \\lambda^{\\kappa}e^{x}} \\quad -\\infty < x < +\\infty\n$$\n##### 期望：\n\n$$\nE(X) = -\\ln \\lambda\n$$\n##### 方差：\n\n$$\nD(X) = \\dfrac{\\pi ^{2}}{3\\kappa^{2}}\n$$\n\n#### t 分布(T Distribution)\n\n如果 $X\\sim N(0, 1), Y \\sim \\chi^{2}(n)$，则有 $Z = \\dfrac{X}{\\sqrt{\\frac{Y}{n}}} \\sim t(n)$\n\n##### 概率密度函数：\n\n$$\n\\begin{aligned}\nf(z) =\\dfrac{\\Gamma(\\frac{n + 1}{2})}{\\sqrt{n\\pi}\\Gamma(\\frac{n}{2})}\\left(\\dfrac{z^{2}}{n} + 1\\right)^{-\\frac{n + 1}{2}}\n\\end{aligned}\n$$\n##### 推导：\n\n做变换：\n$$\n\\begin{aligned}\n\\begin{cases}\nu = \\dfrac{X}{\\sqrt{\\frac{Y}{n}}} \\\\\n\\\\\nv = Y\n\\end{cases}\n\\end{aligned}\n$$\n所以有反函数：\n$$\n\\begin{cases}\nX = u\\sqrt{\\dfrac{v}{n}} \\\\\n\\\\\nY = v\n\\end{cases}\n$$\n雅可比行列式是：\n$$\n|J| = \n$$\n所以原问题的分布函数变为：\n$$\n\\begin{aligned}\n\\iint\\limits_{A}f(x,y)\\mathrm{d}x\\mathrm{d}y &= \\iint\\limits_{B}f(x(u, v),y(u, v)) |J| \\mathrm{d}u \\mathrm{d}v \\\\\n&= \\int_{-\\infty}^{z}\\int_{0}^{+\\infty}f_X(u\\sqrt{\\dfrac{v}{u}})f_Y(v) (\\dfrac{v}{n})^{-\\frac{1}{2}} \\mathrm{d}u \\mathrm{d}v \\\\\n\n\\end{aligned}\n$$\n有\n$$\n\\begin{aligned}\nf_X(x) = \\dfrac{1}{\\sqrt{2\\pi}}e^{-\\frac{x^{2}}{2}} \\\\\nf_Y(y) = \\dfrac{1}{2^{\\frac{n}{2}}\\Gamma(\\frac{n}{2})}y^{\\frac{n}{2}- 1}e^{-\\frac{y}{2}}\n\\end{aligned}\n$$\n所以：\n$$\n\\begin{aligned}\nF(Z) &= \\int_{-\\infty}^{z}\\int_0^{+\\infty} \\dfrac{1}{\\sqrt{2\\pi}}e^{-\\frac{1}{2}u^{2}\\frac{v}{n}} \\dfrac{1}{2^{\\frac{n}{2}}\\Gamma(\\frac{n}{2})}v^{\\frac{n}{2} - 1} e^{-\\frac{v}{2}}(\\dfrac{v}{n})^{-\\frac{1}{2}} \\mathrm{d}v\\mathrm{d}u \\\\\n&= \\int_{-\\infty}^{z}\\dfrac{1}{\\sqrt{n\\pi}\\sqrt{2}}\\dfrac{1}{2^{\\frac{n}{2}} \\Gamma(\\frac{n}{2})} \\int_0^{+\\infty}e^{-\\frac{1}{2}u^{2}\\frac{v}{n} - \\frac{v}{2}}v^{\\frac{n - 1}{2}} \\mathrm{d}u \\mathrm{d}v\n\\end{aligned}\n$$\n\n##### 期望：\n\n$$\nE(X) = 0\n$$\n\n##### 方差：\n\n$$\nV(X) = \\dfrac{n}{n - 2}\n$$\n\n##### 性质：\n\n##### 应用：\n\n#### F 分布(F Distribution)\n\nF 分布也被称为「方差比分布(Variance Ratio Distribution)」和「Fisher-Snedecor Distribution」。\n\n设 $U \\sim \\chi^{2}(n_1), V \\sim \\chi^{2}(n_2)$，并且 U 和 V 相互独立，则称随机变量 $F = \\dfrac{U / n_1}{V / n_2}$ 服从自由度为 $(n_1, n_2)$ 的 F 分布\n\n##### 概率密度函数：\n\n$$\nf(z) = \\dfrac{\\Gamma(\\frac{n_1 + n_2}{2})(\\frac{n_1}{n_2})^{\\frac{n_1}{2}}z^{\\frac{n_1}{2} - 1}}{\\Gamma(\\frac{n_1}{2})\\Gamma(\\frac{n_2}{2})\\left[1 + \\frac{n_1}{n_2}z\\right]^{\\frac{n_1 + n_2}{2}}}\n$$\n\n##### 推导：\n\n$\\text{lemma1}:$ \n$$\nf_{\\frac{Y}{X}}(z) = \\int_{-\\infty}^{+\\infty}|x|f(x, xz)\\mathrm{d}x\n$$\n$\\text{lemma2}:$\n$$\nf_{aX + b} = \\dfrac{1}{|a|}f_X(\\dfrac{y - b}{a}) \\quad a \\neq 0\n$$\n所以我们可以得到 $Y = \\dfrac{U}{n_1}, X = \\dfrac{V}{n_2}$ 的概率密度函数为：\n$$\nf_Y(y) = \\dfrac{(\\frac{n_1}{2})^{\\frac{n_1}{2}}}{\\Gamma(\\frac{n_1}{2})}y^{\\frac{n_1}{2} - 1}e^{-\\frac{n_1y}{2}} \\quad y > 0\n$$\n\n$$\nf_X(x) = \\dfrac{(\\frac{n_2}{2})^{\\frac{n_2}{2}}}{\\Gamma(\\frac{n_2}{2})}y^{\\frac{n_2}{2} - 1}e^{-\\frac{n_2y}{2}} \\quad x > 0\n$$\n\n$$\n\\begin{aligned}\nf_F(z) &= f_{\\frac{Y}{X}}(z) \\\\\n&= \\int_0^{+\\infty} xf(x, xz) \\mathrm{d}x \\\\\n&= \\int_0^{+\\infty} xf_Y(xz)f_X(x) \\mathrm{d}x \\\\\n&= \\int_0^{+\\infty} x \\dfrac{(\\frac{n_1}{2})^{\\frac{n_1}{2}}}{\\Gamma(\\frac{n_1}{2})}(xz)^{\\frac{n_1}{2} - 1}e^{-\\frac{n_1y}{2}} \\cdot  \\dfrac{(\\frac{n_2}{2})^{\\frac{n_2}{2}}}{\\Gamma(\\frac{n_2}{2})}y^{\\frac{n_2}{2} - 1}e^{-\\frac{n_2y}{2}} \\mathrm{d}x \\\\\n&= \\dfrac{(n_1 / 2)^{n_1 / 2}(n_2 / 2)^{n_2 / 2}}{\\Gamma(\\frac{n_1}{2}) \\Gamma(\\frac{n_2}{2})}z^{\\frac{n_1}{n_2} - 1}\\int_0^{+\\infty}x^{\\frac{n_1 + n_2}{2} - 1}e^{\\frac{-x}{2}(n_1z + n_2)} \\mathrm{d}x \\\\\n\\end{aligned}\n$$\n\n设 $u = \\dfrac{x}{2}(n_1z + n_2)$\n\n最后得到：\n$$\nf(z) = \\dfrac{\\Gamma(\\frac{n_1 + n_2}{2})(\\frac{n_1}{n_2})^{\\frac{n_1}{2}}z^{\\frac{n_1}{2} - 1}}{\\Gamma(\\frac{n_1}{2})\\Gamma(\\frac{n_2}{2})\\left[1 + \\frac{n_1}{n_2}z\\right]^{\\frac{n_1 + n_2}{2}}}\n$$\n\n##### 期望：\n\n$$\nE(X) = \\dfrac{n_2}{n_2 - 2}\n$$\n\n##### 方差：\n\n$$\nV(X) = \\dfrac{2n_2^{2}(n_1+ n_2 - 2)}{n_1}\n$$\n\n##### 性质：\n\n1. $F_{1 - \\alpha}(n_1, n_2) = \\dfrac{1}{F_{\\alpha}(n_2, n_1)}$\n   证明：\n   $$\n   \\begin{aligned}\n   1 - \\alpha &= P\\{F > F_{1 - \\alpha}(n_1, n_2)\\} \\\\\n   &= P\\{\\dfrac{1}{F} < \\dfrac{1}{F_{1 - \\alpha}(n_1, n_2)}\\} \\\\\n   &= 1 - P\\{\\dfrac{1}{F} \\geq \\dfrac{1}{F_{1 - \\alpha}(n_1, n_2)}\\} \\\\\n   &= 1 - P\\{\\dfrac{1}{F} > \\dfrac{1}{F_{1 - \\alpha}(n_1, n_2)}\\} \\\\\n   \\end{aligned}\n   $$\n   所以 $P\\{\\dfrac{1}{F} > \\dfrac{1}{F_{1 - \\alpha}(n_1, n_2)}\\} = \\alpha$ 并且 $\\dfrac{1}{F} \\sim F(n_2, n_1)$，所以 $F_{1 - \\alpha}(n_1, n_2) = \\dfrac{1}{F_{\\alpha}(n_2, n_1)}$\n\n2. [F分布概率密度公式推导 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/453635917)\n\n##### 应用：\n\n\n\n#### $\\chi 分布$(卡方分布, $\\chi$ Distribution)\n\n$Z_1, Z_2, ..., Z_k$ 是独立、标准正态分布的随机变量，把他们的平方和记为 Q，则有 $Q = \\sum\\limits_{i = 1}^{k} Z_i^{2}$\n\n这个 Q 是服从自由度为 K 的卡方分布的。通常会被记为 $Q \\sim \\chi^{2}(k)$\n\n##### 符号：$Q \\sim \\chi^{2}(k)$\n\n##### 概率密度函数：\n\n$$\nf(x) = \\dfrac{1}{2^{\\frac{n}{2}}\\Gamma(\\dfrac{n}{2})}x^{^{\\frac{n}{2}} - 1}e^{-\\frac{x^{2}}{2}} \\quad z > 0\n$$\n\n![image-20231026212407458](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231026212407458.png)\n\n##### K 阶矩\n\n$$\n\\begin{aligned}\nE(X^{k}) &= \\int_0^{+\\infty} x^{k} \\cdot \\dfrac{1}{2^{\\frac{n}{2}}\\Gamma(\\dfrac{n}{2})}x^{^{\\frac{n}{2}} - 1}e^{-\\frac{x^{2}}{2}} \\mathrm{d}x \\\\\n\\end{aligned}\n$$\n\n设 $\\dfrac{x^{2}}{2}= t$，式子变为：\n$$\n\\begin{aligned}\nE(X^{k}) &= \\dfrac{2^{\\frac{k}{2}}}{\\Gamma(\\frac{n}{2})}\\int_0^{+\\infty} t^{\\frac{n + k}{2} - 1}e^{-t}\\mathrm{d}t \\\\\n&= \\dfrac{2^{k / 2}\\Gamma(\\frac{n + k}{2})}{\\Gamma(n / 2)}\n\\end{aligned}\n$$\n\n##### 期望：\n\n$$\nE(X) = \\dfrac{\\sqrt{2}\\Gamma(\\frac{n + 1}{2})}{\\Gamma(n / 2)}\n$$\n\n##### 方差：\n\n$$\nE(X^{2}) = \\dfrac{2\\Gamma(n / 2 + 1)}{\\Gamma(n / 2)} = n\n$$\n\n所以\n$$\nD(X) = E(X^{2}) - E(X)^{2} = n^{2} - E(X)^{2}\n$$\n\n##### 性质：\n\n##### 应用：\n\n#### 狄拉克分布\n\n\n\n#### 多项式分布和迪利克雷分布\n\n\n\n#### 帕累托分布(布拉德福分布, Pareto Distribution)\n\n这个分布是是从大量真实世界的现象中发现的[幂定律](https://zh.wikipedia.org/wiki/冪定律)分布。这个分布在经济学以外，也被称为**布拉德福分布**。\n\n##### 分布函数：\n\n$$\nP(X > x) = \\left(\\dfrac{x}{x_{\\min}} \\right)^{-k}\n$$\n\n其中，x 是任何一个大于 $x_{\\min}$ 的数，$x_{\\min}$ 是 X 最小的可能值(正数)。\n\n##### 概率密度：\n\n$$\n\\begin{aligned}\np(x) = \\begin{cases}\n0 \\quad x < x_{\\min} \\\\\n\\\\\n\\\\\n\\dfrac{kx_{\\min}^{k}}{x^{k + 1}} \\quad x > x_{\\min}\n\n\\end{cases}\n\\end{aligned}\n$$\n\n\n\n帕累托分布属于连续概率分布。「齐夫定律」也被称为「Zeta 分布」，也可以被认为是在离散概率分布中的帕累托分布。\n\n![image-20231026223709526](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231026223709526.png)\n\n##### 期望：\n\n$$\nE(X) = \\int_0^{+\\infty} x\\cdot f(x) \\mathrm{d}x = \\dfrac{x_\\min k}{k - 1}\n$$\n\n##### 方差：\n\n$$\nD(X) = \\dfrac{x_\\min}{k - 1}\\sqrt{\\dfrac{k}{k - 2}}\n$$\n\n##### 应用：\n\n1. 财富在个人之间的分布\n2. 人类居住区的大小\n3. 对维基百科条目的访问\n4. 接近绝对零度时，玻色一爱因斯坦疑聚的团簇\n5. 在互联网流量中文件尺寸的分布\n6. 油田的石油储备数量\n7. 龙卷风带来的灾难的数量\n\n##### 引申：\n\n帕累托法则(Pareto Principle)，或者叫做「二八定律」，「关键少数法则」，「巴莱多定律」。这个定律指出，约仅有 20% 的因素影响了 80% 的结果。也就是说，所有变因中，最重要的仅有 20%，虽然剩余的 80% 占了大多数。\n\n#### 反正弦分布(Arcsin Distribution)\n\n##### 符号：$X \\sim \\text{arcsin}(x)$\n\n##### 概率密度函数：\n\n$$\nf(x) = \\dfrac{1}{\\pi \\sqrt{x(1 - x)}} \\quad 0 < x < 1\n$$\n\n![image-20231026220704838](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231026220704838.png)\n\n##### 累计分布函数：\n\n$$\nF(x) = P(X \\leq x) = \\dfrac{\\pi + 2\\arcsin(2x - 1)}{2\\pi}\n$$\n\n##### 期望：\n\n$$\nE(X) = \\dfrac{1}{2}\n$$\n\n##### 方差：\n\n$$\nD(X) = \\dfrac{1}{8}\n$$\n\n##### 性质：\n\n对于积分 $\\int_{a}^{b}\\dfrac{\\mathrm{d}x}{\\sqrt{(x - a)(b - x)}}$ 它的结果是$\\pi$\n\n对于这样类型的积分，我们一般是通过换元进行计算 $x  =a\\cos^{2}\\theta + b\\sin^{2}\\theta$，那么原来的积分可以变为一个简单的积分：\n$$\n\\int_a^{b}\\dfrac{\\mathrm{d}x}{\\sqrt{(x - a)(b - x)}} = 2\\int_0^{\\frac{\\pi}{2}} \\mathrm{d}\\theta = \\pi\n$$\n对于这个式子的含义继续深究\n\n![image-20231026221614582](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231026221614582.png)\n\n所以原来的定积分就正好代表了上半圆的弧长，也就是整个圆的半周长。\n\n![image-20231026221707845](C:\\Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231026221707845.png)\n\n### 参考\n\nhttps://zhuanlan.zhihu.com/p/517424307\n\nhttps://zhuanlan.zhihu.com/p/164883777\n\n[常见分布的数学期望和方差及相关证明 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/449733211)\n\nhttps://zhuanlan.zhihu.com/p/578567547 特征函数推导\n\nhttps://zhuanlan.zhihu.com/p/353187472 https://www.zhihu.com/question/354825596/answer/893242882 指数分布\n\nhttps://zhuanlan.zhihu.com/p/503557666 正态分布\n\n怎么来理解伽玛（gamma）分布？ - 知之的回答 - 知乎 https://www.zhihu.com/question/34866983/answer/60191363 伽马分布和其他分布之间的关系\n\n伽马分布，指数分布，卡方分布之间的关系及期望，方差 - 拾柒的文章 - 知乎 https://zhuanlan.zhihu.com/p/379131967\n\n[深入理解高斯分布 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/303359921) 多元高斯分布\n\n[混合高斯分布与其参数估计 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/596023351) 混合高斯分布\n\n","slug":"概率论中各种分布","published":1,"updated":"2023-11-12T10:25:36.530Z","_id":"clov7szoi001t5oog3laq8gyq","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"file:///C:\\Users\\24964\\Documents\\Tencent Files\\2496438098\\nt_qq\\nt_data\\Pic\\2023-10\\Ori\\78e67b20b808405a7fe8f2e1746f58c6.png\" alt=\"img\"></p>\n<h3 id=\"离散分布\"><a href=\"#离散分布\" class=\"headerlink\" title=\"离散分布\"></a>离散分布</h3><h4 id=\"Bernoulli-分布-Bernoulli-Distribution\"><a href=\"#Bernoulli-分布-Bernoulli-Distribution\" class=\"headerlink\" title=\"Bernoulli 分布(Bernoulli Distribution)\"></a>Bernoulli 分布(Bernoulli Distribution)</h4><h5 id=\"符号：-X-sim-B-1-p\"><a href=\"#符号：-X-sim-B-1-p\" class=\"headerlink\" title=\"符号：$X \\sim B(1, p)$\"></a>符号：$X \\sim B(1, p)$</h5><h5 id=\"概率：-P-X-k-p-k-1-p-1-k\"><a href=\"#概率：-P-X-k-p-k-1-p-1-k\" class=\"headerlink\" title=\"概率：$P(X = k) = p^{k}(1-p)^{1-k}$\"></a>概率：$P(X = k) = p^{k}(1-p)^{1-k}$</h5><h5 id=\"期望：-E-X-0-times-1-p-1-times-p-p\"><a href=\"#期望：-E-X-0-times-1-p-1-times-p-p\" class=\"headerlink\" title=\"期望：$E(X) = 0\\times (1-p) + 1 \\times p = p$\"></a>期望：$E(X) = 0\\times (1-p) + 1 \\times p = p$</h5><h5 id=\"方差：-D-X-E-X-2-E-X-2-p-p-2-p-1-p\"><a href=\"#方差：-D-X-E-X-2-E-X-2-p-p-2-p-1-p\" class=\"headerlink\" title=\"方差：$D(X) = E(X^{2}) - E(X)^{2} = p - p^2 = p(1-p)$\"></a>方差：$D(X) = E(X^{2}) - E(X)^{2} = p - p^2 = p(1-p)$</h5><h5 id=\"性质：\"><a href=\"#性质：\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><h5 id=\"应用：\"><a href=\"#应用：\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><h4 id=\"二项分布-Binomial-Distribution\"><a href=\"#二项分布-Binomial-Distribution\" class=\"headerlink\" title=\"二项分布(Binomial Distribution)\"></a>二项分布(Binomial Distribution)</h4><h5 id=\"符号：-X-sim-B-n-p\"><a href=\"#符号：-X-sim-B-n-p\" class=\"headerlink\" title=\"符号：$X\\sim B(n, p)$\"></a>符号：$X\\sim B(n, p)$</h5><h5 id=\"概率：\"><a href=\"#概率：\" class=\"headerlink\" title=\"概率：\"></a>概率：</h5><script type=\"math/tex; mode=display\">\nP(X = k) = \\begin{pmatrix}\n\nn \\\\\nk\n\\end{pmatrix} (1-p)^{n - k}p^k</script><h5 id=\"期望：\"><a href=\"#期望：\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\nE(X)= \\sum\\limits_{k = 0}^{n}kp(X = k) =\\sum\\limits_{k = 0}^{n} k\\begin{pmatrix}\nn \\\\\nk\n\\end{pmatrix} (1-p)^{n - k}p^k \\\\\n= \\sum\\limits_{k = 1}^{n}\\begin{pmatrix} n - 1\\\\ m - 1\\end{pmatrix}p^{k}(1-p)^{n - k} \\quad \\quad \\quad \\\\\n= \\sum\\limits_{k = 0}^{n - 1}np\\begin{pmatrix}n - 1 \\\\ k \\end{pmatrix} p^{k}(1-p)^{n - 1 - k} \\quad \\\\\n= np\\times (p + (1 - p))^{n - 1} \\quad \\quad \\quad \\quad \\quad  \\\\\n= np \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad</script><h5 id=\"方差：\"><a href=\"#方差：\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nD(X) = E(X^{2}) - E(X)^{2} =E(X(X-1)+X) - E(X)^{2} \\\\\n=E(X(X-1)) + E(X) - E(X)^{2} \\quad \\quad \\quad \\quad  \\\\\n\nE(X(X-1)) = \\sum\\limits_{k = 0}^{n}k(k - 1)\\begin{pmatrix} n \\\\ k\\end{pmatrix} p^{k}(1-p)^{n - k} \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad  \\\\ = n(n - 1)\\sum\\limits_{k = 2}^{n} \\begin{pmatrix} n - 2\\\\ k - 2\\end{pmatrix} p^{k}(1 - p)^{n - l} \\quad \\quad \\\\\n= n(n - 1)\\sum\\limits_{k = 0}^{n - 2}\\begin{pmatrix} n - 2 \\\\ k \\end{pmatrix} p^{k + 2}(1-p)^{n - 2 - k} \\\\\n= n(n - 1) p^{2} (1 + (1 - p))^{n - 2} \\ \\ \\ \\  \\quad \\quad \\quad \\quad  \\\\\n= n(n - 1)p^{2} \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\ \\ \\ \\quad \\quad \\\\\n\nD(X) = n(n -1)p^{2} + np - n^{2}p^{2}  = np(1-p) \\quad \\quad \\quad</script><h5 id=\"性质：-1\"><a href=\"#性质：-1\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><h5 id=\"应用：-1\"><a href=\"#应用：-1\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><ol>\n<li>一段时间内物理实验仪器捕获的粒子数目。</li>\n<li>一段时间内计算机病毒的入侵数。</li>\n<li>一本书中的错字数。</li>\n</ol>\n<h4 id=\"多项分布-Multinomial-Distribution\"><a href=\"#多项分布-Multinomial-Distribution\" class=\"headerlink\" title=\"多项分布(Multinomial Distribution)\"></a>多项分布(Multinomial Distribution)</h4><p>多项分布(Multinomial Distribution)，它是二项分布的推广。二项分布的试验结果只有两个(成功和失败)，而多项分布的试验结果则多于两个。</p>\n<h5 id=\"联合概率函数：\"><a href=\"#联合概率函数：\" class=\"headerlink\" title=\"联合概率函数：\"></a>联合概率函数：</h5><script type=\"math/tex; mode=display\">\nP(X_1 = x_1, X_2 = x_2, ..., X_k = x_k) = \\dfrac{n!}{x_1!x_2!...x_k!} p_1^{x_1}p_2^{x_2}...p_{k}^{x_k}</script><p>多项分布对于每一个结果都有均值和方差，分别为：</p>\n<h5 id=\"期望：-1\"><a href=\"#期望：-1\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\nE(X_i) = np_i</script><h5 id=\"方差：-1\"><a href=\"#方差：-1\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nD(X_i) = np_i(1-p_i)</script><h4 id=\"泊松分布-Possion-Distribution\"><a href=\"#泊松分布-Possion-Distribution\" class=\"headerlink\" title=\"泊松分布(Possion Distribution)\"></a>泊松分布(Possion Distribution)</h4><h5 id=\"符号：-X-sim-P-lambda\"><a href=\"#符号：-X-sim-P-lambda\" class=\"headerlink\" title=\"符号：$X\\sim P(\\lambda)$\"></a>符号：$X\\sim P(\\lambda)$</h5><h5 id=\"概率：-P-X-x-dfrac-e-lambda-lambda-x-x\"><a href=\"#概率：-P-X-x-dfrac-e-lambda-lambda-x-x\" class=\"headerlink\" title=\"概率：$P(X = x) = \\dfrac{e^{-\\lambda}\\lambda^{x}}{x!}$\"></a>概率：$P(X = x) = \\dfrac{e^{-\\lambda}\\lambda^{x}}{x!}$</h5><p>证明：<br>由 $\\lambda$ 的定义，单位时间内随机事件发生 $\\lambda$ 次，并且每一次事件发生都是独立的，和时间没有关系的。</p>\n<p>所以如果我们将单位单位时间划分为 n 份，当 n 趋近于正无穷的时候，我们可以认为每一段时间内事件发生的次数是均匀的。所以每一段时间事件发生的概率都是 $\\dfrac{\\lambda}{n}$ </p>\n<script type=\"math/tex; mode=display\">\nP(X = x) = \\lim\\limits_{n \\to +\\infty}\\begin{pmatrix} n \\\\ x\\end{pmatrix} (\\dfrac{\\lambda}{n})^{x}(1 - \\dfrac{\\lambda}{n})^{n - x} = \\dfrac{\\lambda^{k}}{k!}e^{-\\lambda}</script><h5 id=\"期望：-2\"><a href=\"#期望：-2\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X) &= \\sum\\limits_{k=0}^{+\\infty} k \\dfrac{\\lambda^{k}}{k!}e^{-\\lambda} \\\\\n&= \\lambda e^{-\\lambda} \\sum\\limits_{k = 1}^{+\\infty} \\dfrac{\\lambda^{k - 1}}{(k - 1)!} \\\\\n&= \\lambda e^{-\\lambda} e^{\\lambda} \\\\\n&= \\lambda\n\\end{aligned}</script><h5 id=\"方差：-2\"><a href=\"#方差：-2\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nE(X^{2}) = E(X(X - 1) + X) = E(X(X-1)) + E(X) \\\\</script><script type=\"math/tex; mode=display\">\n\\begin{aligned}\n\nE(X(X - 1)) &= \\sum\\limits_{k = 1}^{+\\infty} k(k - 1) \\dfrac{\\lambda^{k}}{k!}e^{-\\lambda} \\\\\n&=\\sum\\limits_{k = 2}^{+\\infty}\\dfrac{\\lambda^{k}}{(k - 2)!}e^{-\\lambda} \\\\\n&= \\lambda^{2}e^{-\\lambda}\\sum\\limits_{k = 0}^{+\\infty}\\dfrac{\\lambda^{k}}{k!}\\\\\n&= \\lambda^{2}\n\\end{aligned}</script><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nD(X) &= E(X^{2}) - E(X)^{2} \\\\\n&= E(X(X - 1)) + E(X) - E(X)^{2} \\\\\n&= \\lambda^{2} + \\lambda - \\lambda^{2}\\\\\n&= \\lambda\n\\end{aligned}</script><h5 id=\"性质：-2\"><a href=\"#性质：-2\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><ol>\n<li>伯努利分布是二项分布的特殊情况，当 n = 1 的时候，二项分布变为伯努利分布。泊松分布可以被看作是二项分布的极端情况，在试验次数非常多或者成功概率非常小的情况下，可以近似为泊松分布。指数分布也可以由泊松分布推导而来。</li>\n<li>泊松分布中 $\\lambda$ 表示单位时间内随机事件的平均发生次数。在一个特定时间内，某一个事件都会在任意时刻发生(前提是，每次发生都是独立的，并且跟事件没有关系)。</li>\n</ol>\n<h5 id=\"应用：-2\"><a href=\"#应用：-2\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><p>泊松分布是用来描述在给定时间段内随机事件发生次数的分布。例如一天之间收到的电子邮件数量。</p>\n<h4 id=\"几何分布-Geometric-Distribution\"><a href=\"#几何分布-Geometric-Distribution\" class=\"headerlink\" title=\"几何分布(Geometric Distribution)\"></a>几何分布(Geometric Distribution)</h4><h5 id=\"符号：-X-sim-G-p\"><a href=\"#符号：-X-sim-G-p\" class=\"headerlink\" title=\"符号：$X\\sim G(p)$\"></a>符号：$X\\sim G(p)$</h5><h5 id=\"概率：-P-X-k-1-p-k-1-p\"><a href=\"#概率：-P-X-k-1-p-k-1-p\" class=\"headerlink\" title=\"概率：$P(X = k) = (1-p)^{k - 1}p$\"></a>概率：$P(X = k) = (1-p)^{k - 1}p$</h5><h5 id=\"期望：-3\"><a href=\"#期望：-3\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X) &= \\sum\\limits_{k = 1}^{+\\infty} k \\cdot (1-p)^{k - 1}p \\\\\n&=p \\sum\\limits_{k = 1}^{+\\infty} \\left( \\int k \\cdot (1-p)^{k - 1}\\right)' \\\\\n&= p \\left(-\\sum\\limits_{k = 1}^{+\\infty}(1-p)^{k} \\right)' \\\\\n&= p \\cdot \\dfrac{1}{p^{2}} \\\\\n&= \\dfrac{1}{p}\n\\end{aligned}</script><h5 id=\"方差：-3\"><a href=\"#方差：-3\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nD(X) &= E(X^{2}) - E(X)^{2} \\\\\n&= \\sum\\limits_{k = 1}^{+\\infty} k^{2}(1 - p)^{k - 1}p - \\dfrac{1}{p^{2}} \\\\\n&= p \\left[\\sum\\limits_{k = 1}^{+\\infty}(k+ 1)kq^{k - 1} - \\sum\\limits_{k = 1}^{+\\infty} kq^{k - 1} \\right] - \\dfrac{1}{p^{2}} \\\\\n&= \\dfrac{1 - p}{p^{2}}\n\\end{aligned}</script><h5 id=\"性质：-3\"><a href=\"#性质：-3\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><h4 id=\"超几何分布-Hypergeometric-Distribution\"><a href=\"#超几何分布-Hypergeometric-Distribution\" class=\"headerlink\" title=\"超几何分布(Hypergeometric Distribution)\"></a>超几何分布(Hypergeometric Distribution)</h4><h5 id=\"符号：\"><a href=\"#符号：\" class=\"headerlink\" title=\"符号：\"></a>符号：</h5><h5 id=\"概率：-P-X-k-frac-begin-pmatrix-M-k-end-pmatrix-begin-pmatrix-N-M-n-k-end-pmatrix-begin-pmatrix-N-M-end-pmatrix-k-leq-min-n-M-k-1\"><a href=\"#概率：-P-X-k-frac-begin-pmatrix-M-k-end-pmatrix-begin-pmatrix-N-M-n-k-end-pmatrix-begin-pmatrix-N-M-end-pmatrix-k-leq-min-n-M-k-1\" class=\"headerlink\" title=\"概率：$P(X = k) = \\frac{\\begin{pmatrix} M \\\\ k\\end{pmatrix} \\begin{pmatrix} N - M \\\\ n - k\\end{pmatrix}}{\\begin{pmatrix} N \\\\ M\\end{pmatrix}}, k \\leq \\min(n, M) = k_1$\"></a>概率：$P(X = k) = \\frac{\\begin{pmatrix} M \\\\ k\\end{pmatrix} \\begin{pmatrix} N - M \\\\ n - k\\end{pmatrix}}{\\begin{pmatrix} N \\\\ M\\end{pmatrix}}, k \\leq \\min(n, M) = k_1$</h5><h5 id=\"期望：-4\"><a href=\"#期望：-4\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X) &= \\sum\\limits_{k = 1}^{k_1} k \\cdot \\frac{\\begin{pmatrix} M \\\\ k\\end{pmatrix} \\begin{pmatrix} N - M \\\\ n - k\\end{pmatrix}}{\\begin{pmatrix} N \\\\ M\\end{pmatrix}} \\\\\n&= \\sum\\limits_{k = 1}^{k_1} \\begin{pmatrix} N - M \\\\ n - k\\end{pmatrix}\\times \\frac{\\frac{M(M - 1)!}{(k - 1)!(M - k)!}}{\\frac{N(N - 1)!}{n(n - 1)!(N-n)!}} \\\\\n&= \\dfrac{nM}{N}\\sum\\limits_{k = 1}^{k_1} \\frac{\\begin{pmatrix} M - 1 \\\\ k - 1\\end{pmatrix}\\begin{pmatrix}N - M \\\\ n - k \\end{pmatrix} }{\\begin{pmatrix} N - 1\\\\ n - 1\\end{pmatrix}}\\\\\n&= \\dfrac{nM}{N} \\frac{\\sum\\limits_{k = 1}^{k_1} \\begin{pmatrix} M - 1 \\\\ k - 1\\end{pmatrix}\\begin{pmatrix}N - 1 - (M - 1) \\\\ n - 1 - (k - 1) \\end{pmatrix}}{\\begin{pmatrix} N - 1 \\\\ n - 1\\end{pmatrix}} \\\\\n&= \\dfrac{nM}{N}\n\\end{aligned}</script><h5 id=\"方差：-4\"><a href=\"#方差：-4\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nE(X^{2})= E(X(X - 1) + X) = E(X(X - 1)) + E(X)</script><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X(X - 1))) &= \\sum\\limits_{k = 0}^{k_1} k(k - 1) \\frac{\\begin{pmatrix}M \\\\k \\end{pmatrix} \\begin{pmatrix} N - M \\\\ n - k\\end{pmatrix}}{\\begin{pmatrix} N \\\\ n\\end{pmatrix}} \\\\\n&= \\frac{nM(n - 1)(M - 1)}{N(N - 1)} \\sum\\limits_{k = 2}^{k_1} \\frac{\\begin{pmatrix} M - 2 \\\\ k - 2\\end{pmatrix} \\begin{pmatrix} N - M \\\\ n - k\\end{pmatrix}}{\\begin{pmatrix} N - 2 \\\\ n - 2\\end{pmatrix}} \\\\\n&= \\frac{nM(n - 1)(M - 1)}{N(N - 1)}\n\\end{aligned}</script><script type=\"math/tex; mode=display\">\nD(X) = E(X(X - 1))) + E(X) - E(X)^{2}  = \\frac{nM(N - M)(N - n)}{N^{2}(N - 1)}</script><h5 id=\"性质：-4\"><a href=\"#性质：-4\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><ol>\n<li>当总物品个数远远大于选的个数，或者总物品个数区域无穷大的时候，超几何分布可以近似为二项分布。</li>\n<li></li>\n</ol>\n<h5 id=\"应用：-3\"><a href=\"#应用：-3\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><h4 id=\"负二项分布-帕斯卡分布-Negative-Binomial-Distribution-Pascal-Distribution\"><a href=\"#负二项分布-帕斯卡分布-Negative-Binomial-Distribution-Pascal-Distribution\" class=\"headerlink\" title=\"负二项分布(帕斯卡分布, Negative Binomial Distribution, Pascal Distribution)\"></a>负二项分布(帕斯卡分布, Negative Binomial Distribution, Pascal Distribution)</h4><h5 id=\"符号：-X-sim-text-Pascal-n-p\"><a href=\"#符号：-X-sim-text-Pascal-n-p\" class=\"headerlink\" title=\"符号：$X \\sim \\text{Pascal}(n, p)$\"></a>符号：$X \\sim \\text{Pascal}(n, p)$</h5><h5 id=\"概率：-P-X-x-begin-pmatrix-x-1-r-1-end-pmatrix-p-r-1-p-x-r\"><a href=\"#概率：-P-X-x-begin-pmatrix-x-1-r-1-end-pmatrix-p-r-1-p-x-r\" class=\"headerlink\" title=\"概率：$P(X = x) = \\begin{pmatrix} x - 1\\ \\\\ r - 1\\end{pmatrix}p^{r}(1  -p)^{x - r}$\"></a>概率：$P(X = x) = \\begin{pmatrix} x - 1\\ \\\\ r - 1\\end{pmatrix}p^{r}(1  -p)^{x - r}$</h5><p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231024232853695.png\" alt=\"image-20231024232853695\"></p>\n<h5 id=\"期望：-5\"><a href=\"#期望：-5\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X) &= \\sum\\limits_{x = r}^{+\\infty} x f(x) \\\\\n&= \\sum\\limits_{x = r}^{+\\infty} x\\begin{pmatrix} x - 1 \\\\ r - 1\\end{pmatrix} p^{r}(1 - p)^{x - r} \\\\\n&= \\frac{r}{p} \\sum\\limits_{x = r}^{+\\infty} \\begin{pmatrix}x  \\\\ r \\end{pmatrix} p^{r + 1} (1 - p)^{x  - r} \\\\\n&= \\frac{rp}{1 - p}\n\\end{aligned}</script><h5 id=\"方差：-5\"><a href=\"#方差：-5\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X^{2}) &= \\sum\\limits_{x = r}^{+\\infty} x^{2}f(x) \\\\\n&= \\sum\\limits_{x = r}^{+\\infty} x^{2} \\begin{pmatrix}x - 1 \\\\ r-  1 \\end{pmatrix}p^{r}(1 - p)^{x - r} \\\\\n&= \\frac{r}{p} \\sum\\limits_{x = r}^{+\\infty} x\\begin{pmatrix} x \\\\ r\\end{pmatrix}p^{r + 1} (1 - p)^{x- r} \\\\\n&= \\frac{r}{p} \\left[\\sum\\limits_{x = r}^{+\\infty}(x + 1)\\begin{pmatrix} x  \\\\ r\\end{pmatrix} p^{r+ 1}(1 - p)^{x - r} - \\sum\\limits_{x = r}^{+\\infty}\\begin{pmatrix} x \\\\ r\\end{pmatrix} p^{r+ 1}(1 - p)^{x - r}\\right] \\\\\n&= \\frac{r}{p}(\\frac{r + 1}{p} - 1) \\\\\n&= \\frac{r(r - p + 1)}{p^{2}}\n\\end{aligned}</script><script type=\"math/tex; mode=display\">\nD(X) = E(X^{2}) - E(X)^{2} = \\frac{r(1 - p)}{p^{2}}</script><h5 id=\"性质：-5\"><a href=\"#性质：-5\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><p>Binomial 分布和 Negative Binomial 分布都是多次重复的 Bernoulli 实验。</p>\n<p>Binomial关注的是，重复Bernoulli实验成功概率为p，条件为总共实验N次，随机变量为N次实验中成功实验次数k（k∈Z,k∈[0,N]），该随机变量[概率分布为Binomial分布。</p>\n<p>Negative Binomial关注的是，重复Bernoulli实验成功概率为p，条件为累计出现r次失败，随机变量为成功实验次数k（k∈Z,k∈[0,+∞)），该随机变量的概率分布为Negative Binomial分布。</p>\n<p>Binomial和Negative Binomial分布的随机变量都是成功实验次数，条件不同。从定义上来看，”负“可以理解为站在失败次数的角度看成功。</p>\n<h5 id=\"应用：-4\"><a href=\"#应用：-4\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><h4 id=\"伽马-泊松分布-Gamma-Poisson-Distribution\"><a href=\"#伽马-泊松分布-Gamma-Poisson-Distribution\" class=\"headerlink\" title=\"伽马-泊松分布(Gamma-Poisson Distribution)\"></a>伽马-泊松分布(Gamma-Poisson Distribution)</h4><h5 id=\"符号：-X-sim-text-gamma-Poisson-alpha-beta\"><a href=\"#符号：-X-sim-text-gamma-Poisson-alpha-beta\" class=\"headerlink\" title=\"符号：$X \\sim \\text{gamma-Poisson}(\\alpha, \\beta)$\"></a>符号：$X \\sim \\text{gamma-Poisson}(\\alpha, \\beta)$</h5><h5 id=\"概率密度函数：\"><a href=\"#概率密度函数：\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\dfrac{\\Gamma(x + \\beta) \\alpha^{x}}{\\Gamma(\\beta)(1+\\alpha)^{\\beta + x}x!}</script><p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231024233912306.png\" alt=\"image-20231024233912306\"></p>\n<h5 id=\"期望：-6\"><a href=\"#期望：-6\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\nE(X) = \\alpha\\beta</script><h5 id=\"方差：-6\"><a href=\"#方差：-6\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nD(X) = \\alpha \\beta + \\alpha^{2}\\beta</script><h5 id=\"性质：-6\"><a href=\"#性质：-6\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><ol>\n<li>做变换：$\\alpha = (1 - p) / p, \\beta = n$，就得到 Pascal 分布</li>\n</ol>\n<h4 id=\"Zeta-分布-Zeta-Distribution\"><a href=\"#Zeta-分布-Zeta-Distribution\" class=\"headerlink\" title=\"Zeta 分布(Zeta Distribution)\"></a>Zeta 分布(Zeta Distribution)</h4><h5 id=\"符号：-X-sim-text-Zeta-alpha\"><a href=\"#符号：-X-sim-text-Zeta-alpha\" class=\"headerlink\" title=\"符号：$X \\sim \\text{Zeta}(\\alpha)$\"></a>符号：$X \\sim \\text{Zeta}(\\alpha)$</h5><h5 id=\"概率函数：\"><a href=\"#概率函数：\" class=\"headerlink\" title=\"概率函数：\"></a>概率函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\dfrac{1}{x^{\\alpha}\\sum\\limits_{i = 1}^{+\\infty}(1/i)^{\\alpha}} \\quad x = 1, 2, 3, ...</script><p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231026215915467.png\" alt=\"image-20231026215915467\"></p>\n<h5 id=\"累计分布函数\"><a href=\"#累计分布函数\" class=\"headerlink\" title=\"累计分布函数\"></a>累计分布函数</h5><script type=\"math/tex; mode=display\">\nF(x) = P(X \\leq x) = \\dfrac{\\sum\\limits_{i = 1}^{x} (1/i)^{\\alpha}}{\\zeta(\\alpha)} \\quad x = 1, 2, ...</script><h5 id=\"期望：-7\"><a href=\"#期望：-7\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\nE(X) = \\dfrac{\\zeta(\\alpha - 1)}{\\zeta(\\alpha)}</script><h5 id=\"方差：-7\"><a href=\"#方差：-7\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nD(X) = \\dfrac{\\zeta(\\alpha)\\zeta(\\alpha - 2) - \\zeta(\\alpha - 1)^{2}}{\\zeta(\\alpha)^{2}}</script><h4 id=\"Zipf-分布-齐夫定律\"><a href=\"#Zipf-分布-齐夫定律\" class=\"headerlink\" title=\"Zipf 分布(齐夫定律)\"></a>Zipf 分布(齐夫定律)</h4><h5 id=\"符号：-X-sim-text-Zipf-alpha-n\"><a href=\"#符号：-X-sim-text-Zipf-alpha-n\" class=\"headerlink\" title=\"符号：$X \\sim \\text{Zipf}(\\alpha, n)$\"></a>符号：$X \\sim \\text{Zipf}(\\alpha, n)$</h5><h5 id=\"概率函数：-1\"><a href=\"#概率函数：-1\" class=\"headerlink\" title=\"概率函数：\"></a>概率函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\dfrac{1}{x^{\\alpha}\\sum\\limits_{i = 1}^{n}(1 / i)^{\\alpha}} \\quad  x = 1, 2, 3, ..., n</script><p>下面是 $\\alpha = 1, n = 10$</p>\n<p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231026224615881.png\" alt=\"image-20231026224615881\"></p>\n<p>我们记 $H_{n, \\alpha} = \\sum\\limits_{i = 1}^{n} \\left(\\dfrac{1}{i}\\right)^{\\alpha}$</p>\n<h5 id=\"期望：-8\"><a href=\"#期望：-8\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\nE(X) = \\dfrac{H_{n, \\alpha - 1}}{H_{n, \\alpha}}</script><h5 id=\"方差：-8\"><a href=\"#方差：-8\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nD(X) = \\dfrac{H_{n, \\alpha - 2}H_{n, \\alpha} - H_{n, \\alpha}^{2}}{H_{n, \\alpha}^{2}}</script><h5 id=\"齐夫定律：\"><a href=\"#齐夫定律：\" class=\"headerlink\" title=\"齐夫定律：\"></a>齐夫定律：</h5><p>在自然语言的语料库里，一个单词出现的率与它在频<br>率表里的排名成反比。所以，频率最高的单词出现的频率大约是出现频率第二位的单词的2<br>倍，而出现频率第二位的单词侧是出现频率第四位的单词的2倍。这个定律被作为任何与幂<br>定律概率分布有关的事物的参考。</p>\n<h5 id=\"应用-or-遵循该定律的现象：\"><a href=\"#应用-or-遵循该定律的现象：\" class=\"headerlink\" title=\"应用 or 遵循该定律的现象：\"></a>应用 or 遵循该定律的现象：</h5><ol>\n<li>英文单词或中文汉字的出现频率：不仅适用于语料全体，也适用于单独的一篇文章</li>\n<li>网页访问频率</li>\n<li>城镇人口与城镇等级的关系</li>\n<li>收入前3%的人的收入</li>\n<li>地震震级</li>\n<li>固体破碎时的碎片大小</li>\n</ol>\n<h3 id=\"连续分布\"><a href=\"#连续分布\" class=\"headerlink\" title=\"连续分布\"></a>连续分布</h3><h4 id=\"均匀分布-Uniform-Distribution\"><a href=\"#均匀分布-Uniform-Distribution\" class=\"headerlink\" title=\"均匀分布(Uniform Distribution)\"></a>均匀分布(Uniform Distribution)</h4><h5 id=\"符号：-X-sim-U-a-b\"><a href=\"#符号：-X-sim-U-a-b\" class=\"headerlink\" title=\"符号：$X \\sim U(a, b)$\"></a>符号：$X \\sim U(a, b)$</h5><h5 id=\"概率密度函数：-1\"><a href=\"#概率密度函数：-1\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\begin{cases} \\dfrac{1}{b - a} , a < x < b \\\\\n0\\end{cases}</script><h5 id=\"分布函数：\"><a href=\"#分布函数：\" class=\"headerlink\" title=\"分布函数：\"></a>分布函数：</h5><script type=\"math/tex; mode=display\">\nF(x) = \\begin{cases}\n\\frac{x - a}{b - a}, &a < x < b \\\\\n0,&x < a \\\\\n1,&x > b\n\\end{cases}</script><h5 id=\"期望：-9\"><a href=\"#期望：-9\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X) &= \\int_{-\\infty}^{+\\infty} x \\cdot f(x) \\mathrm{d}x \\\\\n&= \\int_{a}^{b} \\dfrac{x}{b - a} \\mathrm{d}x \\\\\n&= \\dfrac{a + b}{2}\n\\end{aligned}</script><h5 id=\"方差：-9\"><a href=\"#方差：-9\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nE(X^{2}) &= \\int_{a}^{b} \\dfrac{x^{2}}{b - a} \\mathrm{d}x\\\\\n&= \\dfrac{a^{2}+ab + b^{2}}{3}</script><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nD(X) &= E(X^{2}) - E(X)^{2} \\\\\n&= \\dfrac{a^{2}+ab + b^{2}}{3} - \\left( \\dfrac{a+b}{2}\\right)^{2} \\\\\n&= \\dfrac{(b - a)^{2}}{12}\n\\end{aligned}</script><h5 id=\"性质：-7\"><a href=\"#性质：-7\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><h5 id=\"应用：-5\"><a href=\"#应用：-5\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><h4 id=\"指数分布-Exponential-Distribution\"><a href=\"#指数分布-Exponential-Distribution\" class=\"headerlink\" title=\"指数分布(Exponential Distribution)\"></a>指数分布(Exponential Distribution)</h4><p>指数分布一个很重要的特征就是无记忆性 $P(x &gt; s | x &gt; t) = P(x &gt; s - t), s &gt; t$ 。如果我们使用 x 表示等待的时间。那么这个式子的含义就是 <strong>未来我还需要等到多少时间和我已经等待了多长时间没有关系</strong>。</p>\n<p>无记忆性的离散版本是 <strong>几何分布。</strong></p>\n<h5 id=\"符号：-X-sim-E-lambda\"><a href=\"#符号：-X-sim-E-lambda\" class=\"headerlink\" title=\"符号：$X\\sim E(\\lambda)$\"></a>符号：$X\\sim E(\\lambda)$</h5><h5 id=\"概率密度函数：-2\"><a href=\"#概率密度函数：-2\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\begin{cases}\n\\lambda e^{-\\lambda x}, &x > 0 \\\\\n\\\\\n0, &x \\leq 0\n\\end{cases}</script><p>推导：</p>\n<p>我们根据实际情况来考虑，如果一个产品的使用寿命是 T，分布函数是 $F(t)$，那么寿命大于 t 的概率为 $S(t) = 1- F(t)$</p>\n<p>如果一个产品已经使用 t 时间，那么在 $(t, t + \\Delta t)$ 这一段时间内，死亡的「风险」为:</p>\n<script type=\"math/tex; mode=display\">\n\\lambda(t) = \\lim\\limits_{\\Delta t \\to 0} \\dfrac{P(t \\leq T \\leq t + \\Delta t)}{\\mathrm{d}t \\cdot S(t)} = \\dfrac{f(t)}{S(t)} = -\\dfrac{S'(t)}{S(t)} = -\\dfrac{\\mathrm{d}}{\\mathrm{d}t}\\ln(S(t))</script><blockquote>\n<p>解释：因为我们首先需要活到这个时间，然后在这个时间段死亡，所以有 $S(t) \\cdot \\lambda(t) = p(T = t)$</p>\n</blockquote>\n<p>我们称这个 $\\lambda(t)$ 为风险函数（到这里还没有涉及到无记忆性，这个 $\\lambda(t)$ 是一个普遍的风险函数）</p>\n<p>如果我们要满足无记忆性，就要有 $\\lambda(t) = \\text{Const}$（也就是我们在每一个时间下「死亡」的概率都是等大的）</p>\n<p>或者我们由「无记忆性」的直接式子推导：$P(T &gt; s | T &gt; t) = P(T &gt; s - t) \\Rightarrow P(t \\leq T \\leq t + \\Delta t) = P(T &lt; \\mathrm{d}t) \\cdot S(t)$ 也是得到 $\\lambda(t) = \\text{Const}$ </p>\n<p>所以有</p>\n<script type=\"math/tex; mode=display\">\n-\\dfrac{\\mathrm{d}}{\\mathrm{d}t}\\ln(S(t)) = \\text{Const}</script><p>解得 $F(t) = 1 - e^{-\\text{Const} \\cdot t}$</p>\n<p>其中，$\\text{Const}$ 表示每一个时间点死亡的风险大小，也就是每一个时间点死亡的概率大小。</p>\n<h5 id=\"分布函数：-1\"><a href=\"#分布函数：-1\" class=\"headerlink\" title=\"分布函数：\"></a>分布函数：</h5><script type=\"math/tex; mode=display\">\nF(x) = \\begin{cases}\n1 - e^{-\\lambda x}, &x > 0 \\\\\n0, &x \\leq 0\n\\end{cases}</script><h5 id=\"期望：-10\"><a href=\"#期望：-10\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X) &= \\int_{-\\infty}^{+\\infty} x \\cdot f(x) \\mathrm{d}x \\\\\n&= \\int_0^{+\\infty} x \\cdot \\lambda e^{-\\lambda x} \\mathrm{d}x \\\\\n&= x(-e^{-\\lambda x})|_{0}^{+\\infty} - \\int_{0}^{+\\infty} -e^{-\\lambda x} \\mathrm{d}x \\\\\n&= \\frac{1}{\\lambda}\n\\end{aligned}</script><h5 id=\"方差：-10\"><a href=\"#方差：-10\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X^{2}) &= \\int_0^{+\\infty} x^{2} \\cdot \\lambda e^{-\\lambda x} \\mathrm{d}x \\\\\n&= \\int_0^{+\\infty} x^{2} \\mathrm{d}(-e^{-\\lambda x}) \\\\\n&= x^{2}(-e^{-\\lambda x})|_{0}^{+\\infty} + 2\\int_0^{+\\infty}xe^{-\\lambda x} \\mathrm{d}x \\\\\n&= \\frac{2}{\\lambda^{2}}\n\\end{aligned}</script><script type=\"math/tex; mode=display\">\nD(X) = E(X^{2}) - E(X)^{2} = \\frac{1}{\\lambda^{2}}</script><h5 id=\"性质：-8\"><a href=\"#性质：-8\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><p>指数分布通常用来建模持续时间，只不过指数分布能够建模的持续时间具有比较特殊的性质，也就是所谓的“无记忆性”</p>\n<p>无记忆性：</p>\n<script type=\"math/tex; mode=display\">\n</script><h5 id=\"应用：-6\"><a href=\"#应用：-6\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><ol>\n<li><p>泊松分布、指数分布、二项分布、伯努利分布之间的关系：</p>\n<p>当 n 趋近于无穷大时，二项分布可以近似为泊松分布；当 $\\lambda$ 趋近于无穷大<br>时，泊松分布可以近似为正态分布；而指数分布则是泊松分布在连续时间上的推广，因此也与泊松<br>分布有一定的联系。但是，这些分布之间的应用场景和特点是不同的，需要根据实际问题选择合适<br>的分布模型。</p>\n</li>\n<li></li>\n</ol>\n<h4 id=\"正态分布-高斯分布-Normal-Distribution\"><a href=\"#正态分布-高斯分布-Normal-Distribution\" class=\"headerlink\" title=\"正态分布(高斯分布, Normal Distribution)\"></a>正态分布(高斯分布, Normal Distribution)</h4><h5 id=\"符号：-X-sim-N-mu-sigma-2\"><a href=\"#符号：-X-sim-N-mu-sigma-2\" class=\"headerlink\" title=\"符号：$X\\sim N(\\mu, \\sigma^{2})$\"></a>符号：$X\\sim N(\\mu, \\sigma^{2})$</h5><h5 id=\"概率密度函数：-3\"><a href=\"#概率密度函数：-3\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\dfrac{1}{\\sqrt{2\\pi} \\sigma}e^{-\\frac{-(x-\\mu)^{2}}{2\\sigma^{2}}}(\\mu \\in R, \\sigma > 0)</script><h5 id=\"分布函数：-2\"><a href=\"#分布函数：-2\" class=\"headerlink\" title=\"分布函数：\"></a>分布函数：</h5><h5 id=\"期望：-11\"><a href=\"#期望：-11\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X) &= \\int_{-\\infty}^{+\\infty} x \\cdot \\frac{1}{\\sqrt{2 \\pi} \\sigma}e^{-\\frac{-(x-\\mu)^{2}}{2\\sigma^{2}}} \\mathrm{d}x \\\\\n&=\\int_{-\\infty}^{+\\infty}(x - \\mu + \\mu) \\cdot \\frac{1}{\\sqrt{2\\pi}\\sigma}e^{-\\frac{(x - \\mu)^{2}}{2\\sigma^{2}}} \\mathrm{d}(x - \\mu)\\\\\n&= \\int_{-\\infty}^{+\\infty} \\frac{t}{\\sqrt{2\\pi}\\sigma}e^{-\\frac{t^{2}}{2\\sigma^{2}}} \\mathrm{d}t + \\mu \\int_{-\\infty}^{+\\infty}\\frac{1}{\\sqrt{2\\pi}\\sigma} e^{-\\frac{(x - \\mu)^{2}}{2\\sigma^{2}}} \\mathrm{d}x \\\\\n&= 0 + \\mu \\\\\n&= \\mu\n\\end{aligned}</script><h5 id=\"方差：-11\"><a href=\"#方差：-11\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nD(X) &= \\int_{-\\infty}^{+\\infty} x^{2} \\cdot \\frac{1}{\\sqrt{2 \\pi} \\sigma}e^{-\\frac{-(x-\\mu)^{2}}{2\\sigma^{2}}} \\mathrm{d}x \\\\\n&= \\int_{-\\infty}^{+\\infty}(x - \\mu)^{2} f(x) \\mathrm{d}x + 2\\mu \\int_{-\\infty}^{+\\infty}x \\cdot f(x) \\mathrm{d}x - \\mu^{2} \\int_{-\\infty}^{+\\infty} f(x)\\mathrm{d}x \\\\\n&= \\frac{1}{\\sqrt{2\\pi} \\sigma}\\int_{0}^{+\\infty} \\sqrt{t}e^{\\frac{t}{2\\sigma^{2}}} \\mathrm{d}t + 2\\mu^{2} - \\mu^{2}\\\\\n&= \\sigma^{2}\n\\end{aligned}</script><h5 id=\"性质：-9\"><a href=\"#性质：-9\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><p>标准正态分布：</p>\n<h5 id=\"应用：-7\"><a href=\"#应用：-7\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><h4 id=\"多元高斯分布-Multivariate-Gaussian-Distribution\"><a href=\"#多元高斯分布-Multivariate-Gaussian-Distribution\" class=\"headerlink\" title=\"多元高斯分布(Multivariate Gaussian Distribution)\"></a>多元高斯分布(Multivariate Gaussian Distribution)</h4><h5 id=\"概率密度函数：-4\"><a href=\"#概率密度函数：-4\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><h5 id=\"应用：多元高斯分布的性质和应用在统计学、机器学习、信号处理和贝叶斯推断等领域中都非常重要。\"><a href=\"#应用：多元高斯分布的性质和应用在统计学、机器学习、信号处理和贝叶斯推断等领域中都非常重要。\" class=\"headerlink\" title=\"应用：多元高斯分布的性质和应用在统计学、机器学习、信号处理和贝叶斯推断等领域中都非常重要。\"></a>应用：多元高斯分布的性质和应用在统计学、机器学习、信号处理和贝叶斯推断等领域中都非常重要。</h5><h4 id=\"混合高斯分布-Mixture-of-Gaussian-Distributions\"><a href=\"#混合高斯分布-Mixture-of-Gaussian-Distributions\" class=\"headerlink\" title=\"混合高斯分布(Mixture of Gaussian Distributions)\"></a>混合高斯分布(Mixture of Gaussian Distributions)</h4><h5 id=\"应用：-8\"><a href=\"#应用：-8\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><p>混合高斯模型在许多领域中有广泛的应用，如模式识别、聚类分析、异常检测和图像分割。它允许建模复杂的数据分布，其中数据点可以由多个不同的分布生成，而不仅仅是单一的高斯分布。这使得混合高斯模型成为数据建模和分析中的强大工具。</p>\n<h4 id=\"对数正态分布-Log-Normal-Distribution\"><a href=\"#对数正态分布-Log-Normal-Distribution\" class=\"headerlink\" title=\"对数正态分布(Log-Normal Distribution)\"></a>对数正态分布(Log-Normal Distribution)</h4><h4 id=\"伽马分布-Gamma-Distribution\"><a href=\"#伽马分布-Gamma-Distribution\" class=\"headerlink\" title=\"伽马分布(Gamma Distribution)\"></a>伽马分布(Gamma Distribution)</h4><h5 id=\"符号：-X-sim-Ga-alpha-lambda\"><a href=\"#符号：-X-sim-Ga-alpha-lambda\" class=\"headerlink\" title=\"符号：$X \\sim Ga(\\alpha, \\lambda)$\"></a>符号：$X \\sim Ga(\\alpha, \\lambda)$</h5><h5 id=\"概率密度函数：-5\"><a href=\"#概率密度函数：-5\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\begin{cases}\n\\dfrac{\\lambda^{\\alpha}}{\\Gamma(\\alpha)} x^{\\alpha - 1}e^{-\\lambda x}, &x \\geq 0\\\\\n0 & x < 0\n\\end{cases}</script><h5 id=\"期望：-12\"><a href=\"#期望：-12\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X) &= \\dfrac{\\lambda^{\\alpha}}{\\Gamma(\\alpha)}\\int_{0}^{+\\infty} x^{\\alpha} e^{-\\lambda x} \\mathrm{d}x \\\\ &= \\dfrac{\\lambda^{\\alpha}}{\\Gamma(\\alpha)} \\int_{0}^{+\\infty} \\dfrac{t^{\\alpha}}{\\lambda ^{\\alpha + 1}}e^{-t} \\mathrm{d}t \\\\\n&= \\dfrac{\\Gamma(\\alpha  +1)}{\\Gamma(\\alpha) \\cdot \\lambda} \\\\\n&= \\frac{\\alpha}{\\lambda}\n\\end{aligned}</script><h5 id=\"方差：-12\"><a href=\"#方差：-12\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X^{2}) &= \\int_{0}^{+\\infty} x^{2} \\cdot \\dfrac{\\lambda^{\\alpha}}{\\Gamma(\\alpha)} x^{\\alpha - 1}e^{-\\lambda x} \\mathrm{d}x \\\\\n&= \\dfrac{1}{\\lambda^{2}\\Gamma(\\alpha)} \\int_0^{+\\infty} t^{\\alpha+1}e^{-t}\\mathrm{d}t \\\\\n&= \\dfrac{\\alpha(\\alpha + 1)}{\\lambda^{2}}\n\\end{aligned}</script><script type=\"math/tex; mode=display\">\nD(X) = E(X^{2}) - E(X)^{2}  = \\dfrac{\\alpha}{\\lambda^{2}}</script><h5 id=\"性质：-10\"><a href=\"#性质：-10\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><ol>\n<li><p>$\\alpha  = 1$ 的时候，伽马分布与指数分布之间的关系就建立起来了，有 $Ga(1, \\lambda ) = E(\\lambda)$</p>\n</li>\n<li><p>当 $\\alpha = \\dfrac{n}{2}, \\lambda = \\dfrac{1}{2}$ 的时候，伽马分布和卡方分布之间的关系就建立起来了，有 $Ga(\\dfrac{n}{2}, \\dfrac{1}{2}) = \\mathcal{X}^{2}(n)$</p>\n</li>\n<li><p>伽马分布的可加性。<img src=\"/.com//Users\\梁云森\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231024194312138.png\" alt=\"image-20231024194312138\"></p>\n</li>\n<li></li>\n</ol>\n<h5 id=\"应用：-9\"><a href=\"#应用：-9\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><h4 id=\"对数伽马分布-Log-Gamma-Distribution\"><a href=\"#对数伽马分布-Log-Gamma-Distribution\" class=\"headerlink\" title=\"对数伽马分布(Log-Gamma Distribution)\"></a>对数伽马分布(Log-Gamma Distribution)</h4><h5 id=\"符号：-X-sim-text-log-gamma-alpha-beta\"><a href=\"#符号：-X-sim-text-log-gamma-alpha-beta\" class=\"headerlink\" title=\"符号：$X \\sim \\text{log-gamma}(\\alpha, \\beta)$\"></a>符号：$X \\sim \\text{log-gamma}(\\alpha, \\beta)$</h5><h5 id=\"概率密度函数：-6\"><a href=\"#概率密度函数：-6\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\dfrac{e^{\\beta x}e^{-e^{x} / a}}{\\alpha^{\\beta}\\Gamma(\\beta)} -\\infty < x < +\\infty</script><p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231024233520269.png\" alt=\"image-20231024233520269\"></p>\n<h4 id=\"贝塔分布-Beta-Distribution\"><a href=\"#贝塔分布-Beta-Distribution\" class=\"headerlink\" title=\"贝塔分布(Beta Distribution)\"></a>贝塔分布(Beta Distribution)</h4><h5 id=\"符号：-X-sim-Beta-alpha-beta\"><a href=\"#符号：-X-sim-Beta-alpha-beta\" class=\"headerlink\" title=\"符号：$X \\sim \\Beta(\\alpha, \\beta)$\"></a>符号：$X \\sim \\Beta(\\alpha, \\beta)$</h5><h5 id=\"概率密度函数：-7\"><a href=\"#概率密度函数：-7\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\begin{cases}\n\\dfrac{1}{\\Beta(\\alpha, \\beta)} x^{\\alpha - 1}(1-x)^{\\beta - 1}, 0 < x < 1 \\\\\n0\n\\end{cases}</script><h5 id=\"分布函数：-3\"><a href=\"#分布函数：-3\" class=\"headerlink\" title=\"分布函数：\"></a>分布函数：</h5><h5 id=\"期望：-13\"><a href=\"#期望：-13\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X) &= \\int_0^{1}x \\cdot \\dfrac{1}{\\Beta(\\alpha, \\beta)} x^{\\alpha - 1}(1-x)^{\\beta - 1} \\mathrm{d}x \\\\\n&= \\dfrac{\\Beta(\\alpha + 1, \\beta)}{\\Beta(\\alpha, \\beta)} \\int_0^{1}\\dfrac{1}{\\Beta(\\alpha + 1, \\beta)} x^{(\\alpha + 1) - 1}(1-x)^{\\beta - 1} \\mathrm{d}x \\\\\n&= \\dfrac{\\Gamma(\\alpha + 1)\\Gamma(\\beta)}{\\Gamma(\\alpha + \\beta + 1)} \\cdot \\dfrac{\\Gamma(\\alpha + \\beta)}{\\Gamma(\\alpha)\\Gamma(\\beta)} \\\\\n&= \\dfrac{\\alpha}{\\alpha + \\beta}\n\\end{aligned}</script><h5 id=\"方差：-13\"><a href=\"#方差：-13\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X^{2}) &= \\int_0^{1} \\dfrac{1}{\\Beta(\\alpha, \\beta)}x^{(\\alpha + 2) - 1}(1 - x)^{\\beta - 1} \\mathrm{d}x \\\\\n&= \\dfrac{\\Beta(\\alpha + 2, \\beta)}{\\Beta(\\alpha, \\beta)} \\\\\n&= \\dfrac{\\alpha(\\alpha + 1)}{(\\alpha + \\beta)(\\alpha + \\beta + 1)}\n\\end{aligned}</script><script type=\"math/tex; mode=display\">\nD(X) = E(X^{2}) - E(X)^{2} = \\dfrac{\\alpha \\beta}{(\\alpha + \\beta)^{2}(\\alpha + \\beta + 1)}</script><h5 id=\"性质：-11\"><a href=\"#性质：-11\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><ol>\n<li>$Beta(1, 1) = U(0, 1)$</li>\n</ol>\n<h5 id=\"应用：-10\"><a href=\"#应用：-10\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><h4 id=\"威布尔分布-韦伯分布，Weibull-Distribution\"><a href=\"#威布尔分布-韦伯分布，Weibull-Distribution\" class=\"headerlink\" title=\"威布尔分布(韦伯分布，Weibull Distribution)\"></a>威布尔分布(韦伯分布，Weibull Distribution)</h4><p>概率密度函数：</p>\n<script type=\"math/tex; mode=display\">\nf(x;\\lambda, k) = \\begin{cases}\n\\dfrac{k}{\\lambda}(\\dfrac{x}{\\lambda})^{k - 1}e^{-(\\dfrac{x}{\\lambda})^k}, &x \\geq 0 \\\\\n0, &x < 0\n\\end{cases}</script><p>其中，x 是随机变量，$\\lambda &gt; 0$ 是比例系数(scale parameter)，$k &gt; 0$ 是形状参数(shape parameter)。显然，它的累计分布函数是扩展的指数分布函数。 </p>\n<h5 id=\"期望：-14\"><a href=\"#期望：-14\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\nE(X) = \\lambda \\Gamma(1 + \\dfrac{1}{k})</script><h5 id=\"方差：-14\"><a href=\"#方差：-14\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nD(X) = \\lambda^{2}\\left[\\Gamma(1 + \\dfrac{2}{k}) - \\Gamma^{2}(1 + \\dfrac{1}{k})\\right]</script><h5 id=\"应用：-11\"><a href=\"#应用：-11\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><p>威布尔分布在<a href=\"https://baike.baidu.com/item/可靠性工程/3129248?fromModule=lemma_inlink\">可靠性工程</a>中被广泛应用。</p>\n<ol>\n<li>研究生产过程和运输时间关系</li>\n<li>预测天气</li>\n<li>可靠性和失效分析</li>\n<li>雷达系统</li>\n<li>对接受的杂波信号依分布建模</li>\n<li>量化寿险模型的重复索赔</li>\n<li>描述风速分布</li>\n</ol>\n<h4 id=\"瑞利分布-Rayleigh-Distribution\"><a href=\"#瑞利分布-Rayleigh-Distribution\" class=\"headerlink\" title=\"瑞利分布(Rayleigh Distribution)\"></a>瑞利分布(Rayleigh Distribution)</h4><p>瑞利分布就是两个垂直分量服从独立且均值为0,标准差相同的高斯分布叠加之后的模。<br>换句话说，复高斯分布的模服从瑞利分布。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/573644622\">瑞利分布的推导过程 - 知乎 (zhihu.com)</a> 瑞利分布</p>\n<h4 id=\"柯西分布-柯西-洛伦兹分布，Cauchy-Distribution\"><a href=\"#柯西分布-柯西-洛伦兹分布，Cauchy-Distribution\" class=\"headerlink\" title=\"柯西分布(柯西-洛伦兹分布，Cauchy Distribution)\"></a>柯西分布(柯西-洛伦兹分布，Cauchy Distribution)</h4><h5 id=\"符号：-X-sim-text-Cauthy-a-alpha\"><a href=\"#符号：-X-sim-text-Cauthy-a-alpha\" class=\"headerlink\" title=\"符号：$X \\sim \\text{Cauthy}(a, \\alpha)$\"></a>符号：$X \\sim \\text{Cauthy}(a, \\alpha)$</h5><h5 id=\"概率密度函数：-8\"><a href=\"#概率密度函数：-8\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\dfrac{1}{\\alpha\\pi[1 + ((x - a) / \\alpha)^{2}]} \\quad \\quad -\\infty < x < +\\infty</script><p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231025112236557.png\" alt=\"image-20231025112236557\"></p>\n<h5 id=\"由来推导：\"><a href=\"#由来推导：\" class=\"headerlink\" title=\"由来推导：\"></a>由来推导：</h5><p>柯西分布描述了以随机角度倾斜的线段切割 x 轴的水平距离分布。</p>\n<p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231025113546164.png\" alt=\"image-20231025113546164\"></p>\n<script type=\"math/tex; mode=display\">\n\\tan(\\theta) = \\dfrac{x}{b} \\\\\n\\theta = \\arctan{\\dfrac{x}{b}} \\\\\n\\mathrm{d}\\theta = \\dfrac{1}{1 + \\frac{x^{2}}{b^{2}}} \\dfrac{\\mathrm{d}x}{b}</script><p>所以可以使用 $\\dfrac{\\mathrm{d}\\theta}{\\pi} = \\dfrac{1}{\\pi} \\dfrac{b\\mathrm{d}x}{b^2 + x ^{2}}$ 来计算关于 x 的分布。</p>\n<script type=\"math/tex; mode=display\">\n\\int_{-\\frac{\\pi}{2}}^{\\frac{\\pi}{2}} \\dfrac{\\theta}{\\pi} = 1 \\Rightarrow \\int_{-\\infty}^{+\\infty} \\dfrac{1}{\\pi} \\dfrac{b \\mathrm{d}x}{b^2 + x^{2}} = 1</script><p>所以，$P(X = x) = \\dfrac{1}{\\pi} \\dfrac{b}{(x - m)^{2} + b^2}$</p>\n<h5 id=\"分布函数：-4\"><a href=\"#分布函数：-4\" class=\"headerlink\" title=\"分布函数：\"></a>分布函数：</h5><script type=\"math/tex; mode=display\">\nF(x) = P(X \\leq x) = \\dfrac{1}{2\\pi}\\left(\\pi - 2\\arctan(\\dfrac{a - x}{\\alpha})\\right) \\quad -\\infty < x < +\\infty</script><h5 id=\"期望：-15\"><a href=\"#期望：-15\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><p>不存在</p>\n<h5 id=\"方差：-15\"><a href=\"#方差：-15\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><p>不存在</p>\n<h5 id=\"应用：-12\"><a href=\"#应用：-12\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><ol>\n<li>柯西分布，也称为柯西-洛伦兹分布或洛伦兹分布，是描述共振行为的连续分布。它还描述了以随机角度倾斜的线段切割 x 轴的水平距离分布。</li>\n<li>在量子世界，粒子和粒子距离很远，比如，电子到原子核的距离，就好比一个汽车到三千公里外的一个城市距离，因此，要显著描述电子的位置分布，只能是柯西-洛伦兹分布，不能用高斯分布刻画，因为高斯分布尺度不够，信号太弱，噪声将把电子的电磁能量淹没，模型无效。</li>\n</ol>\n<h5 id=\"性质：-12\"><a href=\"#性质：-12\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><ol>\n<li>柯西分布的取值范围非常广，很大的值也有一定概率取到，因而柯西分布也称为heavy-tail distribution。并且相比于gaussian，概率密度的最大取值只有0.1，就是x=0的那个地方。</li>\n</ol>\n<h4 id=\"拉普拉斯分布-双指数分布，Laplace-Distribution\"><a href=\"#拉普拉斯分布-双指数分布，Laplace-Distribution\" class=\"headerlink\" title=\"拉普拉斯分布(双指数分布，Laplace Distribution)\"></a>拉普拉斯分布(双指数分布，Laplace Distribution)</h4><h5 id=\"符号：-X-sim-text-Laplace-alpha-1-alpha-2\"><a href=\"#符号：-X-sim-text-Laplace-alpha-1-alpha-2\" class=\"headerlink\" title=\"符号：$X \\sim \\text{Laplace}(\\alpha_1, \\alpha_2)$\"></a>符号：$X \\sim \\text{Laplace}(\\alpha_1, \\alpha_2)$</h5><h5 id=\"概率密度函数：-9\"><a href=\"#概率密度函数：-9\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\begin{cases}\n\\dfrac{1}{\\alpha_1 + \\alpha_2}e^{-\\frac{x}{\\alpha_1}}, &x < 0 \\\\\n\\dfrac{1}{\\alpha_1 + \\alpha_2}e^{-\\frac{x}{\\alpha_2}}, & x \\geq 0\n\\end{cases}</script><blockquote>\n<p>The Laplace distribution is an alternative to the normal distribution with heavier tails. The probability density function for three different parameters settings is illustrated below.</p>\n</blockquote>\n<p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231024230803046.png\" alt=\"image-20231024230803046\"></p>\n<h5 id=\"分布函数：-5\"><a href=\"#分布函数：-5\" class=\"headerlink\" title=\"分布函数：\"></a>分布函数：</h5><script type=\"math/tex; mode=display\">\nF(x) = P(X \\leq x) = \\begin{cases}\n\\dfrac{\\alpha_1}{\\alpha_1 + \\alpha_2}e^{-\\frac{x}{\\alpha_1}} &x < 0 \\\\\n1 - \\dfrac{\\alpha_2}{\\alpha_1 + \\alpha_2}e^{-\\frac{x}{\\alpha_2}}&x \\geq 0\n\\end{cases}</script><h5 id=\"期望：-16\"><a href=\"#期望：-16\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X) &= \\int_{-\\infty}^{0} x \\cdot f(x)\\mathrm{d}x + \\int_0^{+\\infty} x \\cdot f(x) \\mathrm{d}x\\\\\n&= \\alpha_2 - \\alpha_1\n\\end{aligned}</script><h5 id=\"方差：-16\"><a href=\"#方差：-16\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nD(X) &= \\int_{-\\infty}^{0} x^2 \\cdot f(x)\\mathrm{d}x + \\int_0^{+\\infty} x^2 \\cdot f(x) \\mathrm{d}x\\\\\n&= \\alpha_1^{2} + \\alpha_2^{2}\n\\end{aligned}</script><h5 id=\"性质：-13\"><a href=\"#性质：-13\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><ol>\n<li>可看作两平移指数分布背靠背拼接在一起，因此又称双指数分布 (Double exponential distribution)</li>\n</ol>\n<h5 id=\"应用：-13\"><a href=\"#应用：-13\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><h4 id=\"玻尔兹曼分布-Boltzmann-Distribution\"><a href=\"#玻尔兹曼分布-Boltzmann-Distribution\" class=\"headerlink\" title=\"玻尔兹曼分布(Boltzmann Distribution)\"></a>玻尔兹曼分布(Boltzmann Distribution)</h4><h4 id=\"幂律分布-Power-Distribution\"><a href=\"#幂律分布-Power-Distribution\" class=\"headerlink\" title=\"幂律分布(Power Distribution)\"></a>幂律分布(Power Distribution)</h4><h5 id=\"符号：-X-sim-text-Power-1-beta\"><a href=\"#符号：-X-sim-text-Power-1-beta\" class=\"headerlink\" title=\"符号：$X\\sim \\text{Power}(1, \\beta)$\"></a>符号：$X\\sim \\text{Power}(1, \\beta)$</h5><h5 id=\"概率密度函数：-10\"><a href=\"#概率密度函数：-10\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\beta x^{\\beta - 1} \\quad \\quad 0 < x < 1</script><p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231024235040777.png\" alt=\"image-20231024235040777\"></p>\n<h5 id=\"分布函数：-6\"><a href=\"#分布函数：-6\" class=\"headerlink\" title=\"分布函数：\"></a>分布函数：</h5><script type=\"math/tex; mode=display\">\nF(x) = P(X \\leq x) = x^{\\beta}</script><h5 id=\"期望：-17\"><a href=\"#期望：-17\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\nE(X) =</script><h5 id=\"方差：-17\"><a href=\"#方差：-17\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><h4 id=\"三角分布-Standard-Triangular-Distribution\"><a href=\"#三角分布-Standard-Triangular-Distribution\" class=\"headerlink\" title=\"三角分布(Standard Triangular Distribution)\"></a>三角分布(Standard Triangular Distribution)</h4><h5 id=\"符号：-X-sim-text-Triangular-1-1-1\"><a href=\"#符号：-X-sim-text-Triangular-1-1-1\" class=\"headerlink\" title=\"符号：$X \\sim \\text{Triangular}(-1, 1, 1)$\"></a>符号：$X \\sim \\text{Triangular}(-1, 1, 1)$</h5><h5 id=\"概率密度函数：-11\"><a href=\"#概率密度函数：-11\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\begin{cases}\nx + 1, &-1 < x < 0 \\\\\n1 - x, & 0 \\leq x < 1\n\\end{cases}</script><p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231025114540132.png\" alt=\"image-20231025114540132\"></p>\n<h5 id=\"分布函数：-7\"><a href=\"#分布函数：-7\" class=\"headerlink\" title=\"分布函数：\"></a>分布函数：</h5><script type=\"math/tex; mode=display\">\nF(x) = \\begin{cases}\n\\frac{1}{2}x^{2} + x + \\frac{1}{2}, &-1 < x < 0 \\\\\n-\\frac{1}{2}x^{2} + x + \\frac{1}{2}, &0 \\leq x < 1\n\\end{cases}</script><h5 id=\"期望：-18\"><a href=\"#期望：-18\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\nE(X) = 0</script><h5 id=\"方差：-18\"><a href=\"#方差：-18\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nD(X) = \\dfrac{1}{6}</script><p>更一般的，三角形分布是底限为 a，众数为 c，上限为 b 的连续概率分布。</p>\n<script type=\"math/tex; mode=display\">\nf(x|a, b, c) = \\begin{cases}\n\\dfrac{2(x - a)}{(b - a)(c - a)} \\quad a \\leq x \\leq c \\\\\n\\\\\n\\dfrac{2(b - x)}{(b - a)(b - c)} \\quad c \\leq x \\leq b\n\\end{cases}</script><p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231025124956772.png\" alt=\"image-20231025124956772\"></p>\n<h4 id=\"逻辑斯谛分布-增长分布-Log-Logistic-Distribution\"><a href=\"#逻辑斯谛分布-增长分布-Log-Logistic-Distribution\" class=\"headerlink\" title=\"逻辑斯谛分布(增长分布, Log-Logistic Distribution)\"></a>逻辑斯谛分布(增长分布, Log-Logistic Distribution)</h4><h5 id=\"符号：-X-sim-text-loglogistic-lambda-kappa\"><a href=\"#符号：-X-sim-text-loglogistic-lambda-kappa\" class=\"headerlink\" title=\"符号：$X \\sim \\text{loglogistic}(\\lambda, \\kappa)$\"></a>符号：$X \\sim \\text{loglogistic}(\\lambda, \\kappa)$</h5><h5 id=\"概率密度函数：-12\"><a href=\"#概率密度函数：-12\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\dfrac{\\lambda\\kappa(\\lambda\\kappa)^{\\kappa - 1}}{(1 + (\\lambda x)^{\\kappa})^{2}} \\quad x > 0</script><p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231025130217056.png\" alt=\"image-20231025130217056\"></p>\n<h5 id=\"分布函数：-8\"><a href=\"#分布函数：-8\" class=\"headerlink\" title=\"分布函数：\"></a>分布函数：</h5><script type=\"math/tex; mode=display\">\nF(x) = P(X <= x) = \\dfrac{(\\lambda x)^{\\kappa}}{1 + (\\lambda x)^{\\kappa}}  \\quad x > 0</script><h5 id=\"期望：-19\"><a href=\"#期望：-19\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X) &= \\int_0^{+\\infty} x \\cdot f(x) \\mathrm{d}x \\\\\n&= \\dfrac{1}{\\lambda} \\int_0^{+\\infty}\\dfrac{m^{\\frac{1}{k}}}{(1+m)^{2}} \\mathrm{d}m \\\\\n&= \\dfrac{1}{\\kappa \\lambda} \\cdot \\dfrac{\\pi}{\\sin (\\frac{\\pi}{\\kappa})} \\\\\n&= \\dfrac{\\pi}{\\kappa \\lambda(\\sin (\\frac{\\pi}{\\kappa})}\n\\end{aligned}</script><p>其中，计算的时候可以使用留数定理。</p>\n<h5 id=\"方差：-19\"><a href=\"#方差：-19\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nD(X) = \\dfrac{\\pi \\left(2\\kappa(1 - \\cos (\\frac{\\pi}{\\kappa})^{2}) + \\pi\\sin(\\frac{\\pi(\\kappa + 2)}{\\kappa}) \\right)}{\\left(\\sin (\\frac{\\pi(\\kappa + 2)}{\\kappa}) \\right)\\left( \\cos(\\frac{\\pi}{\\kappa})^{2} - 1\\right)(\\lambda \\kappa)^{2}}</script><h4 id=\"逻辑分布-Logistic-Distribution\"><a href=\"#逻辑分布-Logistic-Distribution\" class=\"headerlink\" title=\"逻辑分布(Logistic Distribution)\"></a>逻辑分布(Logistic Distribution)</h4><h5 id=\"符号：-X-sim-text-logistic-lambda-kappa\"><a href=\"#符号：-X-sim-text-logistic-lambda-kappa\" class=\"headerlink\" title=\"符号：$X \\sim \\text{logistic}(\\lambda, \\kappa)$\"></a>符号：$X \\sim \\text{logistic}(\\lambda, \\kappa)$</h5><h5 id=\"概率密度函数：-13\"><a href=\"#概率密度函数：-13\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\dfrac{\\lambda^{\\kappa}\\kappa e^{\\kappa x}}{(1 + (\\lambda e^{x})^{\\kappa})^{2}} \\quad -\\infty < x < +\\infty</script><p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231025134453817.png\" alt=\"image-20231025134453817\"></p>\n<h5 id=\"分布函数：-9\"><a href=\"#分布函数：-9\" class=\"headerlink\" title=\"分布函数：\"></a>分布函数：</h5><script type=\"math/tex; mode=display\">\nF(x) = P(X \\leq x) = \\dfrac{\\lambda^{\\kappa}e^{\\kappa x}}{1 + \\lambda^{\\kappa}e^{x}} \\quad -\\infty < x < +\\infty</script><h5 id=\"期望：-20\"><a href=\"#期望：-20\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\nE(X) = -\\ln \\lambda</script><h5 id=\"方差：-20\"><a href=\"#方差：-20\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nD(X) = \\dfrac{\\pi ^{2}}{3\\kappa^{2}}</script><h4 id=\"t-分布-T-Distribution\"><a href=\"#t-分布-T-Distribution\" class=\"headerlink\" title=\"t 分布(T Distribution)\"></a>t 分布(T Distribution)</h4><p>如果 $X\\sim N(0, 1), Y \\sim \\chi^{2}(n)$，则有 $Z = \\dfrac{X}{\\sqrt{\\frac{Y}{n}}} \\sim t(n)$</p>\n<h5 id=\"概率密度函数：-14\"><a href=\"#概率密度函数：-14\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nf(z) =\\dfrac{\\Gamma(\\frac{n + 1}{2})}{\\sqrt{n\\pi}\\Gamma(\\frac{n}{2})}\\left(\\dfrac{z^{2}}{n} + 1\\right)^{-\\frac{n + 1}{2}}\n\\end{aligned}</script><h5 id=\"推导：\"><a href=\"#推导：\" class=\"headerlink\" title=\"推导：\"></a>推导：</h5><p>做变换：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n\\begin{cases}\nu = \\dfrac{X}{\\sqrt{\\frac{Y}{n}}} \\\\\n\\\\\nv = Y\n\\end{cases}\n\\end{aligned}</script><p>所以有反函数：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{cases}\nX = u\\sqrt{\\dfrac{v}{n}} \\\\\n\\\\\nY = v\n\\end{cases}</script><p>雅可比行列式是：</p>\n<script type=\"math/tex; mode=display\">\n|J| =</script><p>所以原问题的分布函数变为：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n\\iint\\limits_{A}f(x,y)\\mathrm{d}x\\mathrm{d}y &= \\iint\\limits_{B}f(x(u, v),y(u, v)) |J| \\mathrm{d}u \\mathrm{d}v \\\\\n&= \\int_{-\\infty}^{z}\\int_{0}^{+\\infty}f_X(u\\sqrt{\\dfrac{v}{u}})f_Y(v) (\\dfrac{v}{n})^{-\\frac{1}{2}} \\mathrm{d}u \\mathrm{d}v \\\\\n\n\\end{aligned}</script><p>有</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\nf_X(x) = \\dfrac{1}{\\sqrt{2\\pi}}e^{-\\frac{x^{2}}{2}} \\\\\nf_Y(y) = \\dfrac{1}{2^{\\frac{n}{2}}\\Gamma(\\frac{n}{2})}y^{\\frac{n}{2}- 1}e^{-\\frac{y}{2}}\n\\end{aligned}</script><p>所以：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\nF(Z) &= \\int_{-\\infty}^{z}\\int_0^{+\\infty} \\dfrac{1}{\\sqrt{2\\pi}}e^{-\\frac{1}{2}u^{2}\\frac{v}{n}} \\dfrac{1}{2^{\\frac{n}{2}}\\Gamma(\\frac{n}{2})}v^{\\frac{n}{2} - 1} e^{-\\frac{v}{2}}(\\dfrac{v}{n})^{-\\frac{1}{2}} \\mathrm{d}v\\mathrm{d}u \\\\\n&= \\int_{-\\infty}^{z}\\dfrac{1}{\\sqrt{n\\pi}\\sqrt{2}}\\dfrac{1}{2^{\\frac{n}{2}} \\Gamma(\\frac{n}{2})} \\int_0^{+\\infty}e^{-\\frac{1}{2}u^{2}\\frac{v}{n} - \\frac{v}{2}}v^{\\frac{n - 1}{2}} \\mathrm{d}u \\mathrm{d}v\n\\end{aligned}</script><h5 id=\"期望：-21\"><a href=\"#期望：-21\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\nE(X) = 0</script><h5 id=\"方差：-21\"><a href=\"#方差：-21\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nV(X) = \\dfrac{n}{n - 2}</script><h5 id=\"性质：-14\"><a href=\"#性质：-14\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><h5 id=\"应用：-14\"><a href=\"#应用：-14\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><h4 id=\"F-分布-F-Distribution\"><a href=\"#F-分布-F-Distribution\" class=\"headerlink\" title=\"F 分布(F Distribution)\"></a>F 分布(F Distribution)</h4><p>F 分布也被称为「方差比分布(Variance Ratio Distribution)」和「Fisher-Snedecor Distribution」。</p>\n<p>设 $U \\sim \\chi^{2}(n_1), V \\sim \\chi^{2}(n_2)$，并且 U 和 V 相互独立，则称随机变量 $F = \\dfrac{U / n_1}{V / n_2}$ 服从自由度为 $(n_1, n_2)$ 的 F 分布</p>\n<h5 id=\"概率密度函数：-15\"><a href=\"#概率密度函数：-15\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(z) = \\dfrac{\\Gamma(\\frac{n_1 + n_2}{2})(\\frac{n_1}{n_2})^{\\frac{n_1}{2}}z^{\\frac{n_1}{2} - 1}}{\\Gamma(\\frac{n_1}{2})\\Gamma(\\frac{n_2}{2})\\left[1 + \\frac{n_1}{n_2}z\\right]^{\\frac{n_1 + n_2}{2}}}</script><h5 id=\"推导：-1\"><a href=\"#推导：-1\" class=\"headerlink\" title=\"推导：\"></a>推导：</h5><p>$\\text{lemma1}:$ </p>\n<script type=\"math/tex; mode=display\">\nf_{\\frac{Y}{X}}(z) = \\int_{-\\infty}^{+\\infty}|x|f(x, xz)\\mathrm{d}x</script><p>$\\text{lemma2}:$</p>\n<script type=\"math/tex; mode=display\">\nf_{aX + b} = \\dfrac{1}{|a|}f_X(\\dfrac{y - b}{a}) \\quad a \\neq 0</script><p>所以我们可以得到 $Y = \\dfrac{U}{n_1}, X = \\dfrac{V}{n_2}$ 的概率密度函数为：</p>\n<script type=\"math/tex; mode=display\">\nf_Y(y) = \\dfrac{(\\frac{n_1}{2})^{\\frac{n_1}{2}}}{\\Gamma(\\frac{n_1}{2})}y^{\\frac{n_1}{2} - 1}e^{-\\frac{n_1y}{2}} \\quad y > 0</script><script type=\"math/tex; mode=display\">\nf_X(x) = \\dfrac{(\\frac{n_2}{2})^{\\frac{n_2}{2}}}{\\Gamma(\\frac{n_2}{2})}y^{\\frac{n_2}{2} - 1}e^{-\\frac{n_2y}{2}} \\quad x > 0</script><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nf_F(z) &= f_{\\frac{Y}{X}}(z) \\\\\n&= \\int_0^{+\\infty} xf(x, xz) \\mathrm{d}x \\\\\n&= \\int_0^{+\\infty} xf_Y(xz)f_X(x) \\mathrm{d}x \\\\\n&= \\int_0^{+\\infty} x \\dfrac{(\\frac{n_1}{2})^{\\frac{n_1}{2}}}{\\Gamma(\\frac{n_1}{2})}(xz)^{\\frac{n_1}{2} - 1}e^{-\\frac{n_1y}{2}} \\cdot  \\dfrac{(\\frac{n_2}{2})^{\\frac{n_2}{2}}}{\\Gamma(\\frac{n_2}{2})}y^{\\frac{n_2}{2} - 1}e^{-\\frac{n_2y}{2}} \\mathrm{d}x \\\\\n&= \\dfrac{(n_1 / 2)^{n_1 / 2}(n_2 / 2)^{n_2 / 2}}{\\Gamma(\\frac{n_1}{2}) \\Gamma(\\frac{n_2}{2})}z^{\\frac{n_1}{n_2} - 1}\\int_0^{+\\infty}x^{\\frac{n_1 + n_2}{2} - 1}e^{\\frac{-x}{2}(n_1z + n_2)} \\mathrm{d}x \\\\\n\\end{aligned}</script><p>设 $u = \\dfrac{x}{2}(n_1z + n_2)$</p>\n<p>最后得到：</p>\n<script type=\"math/tex; mode=display\">\nf(z) = \\dfrac{\\Gamma(\\frac{n_1 + n_2}{2})(\\frac{n_1}{n_2})^{\\frac{n_1}{2}}z^{\\frac{n_1}{2} - 1}}{\\Gamma(\\frac{n_1}{2})\\Gamma(\\frac{n_2}{2})\\left[1 + \\frac{n_1}{n_2}z\\right]^{\\frac{n_1 + n_2}{2}}}</script><h5 id=\"期望：-22\"><a href=\"#期望：-22\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\nE(X) = \\dfrac{n_2}{n_2 - 2}</script><h5 id=\"方差：-22\"><a href=\"#方差：-22\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nV(X) = \\dfrac{2n_2^{2}(n_1+ n_2 - 2)}{n_1}</script><h5 id=\"性质：-15\"><a href=\"#性质：-15\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><ol>\n<li><p>$F_{1 - \\alpha}(n_1, n_2) = \\dfrac{1}{F_{\\alpha}(n_2, n_1)}$<br>证明：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n1 - \\alpha &= P\\{F > F_{1 - \\alpha}(n_1, n_2)\\} \\\\\n&= P\\{\\dfrac{1}{F} < \\dfrac{1}{F_{1 - \\alpha}(n_1, n_2)}\\} \\\\\n&= 1 - P\\{\\dfrac{1}{F} \\geq \\dfrac{1}{F_{1 - \\alpha}(n_1, n_2)}\\} \\\\\n&= 1 - P\\{\\dfrac{1}{F} > \\dfrac{1}{F_{1 - \\alpha}(n_1, n_2)}\\} \\\\\n\\end{aligned}</script><p>所以 $P\\{\\dfrac{1}{F} &gt; \\dfrac{1}{F_{1 - \\alpha}(n_1, n_2)}\\} = \\alpha$ 并且 $\\dfrac{1}{F} \\sim F(n_2, n_1)$，所以 $F_{1 - \\alpha}(n_1, n_2) = \\dfrac{1}{F_{\\alpha}(n_2, n_1)}$</p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/453635917\">F分布概率密度公式推导 - 知乎 (zhihu.com)</a></p>\n</li>\n</ol>\n<h5 id=\"应用：-15\"><a href=\"#应用：-15\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><h4 id=\"chi-分布-卡方分布-chi-Distribution\"><a href=\"#chi-分布-卡方分布-chi-Distribution\" class=\"headerlink\" title=\"$\\chi 分布$(卡方分布, $\\chi$ Distribution)\"></a>$\\chi 分布$(卡方分布, $\\chi$ Distribution)</h4><p>$Z_1, Z_2, …, Z_k$ 是独立、标准正态分布的随机变量，把他们的平方和记为 Q，则有 $Q = \\sum\\limits_{i = 1}^{k} Z_i^{2}$</p>\n<p>这个 Q 是服从自由度为 K 的卡方分布的。通常会被记为 $Q \\sim \\chi^{2}(k)$</p>\n<h5 id=\"符号：-Q-sim-chi-2-k\"><a href=\"#符号：-Q-sim-chi-2-k\" class=\"headerlink\" title=\"符号：$Q \\sim \\chi^{2}(k)$\"></a>符号：$Q \\sim \\chi^{2}(k)$</h5><h5 id=\"概率密度函数：-16\"><a href=\"#概率密度函数：-16\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\dfrac{1}{2^{\\frac{n}{2}}\\Gamma(\\dfrac{n}{2})}x^{^{\\frac{n}{2}} - 1}e^{-\\frac{x^{2}}{2}} \\quad z > 0</script><p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231026212407458.png\" alt=\"image-20231026212407458\"></p>\n<h5 id=\"K-阶矩\"><a href=\"#K-阶矩\" class=\"headerlink\" title=\"K 阶矩\"></a>K 阶矩</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X^{k}) &= \\int_0^{+\\infty} x^{k} \\cdot \\dfrac{1}{2^{\\frac{n}{2}}\\Gamma(\\dfrac{n}{2})}x^{^{\\frac{n}{2}} - 1}e^{-\\frac{x^{2}}{2}} \\mathrm{d}x \\\\\n\\end{aligned}</script><p>设 $\\dfrac{x^{2}}{2}= t$，式子变为：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X^{k}) &= \\dfrac{2^{\\frac{k}{2}}}{\\Gamma(\\frac{n}{2})}\\int_0^{+\\infty} t^{\\frac{n + k}{2} - 1}e^{-t}\\mathrm{d}t \\\\\n&= \\dfrac{2^{k / 2}\\Gamma(\\frac{n + k}{2})}{\\Gamma(n / 2)}\n\\end{aligned}</script><h5 id=\"期望：-23\"><a href=\"#期望：-23\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\nE(X) = \\dfrac{\\sqrt{2}\\Gamma(\\frac{n + 1}{2})}{\\Gamma(n / 2)}</script><h5 id=\"方差：-23\"><a href=\"#方差：-23\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nE(X^{2}) = \\dfrac{2\\Gamma(n / 2 + 1)}{\\Gamma(n / 2)} = n</script><p>所以</p>\n<script type=\"math/tex; mode=display\">\nD(X) = E(X^{2}) - E(X)^{2} = n^{2} - E(X)^{2}</script><h5 id=\"性质：-16\"><a href=\"#性质：-16\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><h5 id=\"应用：-16\"><a href=\"#应用：-16\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><h4 id=\"狄拉克分布\"><a href=\"#狄拉克分布\" class=\"headerlink\" title=\"狄拉克分布\"></a>狄拉克分布</h4><h4 id=\"多项式分布和迪利克雷分布\"><a href=\"#多项式分布和迪利克雷分布\" class=\"headerlink\" title=\"多项式分布和迪利克雷分布\"></a>多项式分布和迪利克雷分布</h4><h4 id=\"帕累托分布-布拉德福分布-Pareto-Distribution\"><a href=\"#帕累托分布-布拉德福分布-Pareto-Distribution\" class=\"headerlink\" title=\"帕累托分布(布拉德福分布, Pareto Distribution)\"></a>帕累托分布(布拉德福分布, Pareto Distribution)</h4><p>这个分布是是从大量真实世界的现象中发现的<a href=\"https://zh.wikipedia.org/wiki/冪定律\">幂定律</a>分布。这个分布在经济学以外，也被称为<strong>布拉德福分布</strong>。</p>\n<h5 id=\"分布函数：-10\"><a href=\"#分布函数：-10\" class=\"headerlink\" title=\"分布函数：\"></a>分布函数：</h5><script type=\"math/tex; mode=display\">\nP(X > x) = \\left(\\dfrac{x}{x_{\\min}} \\right)^{-k}</script><p>其中，x 是任何一个大于 $x_{\\min}$ 的数，$x_{\\min}$ 是 X 最小的可能值(正数)。</p>\n<h5 id=\"概率密度：\"><a href=\"#概率密度：\" class=\"headerlink\" title=\"概率密度：\"></a>概率密度：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\np(x) = \\begin{cases}\n0 \\quad x < x_{\\min} \\\\\n\\\\\n\\\\\n\\dfrac{kx_{\\min}^{k}}{x^{k + 1}} \\quad x > x_{\\min}\n\n\\end{cases}\n\\end{aligned}</script><p>帕累托分布属于连续概率分布。「齐夫定律」也被称为「Zeta 分布」，也可以被认为是在离散概率分布中的帕累托分布。</p>\n<p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231026223709526.png\" alt=\"image-20231026223709526\"></p>\n<h5 id=\"期望：-24\"><a href=\"#期望：-24\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\nE(X) = \\int_0^{+\\infty} x\\cdot f(x) \\mathrm{d}x = \\dfrac{x_\\min k}{k - 1}</script><h5 id=\"方差：-24\"><a href=\"#方差：-24\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nD(X) = \\dfrac{x_\\min}{k - 1}\\sqrt{\\dfrac{k}{k - 2}}</script><h5 id=\"应用：-17\"><a href=\"#应用：-17\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><ol>\n<li>财富在个人之间的分布</li>\n<li>人类居住区的大小</li>\n<li>对维基百科条目的访问</li>\n<li>接近绝对零度时，玻色一爱因斯坦疑聚的团簇</li>\n<li>在互联网流量中文件尺寸的分布</li>\n<li>油田的石油储备数量</li>\n<li>龙卷风带来的灾难的数量</li>\n</ol>\n<h5 id=\"引申：\"><a href=\"#引申：\" class=\"headerlink\" title=\"引申：\"></a>引申：</h5><p>帕累托法则(Pareto Principle)，或者叫做「二八定律」，「关键少数法则」，「巴莱多定律」。这个定律指出，约仅有 20% 的因素影响了 80% 的结果。也就是说，所有变因中，最重要的仅有 20%，虽然剩余的 80% 占了大多数。</p>\n<h4 id=\"反正弦分布-Arcsin-Distribution\"><a href=\"#反正弦分布-Arcsin-Distribution\" class=\"headerlink\" title=\"反正弦分布(Arcsin Distribution)\"></a>反正弦分布(Arcsin Distribution)</h4><h5 id=\"符号：-X-sim-text-arcsin-x\"><a href=\"#符号：-X-sim-text-arcsin-x\" class=\"headerlink\" title=\"符号：$X \\sim \\text{arcsin}(x)$\"></a>符号：$X \\sim \\text{arcsin}(x)$</h5><h5 id=\"概率密度函数：-17\"><a href=\"#概率密度函数：-17\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\dfrac{1}{\\pi \\sqrt{x(1 - x)}} \\quad 0 < x < 1</script><p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231026220704838.png\" alt=\"image-20231026220704838\"></p>\n<h5 id=\"累计分布函数：\"><a href=\"#累计分布函数：\" class=\"headerlink\" title=\"累计分布函数：\"></a>累计分布函数：</h5><script type=\"math/tex; mode=display\">\nF(x) = P(X \\leq x) = \\dfrac{\\pi + 2\\arcsin(2x - 1)}{2\\pi}</script><h5 id=\"期望：-25\"><a href=\"#期望：-25\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\nE(X) = \\dfrac{1}{2}</script><h5 id=\"方差：-25\"><a href=\"#方差：-25\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nD(X) = \\dfrac{1}{8}</script><h5 id=\"性质：-17\"><a href=\"#性质：-17\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><p>对于积分 $\\int_{a}^{b}\\dfrac{\\mathrm{d}x}{\\sqrt{(x - a)(b - x)}}$ 它的结果是$\\pi$</p>\n<p>对于这样类型的积分，我们一般是通过换元进行计算 $x  =a\\cos^{2}\\theta + b\\sin^{2}\\theta$，那么原来的积分可以变为一个简单的积分：</p>\n<script type=\"math/tex; mode=display\">\n\\int_a^{b}\\dfrac{\\mathrm{d}x}{\\sqrt{(x - a)(b - x)}} = 2\\int_0^{\\frac{\\pi}{2}} \\mathrm{d}\\theta = \\pi</script><p>对于这个式子的含义继续深究</p>\n<p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231026221614582.png\" alt=\"image-20231026221614582\"></p>\n<p>所以原来的定积分就正好代表了上半圆的弧长，也就是整个圆的半周长。</p>\n<p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231026221707845.png\" alt=\"image-20231026221707845\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://zhuanlan.zhihu.com/p/517424307\">https://zhuanlan.zhihu.com/p/517424307</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/164883777\">https://zhuanlan.zhihu.com/p/164883777</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/449733211\">常见分布的数学期望和方差及相关证明 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/578567547\">https://zhuanlan.zhihu.com/p/578567547</a> 特征函数推导</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/353187472\">https://zhuanlan.zhihu.com/p/353187472</a> <a href=\"https://www.zhihu.com/question/354825596/answer/893242882\">https://www.zhihu.com/question/354825596/answer/893242882</a> 指数分布</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/503557666\">https://zhuanlan.zhihu.com/p/503557666</a> 正态分布</p>\n<p>怎么来理解伽玛（gamma）分布？ - 知之的回答 - 知乎 <a href=\"https://www.zhihu.com/question/34866983/answer/60191363\">https://www.zhihu.com/question/34866983/answer/60191363</a> 伽马分布和其他分布之间的关系</p>\n<p>伽马分布，指数分布，卡方分布之间的关系及期望，方差 - 拾柒的文章 - 知乎 <a href=\"https://zhuanlan.zhihu.com/p/379131967\">https://zhuanlan.zhihu.com/p/379131967</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/303359921\">深入理解高斯分布 - 知乎 (zhihu.com)</a> 多元高斯分布</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/596023351\">混合高斯分布与其参数估计 - 知乎 (zhihu.com)</a> 混合高斯分布</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"file:///C:\\Users\\24964\\Documents\\Tencent Files\\2496438098\\nt_qq\\nt_data\\Pic\\2023-10\\Ori\\78e67b20b808405a7fe8f2e1746f58c6.png\" alt=\"img\"></p>\n<h3 id=\"离散分布\"><a href=\"#离散分布\" class=\"headerlink\" title=\"离散分布\"></a>离散分布</h3><h4 id=\"Bernoulli-分布-Bernoulli-Distribution\"><a href=\"#Bernoulli-分布-Bernoulli-Distribution\" class=\"headerlink\" title=\"Bernoulli 分布(Bernoulli Distribution)\"></a>Bernoulli 分布(Bernoulli Distribution)</h4><h5 id=\"符号：-X-sim-B-1-p\"><a href=\"#符号：-X-sim-B-1-p\" class=\"headerlink\" title=\"符号：$X \\sim B(1, p)$\"></a>符号：$X \\sim B(1, p)$</h5><h5 id=\"概率：-P-X-k-p-k-1-p-1-k\"><a href=\"#概率：-P-X-k-p-k-1-p-1-k\" class=\"headerlink\" title=\"概率：$P(X = k) = p^{k}(1-p)^{1-k}$\"></a>概率：$P(X = k) = p^{k}(1-p)^{1-k}$</h5><h5 id=\"期望：-E-X-0-times-1-p-1-times-p-p\"><a href=\"#期望：-E-X-0-times-1-p-1-times-p-p\" class=\"headerlink\" title=\"期望：$E(X) = 0\\times (1-p) + 1 \\times p = p$\"></a>期望：$E(X) = 0\\times (1-p) + 1 \\times p = p$</h5><h5 id=\"方差：-D-X-E-X-2-E-X-2-p-p-2-p-1-p\"><a href=\"#方差：-D-X-E-X-2-E-X-2-p-p-2-p-1-p\" class=\"headerlink\" title=\"方差：$D(X) = E(X^{2}) - E(X)^{2} = p - p^2 = p(1-p)$\"></a>方差：$D(X) = E(X^{2}) - E(X)^{2} = p - p^2 = p(1-p)$</h5><h5 id=\"性质：\"><a href=\"#性质：\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><h5 id=\"应用：\"><a href=\"#应用：\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><h4 id=\"二项分布-Binomial-Distribution\"><a href=\"#二项分布-Binomial-Distribution\" class=\"headerlink\" title=\"二项分布(Binomial Distribution)\"></a>二项分布(Binomial Distribution)</h4><h5 id=\"符号：-X-sim-B-n-p\"><a href=\"#符号：-X-sim-B-n-p\" class=\"headerlink\" title=\"符号：$X\\sim B(n, p)$\"></a>符号：$X\\sim B(n, p)$</h5><h5 id=\"概率：\"><a href=\"#概率：\" class=\"headerlink\" title=\"概率：\"></a>概率：</h5><script type=\"math/tex; mode=display\">\nP(X = k) = \\begin{pmatrix}\n\nn \\\\\nk\n\\end{pmatrix} (1-p)^{n - k}p^k</script><h5 id=\"期望：\"><a href=\"#期望：\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\nE(X)= \\sum\\limits_{k = 0}^{n}kp(X = k) =\\sum\\limits_{k = 0}^{n} k\\begin{pmatrix}\nn \\\\\nk\n\\end{pmatrix} (1-p)^{n - k}p^k \\\\\n= \\sum\\limits_{k = 1}^{n}\\begin{pmatrix} n - 1\\\\ m - 1\\end{pmatrix}p^{k}(1-p)^{n - k} \\quad \\quad \\quad \\\\\n= \\sum\\limits_{k = 0}^{n - 1}np\\begin{pmatrix}n - 1 \\\\ k \\end{pmatrix} p^{k}(1-p)^{n - 1 - k} \\quad \\\\\n= np\\times (p + (1 - p))^{n - 1} \\quad \\quad \\quad \\quad \\quad  \\\\\n= np \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad</script><h5 id=\"方差：\"><a href=\"#方差：\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nD(X) = E(X^{2}) - E(X)^{2} =E(X(X-1)+X) - E(X)^{2} \\\\\n=E(X(X-1)) + E(X) - E(X)^{2} \\quad \\quad \\quad \\quad  \\\\\n\nE(X(X-1)) = \\sum\\limits_{k = 0}^{n}k(k - 1)\\begin{pmatrix} n \\\\ k\\end{pmatrix} p^{k}(1-p)^{n - k} \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad  \\\\ = n(n - 1)\\sum\\limits_{k = 2}^{n} \\begin{pmatrix} n - 2\\\\ k - 2\\end{pmatrix} p^{k}(1 - p)^{n - l} \\quad \\quad \\\\\n= n(n - 1)\\sum\\limits_{k = 0}^{n - 2}\\begin{pmatrix} n - 2 \\\\ k \\end{pmatrix} p^{k + 2}(1-p)^{n - 2 - k} \\\\\n= n(n - 1) p^{2} (1 + (1 - p))^{n - 2} \\ \\ \\ \\  \\quad \\quad \\quad \\quad  \\\\\n= n(n - 1)p^{2} \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\ \\ \\ \\quad \\quad \\\\\n\nD(X) = n(n -1)p^{2} + np - n^{2}p^{2}  = np(1-p) \\quad \\quad \\quad</script><h5 id=\"性质：-1\"><a href=\"#性质：-1\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><h5 id=\"应用：-1\"><a href=\"#应用：-1\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><ol>\n<li>一段时间内物理实验仪器捕获的粒子数目。</li>\n<li>一段时间内计算机病毒的入侵数。</li>\n<li>一本书中的错字数。</li>\n</ol>\n<h4 id=\"多项分布-Multinomial-Distribution\"><a href=\"#多项分布-Multinomial-Distribution\" class=\"headerlink\" title=\"多项分布(Multinomial Distribution)\"></a>多项分布(Multinomial Distribution)</h4><p>多项分布(Multinomial Distribution)，它是二项分布的推广。二项分布的试验结果只有两个(成功和失败)，而多项分布的试验结果则多于两个。</p>\n<h5 id=\"联合概率函数：\"><a href=\"#联合概率函数：\" class=\"headerlink\" title=\"联合概率函数：\"></a>联合概率函数：</h5><script type=\"math/tex; mode=display\">\nP(X_1 = x_1, X_2 = x_2, ..., X_k = x_k) = \\dfrac{n!}{x_1!x_2!...x_k!} p_1^{x_1}p_2^{x_2}...p_{k}^{x_k}</script><p>多项分布对于每一个结果都有均值和方差，分别为：</p>\n<h5 id=\"期望：-1\"><a href=\"#期望：-1\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\nE(X_i) = np_i</script><h5 id=\"方差：-1\"><a href=\"#方差：-1\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nD(X_i) = np_i(1-p_i)</script><h4 id=\"泊松分布-Possion-Distribution\"><a href=\"#泊松分布-Possion-Distribution\" class=\"headerlink\" title=\"泊松分布(Possion Distribution)\"></a>泊松分布(Possion Distribution)</h4><h5 id=\"符号：-X-sim-P-lambda\"><a href=\"#符号：-X-sim-P-lambda\" class=\"headerlink\" title=\"符号：$X\\sim P(\\lambda)$\"></a>符号：$X\\sim P(\\lambda)$</h5><h5 id=\"概率：-P-X-x-dfrac-e-lambda-lambda-x-x\"><a href=\"#概率：-P-X-x-dfrac-e-lambda-lambda-x-x\" class=\"headerlink\" title=\"概率：$P(X = x) = \\dfrac{e^{-\\lambda}\\lambda^{x}}{x!}$\"></a>概率：$P(X = x) = \\dfrac{e^{-\\lambda}\\lambda^{x}}{x!}$</h5><p>证明：<br>由 $\\lambda$ 的定义，单位时间内随机事件发生 $\\lambda$ 次，并且每一次事件发生都是独立的，和时间没有关系的。</p>\n<p>所以如果我们将单位单位时间划分为 n 份，当 n 趋近于正无穷的时候，我们可以认为每一段时间内事件发生的次数是均匀的。所以每一段时间事件发生的概率都是 $\\dfrac{\\lambda}{n}$ </p>\n<script type=\"math/tex; mode=display\">\nP(X = x) = \\lim\\limits_{n \\to +\\infty}\\begin{pmatrix} n \\\\ x\\end{pmatrix} (\\dfrac{\\lambda}{n})^{x}(1 - \\dfrac{\\lambda}{n})^{n - x} = \\dfrac{\\lambda^{k}}{k!}e^{-\\lambda}</script><h5 id=\"期望：-2\"><a href=\"#期望：-2\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X) &= \\sum\\limits_{k=0}^{+\\infty} k \\dfrac{\\lambda^{k}}{k!}e^{-\\lambda} \\\\\n&= \\lambda e^{-\\lambda} \\sum\\limits_{k = 1}^{+\\infty} \\dfrac{\\lambda^{k - 1}}{(k - 1)!} \\\\\n&= \\lambda e^{-\\lambda} e^{\\lambda} \\\\\n&= \\lambda\n\\end{aligned}</script><h5 id=\"方差：-2\"><a href=\"#方差：-2\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nE(X^{2}) = E(X(X - 1) + X) = E(X(X-1)) + E(X) \\\\</script><script type=\"math/tex; mode=display\">\n\\begin{aligned}\n\nE(X(X - 1)) &= \\sum\\limits_{k = 1}^{+\\infty} k(k - 1) \\dfrac{\\lambda^{k}}{k!}e^{-\\lambda} \\\\\n&=\\sum\\limits_{k = 2}^{+\\infty}\\dfrac{\\lambda^{k}}{(k - 2)!}e^{-\\lambda} \\\\\n&= \\lambda^{2}e^{-\\lambda}\\sum\\limits_{k = 0}^{+\\infty}\\dfrac{\\lambda^{k}}{k!}\\\\\n&= \\lambda^{2}\n\\end{aligned}</script><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nD(X) &= E(X^{2}) - E(X)^{2} \\\\\n&= E(X(X - 1)) + E(X) - E(X)^{2} \\\\\n&= \\lambda^{2} + \\lambda - \\lambda^{2}\\\\\n&= \\lambda\n\\end{aligned}</script><h5 id=\"性质：-2\"><a href=\"#性质：-2\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><ol>\n<li>伯努利分布是二项分布的特殊情况，当 n = 1 的时候，二项分布变为伯努利分布。泊松分布可以被看作是二项分布的极端情况，在试验次数非常多或者成功概率非常小的情况下，可以近似为泊松分布。指数分布也可以由泊松分布推导而来。</li>\n<li>泊松分布中 $\\lambda$ 表示单位时间内随机事件的平均发生次数。在一个特定时间内，某一个事件都会在任意时刻发生(前提是，每次发生都是独立的，并且跟事件没有关系)。</li>\n</ol>\n<h5 id=\"应用：-2\"><a href=\"#应用：-2\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><p>泊松分布是用来描述在给定时间段内随机事件发生次数的分布。例如一天之间收到的电子邮件数量。</p>\n<h4 id=\"几何分布-Geometric-Distribution\"><a href=\"#几何分布-Geometric-Distribution\" class=\"headerlink\" title=\"几何分布(Geometric Distribution)\"></a>几何分布(Geometric Distribution)</h4><h5 id=\"符号：-X-sim-G-p\"><a href=\"#符号：-X-sim-G-p\" class=\"headerlink\" title=\"符号：$X\\sim G(p)$\"></a>符号：$X\\sim G(p)$</h5><h5 id=\"概率：-P-X-k-1-p-k-1-p\"><a href=\"#概率：-P-X-k-1-p-k-1-p\" class=\"headerlink\" title=\"概率：$P(X = k) = (1-p)^{k - 1}p$\"></a>概率：$P(X = k) = (1-p)^{k - 1}p$</h5><h5 id=\"期望：-3\"><a href=\"#期望：-3\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X) &= \\sum\\limits_{k = 1}^{+\\infty} k \\cdot (1-p)^{k - 1}p \\\\\n&=p \\sum\\limits_{k = 1}^{+\\infty} \\left( \\int k \\cdot (1-p)^{k - 1}\\right)' \\\\\n&= p \\left(-\\sum\\limits_{k = 1}^{+\\infty}(1-p)^{k} \\right)' \\\\\n&= p \\cdot \\dfrac{1}{p^{2}} \\\\\n&= \\dfrac{1}{p}\n\\end{aligned}</script><h5 id=\"方差：-3\"><a href=\"#方差：-3\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nD(X) &= E(X^{2}) - E(X)^{2} \\\\\n&= \\sum\\limits_{k = 1}^{+\\infty} k^{2}(1 - p)^{k - 1}p - \\dfrac{1}{p^{2}} \\\\\n&= p \\left[\\sum\\limits_{k = 1}^{+\\infty}(k+ 1)kq^{k - 1} - \\sum\\limits_{k = 1}^{+\\infty} kq^{k - 1} \\right] - \\dfrac{1}{p^{2}} \\\\\n&= \\dfrac{1 - p}{p^{2}}\n\\end{aligned}</script><h5 id=\"性质：-3\"><a href=\"#性质：-3\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><h4 id=\"超几何分布-Hypergeometric-Distribution\"><a href=\"#超几何分布-Hypergeometric-Distribution\" class=\"headerlink\" title=\"超几何分布(Hypergeometric Distribution)\"></a>超几何分布(Hypergeometric Distribution)</h4><h5 id=\"符号：\"><a href=\"#符号：\" class=\"headerlink\" title=\"符号：\"></a>符号：</h5><h5 id=\"概率：-P-X-k-frac-begin-pmatrix-M-k-end-pmatrix-begin-pmatrix-N-M-n-k-end-pmatrix-begin-pmatrix-N-M-end-pmatrix-k-leq-min-n-M-k-1\"><a href=\"#概率：-P-X-k-frac-begin-pmatrix-M-k-end-pmatrix-begin-pmatrix-N-M-n-k-end-pmatrix-begin-pmatrix-N-M-end-pmatrix-k-leq-min-n-M-k-1\" class=\"headerlink\" title=\"概率：$P(X = k) = \\frac{\\begin{pmatrix} M \\\\ k\\end{pmatrix} \\begin{pmatrix} N - M \\\\ n - k\\end{pmatrix}}{\\begin{pmatrix} N \\\\ M\\end{pmatrix}}, k \\leq \\min(n, M) = k_1$\"></a>概率：$P(X = k) = \\frac{\\begin{pmatrix} M \\\\ k\\end{pmatrix} \\begin{pmatrix} N - M \\\\ n - k\\end{pmatrix}}{\\begin{pmatrix} N \\\\ M\\end{pmatrix}}, k \\leq \\min(n, M) = k_1$</h5><h5 id=\"期望：-4\"><a href=\"#期望：-4\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X) &= \\sum\\limits_{k = 1}^{k_1} k \\cdot \\frac{\\begin{pmatrix} M \\\\ k\\end{pmatrix} \\begin{pmatrix} N - M \\\\ n - k\\end{pmatrix}}{\\begin{pmatrix} N \\\\ M\\end{pmatrix}} \\\\\n&= \\sum\\limits_{k = 1}^{k_1} \\begin{pmatrix} N - M \\\\ n - k\\end{pmatrix}\\times \\frac{\\frac{M(M - 1)!}{(k - 1)!(M - k)!}}{\\frac{N(N - 1)!}{n(n - 1)!(N-n)!}} \\\\\n&= \\dfrac{nM}{N}\\sum\\limits_{k = 1}^{k_1} \\frac{\\begin{pmatrix} M - 1 \\\\ k - 1\\end{pmatrix}\\begin{pmatrix}N - M \\\\ n - k \\end{pmatrix} }{\\begin{pmatrix} N - 1\\\\ n - 1\\end{pmatrix}}\\\\\n&= \\dfrac{nM}{N} \\frac{\\sum\\limits_{k = 1}^{k_1} \\begin{pmatrix} M - 1 \\\\ k - 1\\end{pmatrix}\\begin{pmatrix}N - 1 - (M - 1) \\\\ n - 1 - (k - 1) \\end{pmatrix}}{\\begin{pmatrix} N - 1 \\\\ n - 1\\end{pmatrix}} \\\\\n&= \\dfrac{nM}{N}\n\\end{aligned}</script><h5 id=\"方差：-4\"><a href=\"#方差：-4\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nE(X^{2})= E(X(X - 1) + X) = E(X(X - 1)) + E(X)</script><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X(X - 1))) &= \\sum\\limits_{k = 0}^{k_1} k(k - 1) \\frac{\\begin{pmatrix}M \\\\k \\end{pmatrix} \\begin{pmatrix} N - M \\\\ n - k\\end{pmatrix}}{\\begin{pmatrix} N \\\\ n\\end{pmatrix}} \\\\\n&= \\frac{nM(n - 1)(M - 1)}{N(N - 1)} \\sum\\limits_{k = 2}^{k_1} \\frac{\\begin{pmatrix} M - 2 \\\\ k - 2\\end{pmatrix} \\begin{pmatrix} N - M \\\\ n - k\\end{pmatrix}}{\\begin{pmatrix} N - 2 \\\\ n - 2\\end{pmatrix}} \\\\\n&= \\frac{nM(n - 1)(M - 1)}{N(N - 1)}\n\\end{aligned}</script><script type=\"math/tex; mode=display\">\nD(X) = E(X(X - 1))) + E(X) - E(X)^{2}  = \\frac{nM(N - M)(N - n)}{N^{2}(N - 1)}</script><h5 id=\"性质：-4\"><a href=\"#性质：-4\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><ol>\n<li>当总物品个数远远大于选的个数，或者总物品个数区域无穷大的时候，超几何分布可以近似为二项分布。</li>\n<li></li>\n</ol>\n<h5 id=\"应用：-3\"><a href=\"#应用：-3\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><h4 id=\"负二项分布-帕斯卡分布-Negative-Binomial-Distribution-Pascal-Distribution\"><a href=\"#负二项分布-帕斯卡分布-Negative-Binomial-Distribution-Pascal-Distribution\" class=\"headerlink\" title=\"负二项分布(帕斯卡分布, Negative Binomial Distribution, Pascal Distribution)\"></a>负二项分布(帕斯卡分布, Negative Binomial Distribution, Pascal Distribution)</h4><h5 id=\"符号：-X-sim-text-Pascal-n-p\"><a href=\"#符号：-X-sim-text-Pascal-n-p\" class=\"headerlink\" title=\"符号：$X \\sim \\text{Pascal}(n, p)$\"></a>符号：$X \\sim \\text{Pascal}(n, p)$</h5><h5 id=\"概率：-P-X-x-begin-pmatrix-x-1-r-1-end-pmatrix-p-r-1-p-x-r\"><a href=\"#概率：-P-X-x-begin-pmatrix-x-1-r-1-end-pmatrix-p-r-1-p-x-r\" class=\"headerlink\" title=\"概率：$P(X = x) = \\begin{pmatrix} x - 1\\ \\\\ r - 1\\end{pmatrix}p^{r}(1  -p)^{x - r}$\"></a>概率：$P(X = x) = \\begin{pmatrix} x - 1\\ \\\\ r - 1\\end{pmatrix}p^{r}(1  -p)^{x - r}$</h5><p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231024232853695.png\" alt=\"image-20231024232853695\"></p>\n<h5 id=\"期望：-5\"><a href=\"#期望：-5\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X) &= \\sum\\limits_{x = r}^{+\\infty} x f(x) \\\\\n&= \\sum\\limits_{x = r}^{+\\infty} x\\begin{pmatrix} x - 1 \\\\ r - 1\\end{pmatrix} p^{r}(1 - p)^{x - r} \\\\\n&= \\frac{r}{p} \\sum\\limits_{x = r}^{+\\infty} \\begin{pmatrix}x  \\\\ r \\end{pmatrix} p^{r + 1} (1 - p)^{x  - r} \\\\\n&= \\frac{rp}{1 - p}\n\\end{aligned}</script><h5 id=\"方差：-5\"><a href=\"#方差：-5\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X^{2}) &= \\sum\\limits_{x = r}^{+\\infty} x^{2}f(x) \\\\\n&= \\sum\\limits_{x = r}^{+\\infty} x^{2} \\begin{pmatrix}x - 1 \\\\ r-  1 \\end{pmatrix}p^{r}(1 - p)^{x - r} \\\\\n&= \\frac{r}{p} \\sum\\limits_{x = r}^{+\\infty} x\\begin{pmatrix} x \\\\ r\\end{pmatrix}p^{r + 1} (1 - p)^{x- r} \\\\\n&= \\frac{r}{p} \\left[\\sum\\limits_{x = r}^{+\\infty}(x + 1)\\begin{pmatrix} x  \\\\ r\\end{pmatrix} p^{r+ 1}(1 - p)^{x - r} - \\sum\\limits_{x = r}^{+\\infty}\\begin{pmatrix} x \\\\ r\\end{pmatrix} p^{r+ 1}(1 - p)^{x - r}\\right] \\\\\n&= \\frac{r}{p}(\\frac{r + 1}{p} - 1) \\\\\n&= \\frac{r(r - p + 1)}{p^{2}}\n\\end{aligned}</script><script type=\"math/tex; mode=display\">\nD(X) = E(X^{2}) - E(X)^{2} = \\frac{r(1 - p)}{p^{2}}</script><h5 id=\"性质：-5\"><a href=\"#性质：-5\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><p>Binomial 分布和 Negative Binomial 分布都是多次重复的 Bernoulli 实验。</p>\n<p>Binomial关注的是，重复Bernoulli实验成功概率为p，条件为总共实验N次，随机变量为N次实验中成功实验次数k（k∈Z,k∈[0,N]），该随机变量[概率分布为Binomial分布。</p>\n<p>Negative Binomial关注的是，重复Bernoulli实验成功概率为p，条件为累计出现r次失败，随机变量为成功实验次数k（k∈Z,k∈[0,+∞)），该随机变量的概率分布为Negative Binomial分布。</p>\n<p>Binomial和Negative Binomial分布的随机变量都是成功实验次数，条件不同。从定义上来看，”负“可以理解为站在失败次数的角度看成功。</p>\n<h5 id=\"应用：-4\"><a href=\"#应用：-4\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><h4 id=\"伽马-泊松分布-Gamma-Poisson-Distribution\"><a href=\"#伽马-泊松分布-Gamma-Poisson-Distribution\" class=\"headerlink\" title=\"伽马-泊松分布(Gamma-Poisson Distribution)\"></a>伽马-泊松分布(Gamma-Poisson Distribution)</h4><h5 id=\"符号：-X-sim-text-gamma-Poisson-alpha-beta\"><a href=\"#符号：-X-sim-text-gamma-Poisson-alpha-beta\" class=\"headerlink\" title=\"符号：$X \\sim \\text{gamma-Poisson}(\\alpha, \\beta)$\"></a>符号：$X \\sim \\text{gamma-Poisson}(\\alpha, \\beta)$</h5><h5 id=\"概率密度函数：\"><a href=\"#概率密度函数：\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\dfrac{\\Gamma(x + \\beta) \\alpha^{x}}{\\Gamma(\\beta)(1+\\alpha)^{\\beta + x}x!}</script><p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231024233912306.png\" alt=\"image-20231024233912306\"></p>\n<h5 id=\"期望：-6\"><a href=\"#期望：-6\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\nE(X) = \\alpha\\beta</script><h5 id=\"方差：-6\"><a href=\"#方差：-6\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nD(X) = \\alpha \\beta + \\alpha^{2}\\beta</script><h5 id=\"性质：-6\"><a href=\"#性质：-6\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><ol>\n<li>做变换：$\\alpha = (1 - p) / p, \\beta = n$，就得到 Pascal 分布</li>\n</ol>\n<h4 id=\"Zeta-分布-Zeta-Distribution\"><a href=\"#Zeta-分布-Zeta-Distribution\" class=\"headerlink\" title=\"Zeta 分布(Zeta Distribution)\"></a>Zeta 分布(Zeta Distribution)</h4><h5 id=\"符号：-X-sim-text-Zeta-alpha\"><a href=\"#符号：-X-sim-text-Zeta-alpha\" class=\"headerlink\" title=\"符号：$X \\sim \\text{Zeta}(\\alpha)$\"></a>符号：$X \\sim \\text{Zeta}(\\alpha)$</h5><h5 id=\"概率函数：\"><a href=\"#概率函数：\" class=\"headerlink\" title=\"概率函数：\"></a>概率函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\dfrac{1}{x^{\\alpha}\\sum\\limits_{i = 1}^{+\\infty}(1/i)^{\\alpha}} \\quad x = 1, 2, 3, ...</script><p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231026215915467.png\" alt=\"image-20231026215915467\"></p>\n<h5 id=\"累计分布函数\"><a href=\"#累计分布函数\" class=\"headerlink\" title=\"累计分布函数\"></a>累计分布函数</h5><script type=\"math/tex; mode=display\">\nF(x) = P(X \\leq x) = \\dfrac{\\sum\\limits_{i = 1}^{x} (1/i)^{\\alpha}}{\\zeta(\\alpha)} \\quad x = 1, 2, ...</script><h5 id=\"期望：-7\"><a href=\"#期望：-7\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\nE(X) = \\dfrac{\\zeta(\\alpha - 1)}{\\zeta(\\alpha)}</script><h5 id=\"方差：-7\"><a href=\"#方差：-7\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nD(X) = \\dfrac{\\zeta(\\alpha)\\zeta(\\alpha - 2) - \\zeta(\\alpha - 1)^{2}}{\\zeta(\\alpha)^{2}}</script><h4 id=\"Zipf-分布-齐夫定律\"><a href=\"#Zipf-分布-齐夫定律\" class=\"headerlink\" title=\"Zipf 分布(齐夫定律)\"></a>Zipf 分布(齐夫定律)</h4><h5 id=\"符号：-X-sim-text-Zipf-alpha-n\"><a href=\"#符号：-X-sim-text-Zipf-alpha-n\" class=\"headerlink\" title=\"符号：$X \\sim \\text{Zipf}(\\alpha, n)$\"></a>符号：$X \\sim \\text{Zipf}(\\alpha, n)$</h5><h5 id=\"概率函数：-1\"><a href=\"#概率函数：-1\" class=\"headerlink\" title=\"概率函数：\"></a>概率函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\dfrac{1}{x^{\\alpha}\\sum\\limits_{i = 1}^{n}(1 / i)^{\\alpha}} \\quad  x = 1, 2, 3, ..., n</script><p>下面是 $\\alpha = 1, n = 10$</p>\n<p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231026224615881.png\" alt=\"image-20231026224615881\"></p>\n<p>我们记 $H_{n, \\alpha} = \\sum\\limits_{i = 1}^{n} \\left(\\dfrac{1}{i}\\right)^{\\alpha}$</p>\n<h5 id=\"期望：-8\"><a href=\"#期望：-8\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\nE(X) = \\dfrac{H_{n, \\alpha - 1}}{H_{n, \\alpha}}</script><h5 id=\"方差：-8\"><a href=\"#方差：-8\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nD(X) = \\dfrac{H_{n, \\alpha - 2}H_{n, \\alpha} - H_{n, \\alpha}^{2}}{H_{n, \\alpha}^{2}}</script><h5 id=\"齐夫定律：\"><a href=\"#齐夫定律：\" class=\"headerlink\" title=\"齐夫定律：\"></a>齐夫定律：</h5><p>在自然语言的语料库里，一个单词出现的率与它在频<br>率表里的排名成反比。所以，频率最高的单词出现的频率大约是出现频率第二位的单词的2<br>倍，而出现频率第二位的单词侧是出现频率第四位的单词的2倍。这个定律被作为任何与幂<br>定律概率分布有关的事物的参考。</p>\n<h5 id=\"应用-or-遵循该定律的现象：\"><a href=\"#应用-or-遵循该定律的现象：\" class=\"headerlink\" title=\"应用 or 遵循该定律的现象：\"></a>应用 or 遵循该定律的现象：</h5><ol>\n<li>英文单词或中文汉字的出现频率：不仅适用于语料全体，也适用于单独的一篇文章</li>\n<li>网页访问频率</li>\n<li>城镇人口与城镇等级的关系</li>\n<li>收入前3%的人的收入</li>\n<li>地震震级</li>\n<li>固体破碎时的碎片大小</li>\n</ol>\n<h3 id=\"连续分布\"><a href=\"#连续分布\" class=\"headerlink\" title=\"连续分布\"></a>连续分布</h3><h4 id=\"均匀分布-Uniform-Distribution\"><a href=\"#均匀分布-Uniform-Distribution\" class=\"headerlink\" title=\"均匀分布(Uniform Distribution)\"></a>均匀分布(Uniform Distribution)</h4><h5 id=\"符号：-X-sim-U-a-b\"><a href=\"#符号：-X-sim-U-a-b\" class=\"headerlink\" title=\"符号：$X \\sim U(a, b)$\"></a>符号：$X \\sim U(a, b)$</h5><h5 id=\"概率密度函数：-1\"><a href=\"#概率密度函数：-1\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\begin{cases} \\dfrac{1}{b - a} , a < x < b \\\\\n0\\end{cases}</script><h5 id=\"分布函数：\"><a href=\"#分布函数：\" class=\"headerlink\" title=\"分布函数：\"></a>分布函数：</h5><script type=\"math/tex; mode=display\">\nF(x) = \\begin{cases}\n\\frac{x - a}{b - a}, &a < x < b \\\\\n0,&x < a \\\\\n1,&x > b\n\\end{cases}</script><h5 id=\"期望：-9\"><a href=\"#期望：-9\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X) &= \\int_{-\\infty}^{+\\infty} x \\cdot f(x) \\mathrm{d}x \\\\\n&= \\int_{a}^{b} \\dfrac{x}{b - a} \\mathrm{d}x \\\\\n&= \\dfrac{a + b}{2}\n\\end{aligned}</script><h5 id=\"方差：-9\"><a href=\"#方差：-9\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nE(X^{2}) &= \\int_{a}^{b} \\dfrac{x^{2}}{b - a} \\mathrm{d}x\\\\\n&= \\dfrac{a^{2}+ab + b^{2}}{3}</script><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nD(X) &= E(X^{2}) - E(X)^{2} \\\\\n&= \\dfrac{a^{2}+ab + b^{2}}{3} - \\left( \\dfrac{a+b}{2}\\right)^{2} \\\\\n&= \\dfrac{(b - a)^{2}}{12}\n\\end{aligned}</script><h5 id=\"性质：-7\"><a href=\"#性质：-7\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><h5 id=\"应用：-5\"><a href=\"#应用：-5\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><h4 id=\"指数分布-Exponential-Distribution\"><a href=\"#指数分布-Exponential-Distribution\" class=\"headerlink\" title=\"指数分布(Exponential Distribution)\"></a>指数分布(Exponential Distribution)</h4><p>指数分布一个很重要的特征就是无记忆性 $P(x &gt; s | x &gt; t) = P(x &gt; s - t), s &gt; t$ 。如果我们使用 x 表示等待的时间。那么这个式子的含义就是 <strong>未来我还需要等到多少时间和我已经等待了多长时间没有关系</strong>。</p>\n<p>无记忆性的离散版本是 <strong>几何分布。</strong></p>\n<h5 id=\"符号：-X-sim-E-lambda\"><a href=\"#符号：-X-sim-E-lambda\" class=\"headerlink\" title=\"符号：$X\\sim E(\\lambda)$\"></a>符号：$X\\sim E(\\lambda)$</h5><h5 id=\"概率密度函数：-2\"><a href=\"#概率密度函数：-2\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\begin{cases}\n\\lambda e^{-\\lambda x}, &x > 0 \\\\\n\\\\\n0, &x \\leq 0\n\\end{cases}</script><p>推导：</p>\n<p>我们根据实际情况来考虑，如果一个产品的使用寿命是 T，分布函数是 $F(t)$，那么寿命大于 t 的概率为 $S(t) = 1- F(t)$</p>\n<p>如果一个产品已经使用 t 时间，那么在 $(t, t + \\Delta t)$ 这一段时间内，死亡的「风险」为:</p>\n<script type=\"math/tex; mode=display\">\n\\lambda(t) = \\lim\\limits_{\\Delta t \\to 0} \\dfrac{P(t \\leq T \\leq t + \\Delta t)}{\\mathrm{d}t \\cdot S(t)} = \\dfrac{f(t)}{S(t)} = -\\dfrac{S'(t)}{S(t)} = -\\dfrac{\\mathrm{d}}{\\mathrm{d}t}\\ln(S(t))</script><blockquote>\n<p>解释：因为我们首先需要活到这个时间，然后在这个时间段死亡，所以有 $S(t) \\cdot \\lambda(t) = p(T = t)$</p>\n</blockquote>\n<p>我们称这个 $\\lambda(t)$ 为风险函数（到这里还没有涉及到无记忆性，这个 $\\lambda(t)$ 是一个普遍的风险函数）</p>\n<p>如果我们要满足无记忆性，就要有 $\\lambda(t) = \\text{Const}$（也就是我们在每一个时间下「死亡」的概率都是等大的）</p>\n<p>或者我们由「无记忆性」的直接式子推导：$P(T &gt; s | T &gt; t) = P(T &gt; s - t) \\Rightarrow P(t \\leq T \\leq t + \\Delta t) = P(T &lt; \\mathrm{d}t) \\cdot S(t)$ 也是得到 $\\lambda(t) = \\text{Const}$ </p>\n<p>所以有</p>\n<script type=\"math/tex; mode=display\">\n-\\dfrac{\\mathrm{d}}{\\mathrm{d}t}\\ln(S(t)) = \\text{Const}</script><p>解得 $F(t) = 1 - e^{-\\text{Const} \\cdot t}$</p>\n<p>其中，$\\text{Const}$ 表示每一个时间点死亡的风险大小，也就是每一个时间点死亡的概率大小。</p>\n<h5 id=\"分布函数：-1\"><a href=\"#分布函数：-1\" class=\"headerlink\" title=\"分布函数：\"></a>分布函数：</h5><script type=\"math/tex; mode=display\">\nF(x) = \\begin{cases}\n1 - e^{-\\lambda x}, &x > 0 \\\\\n0, &x \\leq 0\n\\end{cases}</script><h5 id=\"期望：-10\"><a href=\"#期望：-10\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X) &= \\int_{-\\infty}^{+\\infty} x \\cdot f(x) \\mathrm{d}x \\\\\n&= \\int_0^{+\\infty} x \\cdot \\lambda e^{-\\lambda x} \\mathrm{d}x \\\\\n&= x(-e^{-\\lambda x})|_{0}^{+\\infty} - \\int_{0}^{+\\infty} -e^{-\\lambda x} \\mathrm{d}x \\\\\n&= \\frac{1}{\\lambda}\n\\end{aligned}</script><h5 id=\"方差：-10\"><a href=\"#方差：-10\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X^{2}) &= \\int_0^{+\\infty} x^{2} \\cdot \\lambda e^{-\\lambda x} \\mathrm{d}x \\\\\n&= \\int_0^{+\\infty} x^{2} \\mathrm{d}(-e^{-\\lambda x}) \\\\\n&= x^{2}(-e^{-\\lambda x})|_{0}^{+\\infty} + 2\\int_0^{+\\infty}xe^{-\\lambda x} \\mathrm{d}x \\\\\n&= \\frac{2}{\\lambda^{2}}\n\\end{aligned}</script><script type=\"math/tex; mode=display\">\nD(X) = E(X^{2}) - E(X)^{2} = \\frac{1}{\\lambda^{2}}</script><h5 id=\"性质：-8\"><a href=\"#性质：-8\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><p>指数分布通常用来建模持续时间，只不过指数分布能够建模的持续时间具有比较特殊的性质，也就是所谓的“无记忆性”</p>\n<p>无记忆性：</p>\n<script type=\"math/tex; mode=display\">\n</script><h5 id=\"应用：-6\"><a href=\"#应用：-6\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><ol>\n<li><p>泊松分布、指数分布、二项分布、伯努利分布之间的关系：</p>\n<p>当 n 趋近于无穷大时，二项分布可以近似为泊松分布；当 $\\lambda$ 趋近于无穷大<br>时，泊松分布可以近似为正态分布；而指数分布则是泊松分布在连续时间上的推广，因此也与泊松<br>分布有一定的联系。但是，这些分布之间的应用场景和特点是不同的，需要根据实际问题选择合适<br>的分布模型。</p>\n</li>\n<li></li>\n</ol>\n<h4 id=\"正态分布-高斯分布-Normal-Distribution\"><a href=\"#正态分布-高斯分布-Normal-Distribution\" class=\"headerlink\" title=\"正态分布(高斯分布, Normal Distribution)\"></a>正态分布(高斯分布, Normal Distribution)</h4><h5 id=\"符号：-X-sim-N-mu-sigma-2\"><a href=\"#符号：-X-sim-N-mu-sigma-2\" class=\"headerlink\" title=\"符号：$X\\sim N(\\mu, \\sigma^{2})$\"></a>符号：$X\\sim N(\\mu, \\sigma^{2})$</h5><h5 id=\"概率密度函数：-3\"><a href=\"#概率密度函数：-3\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\dfrac{1}{\\sqrt{2\\pi} \\sigma}e^{-\\frac{-(x-\\mu)^{2}}{2\\sigma^{2}}}(\\mu \\in R, \\sigma > 0)</script><h5 id=\"分布函数：-2\"><a href=\"#分布函数：-2\" class=\"headerlink\" title=\"分布函数：\"></a>分布函数：</h5><h5 id=\"期望：-11\"><a href=\"#期望：-11\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X) &= \\int_{-\\infty}^{+\\infty} x \\cdot \\frac{1}{\\sqrt{2 \\pi} \\sigma}e^{-\\frac{-(x-\\mu)^{2}}{2\\sigma^{2}}} \\mathrm{d}x \\\\\n&=\\int_{-\\infty}^{+\\infty}(x - \\mu + \\mu) \\cdot \\frac{1}{\\sqrt{2\\pi}\\sigma}e^{-\\frac{(x - \\mu)^{2}}{2\\sigma^{2}}} \\mathrm{d}(x - \\mu)\\\\\n&= \\int_{-\\infty}^{+\\infty} \\frac{t}{\\sqrt{2\\pi}\\sigma}e^{-\\frac{t^{2}}{2\\sigma^{2}}} \\mathrm{d}t + \\mu \\int_{-\\infty}^{+\\infty}\\frac{1}{\\sqrt{2\\pi}\\sigma} e^{-\\frac{(x - \\mu)^{2}}{2\\sigma^{2}}} \\mathrm{d}x \\\\\n&= 0 + \\mu \\\\\n&= \\mu\n\\end{aligned}</script><h5 id=\"方差：-11\"><a href=\"#方差：-11\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nD(X) &= \\int_{-\\infty}^{+\\infty} x^{2} \\cdot \\frac{1}{\\sqrt{2 \\pi} \\sigma}e^{-\\frac{-(x-\\mu)^{2}}{2\\sigma^{2}}} \\mathrm{d}x \\\\\n&= \\int_{-\\infty}^{+\\infty}(x - \\mu)^{2} f(x) \\mathrm{d}x + 2\\mu \\int_{-\\infty}^{+\\infty}x \\cdot f(x) \\mathrm{d}x - \\mu^{2} \\int_{-\\infty}^{+\\infty} f(x)\\mathrm{d}x \\\\\n&= \\frac{1}{\\sqrt{2\\pi} \\sigma}\\int_{0}^{+\\infty} \\sqrt{t}e^{\\frac{t}{2\\sigma^{2}}} \\mathrm{d}t + 2\\mu^{2} - \\mu^{2}\\\\\n&= \\sigma^{2}\n\\end{aligned}</script><h5 id=\"性质：-9\"><a href=\"#性质：-9\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><p>标准正态分布：</p>\n<h5 id=\"应用：-7\"><a href=\"#应用：-7\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><h4 id=\"多元高斯分布-Multivariate-Gaussian-Distribution\"><a href=\"#多元高斯分布-Multivariate-Gaussian-Distribution\" class=\"headerlink\" title=\"多元高斯分布(Multivariate Gaussian Distribution)\"></a>多元高斯分布(Multivariate Gaussian Distribution)</h4><h5 id=\"概率密度函数：-4\"><a href=\"#概率密度函数：-4\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><h5 id=\"应用：多元高斯分布的性质和应用在统计学、机器学习、信号处理和贝叶斯推断等领域中都非常重要。\"><a href=\"#应用：多元高斯分布的性质和应用在统计学、机器学习、信号处理和贝叶斯推断等领域中都非常重要。\" class=\"headerlink\" title=\"应用：多元高斯分布的性质和应用在统计学、机器学习、信号处理和贝叶斯推断等领域中都非常重要。\"></a>应用：多元高斯分布的性质和应用在统计学、机器学习、信号处理和贝叶斯推断等领域中都非常重要。</h5><h4 id=\"混合高斯分布-Mixture-of-Gaussian-Distributions\"><a href=\"#混合高斯分布-Mixture-of-Gaussian-Distributions\" class=\"headerlink\" title=\"混合高斯分布(Mixture of Gaussian Distributions)\"></a>混合高斯分布(Mixture of Gaussian Distributions)</h4><h5 id=\"应用：-8\"><a href=\"#应用：-8\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><p>混合高斯模型在许多领域中有广泛的应用，如模式识别、聚类分析、异常检测和图像分割。它允许建模复杂的数据分布，其中数据点可以由多个不同的分布生成，而不仅仅是单一的高斯分布。这使得混合高斯模型成为数据建模和分析中的强大工具。</p>\n<h4 id=\"对数正态分布-Log-Normal-Distribution\"><a href=\"#对数正态分布-Log-Normal-Distribution\" class=\"headerlink\" title=\"对数正态分布(Log-Normal Distribution)\"></a>对数正态分布(Log-Normal Distribution)</h4><h4 id=\"伽马分布-Gamma-Distribution\"><a href=\"#伽马分布-Gamma-Distribution\" class=\"headerlink\" title=\"伽马分布(Gamma Distribution)\"></a>伽马分布(Gamma Distribution)</h4><h5 id=\"符号：-X-sim-Ga-alpha-lambda\"><a href=\"#符号：-X-sim-Ga-alpha-lambda\" class=\"headerlink\" title=\"符号：$X \\sim Ga(\\alpha, \\lambda)$\"></a>符号：$X \\sim Ga(\\alpha, \\lambda)$</h5><h5 id=\"概率密度函数：-5\"><a href=\"#概率密度函数：-5\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\begin{cases}\n\\dfrac{\\lambda^{\\alpha}}{\\Gamma(\\alpha)} x^{\\alpha - 1}e^{-\\lambda x}, &x \\geq 0\\\\\n0 & x < 0\n\\end{cases}</script><h5 id=\"期望：-12\"><a href=\"#期望：-12\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X) &= \\dfrac{\\lambda^{\\alpha}}{\\Gamma(\\alpha)}\\int_{0}^{+\\infty} x^{\\alpha} e^{-\\lambda x} \\mathrm{d}x \\\\ &= \\dfrac{\\lambda^{\\alpha}}{\\Gamma(\\alpha)} \\int_{0}^{+\\infty} \\dfrac{t^{\\alpha}}{\\lambda ^{\\alpha + 1}}e^{-t} \\mathrm{d}t \\\\\n&= \\dfrac{\\Gamma(\\alpha  +1)}{\\Gamma(\\alpha) \\cdot \\lambda} \\\\\n&= \\frac{\\alpha}{\\lambda}\n\\end{aligned}</script><h5 id=\"方差：-12\"><a href=\"#方差：-12\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X^{2}) &= \\int_{0}^{+\\infty} x^{2} \\cdot \\dfrac{\\lambda^{\\alpha}}{\\Gamma(\\alpha)} x^{\\alpha - 1}e^{-\\lambda x} \\mathrm{d}x \\\\\n&= \\dfrac{1}{\\lambda^{2}\\Gamma(\\alpha)} \\int_0^{+\\infty} t^{\\alpha+1}e^{-t}\\mathrm{d}t \\\\\n&= \\dfrac{\\alpha(\\alpha + 1)}{\\lambda^{2}}\n\\end{aligned}</script><script type=\"math/tex; mode=display\">\nD(X) = E(X^{2}) - E(X)^{2}  = \\dfrac{\\alpha}{\\lambda^{2}}</script><h5 id=\"性质：-10\"><a href=\"#性质：-10\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><ol>\n<li><p>$\\alpha  = 1$ 的时候，伽马分布与指数分布之间的关系就建立起来了，有 $Ga(1, \\lambda ) = E(\\lambda)$</p>\n</li>\n<li><p>当 $\\alpha = \\dfrac{n}{2}, \\lambda = \\dfrac{1}{2}$ 的时候，伽马分布和卡方分布之间的关系就建立起来了，有 $Ga(\\dfrac{n}{2}, \\dfrac{1}{2}) = \\mathcal{X}^{2}(n)$</p>\n</li>\n<li><p>伽马分布的可加性。<img src=\"/.com//Users\\梁云森\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231024194312138.png\" alt=\"image-20231024194312138\"></p>\n</li>\n<li></li>\n</ol>\n<h5 id=\"应用：-9\"><a href=\"#应用：-9\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><h4 id=\"对数伽马分布-Log-Gamma-Distribution\"><a href=\"#对数伽马分布-Log-Gamma-Distribution\" class=\"headerlink\" title=\"对数伽马分布(Log-Gamma Distribution)\"></a>对数伽马分布(Log-Gamma Distribution)</h4><h5 id=\"符号：-X-sim-text-log-gamma-alpha-beta\"><a href=\"#符号：-X-sim-text-log-gamma-alpha-beta\" class=\"headerlink\" title=\"符号：$X \\sim \\text{log-gamma}(\\alpha, \\beta)$\"></a>符号：$X \\sim \\text{log-gamma}(\\alpha, \\beta)$</h5><h5 id=\"概率密度函数：-6\"><a href=\"#概率密度函数：-6\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\dfrac{e^{\\beta x}e^{-e^{x} / a}}{\\alpha^{\\beta}\\Gamma(\\beta)} -\\infty < x < +\\infty</script><p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231024233520269.png\" alt=\"image-20231024233520269\"></p>\n<h4 id=\"贝塔分布-Beta-Distribution\"><a href=\"#贝塔分布-Beta-Distribution\" class=\"headerlink\" title=\"贝塔分布(Beta Distribution)\"></a>贝塔分布(Beta Distribution)</h4><h5 id=\"符号：-X-sim-Beta-alpha-beta\"><a href=\"#符号：-X-sim-Beta-alpha-beta\" class=\"headerlink\" title=\"符号：$X \\sim \\Beta(\\alpha, \\beta)$\"></a>符号：$X \\sim \\Beta(\\alpha, \\beta)$</h5><h5 id=\"概率密度函数：-7\"><a href=\"#概率密度函数：-7\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\begin{cases}\n\\dfrac{1}{\\Beta(\\alpha, \\beta)} x^{\\alpha - 1}(1-x)^{\\beta - 1}, 0 < x < 1 \\\\\n0\n\\end{cases}</script><h5 id=\"分布函数：-3\"><a href=\"#分布函数：-3\" class=\"headerlink\" title=\"分布函数：\"></a>分布函数：</h5><h5 id=\"期望：-13\"><a href=\"#期望：-13\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X) &= \\int_0^{1}x \\cdot \\dfrac{1}{\\Beta(\\alpha, \\beta)} x^{\\alpha - 1}(1-x)^{\\beta - 1} \\mathrm{d}x \\\\\n&= \\dfrac{\\Beta(\\alpha + 1, \\beta)}{\\Beta(\\alpha, \\beta)} \\int_0^{1}\\dfrac{1}{\\Beta(\\alpha + 1, \\beta)} x^{(\\alpha + 1) - 1}(1-x)^{\\beta - 1} \\mathrm{d}x \\\\\n&= \\dfrac{\\Gamma(\\alpha + 1)\\Gamma(\\beta)}{\\Gamma(\\alpha + \\beta + 1)} \\cdot \\dfrac{\\Gamma(\\alpha + \\beta)}{\\Gamma(\\alpha)\\Gamma(\\beta)} \\\\\n&= \\dfrac{\\alpha}{\\alpha + \\beta}\n\\end{aligned}</script><h5 id=\"方差：-13\"><a href=\"#方差：-13\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X^{2}) &= \\int_0^{1} \\dfrac{1}{\\Beta(\\alpha, \\beta)}x^{(\\alpha + 2) - 1}(1 - x)^{\\beta - 1} \\mathrm{d}x \\\\\n&= \\dfrac{\\Beta(\\alpha + 2, \\beta)}{\\Beta(\\alpha, \\beta)} \\\\\n&= \\dfrac{\\alpha(\\alpha + 1)}{(\\alpha + \\beta)(\\alpha + \\beta + 1)}\n\\end{aligned}</script><script type=\"math/tex; mode=display\">\nD(X) = E(X^{2}) - E(X)^{2} = \\dfrac{\\alpha \\beta}{(\\alpha + \\beta)^{2}(\\alpha + \\beta + 1)}</script><h5 id=\"性质：-11\"><a href=\"#性质：-11\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><ol>\n<li>$Beta(1, 1) = U(0, 1)$</li>\n</ol>\n<h5 id=\"应用：-10\"><a href=\"#应用：-10\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><h4 id=\"威布尔分布-韦伯分布，Weibull-Distribution\"><a href=\"#威布尔分布-韦伯分布，Weibull-Distribution\" class=\"headerlink\" title=\"威布尔分布(韦伯分布，Weibull Distribution)\"></a>威布尔分布(韦伯分布，Weibull Distribution)</h4><p>概率密度函数：</p>\n<script type=\"math/tex; mode=display\">\nf(x;\\lambda, k) = \\begin{cases}\n\\dfrac{k}{\\lambda}(\\dfrac{x}{\\lambda})^{k - 1}e^{-(\\dfrac{x}{\\lambda})^k}, &x \\geq 0 \\\\\n0, &x < 0\n\\end{cases}</script><p>其中，x 是随机变量，$\\lambda &gt; 0$ 是比例系数(scale parameter)，$k &gt; 0$ 是形状参数(shape parameter)。显然，它的累计分布函数是扩展的指数分布函数。 </p>\n<h5 id=\"期望：-14\"><a href=\"#期望：-14\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\nE(X) = \\lambda \\Gamma(1 + \\dfrac{1}{k})</script><h5 id=\"方差：-14\"><a href=\"#方差：-14\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nD(X) = \\lambda^{2}\\left[\\Gamma(1 + \\dfrac{2}{k}) - \\Gamma^{2}(1 + \\dfrac{1}{k})\\right]</script><h5 id=\"应用：-11\"><a href=\"#应用：-11\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><p>威布尔分布在<a href=\"https://baike.baidu.com/item/可靠性工程/3129248?fromModule=lemma_inlink\">可靠性工程</a>中被广泛应用。</p>\n<ol>\n<li>研究生产过程和运输时间关系</li>\n<li>预测天气</li>\n<li>可靠性和失效分析</li>\n<li>雷达系统</li>\n<li>对接受的杂波信号依分布建模</li>\n<li>量化寿险模型的重复索赔</li>\n<li>描述风速分布</li>\n</ol>\n<h4 id=\"瑞利分布-Rayleigh-Distribution\"><a href=\"#瑞利分布-Rayleigh-Distribution\" class=\"headerlink\" title=\"瑞利分布(Rayleigh Distribution)\"></a>瑞利分布(Rayleigh Distribution)</h4><p>瑞利分布就是两个垂直分量服从独立且均值为0,标准差相同的高斯分布叠加之后的模。<br>换句话说，复高斯分布的模服从瑞利分布。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/573644622\">瑞利分布的推导过程 - 知乎 (zhihu.com)</a> 瑞利分布</p>\n<h4 id=\"柯西分布-柯西-洛伦兹分布，Cauchy-Distribution\"><a href=\"#柯西分布-柯西-洛伦兹分布，Cauchy-Distribution\" class=\"headerlink\" title=\"柯西分布(柯西-洛伦兹分布，Cauchy Distribution)\"></a>柯西分布(柯西-洛伦兹分布，Cauchy Distribution)</h4><h5 id=\"符号：-X-sim-text-Cauthy-a-alpha\"><a href=\"#符号：-X-sim-text-Cauthy-a-alpha\" class=\"headerlink\" title=\"符号：$X \\sim \\text{Cauthy}(a, \\alpha)$\"></a>符号：$X \\sim \\text{Cauthy}(a, \\alpha)$</h5><h5 id=\"概率密度函数：-8\"><a href=\"#概率密度函数：-8\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\dfrac{1}{\\alpha\\pi[1 + ((x - a) / \\alpha)^{2}]} \\quad \\quad -\\infty < x < +\\infty</script><p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231025112236557.png\" alt=\"image-20231025112236557\"></p>\n<h5 id=\"由来推导：\"><a href=\"#由来推导：\" class=\"headerlink\" title=\"由来推导：\"></a>由来推导：</h5><p>柯西分布描述了以随机角度倾斜的线段切割 x 轴的水平距离分布。</p>\n<p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231025113546164.png\" alt=\"image-20231025113546164\"></p>\n<script type=\"math/tex; mode=display\">\n\\tan(\\theta) = \\dfrac{x}{b} \\\\\n\\theta = \\arctan{\\dfrac{x}{b}} \\\\\n\\mathrm{d}\\theta = \\dfrac{1}{1 + \\frac{x^{2}}{b^{2}}} \\dfrac{\\mathrm{d}x}{b}</script><p>所以可以使用 $\\dfrac{\\mathrm{d}\\theta}{\\pi} = \\dfrac{1}{\\pi} \\dfrac{b\\mathrm{d}x}{b^2 + x ^{2}}$ 来计算关于 x 的分布。</p>\n<script type=\"math/tex; mode=display\">\n\\int_{-\\frac{\\pi}{2}}^{\\frac{\\pi}{2}} \\dfrac{\\theta}{\\pi} = 1 \\Rightarrow \\int_{-\\infty}^{+\\infty} \\dfrac{1}{\\pi} \\dfrac{b \\mathrm{d}x}{b^2 + x^{2}} = 1</script><p>所以，$P(X = x) = \\dfrac{1}{\\pi} \\dfrac{b}{(x - m)^{2} + b^2}$</p>\n<h5 id=\"分布函数：-4\"><a href=\"#分布函数：-4\" class=\"headerlink\" title=\"分布函数：\"></a>分布函数：</h5><script type=\"math/tex; mode=display\">\nF(x) = P(X \\leq x) = \\dfrac{1}{2\\pi}\\left(\\pi - 2\\arctan(\\dfrac{a - x}{\\alpha})\\right) \\quad -\\infty < x < +\\infty</script><h5 id=\"期望：-15\"><a href=\"#期望：-15\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><p>不存在</p>\n<h5 id=\"方差：-15\"><a href=\"#方差：-15\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><p>不存在</p>\n<h5 id=\"应用：-12\"><a href=\"#应用：-12\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><ol>\n<li>柯西分布，也称为柯西-洛伦兹分布或洛伦兹分布，是描述共振行为的连续分布。它还描述了以随机角度倾斜的线段切割 x 轴的水平距离分布。</li>\n<li>在量子世界，粒子和粒子距离很远，比如，电子到原子核的距离，就好比一个汽车到三千公里外的一个城市距离，因此，要显著描述电子的位置分布，只能是柯西-洛伦兹分布，不能用高斯分布刻画，因为高斯分布尺度不够，信号太弱，噪声将把电子的电磁能量淹没，模型无效。</li>\n</ol>\n<h5 id=\"性质：-12\"><a href=\"#性质：-12\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><ol>\n<li>柯西分布的取值范围非常广，很大的值也有一定概率取到，因而柯西分布也称为heavy-tail distribution。并且相比于gaussian，概率密度的最大取值只有0.1，就是x=0的那个地方。</li>\n</ol>\n<h4 id=\"拉普拉斯分布-双指数分布，Laplace-Distribution\"><a href=\"#拉普拉斯分布-双指数分布，Laplace-Distribution\" class=\"headerlink\" title=\"拉普拉斯分布(双指数分布，Laplace Distribution)\"></a>拉普拉斯分布(双指数分布，Laplace Distribution)</h4><h5 id=\"符号：-X-sim-text-Laplace-alpha-1-alpha-2\"><a href=\"#符号：-X-sim-text-Laplace-alpha-1-alpha-2\" class=\"headerlink\" title=\"符号：$X \\sim \\text{Laplace}(\\alpha_1, \\alpha_2)$\"></a>符号：$X \\sim \\text{Laplace}(\\alpha_1, \\alpha_2)$</h5><h5 id=\"概率密度函数：-9\"><a href=\"#概率密度函数：-9\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\begin{cases}\n\\dfrac{1}{\\alpha_1 + \\alpha_2}e^{-\\frac{x}{\\alpha_1}}, &x < 0 \\\\\n\\dfrac{1}{\\alpha_1 + \\alpha_2}e^{-\\frac{x}{\\alpha_2}}, & x \\geq 0\n\\end{cases}</script><blockquote>\n<p>The Laplace distribution is an alternative to the normal distribution with heavier tails. The probability density function for three different parameters settings is illustrated below.</p>\n</blockquote>\n<p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231024230803046.png\" alt=\"image-20231024230803046\"></p>\n<h5 id=\"分布函数：-5\"><a href=\"#分布函数：-5\" class=\"headerlink\" title=\"分布函数：\"></a>分布函数：</h5><script type=\"math/tex; mode=display\">\nF(x) = P(X \\leq x) = \\begin{cases}\n\\dfrac{\\alpha_1}{\\alpha_1 + \\alpha_2}e^{-\\frac{x}{\\alpha_1}} &x < 0 \\\\\n1 - \\dfrac{\\alpha_2}{\\alpha_1 + \\alpha_2}e^{-\\frac{x}{\\alpha_2}}&x \\geq 0\n\\end{cases}</script><h5 id=\"期望：-16\"><a href=\"#期望：-16\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X) &= \\int_{-\\infty}^{0} x \\cdot f(x)\\mathrm{d}x + \\int_0^{+\\infty} x \\cdot f(x) \\mathrm{d}x\\\\\n&= \\alpha_2 - \\alpha_1\n\\end{aligned}</script><h5 id=\"方差：-16\"><a href=\"#方差：-16\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nD(X) &= \\int_{-\\infty}^{0} x^2 \\cdot f(x)\\mathrm{d}x + \\int_0^{+\\infty} x^2 \\cdot f(x) \\mathrm{d}x\\\\\n&= \\alpha_1^{2} + \\alpha_2^{2}\n\\end{aligned}</script><h5 id=\"性质：-13\"><a href=\"#性质：-13\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><ol>\n<li>可看作两平移指数分布背靠背拼接在一起，因此又称双指数分布 (Double exponential distribution)</li>\n</ol>\n<h5 id=\"应用：-13\"><a href=\"#应用：-13\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><h4 id=\"玻尔兹曼分布-Boltzmann-Distribution\"><a href=\"#玻尔兹曼分布-Boltzmann-Distribution\" class=\"headerlink\" title=\"玻尔兹曼分布(Boltzmann Distribution)\"></a>玻尔兹曼分布(Boltzmann Distribution)</h4><h4 id=\"幂律分布-Power-Distribution\"><a href=\"#幂律分布-Power-Distribution\" class=\"headerlink\" title=\"幂律分布(Power Distribution)\"></a>幂律分布(Power Distribution)</h4><h5 id=\"符号：-X-sim-text-Power-1-beta\"><a href=\"#符号：-X-sim-text-Power-1-beta\" class=\"headerlink\" title=\"符号：$X\\sim \\text{Power}(1, \\beta)$\"></a>符号：$X\\sim \\text{Power}(1, \\beta)$</h5><h5 id=\"概率密度函数：-10\"><a href=\"#概率密度函数：-10\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\beta x^{\\beta - 1} \\quad \\quad 0 < x < 1</script><p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231024235040777.png\" alt=\"image-20231024235040777\"></p>\n<h5 id=\"分布函数：-6\"><a href=\"#分布函数：-6\" class=\"headerlink\" title=\"分布函数：\"></a>分布函数：</h5><script type=\"math/tex; mode=display\">\nF(x) = P(X \\leq x) = x^{\\beta}</script><h5 id=\"期望：-17\"><a href=\"#期望：-17\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\nE(X) =</script><h5 id=\"方差：-17\"><a href=\"#方差：-17\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><h4 id=\"三角分布-Standard-Triangular-Distribution\"><a href=\"#三角分布-Standard-Triangular-Distribution\" class=\"headerlink\" title=\"三角分布(Standard Triangular Distribution)\"></a>三角分布(Standard Triangular Distribution)</h4><h5 id=\"符号：-X-sim-text-Triangular-1-1-1\"><a href=\"#符号：-X-sim-text-Triangular-1-1-1\" class=\"headerlink\" title=\"符号：$X \\sim \\text{Triangular}(-1, 1, 1)$\"></a>符号：$X \\sim \\text{Triangular}(-1, 1, 1)$</h5><h5 id=\"概率密度函数：-11\"><a href=\"#概率密度函数：-11\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\begin{cases}\nx + 1, &-1 < x < 0 \\\\\n1 - x, & 0 \\leq x < 1\n\\end{cases}</script><p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231025114540132.png\" alt=\"image-20231025114540132\"></p>\n<h5 id=\"分布函数：-7\"><a href=\"#分布函数：-7\" class=\"headerlink\" title=\"分布函数：\"></a>分布函数：</h5><script type=\"math/tex; mode=display\">\nF(x) = \\begin{cases}\n\\frac{1}{2}x^{2} + x + \\frac{1}{2}, &-1 < x < 0 \\\\\n-\\frac{1}{2}x^{2} + x + \\frac{1}{2}, &0 \\leq x < 1\n\\end{cases}</script><h5 id=\"期望：-18\"><a href=\"#期望：-18\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\nE(X) = 0</script><h5 id=\"方差：-18\"><a href=\"#方差：-18\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nD(X) = \\dfrac{1}{6}</script><p>更一般的，三角形分布是底限为 a，众数为 c，上限为 b 的连续概率分布。</p>\n<script type=\"math/tex; mode=display\">\nf(x|a, b, c) = \\begin{cases}\n\\dfrac{2(x - a)}{(b - a)(c - a)} \\quad a \\leq x \\leq c \\\\\n\\\\\n\\dfrac{2(b - x)}{(b - a)(b - c)} \\quad c \\leq x \\leq b\n\\end{cases}</script><p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231025124956772.png\" alt=\"image-20231025124956772\"></p>\n<h4 id=\"逻辑斯谛分布-增长分布-Log-Logistic-Distribution\"><a href=\"#逻辑斯谛分布-增长分布-Log-Logistic-Distribution\" class=\"headerlink\" title=\"逻辑斯谛分布(增长分布, Log-Logistic Distribution)\"></a>逻辑斯谛分布(增长分布, Log-Logistic Distribution)</h4><h5 id=\"符号：-X-sim-text-loglogistic-lambda-kappa\"><a href=\"#符号：-X-sim-text-loglogistic-lambda-kappa\" class=\"headerlink\" title=\"符号：$X \\sim \\text{loglogistic}(\\lambda, \\kappa)$\"></a>符号：$X \\sim \\text{loglogistic}(\\lambda, \\kappa)$</h5><h5 id=\"概率密度函数：-12\"><a href=\"#概率密度函数：-12\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\dfrac{\\lambda\\kappa(\\lambda\\kappa)^{\\kappa - 1}}{(1 + (\\lambda x)^{\\kappa})^{2}} \\quad x > 0</script><p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231025130217056.png\" alt=\"image-20231025130217056\"></p>\n<h5 id=\"分布函数：-8\"><a href=\"#分布函数：-8\" class=\"headerlink\" title=\"分布函数：\"></a>分布函数：</h5><script type=\"math/tex; mode=display\">\nF(x) = P(X <= x) = \\dfrac{(\\lambda x)^{\\kappa}}{1 + (\\lambda x)^{\\kappa}}  \\quad x > 0</script><h5 id=\"期望：-19\"><a href=\"#期望：-19\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X) &= \\int_0^{+\\infty} x \\cdot f(x) \\mathrm{d}x \\\\\n&= \\dfrac{1}{\\lambda} \\int_0^{+\\infty}\\dfrac{m^{\\frac{1}{k}}}{(1+m)^{2}} \\mathrm{d}m \\\\\n&= \\dfrac{1}{\\kappa \\lambda} \\cdot \\dfrac{\\pi}{\\sin (\\frac{\\pi}{\\kappa})} \\\\\n&= \\dfrac{\\pi}{\\kappa \\lambda(\\sin (\\frac{\\pi}{\\kappa})}\n\\end{aligned}</script><p>其中，计算的时候可以使用留数定理。</p>\n<h5 id=\"方差：-19\"><a href=\"#方差：-19\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nD(X) = \\dfrac{\\pi \\left(2\\kappa(1 - \\cos (\\frac{\\pi}{\\kappa})^{2}) + \\pi\\sin(\\frac{\\pi(\\kappa + 2)}{\\kappa}) \\right)}{\\left(\\sin (\\frac{\\pi(\\kappa + 2)}{\\kappa}) \\right)\\left( \\cos(\\frac{\\pi}{\\kappa})^{2} - 1\\right)(\\lambda \\kappa)^{2}}</script><h4 id=\"逻辑分布-Logistic-Distribution\"><a href=\"#逻辑分布-Logistic-Distribution\" class=\"headerlink\" title=\"逻辑分布(Logistic Distribution)\"></a>逻辑分布(Logistic Distribution)</h4><h5 id=\"符号：-X-sim-text-logistic-lambda-kappa\"><a href=\"#符号：-X-sim-text-logistic-lambda-kappa\" class=\"headerlink\" title=\"符号：$X \\sim \\text{logistic}(\\lambda, \\kappa)$\"></a>符号：$X \\sim \\text{logistic}(\\lambda, \\kappa)$</h5><h5 id=\"概率密度函数：-13\"><a href=\"#概率密度函数：-13\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\dfrac{\\lambda^{\\kappa}\\kappa e^{\\kappa x}}{(1 + (\\lambda e^{x})^{\\kappa})^{2}} \\quad -\\infty < x < +\\infty</script><p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231025134453817.png\" alt=\"image-20231025134453817\"></p>\n<h5 id=\"分布函数：-9\"><a href=\"#分布函数：-9\" class=\"headerlink\" title=\"分布函数：\"></a>分布函数：</h5><script type=\"math/tex; mode=display\">\nF(x) = P(X \\leq x) = \\dfrac{\\lambda^{\\kappa}e^{\\kappa x}}{1 + \\lambda^{\\kappa}e^{x}} \\quad -\\infty < x < +\\infty</script><h5 id=\"期望：-20\"><a href=\"#期望：-20\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\nE(X) = -\\ln \\lambda</script><h5 id=\"方差：-20\"><a href=\"#方差：-20\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nD(X) = \\dfrac{\\pi ^{2}}{3\\kappa^{2}}</script><h4 id=\"t-分布-T-Distribution\"><a href=\"#t-分布-T-Distribution\" class=\"headerlink\" title=\"t 分布(T Distribution)\"></a>t 分布(T Distribution)</h4><p>如果 $X\\sim N(0, 1), Y \\sim \\chi^{2}(n)$，则有 $Z = \\dfrac{X}{\\sqrt{\\frac{Y}{n}}} \\sim t(n)$</p>\n<h5 id=\"概率密度函数：-14\"><a href=\"#概率密度函数：-14\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nf(z) =\\dfrac{\\Gamma(\\frac{n + 1}{2})}{\\sqrt{n\\pi}\\Gamma(\\frac{n}{2})}\\left(\\dfrac{z^{2}}{n} + 1\\right)^{-\\frac{n + 1}{2}}\n\\end{aligned}</script><h5 id=\"推导：\"><a href=\"#推导：\" class=\"headerlink\" title=\"推导：\"></a>推导：</h5><p>做变换：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n\\begin{cases}\nu = \\dfrac{X}{\\sqrt{\\frac{Y}{n}}} \\\\\n\\\\\nv = Y\n\\end{cases}\n\\end{aligned}</script><p>所以有反函数：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{cases}\nX = u\\sqrt{\\dfrac{v}{n}} \\\\\n\\\\\nY = v\n\\end{cases}</script><p>雅可比行列式是：</p>\n<script type=\"math/tex; mode=display\">\n|J| =</script><p>所以原问题的分布函数变为：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n\\iint\\limits_{A}f(x,y)\\mathrm{d}x\\mathrm{d}y &= \\iint\\limits_{B}f(x(u, v),y(u, v)) |J| \\mathrm{d}u \\mathrm{d}v \\\\\n&= \\int_{-\\infty}^{z}\\int_{0}^{+\\infty}f_X(u\\sqrt{\\dfrac{v}{u}})f_Y(v) (\\dfrac{v}{n})^{-\\frac{1}{2}} \\mathrm{d}u \\mathrm{d}v \\\\\n\n\\end{aligned}</script><p>有</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\nf_X(x) = \\dfrac{1}{\\sqrt{2\\pi}}e^{-\\frac{x^{2}}{2}} \\\\\nf_Y(y) = \\dfrac{1}{2^{\\frac{n}{2}}\\Gamma(\\frac{n}{2})}y^{\\frac{n}{2}- 1}e^{-\\frac{y}{2}}\n\\end{aligned}</script><p>所以：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\nF(Z) &= \\int_{-\\infty}^{z}\\int_0^{+\\infty} \\dfrac{1}{\\sqrt{2\\pi}}e^{-\\frac{1}{2}u^{2}\\frac{v}{n}} \\dfrac{1}{2^{\\frac{n}{2}}\\Gamma(\\frac{n}{2})}v^{\\frac{n}{2} - 1} e^{-\\frac{v}{2}}(\\dfrac{v}{n})^{-\\frac{1}{2}} \\mathrm{d}v\\mathrm{d}u \\\\\n&= \\int_{-\\infty}^{z}\\dfrac{1}{\\sqrt{n\\pi}\\sqrt{2}}\\dfrac{1}{2^{\\frac{n}{2}} \\Gamma(\\frac{n}{2})} \\int_0^{+\\infty}e^{-\\frac{1}{2}u^{2}\\frac{v}{n} - \\frac{v}{2}}v^{\\frac{n - 1}{2}} \\mathrm{d}u \\mathrm{d}v\n\\end{aligned}</script><h5 id=\"期望：-21\"><a href=\"#期望：-21\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\nE(X) = 0</script><h5 id=\"方差：-21\"><a href=\"#方差：-21\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nV(X) = \\dfrac{n}{n - 2}</script><h5 id=\"性质：-14\"><a href=\"#性质：-14\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><h5 id=\"应用：-14\"><a href=\"#应用：-14\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><h4 id=\"F-分布-F-Distribution\"><a href=\"#F-分布-F-Distribution\" class=\"headerlink\" title=\"F 分布(F Distribution)\"></a>F 分布(F Distribution)</h4><p>F 分布也被称为「方差比分布(Variance Ratio Distribution)」和「Fisher-Snedecor Distribution」。</p>\n<p>设 $U \\sim \\chi^{2}(n_1), V \\sim \\chi^{2}(n_2)$，并且 U 和 V 相互独立，则称随机变量 $F = \\dfrac{U / n_1}{V / n_2}$ 服从自由度为 $(n_1, n_2)$ 的 F 分布</p>\n<h5 id=\"概率密度函数：-15\"><a href=\"#概率密度函数：-15\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(z) = \\dfrac{\\Gamma(\\frac{n_1 + n_2}{2})(\\frac{n_1}{n_2})^{\\frac{n_1}{2}}z^{\\frac{n_1}{2} - 1}}{\\Gamma(\\frac{n_1}{2})\\Gamma(\\frac{n_2}{2})\\left[1 + \\frac{n_1}{n_2}z\\right]^{\\frac{n_1 + n_2}{2}}}</script><h5 id=\"推导：-1\"><a href=\"#推导：-1\" class=\"headerlink\" title=\"推导：\"></a>推导：</h5><p>$\\text{lemma1}:$ </p>\n<script type=\"math/tex; mode=display\">\nf_{\\frac{Y}{X}}(z) = \\int_{-\\infty}^{+\\infty}|x|f(x, xz)\\mathrm{d}x</script><p>$\\text{lemma2}:$</p>\n<script type=\"math/tex; mode=display\">\nf_{aX + b} = \\dfrac{1}{|a|}f_X(\\dfrac{y - b}{a}) \\quad a \\neq 0</script><p>所以我们可以得到 $Y = \\dfrac{U}{n_1}, X = \\dfrac{V}{n_2}$ 的概率密度函数为：</p>\n<script type=\"math/tex; mode=display\">\nf_Y(y) = \\dfrac{(\\frac{n_1}{2})^{\\frac{n_1}{2}}}{\\Gamma(\\frac{n_1}{2})}y^{\\frac{n_1}{2} - 1}e^{-\\frac{n_1y}{2}} \\quad y > 0</script><script type=\"math/tex; mode=display\">\nf_X(x) = \\dfrac{(\\frac{n_2}{2})^{\\frac{n_2}{2}}}{\\Gamma(\\frac{n_2}{2})}y^{\\frac{n_2}{2} - 1}e^{-\\frac{n_2y}{2}} \\quad x > 0</script><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nf_F(z) &= f_{\\frac{Y}{X}}(z) \\\\\n&= \\int_0^{+\\infty} xf(x, xz) \\mathrm{d}x \\\\\n&= \\int_0^{+\\infty} xf_Y(xz)f_X(x) \\mathrm{d}x \\\\\n&= \\int_0^{+\\infty} x \\dfrac{(\\frac{n_1}{2})^{\\frac{n_1}{2}}}{\\Gamma(\\frac{n_1}{2})}(xz)^{\\frac{n_1}{2} - 1}e^{-\\frac{n_1y}{2}} \\cdot  \\dfrac{(\\frac{n_2}{2})^{\\frac{n_2}{2}}}{\\Gamma(\\frac{n_2}{2})}y^{\\frac{n_2}{2} - 1}e^{-\\frac{n_2y}{2}} \\mathrm{d}x \\\\\n&= \\dfrac{(n_1 / 2)^{n_1 / 2}(n_2 / 2)^{n_2 / 2}}{\\Gamma(\\frac{n_1}{2}) \\Gamma(\\frac{n_2}{2})}z^{\\frac{n_1}{n_2} - 1}\\int_0^{+\\infty}x^{\\frac{n_1 + n_2}{2} - 1}e^{\\frac{-x}{2}(n_1z + n_2)} \\mathrm{d}x \\\\\n\\end{aligned}</script><p>设 $u = \\dfrac{x}{2}(n_1z + n_2)$</p>\n<p>最后得到：</p>\n<script type=\"math/tex; mode=display\">\nf(z) = \\dfrac{\\Gamma(\\frac{n_1 + n_2}{2})(\\frac{n_1}{n_2})^{\\frac{n_1}{2}}z^{\\frac{n_1}{2} - 1}}{\\Gamma(\\frac{n_1}{2})\\Gamma(\\frac{n_2}{2})\\left[1 + \\frac{n_1}{n_2}z\\right]^{\\frac{n_1 + n_2}{2}}}</script><h5 id=\"期望：-22\"><a href=\"#期望：-22\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\nE(X) = \\dfrac{n_2}{n_2 - 2}</script><h5 id=\"方差：-22\"><a href=\"#方差：-22\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nV(X) = \\dfrac{2n_2^{2}(n_1+ n_2 - 2)}{n_1}</script><h5 id=\"性质：-15\"><a href=\"#性质：-15\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><ol>\n<li><p>$F_{1 - \\alpha}(n_1, n_2) = \\dfrac{1}{F_{\\alpha}(n_2, n_1)}$<br>证明：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n1 - \\alpha &= P\\{F > F_{1 - \\alpha}(n_1, n_2)\\} \\\\\n&= P\\{\\dfrac{1}{F} < \\dfrac{1}{F_{1 - \\alpha}(n_1, n_2)}\\} \\\\\n&= 1 - P\\{\\dfrac{1}{F} \\geq \\dfrac{1}{F_{1 - \\alpha}(n_1, n_2)}\\} \\\\\n&= 1 - P\\{\\dfrac{1}{F} > \\dfrac{1}{F_{1 - \\alpha}(n_1, n_2)}\\} \\\\\n\\end{aligned}</script><p>所以 $P\\{\\dfrac{1}{F} &gt; \\dfrac{1}{F_{1 - \\alpha}(n_1, n_2)}\\} = \\alpha$ 并且 $\\dfrac{1}{F} \\sim F(n_2, n_1)$，所以 $F_{1 - \\alpha}(n_1, n_2) = \\dfrac{1}{F_{\\alpha}(n_2, n_1)}$</p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/453635917\">F分布概率密度公式推导 - 知乎 (zhihu.com)</a></p>\n</li>\n</ol>\n<h5 id=\"应用：-15\"><a href=\"#应用：-15\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><h4 id=\"chi-分布-卡方分布-chi-Distribution\"><a href=\"#chi-分布-卡方分布-chi-Distribution\" class=\"headerlink\" title=\"$\\chi 分布$(卡方分布, $\\chi$ Distribution)\"></a>$\\chi 分布$(卡方分布, $\\chi$ Distribution)</h4><p>$Z_1, Z_2, …, Z_k$ 是独立、标准正态分布的随机变量，把他们的平方和记为 Q，则有 $Q = \\sum\\limits_{i = 1}^{k} Z_i^{2}$</p>\n<p>这个 Q 是服从自由度为 K 的卡方分布的。通常会被记为 $Q \\sim \\chi^{2}(k)$</p>\n<h5 id=\"符号：-Q-sim-chi-2-k\"><a href=\"#符号：-Q-sim-chi-2-k\" class=\"headerlink\" title=\"符号：$Q \\sim \\chi^{2}(k)$\"></a>符号：$Q \\sim \\chi^{2}(k)$</h5><h5 id=\"概率密度函数：-16\"><a href=\"#概率密度函数：-16\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\dfrac{1}{2^{\\frac{n}{2}}\\Gamma(\\dfrac{n}{2})}x^{^{\\frac{n}{2}} - 1}e^{-\\frac{x^{2}}{2}} \\quad z > 0</script><p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231026212407458.png\" alt=\"image-20231026212407458\"></p>\n<h5 id=\"K-阶矩\"><a href=\"#K-阶矩\" class=\"headerlink\" title=\"K 阶矩\"></a>K 阶矩</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X^{k}) &= \\int_0^{+\\infty} x^{k} \\cdot \\dfrac{1}{2^{\\frac{n}{2}}\\Gamma(\\dfrac{n}{2})}x^{^{\\frac{n}{2}} - 1}e^{-\\frac{x^{2}}{2}} \\mathrm{d}x \\\\\n\\end{aligned}</script><p>设 $\\dfrac{x^{2}}{2}= t$，式子变为：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\nE(X^{k}) &= \\dfrac{2^{\\frac{k}{2}}}{\\Gamma(\\frac{n}{2})}\\int_0^{+\\infty} t^{\\frac{n + k}{2} - 1}e^{-t}\\mathrm{d}t \\\\\n&= \\dfrac{2^{k / 2}\\Gamma(\\frac{n + k}{2})}{\\Gamma(n / 2)}\n\\end{aligned}</script><h5 id=\"期望：-23\"><a href=\"#期望：-23\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\nE(X) = \\dfrac{\\sqrt{2}\\Gamma(\\frac{n + 1}{2})}{\\Gamma(n / 2)}</script><h5 id=\"方差：-23\"><a href=\"#方差：-23\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nE(X^{2}) = \\dfrac{2\\Gamma(n / 2 + 1)}{\\Gamma(n / 2)} = n</script><p>所以</p>\n<script type=\"math/tex; mode=display\">\nD(X) = E(X^{2}) - E(X)^{2} = n^{2} - E(X)^{2}</script><h5 id=\"性质：-16\"><a href=\"#性质：-16\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><h5 id=\"应用：-16\"><a href=\"#应用：-16\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><h4 id=\"狄拉克分布\"><a href=\"#狄拉克分布\" class=\"headerlink\" title=\"狄拉克分布\"></a>狄拉克分布</h4><h4 id=\"多项式分布和迪利克雷分布\"><a href=\"#多项式分布和迪利克雷分布\" class=\"headerlink\" title=\"多项式分布和迪利克雷分布\"></a>多项式分布和迪利克雷分布</h4><h4 id=\"帕累托分布-布拉德福分布-Pareto-Distribution\"><a href=\"#帕累托分布-布拉德福分布-Pareto-Distribution\" class=\"headerlink\" title=\"帕累托分布(布拉德福分布, Pareto Distribution)\"></a>帕累托分布(布拉德福分布, Pareto Distribution)</h4><p>这个分布是是从大量真实世界的现象中发现的<a href=\"https://zh.wikipedia.org/wiki/冪定律\">幂定律</a>分布。这个分布在经济学以外，也被称为<strong>布拉德福分布</strong>。</p>\n<h5 id=\"分布函数：-10\"><a href=\"#分布函数：-10\" class=\"headerlink\" title=\"分布函数：\"></a>分布函数：</h5><script type=\"math/tex; mode=display\">\nP(X > x) = \\left(\\dfrac{x}{x_{\\min}} \\right)^{-k}</script><p>其中，x 是任何一个大于 $x_{\\min}$ 的数，$x_{\\min}$ 是 X 最小的可能值(正数)。</p>\n<h5 id=\"概率密度：\"><a href=\"#概率密度：\" class=\"headerlink\" title=\"概率密度：\"></a>概率密度：</h5><script type=\"math/tex; mode=display\">\n\\begin{aligned}\np(x) = \\begin{cases}\n0 \\quad x < x_{\\min} \\\\\n\\\\\n\\\\\n\\dfrac{kx_{\\min}^{k}}{x^{k + 1}} \\quad x > x_{\\min}\n\n\\end{cases}\n\\end{aligned}</script><p>帕累托分布属于连续概率分布。「齐夫定律」也被称为「Zeta 分布」，也可以被认为是在离散概率分布中的帕累托分布。</p>\n<p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231026223709526.png\" alt=\"image-20231026223709526\"></p>\n<h5 id=\"期望：-24\"><a href=\"#期望：-24\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\nE(X) = \\int_0^{+\\infty} x\\cdot f(x) \\mathrm{d}x = \\dfrac{x_\\min k}{k - 1}</script><h5 id=\"方差：-24\"><a href=\"#方差：-24\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nD(X) = \\dfrac{x_\\min}{k - 1}\\sqrt{\\dfrac{k}{k - 2}}</script><h5 id=\"应用：-17\"><a href=\"#应用：-17\" class=\"headerlink\" title=\"应用：\"></a>应用：</h5><ol>\n<li>财富在个人之间的分布</li>\n<li>人类居住区的大小</li>\n<li>对维基百科条目的访问</li>\n<li>接近绝对零度时，玻色一爱因斯坦疑聚的团簇</li>\n<li>在互联网流量中文件尺寸的分布</li>\n<li>油田的石油储备数量</li>\n<li>龙卷风带来的灾难的数量</li>\n</ol>\n<h5 id=\"引申：\"><a href=\"#引申：\" class=\"headerlink\" title=\"引申：\"></a>引申：</h5><p>帕累托法则(Pareto Principle)，或者叫做「二八定律」，「关键少数法则」，「巴莱多定律」。这个定律指出，约仅有 20% 的因素影响了 80% 的结果。也就是说，所有变因中，最重要的仅有 20%，虽然剩余的 80% 占了大多数。</p>\n<h4 id=\"反正弦分布-Arcsin-Distribution\"><a href=\"#反正弦分布-Arcsin-Distribution\" class=\"headerlink\" title=\"反正弦分布(Arcsin Distribution)\"></a>反正弦分布(Arcsin Distribution)</h4><h5 id=\"符号：-X-sim-text-arcsin-x\"><a href=\"#符号：-X-sim-text-arcsin-x\" class=\"headerlink\" title=\"符号：$X \\sim \\text{arcsin}(x)$\"></a>符号：$X \\sim \\text{arcsin}(x)$</h5><h5 id=\"概率密度函数：-17\"><a href=\"#概率密度函数：-17\" class=\"headerlink\" title=\"概率密度函数：\"></a>概率密度函数：</h5><script type=\"math/tex; mode=display\">\nf(x) = \\dfrac{1}{\\pi \\sqrt{x(1 - x)}} \\quad 0 < x < 1</script><p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231026220704838.png\" alt=\"image-20231026220704838\"></p>\n<h5 id=\"累计分布函数：\"><a href=\"#累计分布函数：\" class=\"headerlink\" title=\"累计分布函数：\"></a>累计分布函数：</h5><script type=\"math/tex; mode=display\">\nF(x) = P(X \\leq x) = \\dfrac{\\pi + 2\\arcsin(2x - 1)}{2\\pi}</script><h5 id=\"期望：-25\"><a href=\"#期望：-25\" class=\"headerlink\" title=\"期望：\"></a>期望：</h5><script type=\"math/tex; mode=display\">\nE(X) = \\dfrac{1}{2}</script><h5 id=\"方差：-25\"><a href=\"#方差：-25\" class=\"headerlink\" title=\"方差：\"></a>方差：</h5><script type=\"math/tex; mode=display\">\nD(X) = \\dfrac{1}{8}</script><h5 id=\"性质：-17\"><a href=\"#性质：-17\" class=\"headerlink\" title=\"性质：\"></a>性质：</h5><p>对于积分 $\\int_{a}^{b}\\dfrac{\\mathrm{d}x}{\\sqrt{(x - a)(b - x)}}$ 它的结果是$\\pi$</p>\n<p>对于这样类型的积分，我们一般是通过换元进行计算 $x  =a\\cos^{2}\\theta + b\\sin^{2}\\theta$，那么原来的积分可以变为一个简单的积分：</p>\n<script type=\"math/tex; mode=display\">\n\\int_a^{b}\\dfrac{\\mathrm{d}x}{\\sqrt{(x - a)(b - x)}} = 2\\int_0^{\\frac{\\pi}{2}} \\mathrm{d}\\theta = \\pi</script><p>对于这个式子的含义继续深究</p>\n<p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231026221614582.png\" alt=\"image-20231026221614582\"></p>\n<p>所以原来的定积分就正好代表了上半圆的弧长，也就是整个圆的半周长。</p>\n<p><img src=\"/.com//Users\\24964\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231026221707845.png\" alt=\"image-20231026221707845\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://zhuanlan.zhihu.com/p/517424307\">https://zhuanlan.zhihu.com/p/517424307</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/164883777\">https://zhuanlan.zhihu.com/p/164883777</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/449733211\">常见分布的数学期望和方差及相关证明 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/578567547\">https://zhuanlan.zhihu.com/p/578567547</a> 特征函数推导</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/353187472\">https://zhuanlan.zhihu.com/p/353187472</a> <a href=\"https://www.zhihu.com/question/354825596/answer/893242882\">https://www.zhihu.com/question/354825596/answer/893242882</a> 指数分布</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/503557666\">https://zhuanlan.zhihu.com/p/503557666</a> 正态分布</p>\n<p>怎么来理解伽玛（gamma）分布？ - 知之的回答 - 知乎 <a href=\"https://www.zhihu.com/question/34866983/answer/60191363\">https://www.zhihu.com/question/34866983/answer/60191363</a> 伽马分布和其他分布之间的关系</p>\n<p>伽马分布，指数分布，卡方分布之间的关系及期望，方差 - 拾柒的文章 - 知乎 <a href=\"https://zhuanlan.zhihu.com/p/379131967\">https://zhuanlan.zhihu.com/p/379131967</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/303359921\">深入理解高斯分布 - 知乎 (zhihu.com)</a> 多元高斯分布</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/596023351\">混合高斯分布与其参数估计 - 知乎 (zhihu.com)</a> 混合高斯分布</p>\n"},{"title":"组合优化与随机性模型","date":"2023-08-24T06:45:01.000Z","description":"The key record of mathematical modeling.","mathjax":true,"_content":"在有限个可行解集合中找出最优解，这类问题称为组合优化问题。如最短路径问题、最小连接问题、分配问题、运输问题、服务点设置问题、中国邮递员问题、背包问题、装箱问题等等。\n\n贪心法和分支定界法是组合优化问题中常见的两种有效的方法。\n\n#### 随机性模型\n1. 报童问题\n    一个分区间讨论收益的问题（可以抽象为类似的生产或者进货然后销售求最大收益的问题），下面的问题建模对于未出售完的报纸进行退回（可以抽象为低价处理）。\n    设没份报纸的进价为 b，零售价为 a，退回价格为 c，报童应该如何购进报纸数量以获得最高的收入？\n    {%asset_img 报童问题.png 收入和 n 的函数关系%}\n    假设需求量 r 的分布为 $P\\{r = k\\} = f(k), k = 0, 1, 2, ...$\n    但是注意到 G 是一个**随机目标函数**，求其最大值没有什么意义，我们转为求解其最大期望。\n    $\\overline{G}(n) = \\sum\\limits_{r = 0}^{n}[(a - b)r - (b - c)(n - r)]f(r) + \\sum\\limits_{r = n + 1}^{+\\infty} (a-b)nf(r)$，**该问题很难求解，可以将上述函数进行连续化**（数列求和和积分之间的转化使问题求解简单），可以得到 $\\overline{G}(n) = \\int_0^{n}[(a - b)r - (b - c)(n - r)]f(r)\\mathrm{d}r + \\int_{n + 1}^{+\\infty} (a - b)nf(r)\\mathrm{d}r$，所求问题变为 $\\max \\overline{G}(n)$，求导，导数为 0，得到 $\\int_0^{n} f(r)\\mathrm{d}r = \\frac{a- b}{a - c}$ 的时候，期望收益最大。\n2. 轧钢中的浪费问题\n    由于收到环境技术的影响，得到的钢材的长度是随机的，其数值上大体呈正态分布，均值可以通过调整轧机设定，而均方误差是由设备的精度决定的，不能随意改变。如果粗轧后的钢材长度大于规定长度，精轧时要把多余的部分切除，造成浪费；而如果粗轧后的钢材长度小于规定长度，则造成整根浪费。（一般我们不会利用多余的切除部分再次制作成钢材，因为实际生产中钢材长度 $l >> \\sigma$）\n    这样我们有模型总的平均浪费长度：\n    $W = \\int_{l}^{+\\infty} (x - l)f(x)\\mathrm{d}x + \\int_{-\\infty}^{l} xf(x) \\mathrm{d}x = \\int_{-\\infty}^{+\\infty}xf(x)\\mathrm{d}x - l\\int_{-\\infty}^{+\\infty} f(x)\\mathrm{d}x $\n    $ = E(X) - lP\\{X > l\\} = m - lp$\n    其中，$p = P\\{X > l\\} = 1 - \\Phi(\\frac{l - m}{\\sigma})$\n    但是上式中，W 的含义是没轧一根钢材平均浪费的长度，这是从**最终的产量分析浪费量**；但是从实际中一个工厂的发展来看，工厂追求的是效益，可以由生产一根成品钢材浪费的平均长度来衡量，所以目标函数修改为：\n    $J = \\frac{W}{P\\{X > l\\}} = \\frac{m - lp}{p}= \\dfrac{m}{1 - \\Phi(\\frac{l - m}{\\sigma}) - l}$，决策目标为 $\\min J(m)$\n","source":"_posts/组合优化与随机性模型.md","raw":"---\ntitle: 组合优化与随机性模型\ndate: 2023-08-24 14:45:01\ntags: Mathematic\ndescription: The key record of mathematical modeling. \nmathjax: true\n---\n在有限个可行解集合中找出最优解，这类问题称为组合优化问题。如最短路径问题、最小连接问题、分配问题、运输问题、服务点设置问题、中国邮递员问题、背包问题、装箱问题等等。\n\n贪心法和分支定界法是组合优化问题中常见的两种有效的方法。\n\n#### 随机性模型\n1. 报童问题\n    一个分区间讨论收益的问题（可以抽象为类似的生产或者进货然后销售求最大收益的问题），下面的问题建模对于未出售完的报纸进行退回（可以抽象为低价处理）。\n    设没份报纸的进价为 b，零售价为 a，退回价格为 c，报童应该如何购进报纸数量以获得最高的收入？\n    {%asset_img 报童问题.png 收入和 n 的函数关系%}\n    假设需求量 r 的分布为 $P\\{r = k\\} = f(k), k = 0, 1, 2, ...$\n    但是注意到 G 是一个**随机目标函数**，求其最大值没有什么意义，我们转为求解其最大期望。\n    $\\overline{G}(n) = \\sum\\limits_{r = 0}^{n}[(a - b)r - (b - c)(n - r)]f(r) + \\sum\\limits_{r = n + 1}^{+\\infty} (a-b)nf(r)$，**该问题很难求解，可以将上述函数进行连续化**（数列求和和积分之间的转化使问题求解简单），可以得到 $\\overline{G}(n) = \\int_0^{n}[(a - b)r - (b - c)(n - r)]f(r)\\mathrm{d}r + \\int_{n + 1}^{+\\infty} (a - b)nf(r)\\mathrm{d}r$，所求问题变为 $\\max \\overline{G}(n)$，求导，导数为 0，得到 $\\int_0^{n} f(r)\\mathrm{d}r = \\frac{a- b}{a - c}$ 的时候，期望收益最大。\n2. 轧钢中的浪费问题\n    由于收到环境技术的影响，得到的钢材的长度是随机的，其数值上大体呈正态分布，均值可以通过调整轧机设定，而均方误差是由设备的精度决定的，不能随意改变。如果粗轧后的钢材长度大于规定长度，精轧时要把多余的部分切除，造成浪费；而如果粗轧后的钢材长度小于规定长度，则造成整根浪费。（一般我们不会利用多余的切除部分再次制作成钢材，因为实际生产中钢材长度 $l >> \\sigma$）\n    这样我们有模型总的平均浪费长度：\n    $W = \\int_{l}^{+\\infty} (x - l)f(x)\\mathrm{d}x + \\int_{-\\infty}^{l} xf(x) \\mathrm{d}x = \\int_{-\\infty}^{+\\infty}xf(x)\\mathrm{d}x - l\\int_{-\\infty}^{+\\infty} f(x)\\mathrm{d}x $\n    $ = E(X) - lP\\{X > l\\} = m - lp$\n    其中，$p = P\\{X > l\\} = 1 - \\Phi(\\frac{l - m}{\\sigma})$\n    但是上式中，W 的含义是没轧一根钢材平均浪费的长度，这是从**最终的产量分析浪费量**；但是从实际中一个工厂的发展来看，工厂追求的是效益，可以由生产一根成品钢材浪费的平均长度来衡量，所以目标函数修改为：\n    $J = \\frac{W}{P\\{X > l\\}} = \\frac{m - lp}{p}= \\dfrac{m}{1 - \\Phi(\\frac{l - m}{\\sigma}) - l}$，决策目标为 $\\min J(m)$\n","slug":"组合优化与随机性模型","published":1,"updated":"2023-08-25T00:43:05.213Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szoi001v5oog77oj92nu","content":"<p>在有限个可行解集合中找出最优解，这类问题称为组合优化问题。如最短路径问题、最小连接问题、分配问题、运输问题、服务点设置问题、中国邮递员问题、背包问题、装箱问题等等。</p>\n<p>贪心法和分支定界法是组合优化问题中常见的两种有效的方法。</p>\n<h4 id=\"随机性模型\"><a href=\"#随机性模型\" class=\"headerlink\" title=\"随机性模型\"></a>随机性模型</h4><ol>\n<li>报童问题<br> 一个分区间讨论收益的问题（可以抽象为类似的生产或者进货然后销售求最大收益的问题），下面的问题建模对于未出售完的报纸进行退回（可以抽象为低价处理）。<br> 设没份报纸的进价为 b，零售价为 a，退回价格为 c，报童应该如何购进报纸数量以获得最高的收入？ <img src=\"/2023/08/24/%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96%E4%B8%8E%E9%9A%8F%E6%9C%BA%E6%80%A7%E6%A8%A1%E5%9E%8B/%E6%8A%A5%E7%AB%A5%E9%97%AE%E9%A2%98.png\" class=\"\" title=\"收入和 n 的函数关系\">\n 假设需求量 r 的分布为 $P\\{r = k\\} = f(k), k = 0, 1, 2, …$<br> 但是注意到 G 是一个<strong>随机目标函数</strong>，求其最大值没有什么意义，我们转为求解其最大期望。<br> $\\overline{G}(n) = \\sum\\limits_{r = 0}^{n}[(a - b)r - (b - c)(n - r)]f(r) + \\sum\\limits_{r = n + 1}^{+\\infty} (a-b)nf(r)$，<strong>该问题很难求解，可以将上述函数进行连续化</strong>（数列求和和积分之间的转化使问题求解简单），可以得到 $\\overline{G}(n) = \\int_0^{n}[(a - b)r - (b - c)(n - r)]f(r)\\mathrm{d}r + \\int_{n + 1}^{+\\infty} (a - b)nf(r)\\mathrm{d}r$，所求问题变为 $\\max \\overline{G}(n)$，求导，导数为 0，得到 $\\int_0^{n} f(r)\\mathrm{d}r = \\frac{a- b}{a - c}$ 的时候，期望收益最大。</li>\n<li>轧钢中的浪费问题<br> 由于收到环境技术的影响，得到的钢材的长度是随机的，其数值上大体呈正态分布，均值可以通过调整轧机设定，而均方误差是由设备的精度决定的，不能随意改变。如果粗轧后的钢材长度大于规定长度，精轧时要把多余的部分切除，造成浪费；而如果粗轧后的钢材长度小于规定长度，则造成整根浪费。（一般我们不会利用多余的切除部分再次制作成钢材，因为实际生产中钢材长度 $l &gt;&gt; \\sigma$）<br> 这样我们有模型总的平均浪费长度：<br> $W = \\int_{l}^{+\\infty} (x - l)f(x)\\mathrm{d}x + \\int_{-\\infty}^{l} xf(x) \\mathrm{d}x = \\int_{-\\infty}^{+\\infty}xf(x)\\mathrm{d}x - l\\int_{-\\infty}^{+\\infty} f(x)\\mathrm{d}x $<br> $ = E(X) - lP\\{X &gt; l\\} = m - lp$<br> 其中，$p = P\\{X &gt; l\\} = 1 - \\Phi(\\frac{l - m}{\\sigma})$<br> 但是上式中，W 的含义是没轧一根钢材平均浪费的长度，这是从<strong>最终的产量分析浪费量</strong>；但是从实际中一个工厂的发展来看，工厂追求的是效益，可以由生产一根成品钢材浪费的平均长度来衡量，所以目标函数修改为：<br> $J = \\frac{W}{P\\{X &gt; l\\}} = \\frac{m - lp}{p}= \\dfrac{m}{1 - \\Phi(\\frac{l - m}{\\sigma}) - l}$，决策目标为 $\\min J(m)$</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>在有限个可行解集合中找出最优解，这类问题称为组合优化问题。如最短路径问题、最小连接问题、分配问题、运输问题、服务点设置问题、中国邮递员问题、背包问题、装箱问题等等。</p>\n<p>贪心法和分支定界法是组合优化问题中常见的两种有效的方法。</p>\n<h4 id=\"随机性模型\"><a href=\"#随机性模型\" class=\"headerlink\" title=\"随机性模型\"></a>随机性模型</h4><ol>\n<li>报童问题<br> 一个分区间讨论收益的问题（可以抽象为类似的生产或者进货然后销售求最大收益的问题），下面的问题建模对于未出售完的报纸进行退回（可以抽象为低价处理）。<br> 设没份报纸的进价为 b，零售价为 a，退回价格为 c，报童应该如何购进报纸数量以获得最高的收入？ <img src=\"/2023/08/24/%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96%E4%B8%8E%E9%9A%8F%E6%9C%BA%E6%80%A7%E6%A8%A1%E5%9E%8B/%E6%8A%A5%E7%AB%A5%E9%97%AE%E9%A2%98.png\" class=\"\" title=\"收入和 n 的函数关系\">\n 假设需求量 r 的分布为 $P\\{r = k\\} = f(k), k = 0, 1, 2, …$<br> 但是注意到 G 是一个<strong>随机目标函数</strong>，求其最大值没有什么意义，我们转为求解其最大期望。<br> $\\overline{G}(n) = \\sum\\limits_{r = 0}^{n}[(a - b)r - (b - c)(n - r)]f(r) + \\sum\\limits_{r = n + 1}^{+\\infty} (a-b)nf(r)$，<strong>该问题很难求解，可以将上述函数进行连续化</strong>（数列求和和积分之间的转化使问题求解简单），可以得到 $\\overline{G}(n) = \\int_0^{n}[(a - b)r - (b - c)(n - r)]f(r)\\mathrm{d}r + \\int_{n + 1}^{+\\infty} (a - b)nf(r)\\mathrm{d}r$，所求问题变为 $\\max \\overline{G}(n)$，求导，导数为 0，得到 $\\int_0^{n} f(r)\\mathrm{d}r = \\frac{a- b}{a - c}$ 的时候，期望收益最大。</li>\n<li>轧钢中的浪费问题<br> 由于收到环境技术的影响，得到的钢材的长度是随机的，其数值上大体呈正态分布，均值可以通过调整轧机设定，而均方误差是由设备的精度决定的，不能随意改变。如果粗轧后的钢材长度大于规定长度，精轧时要把多余的部分切除，造成浪费；而如果粗轧后的钢材长度小于规定长度，则造成整根浪费。（一般我们不会利用多余的切除部分再次制作成钢材，因为实际生产中钢材长度 $l &gt;&gt; \\sigma$）<br> 这样我们有模型总的平均浪费长度：<br> $W = \\int_{l}^{+\\infty} (x - l)f(x)\\mathrm{d}x + \\int_{-\\infty}^{l} xf(x) \\mathrm{d}x = \\int_{-\\infty}^{+\\infty}xf(x)\\mathrm{d}x - l\\int_{-\\infty}^{+\\infty} f(x)\\mathrm{d}x $<br> $ = E(X) - lP\\{X &gt; l\\} = m - lp$<br> 其中，$p = P\\{X &gt; l\\} = 1 - \\Phi(\\frac{l - m}{\\sigma})$<br> 但是上式中，W 的含义是没轧一根钢材平均浪费的长度，这是从<strong>最终的产量分析浪费量</strong>；但是从实际中一个工厂的发展来看，工厂追求的是效益，可以由生产一根成品钢材浪费的平均长度来衡量，所以目标函数修改为：<br> $J = \\frac{W}{P\\{X &gt; l\\}} = \\frac{m - lp}{p}= \\dfrac{m}{1 - \\Phi(\\frac{l - m}{\\sigma}) - l}$，决策目标为 $\\min J(m)$</li>\n</ol>\n"},{"title":"网管会","date":"2023-10-28T11:04:59.000Z","description":"just record some important things of Network Management Association.","_content":"\nipconfig/all 命令可以看一下网络的配置\n\n一般来说 ip 地址都是一个设备一个，但是可以有多张网卡，多个设备？\n\n路由器一个地址？手机和路由器地址之间的关系？\n\n2011 年 IPV4 已经使用完了，我们开始使用 IPV6\n\n#### 逐渐推广的 IPV6\n\n每组中的前导 0 都可以省略，连续两个或者多个均为 0，使用 :: 代替，但是只能使用一个\n\n#### IPV4 和 IPV6 如何过渡？\n\n#### 子网掩码 / 子网划分 / 前缀长度\n\n\n#### DOH DOT\n\n外网、内网？\n\n#### Mac 地址\n\n网络是分层的？\n\nQQ 上的去，但是网页上不去\n\n校园网登录地址？\n\n#### 路由\n\n交换机 AC + AP\n\n如果统一反应网络问题，可能是总层楼的交换机坏掉了。\n\n#### 限速\n\nV4 下载 60 上传 100\nV6 都是千兆的\n\nSteam 下载很快，但是下载别的东西很慢，内网？？\n\n#### 流量\n\n中国流量商用的很贵，很多都想来换取流量？京东云？\n\n#### 路由追踪\n\n\n#### 网线(双绞线)\n\n网线的连接标准有两种，T568A 和 T568B\n\n双绞线的好处？\n\nPoE 网线连接的时候同时有一个供电？一般是 48V。标准 PoE 和非标准 PoE\n\n多 AP 方案无线漫游协议\n\n无线加密：wpa2、AES 加密算法\n\n#### ipconfig\n\n如果 IPV4 地址是以 169.254 开头说明没有获取到 ip 地址。因为这是 windows 通过 DHCP 自动生成的地址。\n\n#### OSI 七层网络模型\n\n\n\n#### 作业：\n\n1. 下周六前提交\n\n\n\n\n","source":"_posts/网管会.md","raw":"---\ntitle: 网管会\ndate: 2023-10-28 19:04:59\ntags:\ndescription: just record some important things of Network Management Association.\n---\n\nipconfig/all 命令可以看一下网络的配置\n\n一般来说 ip 地址都是一个设备一个，但是可以有多张网卡，多个设备？\n\n路由器一个地址？手机和路由器地址之间的关系？\n\n2011 年 IPV4 已经使用完了，我们开始使用 IPV6\n\n#### 逐渐推广的 IPV6\n\n每组中的前导 0 都可以省略，连续两个或者多个均为 0，使用 :: 代替，但是只能使用一个\n\n#### IPV4 和 IPV6 如何过渡？\n\n#### 子网掩码 / 子网划分 / 前缀长度\n\n\n#### DOH DOT\n\n外网、内网？\n\n#### Mac 地址\n\n网络是分层的？\n\nQQ 上的去，但是网页上不去\n\n校园网登录地址？\n\n#### 路由\n\n交换机 AC + AP\n\n如果统一反应网络问题，可能是总层楼的交换机坏掉了。\n\n#### 限速\n\nV4 下载 60 上传 100\nV6 都是千兆的\n\nSteam 下载很快，但是下载别的东西很慢，内网？？\n\n#### 流量\n\n中国流量商用的很贵，很多都想来换取流量？京东云？\n\n#### 路由追踪\n\n\n#### 网线(双绞线)\n\n网线的连接标准有两种，T568A 和 T568B\n\n双绞线的好处？\n\nPoE 网线连接的时候同时有一个供电？一般是 48V。标准 PoE 和非标准 PoE\n\n多 AP 方案无线漫游协议\n\n无线加密：wpa2、AES 加密算法\n\n#### ipconfig\n\n如果 IPV4 地址是以 169.254 开头说明没有获取到 ip 地址。因为这是 windows 通过 DHCP 自动生成的地址。\n\n#### OSI 七层网络模型\n\n\n\n#### 作业：\n\n1. 下周六前提交\n\n\n\n\n","slug":"网管会","published":1,"updated":"2023-11-12T10:55:49.895Z","_id":"clov7szoi001x5oogcftch3ku","comments":1,"layout":"post","photos":[],"link":"","content":"<p>ipconfig/all 命令可以看一下网络的配置</p>\n<p>一般来说 ip 地址都是一个设备一个，但是可以有多张网卡，多个设备？</p>\n<p>路由器一个地址？手机和路由器地址之间的关系？</p>\n<p>2011 年 IPV4 已经使用完了，我们开始使用 IPV6</p>\n<h4 id=\"逐渐推广的-IPV6\"><a href=\"#逐渐推广的-IPV6\" class=\"headerlink\" title=\"逐渐推广的 IPV6\"></a>逐渐推广的 IPV6</h4><p>每组中的前导 0 都可以省略，连续两个或者多个均为 0，使用 :: 代替，但是只能使用一个</p>\n<h4 id=\"IPV4-和-IPV6-如何过渡？\"><a href=\"#IPV4-和-IPV6-如何过渡？\" class=\"headerlink\" title=\"IPV4 和 IPV6 如何过渡？\"></a>IPV4 和 IPV6 如何过渡？</h4><h4 id=\"子网掩码-子网划分-前缀长度\"><a href=\"#子网掩码-子网划分-前缀长度\" class=\"headerlink\" title=\"子网掩码 / 子网划分 / 前缀长度\"></a>子网掩码 / 子网划分 / 前缀长度</h4><h4 id=\"DOH-DOT\"><a href=\"#DOH-DOT\" class=\"headerlink\" title=\"DOH DOT\"></a>DOH DOT</h4><p>外网、内网？</p>\n<h4 id=\"Mac-地址\"><a href=\"#Mac-地址\" class=\"headerlink\" title=\"Mac 地址\"></a>Mac 地址</h4><p>网络是分层的？</p>\n<p>QQ 上的去，但是网页上不去</p>\n<p>校园网登录地址？</p>\n<h4 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h4><p>交换机 AC + AP</p>\n<p>如果统一反应网络问题，可能是总层楼的交换机坏掉了。</p>\n<h4 id=\"限速\"><a href=\"#限速\" class=\"headerlink\" title=\"限速\"></a>限速</h4><p>V4 下载 60 上传 100<br>V6 都是千兆的</p>\n<p>Steam 下载很快，但是下载别的东西很慢，内网？？</p>\n<h4 id=\"流量\"><a href=\"#流量\" class=\"headerlink\" title=\"流量\"></a>流量</h4><p>中国流量商用的很贵，很多都想来换取流量？京东云？</p>\n<h4 id=\"路由追踪\"><a href=\"#路由追踪\" class=\"headerlink\" title=\"路由追踪\"></a>路由追踪</h4><h4 id=\"网线-双绞线\"><a href=\"#网线-双绞线\" class=\"headerlink\" title=\"网线(双绞线)\"></a>网线(双绞线)</h4><p>网线的连接标准有两种，T568A 和 T568B</p>\n<p>双绞线的好处？</p>\n<p>PoE 网线连接的时候同时有一个供电？一般是 48V。标准 PoE 和非标准 PoE</p>\n<p>多 AP 方案无线漫游协议</p>\n<p>无线加密：wpa2、AES 加密算法</p>\n<h4 id=\"ipconfig\"><a href=\"#ipconfig\" class=\"headerlink\" title=\"ipconfig\"></a>ipconfig</h4><p>如果 IPV4 地址是以 169.254 开头说明没有获取到 ip 地址。因为这是 windows 通过 DHCP 自动生成的地址。</p>\n<h4 id=\"OSI-七层网络模型\"><a href=\"#OSI-七层网络模型\" class=\"headerlink\" title=\"OSI 七层网络模型\"></a>OSI 七层网络模型</h4><h4 id=\"作业：\"><a href=\"#作业：\" class=\"headerlink\" title=\"作业：\"></a>作业：</h4><ol>\n<li>下周六前提交</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>ipconfig/all 命令可以看一下网络的配置</p>\n<p>一般来说 ip 地址都是一个设备一个，但是可以有多张网卡，多个设备？</p>\n<p>路由器一个地址？手机和路由器地址之间的关系？</p>\n<p>2011 年 IPV4 已经使用完了，我们开始使用 IPV6</p>\n<h4 id=\"逐渐推广的-IPV6\"><a href=\"#逐渐推广的-IPV6\" class=\"headerlink\" title=\"逐渐推广的 IPV6\"></a>逐渐推广的 IPV6</h4><p>每组中的前导 0 都可以省略，连续两个或者多个均为 0，使用 :: 代替，但是只能使用一个</p>\n<h4 id=\"IPV4-和-IPV6-如何过渡？\"><a href=\"#IPV4-和-IPV6-如何过渡？\" class=\"headerlink\" title=\"IPV4 和 IPV6 如何过渡？\"></a>IPV4 和 IPV6 如何过渡？</h4><h4 id=\"子网掩码-子网划分-前缀长度\"><a href=\"#子网掩码-子网划分-前缀长度\" class=\"headerlink\" title=\"子网掩码 / 子网划分 / 前缀长度\"></a>子网掩码 / 子网划分 / 前缀长度</h4><h4 id=\"DOH-DOT\"><a href=\"#DOH-DOT\" class=\"headerlink\" title=\"DOH DOT\"></a>DOH DOT</h4><p>外网、内网？</p>\n<h4 id=\"Mac-地址\"><a href=\"#Mac-地址\" class=\"headerlink\" title=\"Mac 地址\"></a>Mac 地址</h4><p>网络是分层的？</p>\n<p>QQ 上的去，但是网页上不去</p>\n<p>校园网登录地址？</p>\n<h4 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h4><p>交换机 AC + AP</p>\n<p>如果统一反应网络问题，可能是总层楼的交换机坏掉了。</p>\n<h4 id=\"限速\"><a href=\"#限速\" class=\"headerlink\" title=\"限速\"></a>限速</h4><p>V4 下载 60 上传 100<br>V6 都是千兆的</p>\n<p>Steam 下载很快，但是下载别的东西很慢，内网？？</p>\n<h4 id=\"流量\"><a href=\"#流量\" class=\"headerlink\" title=\"流量\"></a>流量</h4><p>中国流量商用的很贵，很多都想来换取流量？京东云？</p>\n<h4 id=\"路由追踪\"><a href=\"#路由追踪\" class=\"headerlink\" title=\"路由追踪\"></a>路由追踪</h4><h4 id=\"网线-双绞线\"><a href=\"#网线-双绞线\" class=\"headerlink\" title=\"网线(双绞线)\"></a>网线(双绞线)</h4><p>网线的连接标准有两种，T568A 和 T568B</p>\n<p>双绞线的好处？</p>\n<p>PoE 网线连接的时候同时有一个供电？一般是 48V。标准 PoE 和非标准 PoE</p>\n<p>多 AP 方案无线漫游协议</p>\n<p>无线加密：wpa2、AES 加密算法</p>\n<h4 id=\"ipconfig\"><a href=\"#ipconfig\" class=\"headerlink\" title=\"ipconfig\"></a>ipconfig</h4><p>如果 IPV4 地址是以 169.254 开头说明没有获取到 ip 地址。因为这是 windows 通过 DHCP 自动生成的地址。</p>\n<h4 id=\"OSI-七层网络模型\"><a href=\"#OSI-七层网络模型\" class=\"headerlink\" title=\"OSI 七层网络模型\"></a>OSI 七层网络模型</h4><h4 id=\"作业：\"><a href=\"#作业：\" class=\"headerlink\" title=\"作业：\"></a>作业：</h4><ol>\n<li>下周六前提交</li>\n</ol>\n"},{"title":"莫队算法","date":"2023-08-23T07:17:31.000Z","description":"介绍莫队算法。","mathjax":true,"_content":"\n**莫队**，是莫涛发明的一种解决区间查询等问题的 **离线算法**，基于 **分块** 思想，复杂度为 $O(n\\sqrt{n})$\n\n一般来说，如果可以在 $O(1)$ 内从 $[l, r]$ 的答案转移到 $[l - 1, r]、[l + 1, r]、[l, r - 1]、[l, r + 1]$ 这四个与之紧邻的区间的答案，则可以考虑使用莫队。\n\n#### 例题\n\n[DQUERY - D-query - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)](https://www.luogu.com.cn/problem/SP3267)\n\nHH 的项链弱化版\n\n```c++\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 1e6 + 5;\nconst int M = 1e6 + 5;\nconst int Q = 1e6 + 5;\nint n, m, vis[M], bel[N], a[N], st[N], ed[N], cnt[M], ans[N];\nint l, r, cur;\n\nstruct Question {\n    int l, r;\n    int num;\n} q[Q];\n\nvoid init() {\n    int len = sqrt(n);\n    for (int i = 1; i <= len; ++i) {\n        st[i] = n / len * (i - 1) + 1;\n        ed[i] = n / len * i;\n    }\n    ed[len] = n;\n    for (int i = 1; i <= len; ++i)\n        for (int j = st[i]; j <= ed[i]; ++j)\n            bel[j] = i;\n}\n\nint read() {\n    int x = 0, f = 1;\n    char c = getchar();\n    while (!isdigit(c)) {\n        if (c == '-') f = -1;\n        c = getchar();\n    }\n    while (isdigit(c)) x = x * 10 + c - '0', c = getchar();\n    return x * f;\n}\n\nbool cmp(Question x, Question y) {\n    return bel[x.l] == bel[y.l] ? bel[x.r] < bel[y.r] : bel[x.l] < bel[y.l];\n}\n\nvoid add(int pos) {\n    if (cnt[a[pos]] == 0)\n        ++cur;\n    ++cnt[a[pos]];\n}\n\nvoid del(int pos) {\n    --cnt[a[pos]];\n    if (cnt[a[pos]] == 0)\n        --cur;\n}\n\nint main() {\n    n = read();\n    for (int i = 1; i <= n; ++i)\n        a[i] = read();\n    init();\n    m = read();\n    for (int i = 1; i <= m; ++i) {\n        q[i].l = read();\n        q[i].r = read();\n        q[i].num = i;\n    }\n    sort(q + 1, q + 1 + m, cmp);\n    l = 1;\n    for (int i = 1; i <= m; ++i) {\n        while (l > q[i].l) \n            add(--l);\n        while (r < q[i].r)\n            add(++r);\n        while (l < q[i].l) \n            del(l++);\n        while (r > q[i].r)\n            del(r--);\n        ans[q[i].num] = cur;\n    }\n    for (int i = 1; i <= m; ++i)\n        printf(\"%d\\n\", ans[i]);\n    return 0;\n}\n```\n\n### 莫队算法的扩展 —— 带修莫队\n\n前面说过，莫队算法是离线算法，不支持修改，强制在线需要另寻他法。但是对于某些允许离线的带修改区间查询来说，莫队还是能大展拳脚的。做法就是把莫队直接加上一维，变为带修莫队。\n\n我们的做法是把修改操作编号，称为「时间戳」。\n\n跑主算法时定义当前时间戳为 t，对于每个查询操作，如果当前时间戳相对太大了，说明已进行的修改操作比要求的多，就把之前改的改回来，反之往后改。只有当当前区间和查询区间左右端点、时间戳均重合时，才认定区间完全重合，此时的答案才是本次查询的最终答案。\n\n**跑主算法时定义当前时间戳为 t，对于每个查询操作，如果当前时间戳相对太大了，说明已进行的修改操作比要求的多，就把之前改的改回来，反之往后改。只有当当前区间和查询区间左右端点、时间戳均重合时，才认定区间完全重合，此时的答案才是本次查询的最终答案。**\n\n#### 例题\n\n[P1903 [国家集训队\\] 数颜色 / 维护队列 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)](https://www.luogu.com.cn/problem/P1903)\n\n```c++\n#include <bits/stdc++.h>\n\nconst int N = 133335;\nconst int M = 1e6 + 5;\nint n, m, bel[N], st[N], ed[N], a[N], len;\nint cnt_1, cnt_2, vis[M], ans[N], cur;\n\nstruct Question_1 {\n    int l, r;\n    int time;\n    int id;\n} q1[N];\n\nstruct Question_2 {\n    int pos;\n    int col;\n} q2[N];\n\nint read() {\n    int x = 0, f = 1;\n    char c = getchar();\n    while (!isdigit(c)) {\n        if (c == '-') f = -1;\n        c = getchar();\n    }\n    while (isdigit(c)) x = x * 10 + c - '0', c = getchar();\n    return x * f;\n}\n\nvoid init() {\n    /*\n    len = sqrt(n);\n    for (int i = 1; i <= len; ++i) {\n        st[i] = n / len * (i - 1) + 1;\n        ed[i] = n / len * i;\n    }\n    ed[len] = n;\n    for (int i = 1; i <= len; ++i)\n        for (int j = st[i]; j <= ed[i]; ++j)\n            bel[j] = i;\n    */\n    len = pow(n, 2.0 / 3.0);\n    int num = ceil((double)n / len);\n    for (int i = 1; i <= num; ++i) {\n        st[i] = len * (i - 1) + 1;\n        ed[i] = len * i;\n    }\n    ed[num] = n;\n    for (int i = 1; i <= num; ++i)\n        for (int j = st[i]; j <= ed[i]; ++j)\n            bel[j] = i;\n}\n\nbool cmp(Question_1 x, Question_1 y) {\n    return bel[x.l] == bel[y.l] ? (bel[x.r] == bel[y.r] ? x.time < y.time : bel[x.r] < bel[y.r]) : bel[x.l] < bel[y.l]; \n}\n\nvoid add(int pos) {\n    if (vis[a[pos]] == 0)\n        ++cur;\n    ++vis[a[pos]];\n}\n\nvoid del(int pos) {\n    --vis[a[pos]];\n    if (vis[a[pos]] == 0)\n        --cur;\n}\n\nint main() {\n    n = read(), m = read();\n    for (int i = 1; i <= n; ++i)\n        a[i] = read();\n    init();\n    char opt;\n    int x, y;\n    for (int i = 1; i <= m; ++i) {\n        std::cin >> opt >> x >> y;\n        if (opt == 'Q') {\n            q1[++cnt_1].l = x;\n            q1[cnt_1].r = y;\n            q1[cnt_1].time = cnt_2;\n            q1[cnt_1].id = cnt_1;\n        } else {\n            q2[++cnt_2].col = y;\n            q2[cnt_2].pos = x;\n        }\n        //std::cout << \"no error\" << std::endl;\n    }\n    std::sort(q1 + 1, q1 + 1 + cnt_1, cmp);\n    int l = 1, r = 0;\n    int t = 0;\n    for (int i = 1; i <= cnt_1; ++i) {\n        while (l > q1[i].l)\n            add(--l);\n        while (r < q1[i].r)\n            add(++r);\n        while (l < q1[i].l)\n            del(l++);\n        while (r > q1[i].r)\n            del(r--);\n        while (t < q1[i].time) {\n            ++t;\n            if (q1[i].l <= q2[t].pos && q2[t].pos <= q1[i].r) {\n                del(q2[t].pos);\n                if (vis[q2[t].col] == 0)\n                    ++cur;\n                ++vis[q2[t].col];\n            }\n            std::swap(a[q2[t].pos], q2[t].col);\n        }\n        while (t > q1[i].time) {\n            if (q1[i].l <= q2[t].pos && q2[t].pos <= q1[i].r) {\n                del(q2[t].pos);\n                if (vis[q2[t].col] == 0)\n                    ++cur;\n                ++vis[q2[t].col];\n            }\n            std::swap(a[q2[t].pos], q2[t].col);\n            --t;\n        }\n        ans[q1[i].id] = cur;\n    }\n    for (int i = 1; i <= cnt_1; ++i)\n        printf(\"%d\\n\", ans[i]);\n    return 0;\n}\n```\n\n这一道题目块的大小取得 $n^{\\frac{2}{3}} $ 时时间复杂度最小。如果还是 $\\sqrt{n}$ 的话，会超时。\n\n### 莫队算法的扩展 —— 树上莫队\n\n前面我们所使用的莫队都是在一维的序列上进行，即使加了一维的时间轴，但是主题还是一维序列。那么树上统计问题能否用莫队来处理呢？答案是肯定的。\n\n但是普通的 dfs 序没有办法确定一个对应区间\n\n使用 **欧拉序**，可以解决许多普通 dfs 序无法解决的问题（就比如树上莫队）。\n\n![image-20230723182411099](C:\\Users\\梁云森\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230723182411099.png)\n\n```c++\n#include <bits/stdc++.h>\n\nconst int N = 4e4 + 5;\nconst int M = 1e5 + 5;\nint n, m, cur, cnt, tot, date[N], a[N], dep[N], top[N], fa[N], bel[N << 1], siz[N], son[N], head[N], st[N << 1], ed[N << 1], id[N], fir[N], las[N], use[N << 1], ans[M], cot[N << 1];\n\nstruct Edge {\n    int nxt, to;\n} e[N << 1];\n\nstruct Question {\n    int l, r;\n    int id;\n    int lca;\n    int ans;\n} q[M];\n\nbool cmp2(Question x, Question y) {\n    return bel[x.l] == bel[y.l] ? x.r < y.r : bel[x.l] < bel[y.l];\n}\n\nint read() {\n    int x = 0, f = 1;\n    char c = getchar();\n    while (!isdigit(c)) {\n        if (c == '-') f = -1;\n        c = getchar();\n    }\n    while (isdigit(c)) x = x * 10 + c - '0', c = getchar();\n    return x * f;\n}\n\nvoid add(int x, int y) {\n    e[++cnt].nxt = head[x];\n    e[cnt].to = y;\n    head[x] = cnt;\n}\n\nvoid dfs1(int x, int f) {\n    dep[x] = dep[f] + 1;\n    fa[x] = f;\n    siz[x] = 1;\n    int Max = -1;\n    id[++tot] = x;\n    fir[x] = tot;\n    for (int i = head[x]; i ; i = e[i].nxt) {\n        int to = e[i].to;\n        if (to == f) continue;\n        dfs1(to, x);\n        siz[x] += siz[to];\n        if (siz[to] > Max) {\n            Max = siz[to];\n            son[x] = to;\n        }\n    }\n    id[++tot] = x;\n    las[x] = tot;\n}\n\nvoid dfs2(int x, int tp) {\n    top[x] = tp;\n    if (!son[x]) return ;\n    dfs2(son[x], tp);\n    for (int i = head[x]; i ; i = e[i].nxt) {\n        int to = e[i].to;\n        if (to == fa[x] || to == son[x]) continue;\n        dfs2(to, to);\n    }\n}\n\nint lca(int x, int y) {\n    while (top[x] != top[y]) {\n        if (dep[top[x]] < dep[top[y]]) std::swap(x, y);\n        x = fa[top[x]];\n    }\n    if (dep[x] < dep[y]) std::swap(x, y);\n    return y;\n}\n\nvoid add(int pos) {\n    //if (++cot[pos] == 1) cur++;\n    if (cot[a[pos]] == 0)\n        ++cur;\n    ++cot[a[pos]];\n}\n\nvoid del(int pos) {\n    //if (--cot[pos] == 0) cur--;\n    --cot[a[pos]];\n    if (cot[a[pos]] == 0)\n        --cur;\n}\n\nvoid Add(int pos) {\n    //std::cout << \"this is a test\" << std::endl;\n    //use[pos] ? del(a[pos]) : add(a[pos]);\n    //use[pos] ^= 1;\n    use[pos] ? del(pos) : add(pos);\n    use[pos] ^= 1;\n}\n\nint main() {\n    n = read(), m = read();\n    for (int i = 1; i <= n; ++i)\n        a[i] = date[i] = read();\n\n    // discretization\n    std::sort(date + 1, date + 1 + n);\n    int num = std::unique(date + 1, date + 1 + n) - date - 1;\n    for (int i = 1; i <= n; ++i)\n        a[i] = std::lower_bound(date + 1, date + 1 + n, a[i]) - date;\n\n    int x, y;\n    for (int i = 1; i <= n - 1; ++i) {\n        x = read(), y = read();\n        add(x, y);\n        add(y, x);\n    }\n    dfs1(1, 0);\n    dfs2(1, 1);\n\n    int block = sqrt(n);\n    for (int i = 1; i <= n * 2; ++i)\n        bel[i] = i / block + 1;\n\n    //int x, y;\n    int ancestor;\n    for (int i = 1; i <= m; ++i) {\n        x = read(), y = read();\n        if (fir[x] > fir[y]) std::swap(x, y);\n        ancestor = lca(x, y);\n        q[i].id = i;\n        if (ancestor == x) {\n            q[i].l = fir[x]; // 欧拉序中的位置\n            q[i].r = fir[y];\n        } else {\n            q[i].l = las[x];\n            q[i].r = fir[y];\n            q[i].lca = ancestor;\n        }\n    }\n\n    std::sort(q + 1, q + 1 + m, cmp2);\n    int l = 1, r = 0;\n    for (int i = 1; i <= m; ++i) {\n        while (l < q[i].l) {\n            Add(id[l]);\n            l++;\n        }\n        while (r > q[i].r) {\n            Add(id[r]);\n            r--;\n        }\n        while (l > q[i].l) {\n            l--;\n            Add(id[l]);\n        }\n        while (r < q[i].r) {\n            r++;\n            Add(id[r]);\n        }\n        if (q[i].lca)\n            Add(q[i].lca);\n        q[i].ans = cur;\n        // std::cout << \"htih\" << std::endl;\n        if (q[i].lca)\n            Add(q[i].lca);\n    }\n\n    for (int i = 1; i <= m; ++i)\n        ans[q[i].id] = q[i].ans;\n    for (int i = 1; i <= m; ++i)\n        printf(\"%d\\n\", ans[i]);\n    return 0;\n}\n```\n\n### 莫队算法的扩展——回滚莫队\n\n![image-20230724130521246](C:\\Users\\梁云森\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230724130521246.png)\n\n感觉细节有一些多，比较麻烦的\n\n#### 例题\n\n[AT_joisc2014_c 歴史の研究](https://www.luogu.com.cn/problem/AT_joisc2014_c)\n\n```c++\n#include <bits/stdc++.h>\n\ntypedef long long ll;\nconst int N = 1e5 + 5;\nll n, m, Max, tot, a[N], b[N], st[N], ed[N], bel[N], ans[N], cnt[N], c[N];\n\nstruct Question {\n    int l, r;\n    int id;\n} q[N];\n\nbool cmp(Question x, Question y) {\n    return bel[x.l] == bel[y.l] ? x.r < y.r : bel[x.l] < bel[y.l];\n}\n\nll read() {\n    ll x = 0, f = 1;\n    char c = getchar();\n    while (!isdigit(c)) {\n        if (c == '-') f = -1;\n        c = getchar();\n    }\n    while (isdigit(c)) x = x * 10 + c - '0', c = getchar();\n    return x * f;\n}\n\nvoid add(int pos) {\n    ++cnt[a[pos]];\n    Max = std::max(Max, cnt[a[pos]] * b[a[pos]]);\n}\n\nint main() {\n    n = read(), m = read();\n    for (int i = 1; i <= n; ++i)\n        a[i] = b[i] = read();\n    \n    // discretization\n    std::sort(b + 1, b + 1 + n);\n    int len = std::unique(b + 1, b + 1 + n) - b - 1;\n    for (int i = 1; i <= n; ++i)\n        a[i] = std::lower_bound(b + 1, b + 1 + len, a[i]) - b;\n    \n    // split block \n    ll block = sqrt(n);\n    for (int i = 1; i <= block; ++i) {\n        st[i] = n / block * (i - 1) + 1;\n        ed[i] = n / block * i;\n    }\n    ed[block] = n;\n    for (int i = 1; i <= block; ++i)\n        for (int j = st[i]; j <= ed[i]; ++j)\n            bel[j] = i;\n\n    // sort question \n    for (int i = 1; i <= m; ++i) {\n        q[i].l = read(), q[i].r = read();\n        q[i].id = i;\n    }\n    std::sort(q + 1, q + 1 + m, cmp);\n\n    // mo\n    int p = 1;\n    for (int i = 1; i <= block; ++i) {\n        int l;\n        int r = ed[i];\n        memset(cnt, 0, sizeof (cnt));\n        Max = -1;\n        while (bel[q[p].l] == i) {\n            // std::cout << \"sdasda\";\n            //Max = -1;\n            tot = 0;\n            l = ed[i] + 1;\n            if (bel[q[p].l] == bel[q[p].r]) {\n                ll cur = Max;\n                for (int j = q[p].l; j <= q[p].r; ++j) {\n                    ++cnt[a[j]];\n                    c[++tot] = a[j];\n                    Max = std::max(Max, cnt[a[j]] * b[a[j]]);\n                }\n                ans[q[p].id] = Max;\n                for (int j = 1; j <= tot; ++j)\n                    --cnt[c[j]];\n                ++p;\n                Max = cur;\n                continue;\n            }\n            while (r < q[p].r)\n                add(++r);\n            ll cur = Max;\n            //std::cout << \"cur: \" << cur << std::endl;\n            while (l > q[p].l)\n                add(--l);\n            ans[q[p].id] = Max;\n            Max = cur;\n            while (l <= ed[i]) \n                --cnt[a[l++]];\n            ++p;\n        }\n    }\n\n    // output\n    for (int i = 1; i <= m; ++i)\n        printf(\"%lld\\n\", ans[i]);\n    return 0;\n}\n```\n\n\n\n![image-20230725000620621](C:\\Users\\梁云森\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230725000620621.png)\n\n\n\n### 参考\n\n[莫队算法——从入门到黑题 - WAMonster - 博客园 (cnblogs.com)](https://www.cnblogs.com/WAMonster/p/10118934.html)\n\n[算法学习笔记(24): 莫队 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/115243708)\n\nOIwiki\n","source":"_posts/莫队算法.md","raw":"---\ntitle: 莫队算法\ndate: 2023-08-23 15:17:31\ntags:\ndescription: 介绍莫队算法。\nmathjax: true\n---\n\n**莫队**，是莫涛发明的一种解决区间查询等问题的 **离线算法**，基于 **分块** 思想，复杂度为 $O(n\\sqrt{n})$\n\n一般来说，如果可以在 $O(1)$ 内从 $[l, r]$ 的答案转移到 $[l - 1, r]、[l + 1, r]、[l, r - 1]、[l, r + 1]$ 这四个与之紧邻的区间的答案，则可以考虑使用莫队。\n\n#### 例题\n\n[DQUERY - D-query - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)](https://www.luogu.com.cn/problem/SP3267)\n\nHH 的项链弱化版\n\n```c++\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 1e6 + 5;\nconst int M = 1e6 + 5;\nconst int Q = 1e6 + 5;\nint n, m, vis[M], bel[N], a[N], st[N], ed[N], cnt[M], ans[N];\nint l, r, cur;\n\nstruct Question {\n    int l, r;\n    int num;\n} q[Q];\n\nvoid init() {\n    int len = sqrt(n);\n    for (int i = 1; i <= len; ++i) {\n        st[i] = n / len * (i - 1) + 1;\n        ed[i] = n / len * i;\n    }\n    ed[len] = n;\n    for (int i = 1; i <= len; ++i)\n        for (int j = st[i]; j <= ed[i]; ++j)\n            bel[j] = i;\n}\n\nint read() {\n    int x = 0, f = 1;\n    char c = getchar();\n    while (!isdigit(c)) {\n        if (c == '-') f = -1;\n        c = getchar();\n    }\n    while (isdigit(c)) x = x * 10 + c - '0', c = getchar();\n    return x * f;\n}\n\nbool cmp(Question x, Question y) {\n    return bel[x.l] == bel[y.l] ? bel[x.r] < bel[y.r] : bel[x.l] < bel[y.l];\n}\n\nvoid add(int pos) {\n    if (cnt[a[pos]] == 0)\n        ++cur;\n    ++cnt[a[pos]];\n}\n\nvoid del(int pos) {\n    --cnt[a[pos]];\n    if (cnt[a[pos]] == 0)\n        --cur;\n}\n\nint main() {\n    n = read();\n    for (int i = 1; i <= n; ++i)\n        a[i] = read();\n    init();\n    m = read();\n    for (int i = 1; i <= m; ++i) {\n        q[i].l = read();\n        q[i].r = read();\n        q[i].num = i;\n    }\n    sort(q + 1, q + 1 + m, cmp);\n    l = 1;\n    for (int i = 1; i <= m; ++i) {\n        while (l > q[i].l) \n            add(--l);\n        while (r < q[i].r)\n            add(++r);\n        while (l < q[i].l) \n            del(l++);\n        while (r > q[i].r)\n            del(r--);\n        ans[q[i].num] = cur;\n    }\n    for (int i = 1; i <= m; ++i)\n        printf(\"%d\\n\", ans[i]);\n    return 0;\n}\n```\n\n### 莫队算法的扩展 —— 带修莫队\n\n前面说过，莫队算法是离线算法，不支持修改，强制在线需要另寻他法。但是对于某些允许离线的带修改区间查询来说，莫队还是能大展拳脚的。做法就是把莫队直接加上一维，变为带修莫队。\n\n我们的做法是把修改操作编号，称为「时间戳」。\n\n跑主算法时定义当前时间戳为 t，对于每个查询操作，如果当前时间戳相对太大了，说明已进行的修改操作比要求的多，就把之前改的改回来，反之往后改。只有当当前区间和查询区间左右端点、时间戳均重合时，才认定区间完全重合，此时的答案才是本次查询的最终答案。\n\n**跑主算法时定义当前时间戳为 t，对于每个查询操作，如果当前时间戳相对太大了，说明已进行的修改操作比要求的多，就把之前改的改回来，反之往后改。只有当当前区间和查询区间左右端点、时间戳均重合时，才认定区间完全重合，此时的答案才是本次查询的最终答案。**\n\n#### 例题\n\n[P1903 [国家集训队\\] 数颜色 / 维护队列 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)](https://www.luogu.com.cn/problem/P1903)\n\n```c++\n#include <bits/stdc++.h>\n\nconst int N = 133335;\nconst int M = 1e6 + 5;\nint n, m, bel[N], st[N], ed[N], a[N], len;\nint cnt_1, cnt_2, vis[M], ans[N], cur;\n\nstruct Question_1 {\n    int l, r;\n    int time;\n    int id;\n} q1[N];\n\nstruct Question_2 {\n    int pos;\n    int col;\n} q2[N];\n\nint read() {\n    int x = 0, f = 1;\n    char c = getchar();\n    while (!isdigit(c)) {\n        if (c == '-') f = -1;\n        c = getchar();\n    }\n    while (isdigit(c)) x = x * 10 + c - '0', c = getchar();\n    return x * f;\n}\n\nvoid init() {\n    /*\n    len = sqrt(n);\n    for (int i = 1; i <= len; ++i) {\n        st[i] = n / len * (i - 1) + 1;\n        ed[i] = n / len * i;\n    }\n    ed[len] = n;\n    for (int i = 1; i <= len; ++i)\n        for (int j = st[i]; j <= ed[i]; ++j)\n            bel[j] = i;\n    */\n    len = pow(n, 2.0 / 3.0);\n    int num = ceil((double)n / len);\n    for (int i = 1; i <= num; ++i) {\n        st[i] = len * (i - 1) + 1;\n        ed[i] = len * i;\n    }\n    ed[num] = n;\n    for (int i = 1; i <= num; ++i)\n        for (int j = st[i]; j <= ed[i]; ++j)\n            bel[j] = i;\n}\n\nbool cmp(Question_1 x, Question_1 y) {\n    return bel[x.l] == bel[y.l] ? (bel[x.r] == bel[y.r] ? x.time < y.time : bel[x.r] < bel[y.r]) : bel[x.l] < bel[y.l]; \n}\n\nvoid add(int pos) {\n    if (vis[a[pos]] == 0)\n        ++cur;\n    ++vis[a[pos]];\n}\n\nvoid del(int pos) {\n    --vis[a[pos]];\n    if (vis[a[pos]] == 0)\n        --cur;\n}\n\nint main() {\n    n = read(), m = read();\n    for (int i = 1; i <= n; ++i)\n        a[i] = read();\n    init();\n    char opt;\n    int x, y;\n    for (int i = 1; i <= m; ++i) {\n        std::cin >> opt >> x >> y;\n        if (opt == 'Q') {\n            q1[++cnt_1].l = x;\n            q1[cnt_1].r = y;\n            q1[cnt_1].time = cnt_2;\n            q1[cnt_1].id = cnt_1;\n        } else {\n            q2[++cnt_2].col = y;\n            q2[cnt_2].pos = x;\n        }\n        //std::cout << \"no error\" << std::endl;\n    }\n    std::sort(q1 + 1, q1 + 1 + cnt_1, cmp);\n    int l = 1, r = 0;\n    int t = 0;\n    for (int i = 1; i <= cnt_1; ++i) {\n        while (l > q1[i].l)\n            add(--l);\n        while (r < q1[i].r)\n            add(++r);\n        while (l < q1[i].l)\n            del(l++);\n        while (r > q1[i].r)\n            del(r--);\n        while (t < q1[i].time) {\n            ++t;\n            if (q1[i].l <= q2[t].pos && q2[t].pos <= q1[i].r) {\n                del(q2[t].pos);\n                if (vis[q2[t].col] == 0)\n                    ++cur;\n                ++vis[q2[t].col];\n            }\n            std::swap(a[q2[t].pos], q2[t].col);\n        }\n        while (t > q1[i].time) {\n            if (q1[i].l <= q2[t].pos && q2[t].pos <= q1[i].r) {\n                del(q2[t].pos);\n                if (vis[q2[t].col] == 0)\n                    ++cur;\n                ++vis[q2[t].col];\n            }\n            std::swap(a[q2[t].pos], q2[t].col);\n            --t;\n        }\n        ans[q1[i].id] = cur;\n    }\n    for (int i = 1; i <= cnt_1; ++i)\n        printf(\"%d\\n\", ans[i]);\n    return 0;\n}\n```\n\n这一道题目块的大小取得 $n^{\\frac{2}{3}} $ 时时间复杂度最小。如果还是 $\\sqrt{n}$ 的话，会超时。\n\n### 莫队算法的扩展 —— 树上莫队\n\n前面我们所使用的莫队都是在一维的序列上进行，即使加了一维的时间轴，但是主题还是一维序列。那么树上统计问题能否用莫队来处理呢？答案是肯定的。\n\n但是普通的 dfs 序没有办法确定一个对应区间\n\n使用 **欧拉序**，可以解决许多普通 dfs 序无法解决的问题（就比如树上莫队）。\n\n![image-20230723182411099](C:\\Users\\梁云森\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230723182411099.png)\n\n```c++\n#include <bits/stdc++.h>\n\nconst int N = 4e4 + 5;\nconst int M = 1e5 + 5;\nint n, m, cur, cnt, tot, date[N], a[N], dep[N], top[N], fa[N], bel[N << 1], siz[N], son[N], head[N], st[N << 1], ed[N << 1], id[N], fir[N], las[N], use[N << 1], ans[M], cot[N << 1];\n\nstruct Edge {\n    int nxt, to;\n} e[N << 1];\n\nstruct Question {\n    int l, r;\n    int id;\n    int lca;\n    int ans;\n} q[M];\n\nbool cmp2(Question x, Question y) {\n    return bel[x.l] == bel[y.l] ? x.r < y.r : bel[x.l] < bel[y.l];\n}\n\nint read() {\n    int x = 0, f = 1;\n    char c = getchar();\n    while (!isdigit(c)) {\n        if (c == '-') f = -1;\n        c = getchar();\n    }\n    while (isdigit(c)) x = x * 10 + c - '0', c = getchar();\n    return x * f;\n}\n\nvoid add(int x, int y) {\n    e[++cnt].nxt = head[x];\n    e[cnt].to = y;\n    head[x] = cnt;\n}\n\nvoid dfs1(int x, int f) {\n    dep[x] = dep[f] + 1;\n    fa[x] = f;\n    siz[x] = 1;\n    int Max = -1;\n    id[++tot] = x;\n    fir[x] = tot;\n    for (int i = head[x]; i ; i = e[i].nxt) {\n        int to = e[i].to;\n        if (to == f) continue;\n        dfs1(to, x);\n        siz[x] += siz[to];\n        if (siz[to] > Max) {\n            Max = siz[to];\n            son[x] = to;\n        }\n    }\n    id[++tot] = x;\n    las[x] = tot;\n}\n\nvoid dfs2(int x, int tp) {\n    top[x] = tp;\n    if (!son[x]) return ;\n    dfs2(son[x], tp);\n    for (int i = head[x]; i ; i = e[i].nxt) {\n        int to = e[i].to;\n        if (to == fa[x] || to == son[x]) continue;\n        dfs2(to, to);\n    }\n}\n\nint lca(int x, int y) {\n    while (top[x] != top[y]) {\n        if (dep[top[x]] < dep[top[y]]) std::swap(x, y);\n        x = fa[top[x]];\n    }\n    if (dep[x] < dep[y]) std::swap(x, y);\n    return y;\n}\n\nvoid add(int pos) {\n    //if (++cot[pos] == 1) cur++;\n    if (cot[a[pos]] == 0)\n        ++cur;\n    ++cot[a[pos]];\n}\n\nvoid del(int pos) {\n    //if (--cot[pos] == 0) cur--;\n    --cot[a[pos]];\n    if (cot[a[pos]] == 0)\n        --cur;\n}\n\nvoid Add(int pos) {\n    //std::cout << \"this is a test\" << std::endl;\n    //use[pos] ? del(a[pos]) : add(a[pos]);\n    //use[pos] ^= 1;\n    use[pos] ? del(pos) : add(pos);\n    use[pos] ^= 1;\n}\n\nint main() {\n    n = read(), m = read();\n    for (int i = 1; i <= n; ++i)\n        a[i] = date[i] = read();\n\n    // discretization\n    std::sort(date + 1, date + 1 + n);\n    int num = std::unique(date + 1, date + 1 + n) - date - 1;\n    for (int i = 1; i <= n; ++i)\n        a[i] = std::lower_bound(date + 1, date + 1 + n, a[i]) - date;\n\n    int x, y;\n    for (int i = 1; i <= n - 1; ++i) {\n        x = read(), y = read();\n        add(x, y);\n        add(y, x);\n    }\n    dfs1(1, 0);\n    dfs2(1, 1);\n\n    int block = sqrt(n);\n    for (int i = 1; i <= n * 2; ++i)\n        bel[i] = i / block + 1;\n\n    //int x, y;\n    int ancestor;\n    for (int i = 1; i <= m; ++i) {\n        x = read(), y = read();\n        if (fir[x] > fir[y]) std::swap(x, y);\n        ancestor = lca(x, y);\n        q[i].id = i;\n        if (ancestor == x) {\n            q[i].l = fir[x]; // 欧拉序中的位置\n            q[i].r = fir[y];\n        } else {\n            q[i].l = las[x];\n            q[i].r = fir[y];\n            q[i].lca = ancestor;\n        }\n    }\n\n    std::sort(q + 1, q + 1 + m, cmp2);\n    int l = 1, r = 0;\n    for (int i = 1; i <= m; ++i) {\n        while (l < q[i].l) {\n            Add(id[l]);\n            l++;\n        }\n        while (r > q[i].r) {\n            Add(id[r]);\n            r--;\n        }\n        while (l > q[i].l) {\n            l--;\n            Add(id[l]);\n        }\n        while (r < q[i].r) {\n            r++;\n            Add(id[r]);\n        }\n        if (q[i].lca)\n            Add(q[i].lca);\n        q[i].ans = cur;\n        // std::cout << \"htih\" << std::endl;\n        if (q[i].lca)\n            Add(q[i].lca);\n    }\n\n    for (int i = 1; i <= m; ++i)\n        ans[q[i].id] = q[i].ans;\n    for (int i = 1; i <= m; ++i)\n        printf(\"%d\\n\", ans[i]);\n    return 0;\n}\n```\n\n### 莫队算法的扩展——回滚莫队\n\n![image-20230724130521246](C:\\Users\\梁云森\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230724130521246.png)\n\n感觉细节有一些多，比较麻烦的\n\n#### 例题\n\n[AT_joisc2014_c 歴史の研究](https://www.luogu.com.cn/problem/AT_joisc2014_c)\n\n```c++\n#include <bits/stdc++.h>\n\ntypedef long long ll;\nconst int N = 1e5 + 5;\nll n, m, Max, tot, a[N], b[N], st[N], ed[N], bel[N], ans[N], cnt[N], c[N];\n\nstruct Question {\n    int l, r;\n    int id;\n} q[N];\n\nbool cmp(Question x, Question y) {\n    return bel[x.l] == bel[y.l] ? x.r < y.r : bel[x.l] < bel[y.l];\n}\n\nll read() {\n    ll x = 0, f = 1;\n    char c = getchar();\n    while (!isdigit(c)) {\n        if (c == '-') f = -1;\n        c = getchar();\n    }\n    while (isdigit(c)) x = x * 10 + c - '0', c = getchar();\n    return x * f;\n}\n\nvoid add(int pos) {\n    ++cnt[a[pos]];\n    Max = std::max(Max, cnt[a[pos]] * b[a[pos]]);\n}\n\nint main() {\n    n = read(), m = read();\n    for (int i = 1; i <= n; ++i)\n        a[i] = b[i] = read();\n    \n    // discretization\n    std::sort(b + 1, b + 1 + n);\n    int len = std::unique(b + 1, b + 1 + n) - b - 1;\n    for (int i = 1; i <= n; ++i)\n        a[i] = std::lower_bound(b + 1, b + 1 + len, a[i]) - b;\n    \n    // split block \n    ll block = sqrt(n);\n    for (int i = 1; i <= block; ++i) {\n        st[i] = n / block * (i - 1) + 1;\n        ed[i] = n / block * i;\n    }\n    ed[block] = n;\n    for (int i = 1; i <= block; ++i)\n        for (int j = st[i]; j <= ed[i]; ++j)\n            bel[j] = i;\n\n    // sort question \n    for (int i = 1; i <= m; ++i) {\n        q[i].l = read(), q[i].r = read();\n        q[i].id = i;\n    }\n    std::sort(q + 1, q + 1 + m, cmp);\n\n    // mo\n    int p = 1;\n    for (int i = 1; i <= block; ++i) {\n        int l;\n        int r = ed[i];\n        memset(cnt, 0, sizeof (cnt));\n        Max = -1;\n        while (bel[q[p].l] == i) {\n            // std::cout << \"sdasda\";\n            //Max = -1;\n            tot = 0;\n            l = ed[i] + 1;\n            if (bel[q[p].l] == bel[q[p].r]) {\n                ll cur = Max;\n                for (int j = q[p].l; j <= q[p].r; ++j) {\n                    ++cnt[a[j]];\n                    c[++tot] = a[j];\n                    Max = std::max(Max, cnt[a[j]] * b[a[j]]);\n                }\n                ans[q[p].id] = Max;\n                for (int j = 1; j <= tot; ++j)\n                    --cnt[c[j]];\n                ++p;\n                Max = cur;\n                continue;\n            }\n            while (r < q[p].r)\n                add(++r);\n            ll cur = Max;\n            //std::cout << \"cur: \" << cur << std::endl;\n            while (l > q[p].l)\n                add(--l);\n            ans[q[p].id] = Max;\n            Max = cur;\n            while (l <= ed[i]) \n                --cnt[a[l++]];\n            ++p;\n        }\n    }\n\n    // output\n    for (int i = 1; i <= m; ++i)\n        printf(\"%lld\\n\", ans[i]);\n    return 0;\n}\n```\n\n\n\n![image-20230725000620621](C:\\Users\\梁云森\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230725000620621.png)\n\n\n\n### 参考\n\n[莫队算法——从入门到黑题 - WAMonster - 博客园 (cnblogs.com)](https://www.cnblogs.com/WAMonster/p/10118934.html)\n\n[算法学习笔记(24): 莫队 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/115243708)\n\nOIwiki\n","slug":"莫队算法","published":1,"updated":"2023-08-23T07:51:55.119Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szoj001z5oog7t3whl3m","content":"<p><strong>莫队</strong>，是莫涛发明的一种解决区间查询等问题的 <strong>离线算法</strong>，基于 <strong>分块</strong> 思想，复杂度为 $O(n\\sqrt{n})$</p>\n<p>一般来说，如果可以在 $O(1)$ 内从 $[l, r]$ 的答案转移到 $[l - 1, r]、[l + 1, r]、[l, r - 1]、[l, r + 1]$ 这四个与之紧邻的区间的答案，则可以考虑使用莫队。</p>\n<h4 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h4><p><a href=\"https://www.luogu.com.cn/problem/SP3267\">DQUERY - D-query - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>\n<p>HH 的项链弱化版</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e6</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> M = <span class=\"number\">1e6</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> Q = <span class=\"number\">1e6</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, vis[M], bel[N], a[N], st[N], ed[N], cnt[M], ans[N];</span><br><span class=\"line\"><span class=\"type\">int</span> l, r, cur;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Question</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">    <span class=\"type\">int</span> num;</span><br><span class=\"line\">&#125; q[Q];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> len = <span class=\"built_in\">sqrt</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= len; ++i) &#123;</span><br><span class=\"line\">        st[i] = n / len * (i - <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        ed[i] = n / len * i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ed[len] = n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= len; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = st[i]; j &lt;= ed[i]; ++j)</span><br><span class=\"line\">            bel[j] = i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(c)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>) f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(c)) x = x * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>, c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(Question x, Question y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bel[x.l] == bel[y.l] ? bel[x.r] &lt; bel[y.r] : bel[x.l] &lt; bel[y.l];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cnt[a[pos]] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        ++cur;</span><br><span class=\"line\">    ++cnt[a[pos]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">    --cnt[a[pos]];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cnt[a[pos]] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        --cur;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">        a[i] = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"built_in\">init</span>();</span><br><span class=\"line\">    m = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">        q[i].l = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        q[i].r = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        q[i].num = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(q + <span class=\"number\">1</span>, q + <span class=\"number\">1</span> + m, cmp);</span><br><span class=\"line\">    l = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &gt; q[i].l) </span><br><span class=\"line\">            <span class=\"built_in\">add</span>(--l);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (r &lt; q[i].r)</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(++r);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &lt; q[i].l) </span><br><span class=\"line\">            <span class=\"built_in\">del</span>(l++);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (r &gt; q[i].r)</span><br><span class=\"line\">            <span class=\"built_in\">del</span>(r--);</span><br><span class=\"line\">        ans[q[i].num] = cur;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"莫队算法的扩展-——-带修莫队\"><a href=\"#莫队算法的扩展-——-带修莫队\" class=\"headerlink\" title=\"莫队算法的扩展 —— 带修莫队\"></a>莫队算法的扩展 —— 带修莫队</h3><p>前面说过，莫队算法是离线算法，不支持修改，强制在线需要另寻他法。但是对于某些允许离线的带修改区间查询来说，莫队还是能大展拳脚的。做法就是把莫队直接加上一维，变为带修莫队。</p>\n<p>我们的做法是把修改操作编号，称为「时间戳」。</p>\n<p>跑主算法时定义当前时间戳为 t，对于每个查询操作，如果当前时间戳相对太大了，说明已进行的修改操作比要求的多，就把之前改的改回来，反之往后改。只有当当前区间和查询区间左右端点、时间戳均重合时，才认定区间完全重合，此时的答案才是本次查询的最终答案。</p>\n<p><strong>跑主算法时定义当前时间戳为 t，对于每个查询操作，如果当前时间戳相对太大了，说明已进行的修改操作比要求的多，就把之前改的改回来，反之往后改。只有当当前区间和查询区间左右端点、时间戳均重合时，才认定区间完全重合，此时的答案才是本次查询的最终答案。</strong></p>\n<h4 id=\"例题-1\"><a href=\"#例题-1\" class=\"headerlink\" title=\"例题\"></a>例题</h4><p><a href=\"https://www.luogu.com.cn/problem/P1903\">P1903 [国家集训队] 数颜色 / 维护队列 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">133335</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> M = <span class=\"number\">1e6</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, bel[N], st[N], ed[N], a[N], len;</span><br><span class=\"line\"><span class=\"type\">int</span> cnt_1, cnt_2, vis[M], ans[N], cur;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Question_1</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">    <span class=\"type\">int</span> time;</span><br><span class=\"line\">    <span class=\"type\">int</span> id;</span><br><span class=\"line\">&#125; q1[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Question_2</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> pos;</span><br><span class=\"line\">    <span class=\"type\">int</span> col;</span><br><span class=\"line\">&#125; q2[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(c)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>) f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(c)) x = x * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>, c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    len = sqrt(n);</span></span><br><span class=\"line\"><span class=\"comment\">    for (int i = 1; i &lt;= len; ++i) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        st[i] = n / len * (i - 1) + 1;</span></span><br><span class=\"line\"><span class=\"comment\">        ed[i] = n / len * i;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    ed[len] = n;</span></span><br><span class=\"line\"><span class=\"comment\">    for (int i = 1; i &lt;= len; ++i)</span></span><br><span class=\"line\"><span class=\"comment\">        for (int j = st[i]; j &lt;= ed[i]; ++j)</span></span><br><span class=\"line\"><span class=\"comment\">            bel[j] = i;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    len = <span class=\"built_in\">pow</span>(n, <span class=\"number\">2.0</span> / <span class=\"number\">3.0</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> num = <span class=\"built_in\">ceil</span>((<span class=\"type\">double</span>)n / len);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= num; ++i) &#123;</span><br><span class=\"line\">        st[i] = len * (i - <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        ed[i] = len * i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ed[num] = n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= num; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = st[i]; j &lt;= ed[i]; ++j)</span><br><span class=\"line\">            bel[j] = i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(Question_1 x, Question_1 y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bel[x.l] == bel[y.l] ? (bel[x.r] == bel[y.r] ? x.time &lt; y.time : bel[x.r] &lt; bel[y.r]) : bel[x.l] &lt; bel[y.l]; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vis[a[pos]] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        ++cur;</span><br><span class=\"line\">    ++vis[a[pos]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">    --vis[a[pos]];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vis[a[pos]] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        --cur;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>(), m = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">        a[i] = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"built_in\">init</span>();</span><br><span class=\"line\">    <span class=\"type\">char</span> opt;</span><br><span class=\"line\">    <span class=\"type\">int</span> x, y;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">        std::cin &gt;&gt; opt &gt;&gt; x &gt;&gt; y;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (opt == <span class=\"string\">&#x27;Q&#x27;</span>) &#123;</span><br><span class=\"line\">            q1[++cnt_1].l = x;</span><br><span class=\"line\">            q1[cnt_1].r = y;</span><br><span class=\"line\">            q1[cnt_1].time = cnt_2;</span><br><span class=\"line\">            q1[cnt_1].id = cnt_1;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            q2[++cnt_2].col = y;</span><br><span class=\"line\">            q2[cnt_2].pos = x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//std::cout &lt;&lt; &quot;no error&quot; &lt;&lt; std::endl;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    std::<span class=\"built_in\">sort</span>(q1 + <span class=\"number\">1</span>, q1 + <span class=\"number\">1</span> + cnt_1, cmp);</span><br><span class=\"line\">    <span class=\"type\">int</span> l = <span class=\"number\">1</span>, r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= cnt_1; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &gt; q1[i].l)</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(--l);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (r &lt; q1[i].r)</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(++r);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &lt; q1[i].l)</span><br><span class=\"line\">            <span class=\"built_in\">del</span>(l++);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (r &gt; q1[i].r)</span><br><span class=\"line\">            <span class=\"built_in\">del</span>(r--);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (t &lt; q1[i].time) &#123;</span><br><span class=\"line\">            ++t;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (q1[i].l &lt;= q2[t].pos &amp;&amp; q2[t].pos &lt;= q1[i].r) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">del</span>(q2[t].pos);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (vis[q2[t].col] == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    ++cur;</span><br><span class=\"line\">                ++vis[q2[t].col];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            std::<span class=\"built_in\">swap</span>(a[q2[t].pos], q2[t].col);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (t &gt; q1[i].time) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (q1[i].l &lt;= q2[t].pos &amp;&amp; q2[t].pos &lt;= q1[i].r) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">del</span>(q2[t].pos);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (vis[q2[t].col] == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    ++cur;</span><br><span class=\"line\">                ++vis[q2[t].col];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            std::<span class=\"built_in\">swap</span>(a[q2[t].pos], q2[t].col);</span><br><span class=\"line\">            --t;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans[q1[i].id] = cur;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= cnt_1; ++i)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这一道题目块的大小取得 $n^{\\frac{2}{3}} $ 时时间复杂度最小。如果还是 $\\sqrt{n}$ 的话，会超时。</p>\n<h3 id=\"莫队算法的扩展-——-树上莫队\"><a href=\"#莫队算法的扩展-——-树上莫队\" class=\"headerlink\" title=\"莫队算法的扩展 —— 树上莫队\"></a>莫队算法的扩展 —— 树上莫队</h3><p>前面我们所使用的莫队都是在一维的序列上进行，即使加了一维的时间轴，但是主题还是一维序列。那么树上统计问题能否用莫队来处理呢？答案是肯定的。</p>\n<p>但是普通的 dfs 序没有办法确定一个对应区间</p>\n<p>使用 <strong>欧拉序</strong>，可以解决许多普通 dfs 序无法解决的问题（就比如树上莫队）。</p>\n<p><img src=\"C:\\Users\\梁云森\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230723182411099.png\" alt=\"image-20230723182411099\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">4e4</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> M = <span class=\"number\">1e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, cur, cnt, tot, date[N], a[N], dep[N], top[N], fa[N], bel[N &lt;&lt; <span class=\"number\">1</span>], siz[N], son[N], head[N], st[N &lt;&lt; <span class=\"number\">1</span>], ed[N &lt;&lt; <span class=\"number\">1</span>], id[N], fir[N], las[N], use[N &lt;&lt; <span class=\"number\">1</span>], ans[M], cot[N &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Edge</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> nxt, to;</span><br><span class=\"line\">&#125; e[N &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Question</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">    <span class=\"type\">int</span> id;</span><br><span class=\"line\">    <span class=\"type\">int</span> lca;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans;</span><br><span class=\"line\">&#125; q[M];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp2</span><span class=\"params\">(Question x, Question y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bel[x.l] == bel[y.l] ? x.r &lt; y.r : bel[x.l] &lt; bel[y.l];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(c)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>) f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(c)) x = x * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>, c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    e[++cnt].nxt = head[x];</span><br><span class=\"line\">    e[cnt].to = y;</span><br><span class=\"line\">    head[x] = cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs1</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> f)</span> </span>&#123;</span><br><span class=\"line\">    dep[x] = dep[f] + <span class=\"number\">1</span>;</span><br><span class=\"line\">    fa[x] = f;</span><br><span class=\"line\">    siz[x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> Max = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    id[++tot] = x;</span><br><span class=\"line\">    fir[x] = tot;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = head[x]; i ; i = e[i].nxt) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> to = e[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (to == f) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs1</span>(to, x);</span><br><span class=\"line\">        siz[x] += siz[to];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (siz[to] &gt; Max) &#123;</span><br><span class=\"line\">            Max = siz[to];</span><br><span class=\"line\">            son[x] = to;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    id[++tot] = x;</span><br><span class=\"line\">    las[x] = tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> tp)</span> </span>&#123;</span><br><span class=\"line\">    top[x] = tp;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!son[x]) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    <span class=\"built_in\">dfs2</span>(son[x], tp);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = head[x]; i ; i = e[i].nxt) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> to = e[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (to == fa[x] || to == son[x]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs2</span>(to, to);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (top[x] != top[y]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dep[top[x]] &lt; dep[top[y]]) std::<span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">        x = fa[top[x]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dep[x] &lt; dep[y]) std::<span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//if (++cot[pos] == 1) cur++;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cot[a[pos]] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        ++cur;</span><br><span class=\"line\">    ++cot[a[pos]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//if (--cot[pos] == 0) cur--;</span></span><br><span class=\"line\">    --cot[a[pos]];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cot[a[pos]] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        --cur;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Add</span><span class=\"params\">(<span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//std::cout &lt;&lt; &quot;this is a test&quot; &lt;&lt; std::endl;</span></span><br><span class=\"line\">    <span class=\"comment\">//use[pos] ? del(a[pos]) : add(a[pos]);</span></span><br><span class=\"line\">    <span class=\"comment\">//use[pos] ^= 1;</span></span><br><span class=\"line\">    use[pos] ? <span class=\"built_in\">del</span>(pos) : <span class=\"built_in\">add</span>(pos);</span><br><span class=\"line\">    use[pos] ^= <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>(), m = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">        a[i] = date[i] = <span class=\"built_in\">read</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// discretization</span></span><br><span class=\"line\">    std::<span class=\"built_in\">sort</span>(date + <span class=\"number\">1</span>, date + <span class=\"number\">1</span> + n);</span><br><span class=\"line\">    <span class=\"type\">int</span> num = std::<span class=\"built_in\">unique</span>(date + <span class=\"number\">1</span>, date + <span class=\"number\">1</span> + n) - date - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">        a[i] = std::<span class=\"built_in\">lower_bound</span>(date + <span class=\"number\">1</span>, date + <span class=\"number\">1</span> + n, a[i]) - date;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> x, y;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n - <span class=\"number\">1</span>; ++i) &#123;</span><br><span class=\"line\">        x = <span class=\"built_in\">read</span>(), y = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(x, y);</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(y, x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs1</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">dfs2</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> block = <span class=\"built_in\">sqrt</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n * <span class=\"number\">2</span>; ++i)</span><br><span class=\"line\">        bel[i] = i / block + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//int x, y;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> ancestor;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">        x = <span class=\"built_in\">read</span>(), y = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fir[x] &gt; fir[y]) std::<span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">        ancestor = <span class=\"built_in\">lca</span>(x, y);</span><br><span class=\"line\">        q[i].id = i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ancestor == x) &#123;</span><br><span class=\"line\">            q[i].l = fir[x]; <span class=\"comment\">// 欧拉序中的位置</span></span><br><span class=\"line\">            q[i].r = fir[y];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            q[i].l = las[x];</span><br><span class=\"line\">            q[i].r = fir[y];</span><br><span class=\"line\">            q[i].lca = ancestor;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::<span class=\"built_in\">sort</span>(q + <span class=\"number\">1</span>, q + <span class=\"number\">1</span> + m, cmp2);</span><br><span class=\"line\">    <span class=\"type\">int</span> l = <span class=\"number\">1</span>, r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &lt; q[i].l) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">Add</span>(id[l]);</span><br><span class=\"line\">            l++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (r &gt; q[i].r) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">Add</span>(id[r]);</span><br><span class=\"line\">            r--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &gt; q[i].l) &#123;</span><br><span class=\"line\">            l--;</span><br><span class=\"line\">            <span class=\"built_in\">Add</span>(id[l]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (r &lt; q[i].r) &#123;</span><br><span class=\"line\">            r++;</span><br><span class=\"line\">            <span class=\"built_in\">Add</span>(id[r]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q[i].lca)</span><br><span class=\"line\">            <span class=\"built_in\">Add</span>(q[i].lca);</span><br><span class=\"line\">        q[i].ans = cur;</span><br><span class=\"line\">        <span class=\"comment\">// std::cout &lt;&lt; &quot;htih&quot; &lt;&lt; std::endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q[i].lca)</span><br><span class=\"line\">            <span class=\"built_in\">Add</span>(q[i].lca);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i)</span><br><span class=\"line\">        ans[q[i].id] = q[i].ans;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"莫队算法的扩展——回滚莫队\"><a href=\"#莫队算法的扩展——回滚莫队\" class=\"headerlink\" title=\"莫队算法的扩展——回滚莫队\"></a>莫队算法的扩展——回滚莫队</h3><p><img src=\"C:\\Users\\梁云森\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230724130521246.png\" alt=\"image-20230724130521246\"></p>\n<p>感觉细节有一些多，比较麻烦的</p>\n<h4 id=\"例题-2\"><a href=\"#例题-2\" class=\"headerlink\" title=\"例题\"></a>例题</h4><p><a href=\"https://www.luogu.com.cn/problem/AT_joisc2014_c\">AT_joisc2014_c 歴史の研究</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\">ll n, m, Max, tot, a[N], b[N], st[N], ed[N], bel[N], ans[N], cnt[N], c[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Question</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">    <span class=\"type\">int</span> id;</span><br><span class=\"line\">&#125; q[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(Question x, Question y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bel[x.l] == bel[y.l] ? x.r &lt; y.r : bel[x.l] &lt; bel[y.l];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ll x = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(c)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>) f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(c)) x = x * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>, c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">    ++cnt[a[pos]];</span><br><span class=\"line\">    Max = std::<span class=\"built_in\">max</span>(Max, cnt[a[pos]] * b[a[pos]]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>(), m = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">        a[i] = b[i] = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// discretization</span></span><br><span class=\"line\">    std::<span class=\"built_in\">sort</span>(b + <span class=\"number\">1</span>, b + <span class=\"number\">1</span> + n);</span><br><span class=\"line\">    <span class=\"type\">int</span> len = std::<span class=\"built_in\">unique</span>(b + <span class=\"number\">1</span>, b + <span class=\"number\">1</span> + n) - b - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">        a[i] = std::<span class=\"built_in\">lower_bound</span>(b + <span class=\"number\">1</span>, b + <span class=\"number\">1</span> + len, a[i]) - b;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// split block </span></span><br><span class=\"line\">    ll block = <span class=\"built_in\">sqrt</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= block; ++i) &#123;</span><br><span class=\"line\">        st[i] = n / block * (i - <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        ed[i] = n / block * i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ed[block] = n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= block; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = st[i]; j &lt;= ed[i]; ++j)</span><br><span class=\"line\">            bel[j] = i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// sort question </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">        q[i].l = <span class=\"built_in\">read</span>(), q[i].r = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        q[i].id = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    std::<span class=\"built_in\">sort</span>(q + <span class=\"number\">1</span>, q + <span class=\"number\">1</span> + m, cmp);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// mo</span></span><br><span class=\"line\">    <span class=\"type\">int</span> p = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= block; ++i) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l;</span><br><span class=\"line\">        <span class=\"type\">int</span> r = ed[i];</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(cnt, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span> (cnt));</span><br><span class=\"line\">        Max = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (bel[q[p].l] == i) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// std::cout &lt;&lt; &quot;sdasda&quot;;</span></span><br><span class=\"line\">            <span class=\"comment\">//Max = -1;</span></span><br><span class=\"line\">            tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">            l = ed[i] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bel[q[p].l] == bel[q[p].r]) &#123;</span><br><span class=\"line\">                ll cur = Max;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = q[p].l; j &lt;= q[p].r; ++j) &#123;</span><br><span class=\"line\">                    ++cnt[a[j]];</span><br><span class=\"line\">                    c[++tot] = a[j];</span><br><span class=\"line\">                    Max = std::<span class=\"built_in\">max</span>(Max, cnt[a[j]] * b[a[j]]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                ans[q[p].id] = Max;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= tot; ++j)</span><br><span class=\"line\">                    --cnt[c[j]];</span><br><span class=\"line\">                ++p;</span><br><span class=\"line\">                Max = cur;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (r &lt; q[p].r)</span><br><span class=\"line\">                <span class=\"built_in\">add</span>(++r);</span><br><span class=\"line\">            ll cur = Max;</span><br><span class=\"line\">            <span class=\"comment\">//std::cout &lt;&lt; &quot;cur: &quot; &lt;&lt; cur &lt;&lt; std::endl;</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (l &gt; q[p].l)</span><br><span class=\"line\">                <span class=\"built_in\">add</span>(--l);</span><br><span class=\"line\">            ans[q[p].id] = Max;</span><br><span class=\"line\">            Max = cur;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (l &lt;= ed[i]) </span><br><span class=\"line\">                --cnt[a[l++]];</span><br><span class=\"line\">            ++p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// output</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"C:\\Users\\梁云森\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230725000620621.png\" alt=\"image-20230725000620621\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.cnblogs.com/WAMonster/p/10118934.html\">莫队算法——从入门到黑题 - WAMonster - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/115243708\">算法学习笔记(24): 莫队 - 知乎 (zhihu.com)</a></p>\n<p>OIwiki</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>莫队</strong>，是莫涛发明的一种解决区间查询等问题的 <strong>离线算法</strong>，基于 <strong>分块</strong> 思想，复杂度为 $O(n\\sqrt{n})$</p>\n<p>一般来说，如果可以在 $O(1)$ 内从 $[l, r]$ 的答案转移到 $[l - 1, r]、[l + 1, r]、[l, r - 1]、[l, r + 1]$ 这四个与之紧邻的区间的答案，则可以考虑使用莫队。</p>\n<h4 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h4><p><a href=\"https://www.luogu.com.cn/problem/SP3267\">DQUERY - D-query - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>\n<p>HH 的项链弱化版</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e6</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> M = <span class=\"number\">1e6</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> Q = <span class=\"number\">1e6</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, vis[M], bel[N], a[N], st[N], ed[N], cnt[M], ans[N];</span><br><span class=\"line\"><span class=\"type\">int</span> l, r, cur;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Question</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">    <span class=\"type\">int</span> num;</span><br><span class=\"line\">&#125; q[Q];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> len = <span class=\"built_in\">sqrt</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= len; ++i) &#123;</span><br><span class=\"line\">        st[i] = n / len * (i - <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        ed[i] = n / len * i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ed[len] = n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= len; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = st[i]; j &lt;= ed[i]; ++j)</span><br><span class=\"line\">            bel[j] = i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(c)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>) f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(c)) x = x * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>, c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(Question x, Question y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bel[x.l] == bel[y.l] ? bel[x.r] &lt; bel[y.r] : bel[x.l] &lt; bel[y.l];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cnt[a[pos]] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        ++cur;</span><br><span class=\"line\">    ++cnt[a[pos]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">    --cnt[a[pos]];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cnt[a[pos]] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        --cur;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">        a[i] = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"built_in\">init</span>();</span><br><span class=\"line\">    m = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">        q[i].l = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        q[i].r = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        q[i].num = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(q + <span class=\"number\">1</span>, q + <span class=\"number\">1</span> + m, cmp);</span><br><span class=\"line\">    l = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &gt; q[i].l) </span><br><span class=\"line\">            <span class=\"built_in\">add</span>(--l);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (r &lt; q[i].r)</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(++r);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &lt; q[i].l) </span><br><span class=\"line\">            <span class=\"built_in\">del</span>(l++);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (r &gt; q[i].r)</span><br><span class=\"line\">            <span class=\"built_in\">del</span>(r--);</span><br><span class=\"line\">        ans[q[i].num] = cur;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"莫队算法的扩展-——-带修莫队\"><a href=\"#莫队算法的扩展-——-带修莫队\" class=\"headerlink\" title=\"莫队算法的扩展 —— 带修莫队\"></a>莫队算法的扩展 —— 带修莫队</h3><p>前面说过，莫队算法是离线算法，不支持修改，强制在线需要另寻他法。但是对于某些允许离线的带修改区间查询来说，莫队还是能大展拳脚的。做法就是把莫队直接加上一维，变为带修莫队。</p>\n<p>我们的做法是把修改操作编号，称为「时间戳」。</p>\n<p>跑主算法时定义当前时间戳为 t，对于每个查询操作，如果当前时间戳相对太大了，说明已进行的修改操作比要求的多，就把之前改的改回来，反之往后改。只有当当前区间和查询区间左右端点、时间戳均重合时，才认定区间完全重合，此时的答案才是本次查询的最终答案。</p>\n<p><strong>跑主算法时定义当前时间戳为 t，对于每个查询操作，如果当前时间戳相对太大了，说明已进行的修改操作比要求的多，就把之前改的改回来，反之往后改。只有当当前区间和查询区间左右端点、时间戳均重合时，才认定区间完全重合，此时的答案才是本次查询的最终答案。</strong></p>\n<h4 id=\"例题-1\"><a href=\"#例题-1\" class=\"headerlink\" title=\"例题\"></a>例题</h4><p><a href=\"https://www.luogu.com.cn/problem/P1903\">P1903 [国家集训队] 数颜色 / 维护队列 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">133335</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> M = <span class=\"number\">1e6</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, bel[N], st[N], ed[N], a[N], len;</span><br><span class=\"line\"><span class=\"type\">int</span> cnt_1, cnt_2, vis[M], ans[N], cur;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Question_1</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">    <span class=\"type\">int</span> time;</span><br><span class=\"line\">    <span class=\"type\">int</span> id;</span><br><span class=\"line\">&#125; q1[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Question_2</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> pos;</span><br><span class=\"line\">    <span class=\"type\">int</span> col;</span><br><span class=\"line\">&#125; q2[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(c)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>) f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(c)) x = x * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>, c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    len = sqrt(n);</span></span><br><span class=\"line\"><span class=\"comment\">    for (int i = 1; i &lt;= len; ++i) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        st[i] = n / len * (i - 1) + 1;</span></span><br><span class=\"line\"><span class=\"comment\">        ed[i] = n / len * i;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    ed[len] = n;</span></span><br><span class=\"line\"><span class=\"comment\">    for (int i = 1; i &lt;= len; ++i)</span></span><br><span class=\"line\"><span class=\"comment\">        for (int j = st[i]; j &lt;= ed[i]; ++j)</span></span><br><span class=\"line\"><span class=\"comment\">            bel[j] = i;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    len = <span class=\"built_in\">pow</span>(n, <span class=\"number\">2.0</span> / <span class=\"number\">3.0</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> num = <span class=\"built_in\">ceil</span>((<span class=\"type\">double</span>)n / len);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= num; ++i) &#123;</span><br><span class=\"line\">        st[i] = len * (i - <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        ed[i] = len * i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ed[num] = n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= num; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = st[i]; j &lt;= ed[i]; ++j)</span><br><span class=\"line\">            bel[j] = i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(Question_1 x, Question_1 y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bel[x.l] == bel[y.l] ? (bel[x.r] == bel[y.r] ? x.time &lt; y.time : bel[x.r] &lt; bel[y.r]) : bel[x.l] &lt; bel[y.l]; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vis[a[pos]] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        ++cur;</span><br><span class=\"line\">    ++vis[a[pos]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">    --vis[a[pos]];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vis[a[pos]] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        --cur;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>(), m = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">        a[i] = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"built_in\">init</span>();</span><br><span class=\"line\">    <span class=\"type\">char</span> opt;</span><br><span class=\"line\">    <span class=\"type\">int</span> x, y;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">        std::cin &gt;&gt; opt &gt;&gt; x &gt;&gt; y;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (opt == <span class=\"string\">&#x27;Q&#x27;</span>) &#123;</span><br><span class=\"line\">            q1[++cnt_1].l = x;</span><br><span class=\"line\">            q1[cnt_1].r = y;</span><br><span class=\"line\">            q1[cnt_1].time = cnt_2;</span><br><span class=\"line\">            q1[cnt_1].id = cnt_1;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            q2[++cnt_2].col = y;</span><br><span class=\"line\">            q2[cnt_2].pos = x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//std::cout &lt;&lt; &quot;no error&quot; &lt;&lt; std::endl;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    std::<span class=\"built_in\">sort</span>(q1 + <span class=\"number\">1</span>, q1 + <span class=\"number\">1</span> + cnt_1, cmp);</span><br><span class=\"line\">    <span class=\"type\">int</span> l = <span class=\"number\">1</span>, r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= cnt_1; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &gt; q1[i].l)</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(--l);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (r &lt; q1[i].r)</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(++r);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &lt; q1[i].l)</span><br><span class=\"line\">            <span class=\"built_in\">del</span>(l++);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (r &gt; q1[i].r)</span><br><span class=\"line\">            <span class=\"built_in\">del</span>(r--);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (t &lt; q1[i].time) &#123;</span><br><span class=\"line\">            ++t;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (q1[i].l &lt;= q2[t].pos &amp;&amp; q2[t].pos &lt;= q1[i].r) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">del</span>(q2[t].pos);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (vis[q2[t].col] == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    ++cur;</span><br><span class=\"line\">                ++vis[q2[t].col];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            std::<span class=\"built_in\">swap</span>(a[q2[t].pos], q2[t].col);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (t &gt; q1[i].time) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (q1[i].l &lt;= q2[t].pos &amp;&amp; q2[t].pos &lt;= q1[i].r) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">del</span>(q2[t].pos);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (vis[q2[t].col] == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    ++cur;</span><br><span class=\"line\">                ++vis[q2[t].col];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            std::<span class=\"built_in\">swap</span>(a[q2[t].pos], q2[t].col);</span><br><span class=\"line\">            --t;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans[q1[i].id] = cur;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= cnt_1; ++i)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这一道题目块的大小取得 $n^{\\frac{2}{3}} $ 时时间复杂度最小。如果还是 $\\sqrt{n}$ 的话，会超时。</p>\n<h3 id=\"莫队算法的扩展-——-树上莫队\"><a href=\"#莫队算法的扩展-——-树上莫队\" class=\"headerlink\" title=\"莫队算法的扩展 —— 树上莫队\"></a>莫队算法的扩展 —— 树上莫队</h3><p>前面我们所使用的莫队都是在一维的序列上进行，即使加了一维的时间轴，但是主题还是一维序列。那么树上统计问题能否用莫队来处理呢？答案是肯定的。</p>\n<p>但是普通的 dfs 序没有办法确定一个对应区间</p>\n<p>使用 <strong>欧拉序</strong>，可以解决许多普通 dfs 序无法解决的问题（就比如树上莫队）。</p>\n<p><img src=\"C:\\Users\\梁云森\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230723182411099.png\" alt=\"image-20230723182411099\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">4e4</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> M = <span class=\"number\">1e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, cur, cnt, tot, date[N], a[N], dep[N], top[N], fa[N], bel[N &lt;&lt; <span class=\"number\">1</span>], siz[N], son[N], head[N], st[N &lt;&lt; <span class=\"number\">1</span>], ed[N &lt;&lt; <span class=\"number\">1</span>], id[N], fir[N], las[N], use[N &lt;&lt; <span class=\"number\">1</span>], ans[M], cot[N &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Edge</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> nxt, to;</span><br><span class=\"line\">&#125; e[N &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Question</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">    <span class=\"type\">int</span> id;</span><br><span class=\"line\">    <span class=\"type\">int</span> lca;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans;</span><br><span class=\"line\">&#125; q[M];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp2</span><span class=\"params\">(Question x, Question y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bel[x.l] == bel[y.l] ? x.r &lt; y.r : bel[x.l] &lt; bel[y.l];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(c)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>) f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(c)) x = x * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>, c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    e[++cnt].nxt = head[x];</span><br><span class=\"line\">    e[cnt].to = y;</span><br><span class=\"line\">    head[x] = cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs1</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> f)</span> </span>&#123;</span><br><span class=\"line\">    dep[x] = dep[f] + <span class=\"number\">1</span>;</span><br><span class=\"line\">    fa[x] = f;</span><br><span class=\"line\">    siz[x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> Max = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    id[++tot] = x;</span><br><span class=\"line\">    fir[x] = tot;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = head[x]; i ; i = e[i].nxt) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> to = e[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (to == f) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs1</span>(to, x);</span><br><span class=\"line\">        siz[x] += siz[to];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (siz[to] &gt; Max) &#123;</span><br><span class=\"line\">            Max = siz[to];</span><br><span class=\"line\">            son[x] = to;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    id[++tot] = x;</span><br><span class=\"line\">    las[x] = tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> tp)</span> </span>&#123;</span><br><span class=\"line\">    top[x] = tp;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!son[x]) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    <span class=\"built_in\">dfs2</span>(son[x], tp);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = head[x]; i ; i = e[i].nxt) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> to = e[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (to == fa[x] || to == son[x]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs2</span>(to, to);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (top[x] != top[y]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dep[top[x]] &lt; dep[top[y]]) std::<span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">        x = fa[top[x]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dep[x] &lt; dep[y]) std::<span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//if (++cot[pos] == 1) cur++;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cot[a[pos]] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        ++cur;</span><br><span class=\"line\">    ++cot[a[pos]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//if (--cot[pos] == 0) cur--;</span></span><br><span class=\"line\">    --cot[a[pos]];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cot[a[pos]] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        --cur;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Add</span><span class=\"params\">(<span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//std::cout &lt;&lt; &quot;this is a test&quot; &lt;&lt; std::endl;</span></span><br><span class=\"line\">    <span class=\"comment\">//use[pos] ? del(a[pos]) : add(a[pos]);</span></span><br><span class=\"line\">    <span class=\"comment\">//use[pos] ^= 1;</span></span><br><span class=\"line\">    use[pos] ? <span class=\"built_in\">del</span>(pos) : <span class=\"built_in\">add</span>(pos);</span><br><span class=\"line\">    use[pos] ^= <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>(), m = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">        a[i] = date[i] = <span class=\"built_in\">read</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// discretization</span></span><br><span class=\"line\">    std::<span class=\"built_in\">sort</span>(date + <span class=\"number\">1</span>, date + <span class=\"number\">1</span> + n);</span><br><span class=\"line\">    <span class=\"type\">int</span> num = std::<span class=\"built_in\">unique</span>(date + <span class=\"number\">1</span>, date + <span class=\"number\">1</span> + n) - date - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">        a[i] = std::<span class=\"built_in\">lower_bound</span>(date + <span class=\"number\">1</span>, date + <span class=\"number\">1</span> + n, a[i]) - date;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> x, y;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n - <span class=\"number\">1</span>; ++i) &#123;</span><br><span class=\"line\">        x = <span class=\"built_in\">read</span>(), y = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(x, y);</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(y, x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs1</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">dfs2</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> block = <span class=\"built_in\">sqrt</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n * <span class=\"number\">2</span>; ++i)</span><br><span class=\"line\">        bel[i] = i / block + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//int x, y;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> ancestor;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">        x = <span class=\"built_in\">read</span>(), y = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fir[x] &gt; fir[y]) std::<span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">        ancestor = <span class=\"built_in\">lca</span>(x, y);</span><br><span class=\"line\">        q[i].id = i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ancestor == x) &#123;</span><br><span class=\"line\">            q[i].l = fir[x]; <span class=\"comment\">// 欧拉序中的位置</span></span><br><span class=\"line\">            q[i].r = fir[y];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            q[i].l = las[x];</span><br><span class=\"line\">            q[i].r = fir[y];</span><br><span class=\"line\">            q[i].lca = ancestor;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::<span class=\"built_in\">sort</span>(q + <span class=\"number\">1</span>, q + <span class=\"number\">1</span> + m, cmp2);</span><br><span class=\"line\">    <span class=\"type\">int</span> l = <span class=\"number\">1</span>, r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &lt; q[i].l) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">Add</span>(id[l]);</span><br><span class=\"line\">            l++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (r &gt; q[i].r) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">Add</span>(id[r]);</span><br><span class=\"line\">            r--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &gt; q[i].l) &#123;</span><br><span class=\"line\">            l--;</span><br><span class=\"line\">            <span class=\"built_in\">Add</span>(id[l]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (r &lt; q[i].r) &#123;</span><br><span class=\"line\">            r++;</span><br><span class=\"line\">            <span class=\"built_in\">Add</span>(id[r]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q[i].lca)</span><br><span class=\"line\">            <span class=\"built_in\">Add</span>(q[i].lca);</span><br><span class=\"line\">        q[i].ans = cur;</span><br><span class=\"line\">        <span class=\"comment\">// std::cout &lt;&lt; &quot;htih&quot; &lt;&lt; std::endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q[i].lca)</span><br><span class=\"line\">            <span class=\"built_in\">Add</span>(q[i].lca);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i)</span><br><span class=\"line\">        ans[q[i].id] = q[i].ans;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"莫队算法的扩展——回滚莫队\"><a href=\"#莫队算法的扩展——回滚莫队\" class=\"headerlink\" title=\"莫队算法的扩展——回滚莫队\"></a>莫队算法的扩展——回滚莫队</h3><p><img src=\"C:\\Users\\梁云森\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230724130521246.png\" alt=\"image-20230724130521246\"></p>\n<p>感觉细节有一些多，比较麻烦的</p>\n<h4 id=\"例题-2\"><a href=\"#例题-2\" class=\"headerlink\" title=\"例题\"></a>例题</h4><p><a href=\"https://www.luogu.com.cn/problem/AT_joisc2014_c\">AT_joisc2014_c 歴史の研究</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\">ll n, m, Max, tot, a[N], b[N], st[N], ed[N], bel[N], ans[N], cnt[N], c[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Question</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">    <span class=\"type\">int</span> id;</span><br><span class=\"line\">&#125; q[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(Question x, Question y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bel[x.l] == bel[y.l] ? x.r &lt; y.r : bel[x.l] &lt; bel[y.l];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ll x = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(c)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>) f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(c)) x = x * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>, c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">    ++cnt[a[pos]];</span><br><span class=\"line\">    Max = std::<span class=\"built_in\">max</span>(Max, cnt[a[pos]] * b[a[pos]]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>(), m = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">        a[i] = b[i] = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// discretization</span></span><br><span class=\"line\">    std::<span class=\"built_in\">sort</span>(b + <span class=\"number\">1</span>, b + <span class=\"number\">1</span> + n);</span><br><span class=\"line\">    <span class=\"type\">int</span> len = std::<span class=\"built_in\">unique</span>(b + <span class=\"number\">1</span>, b + <span class=\"number\">1</span> + n) - b - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">        a[i] = std::<span class=\"built_in\">lower_bound</span>(b + <span class=\"number\">1</span>, b + <span class=\"number\">1</span> + len, a[i]) - b;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// split block </span></span><br><span class=\"line\">    ll block = <span class=\"built_in\">sqrt</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= block; ++i) &#123;</span><br><span class=\"line\">        st[i] = n / block * (i - <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        ed[i] = n / block * i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ed[block] = n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= block; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = st[i]; j &lt;= ed[i]; ++j)</span><br><span class=\"line\">            bel[j] = i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// sort question </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">        q[i].l = <span class=\"built_in\">read</span>(), q[i].r = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        q[i].id = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    std::<span class=\"built_in\">sort</span>(q + <span class=\"number\">1</span>, q + <span class=\"number\">1</span> + m, cmp);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// mo</span></span><br><span class=\"line\">    <span class=\"type\">int</span> p = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= block; ++i) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l;</span><br><span class=\"line\">        <span class=\"type\">int</span> r = ed[i];</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(cnt, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span> (cnt));</span><br><span class=\"line\">        Max = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (bel[q[p].l] == i) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// std::cout &lt;&lt; &quot;sdasda&quot;;</span></span><br><span class=\"line\">            <span class=\"comment\">//Max = -1;</span></span><br><span class=\"line\">            tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">            l = ed[i] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bel[q[p].l] == bel[q[p].r]) &#123;</span><br><span class=\"line\">                ll cur = Max;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = q[p].l; j &lt;= q[p].r; ++j) &#123;</span><br><span class=\"line\">                    ++cnt[a[j]];</span><br><span class=\"line\">                    c[++tot] = a[j];</span><br><span class=\"line\">                    Max = std::<span class=\"built_in\">max</span>(Max, cnt[a[j]] * b[a[j]]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                ans[q[p].id] = Max;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= tot; ++j)</span><br><span class=\"line\">                    --cnt[c[j]];</span><br><span class=\"line\">                ++p;</span><br><span class=\"line\">                Max = cur;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (r &lt; q[p].r)</span><br><span class=\"line\">                <span class=\"built_in\">add</span>(++r);</span><br><span class=\"line\">            ll cur = Max;</span><br><span class=\"line\">            <span class=\"comment\">//std::cout &lt;&lt; &quot;cur: &quot; &lt;&lt; cur &lt;&lt; std::endl;</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (l &gt; q[p].l)</span><br><span class=\"line\">                <span class=\"built_in\">add</span>(--l);</span><br><span class=\"line\">            ans[q[p].id] = Max;</span><br><span class=\"line\">            Max = cur;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (l &lt;= ed[i]) </span><br><span class=\"line\">                --cnt[a[l++]];</span><br><span class=\"line\">            ++p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// output</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"C:\\Users\\梁云森\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230725000620621.png\" alt=\"image-20230725000620621\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.cnblogs.com/WAMonster/p/10118934.html\">莫队算法——从入门到黑题 - WAMonster - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/115243708\">算法学习笔记(24): 莫队 - 知乎 (zhihu.com)</a></p>\n<p>OIwiki</p>\n"},{"title":"规划论模型","date":"2023-08-26T02:42:15.000Z","description":"The key record of mathematical modeling.","mathjax":true,"_content":"规划论模型也成为运筹与优化模型，在实际问题的建模中应用最为广泛，涉及面较广。\n\n#### 线性规划\n通常对于只有两个决策变量的情形，可以使用图解法加以求解。而对于大于两个决策变量的情形，需要借助单纯形方法加以求解。单纯形方法的基本思想是迭代思想的一种体现。首先找到初始可行解，并通过迭代逐步从可行域的一个顶点走向另一个顶点，最终走到最优解。\n{%asset_img linprog.png%}\n下面的例题：\n{%asset_img problem1.jpg%}\n其中，求 max，所以我们把 z 的系数取反。第二个不等式是大于等于，我们也同样取反。\n```\nf = [-1; -2; 3];\nA = [3 2 1; -4 -7 6];\nb = [6; -8];\nAeq = [2 1 5];\nbeq = [4];\nvlb = [0; 0; 0];\nvub= [];\n[x, fval] = linprog(f, A, b, Aeq, beq, vlb, vub)\n```\n##### 运输问题\n较为常见的运输模型叙述如下：\n> 某物资有 m 个原产地 $A_i$，产量为 $a_i$；有 n 个销地 $B_j$，销量关系为 $b_j$，从 $A_i$ 到 $B_j$ 之间的单位物资运价为 $d_{ij}$，则产销平衡时有 $\\sum\\limits_{i = 1}^{m}a_i = \\sum\\limits_{j = 1}^{n} b_j$\n\n\n##### 多目标规划问题\n在建立优化模型时有时追求的目标可能是多个，无论忽略其中的哪个因素可能都会降低优化结果的可信度。对于这类问题通常有下面的三种处理方式：\n1. 为每个目标设置重要性权重。\n    当存在 n 个目标时，首先对目标函数进行归一化处理（就是消除量纲的影响，进行标准统一）后分别设置自己的权重，假设第 i 个目标的权重为 $\\alpha_i$，目标取值为 $M_i$，则可以建立下面的优化模型：$\\max \\alpha_1M_1 + \\alpha_2M_2 + ... + \\alpha_nM_n$\n2. 为各种目标设定优先权，并将模型转化为多个优化模型。\n3. 分别求得个目标的最优值后，将主要目标设定为目标函数，而将次要目标适当调整后修改为约束条件。\n\n#### 适度指标的线性处理\n适度指标是指该指标的他正是数据大了或者小了均不好，要充分地接近于某一事先给定的标准指标，比如水的 PH 值。\n求 $\\min |x - D|$，D 为数据指标的理想取值。\n例题：\n一个富豪准备拿 10 万元买股票。经过他的筛选，有三种候选投资股票。这三种股票的价格、收益率以及风险系数如表所示：\n{%asset_img 股票.png%}\n这是一个多规划问题，我们如果直接列两个不等式的话，可能存在无解的情况。所以我们可以采取上面所说的方法2，建立如下的两个不等式条件：\n{%asset_img 等式.png%}\n如果我们优先考虑投资的风险，就可以建立下面的线性规划模型：\n{%asset_img 模型.png%}\n```\nclear all\nAeq = [1 3 5 1 -1 0 0; 2 5 8 0 0 1 -1; 10 20 30 0 0 0 0];\nbeq = [15000; 25000; 100000];\nf = zeros(7, 1);\nf(5) = 1;\nvlb = zeros(7, 1);\nvub = [];\na = [];\nb = [];\n[x, y] = linprog(f, a, b, Aeq, beq, vlb, vub);\nfx = x(1) + 3 * x(2) + 5 * x(3)\nlr = 2 * x(1) + 5 * x(2) + 8 * x(3)\n```\n\n#### 整数规划\n在线性规划模型中，如果各个决策变量的取值均为整数，则称此类模型为整数规划模型。\n整数规划的解法主要有穷举法(变量维数较高时不可行)、舍入凑整法、分支定界法(比较可行)、割平面法(比较可行)等。\n1. 舍入凑整法\n    感觉很是玄学，就是假装没有整数约束，求解出最优解后每个变量往下或者上取整比较一下。\n2. 分支界定法\n    如果不满足整数条件，任选一个不满足整数条件的变量来构造新的约束，在原可行域中剔除部分非整数解。然后，再在缩小的可行域中求解新构造的线性规划的最优解（好抽象）。\n    步骤：\n    1. 解没有整数约束的问题。\n    2. 定界\n    3. 分支\n    4. 修改上下界\n    5. 比较与剪枝\n\n##### 0-1 型整数规划\n约束条件为 $0 \\leq x_i \\leq 1,x_i$ 为整数。这样就和一般的整数规划问题统一了。 \n\n{%asset_img 整数规划.png 整数规划求解函数%}\n实例：\n```\nf = [-3; 2; -5];\nintcon = [1, 2, 3]; % 表示哪几个变量为整数\nA = [1 2 -1; 1 4 1; 1 1 0; 4 0 1];\nb = [2; 4; 3; 6];\nAeq = [];\nbeq = [];\nlb = [0; 0; 0]; % 如果下界为 0 上界为 1，其实就是 0-1 整数规划了。\nrb = [1; 1; 1];\n[x, val] = intlinprog(f, intcon, A, b, Aeq, beq, lb, rb)\n```\n\n##### 指派问题\n{%asset_img 指派问题.png 指派问题%}\n当人数和任务的个数不同的时候，会出现某些人没有任务可做或者某些任务无人完成的情况。出现这两种情况的时候只需将约束条件中的某一个等于 1 的约束条件修改为小于等于 1 即可。有时也可以一对多（一个人多任务，一个任务多个人）。\n2013 年碎纸片拼接复原问题 1：\n```\ncell{1,1}=imread('000.bmp');\ncell{1,2}=imread('001.bmp');\ncell{1,3}=imread('002.bmp');\ncell{1,4}=imread('003.bmp');\ncell{1,5}=imread('004.bmp');\ncell{1,6}=imread('005.bmp');\ncell{1,7}=imread('006.bmp');\ncell{1,8}=imread('007.bmp');\ncell{1,9}=imread('008.bmp');\ncell{1,10}=imread('009.bmp');\ncell{1,11}=imread('010.bmp');\ncell{1,12}=imread('011.bmp');\ncell{1,13}=imread('012.bmp');\ncell{1,14}=imread('013.bmp');\ncell{1,15}=imread('014.bmp');\ncell{1,16}=imread('015.bmp');\ncell{1,17}=imread('016.bmp');\ncell{1,18}=imread('017.bmp');\ncell{1,19}=imread('018.bmp');\n\nfor i=1:19\nlevel=graythresh(cell{1,i});%选择灰度阈值\ncell1{1,i}=im2bw(cell{1,i},level); %将图像二值化\nend\n\nfor i=1:19                %循环19个图像\n    for k=1:19\n        xs(i,k)=0;\n        for j=1:1980\n            if (cell1{1,i}(j,72)==cell1{1,k}(j,1))%判断图像的边缘信息特征，求相似度矩阵\n                xs(i,k)=1+xs(i,k);\n            end\n        end\n    end\nend\n\nfor i=1:19\n    xs(i,i)\nend\n\nfor i=1:19 \nda(i)=max(xs(i,:));\nend\nwei=find(da==max(da));for i=1:19\n    k=find(xs(i,[1:19])==da(i));  %求两两相邻的矩阵\n    lian(i,1)=i;                  %前面一个\n    lian(i,2)=k;                  %后面一个\nend\nlian(wei,1)=0;\ntou=lian(wei,2);\nxu(1)=tou;\nfor i=1:18\n    xu(i+1)=lian(xu(i),2);        %正确的排列顺序\nend\n%根据排出来顺序xu画图\nfor i=1:19\nI(:,[72*(i-1)+1:72*i])=cell{1,xu(i)};   %图像的整合\nend\n\nimwrite(I,'hanzi.jpg','quality',100);\nimshow('hanzi.jpg')          %输出图像\n\n```\n\n##### 选址问题\n集合覆盖选址模型和最大覆盖选址模型。\n","source":"_posts/规划论模型.md","raw":"---\ntitle: 规划论模型\ndate: 2023-08-26 10:42:15\ntags: Mathematic\ndescription: The key record of mathematical modeling. \nmathjax: true\n---\n规划论模型也成为运筹与优化模型，在实际问题的建模中应用最为广泛，涉及面较广。\n\n#### 线性规划\n通常对于只有两个决策变量的情形，可以使用图解法加以求解。而对于大于两个决策变量的情形，需要借助单纯形方法加以求解。单纯形方法的基本思想是迭代思想的一种体现。首先找到初始可行解，并通过迭代逐步从可行域的一个顶点走向另一个顶点，最终走到最优解。\n{%asset_img linprog.png%}\n下面的例题：\n{%asset_img problem1.jpg%}\n其中，求 max，所以我们把 z 的系数取反。第二个不等式是大于等于，我们也同样取反。\n```\nf = [-1; -2; 3];\nA = [3 2 1; -4 -7 6];\nb = [6; -8];\nAeq = [2 1 5];\nbeq = [4];\nvlb = [0; 0; 0];\nvub= [];\n[x, fval] = linprog(f, A, b, Aeq, beq, vlb, vub)\n```\n##### 运输问题\n较为常见的运输模型叙述如下：\n> 某物资有 m 个原产地 $A_i$，产量为 $a_i$；有 n 个销地 $B_j$，销量关系为 $b_j$，从 $A_i$ 到 $B_j$ 之间的单位物资运价为 $d_{ij}$，则产销平衡时有 $\\sum\\limits_{i = 1}^{m}a_i = \\sum\\limits_{j = 1}^{n} b_j$\n\n\n##### 多目标规划问题\n在建立优化模型时有时追求的目标可能是多个，无论忽略其中的哪个因素可能都会降低优化结果的可信度。对于这类问题通常有下面的三种处理方式：\n1. 为每个目标设置重要性权重。\n    当存在 n 个目标时，首先对目标函数进行归一化处理（就是消除量纲的影响，进行标准统一）后分别设置自己的权重，假设第 i 个目标的权重为 $\\alpha_i$，目标取值为 $M_i$，则可以建立下面的优化模型：$\\max \\alpha_1M_1 + \\alpha_2M_2 + ... + \\alpha_nM_n$\n2. 为各种目标设定优先权，并将模型转化为多个优化模型。\n3. 分别求得个目标的最优值后，将主要目标设定为目标函数，而将次要目标适当调整后修改为约束条件。\n\n#### 适度指标的线性处理\n适度指标是指该指标的他正是数据大了或者小了均不好，要充分地接近于某一事先给定的标准指标，比如水的 PH 值。\n求 $\\min |x - D|$，D 为数据指标的理想取值。\n例题：\n一个富豪准备拿 10 万元买股票。经过他的筛选，有三种候选投资股票。这三种股票的价格、收益率以及风险系数如表所示：\n{%asset_img 股票.png%}\n这是一个多规划问题，我们如果直接列两个不等式的话，可能存在无解的情况。所以我们可以采取上面所说的方法2，建立如下的两个不等式条件：\n{%asset_img 等式.png%}\n如果我们优先考虑投资的风险，就可以建立下面的线性规划模型：\n{%asset_img 模型.png%}\n```\nclear all\nAeq = [1 3 5 1 -1 0 0; 2 5 8 0 0 1 -1; 10 20 30 0 0 0 0];\nbeq = [15000; 25000; 100000];\nf = zeros(7, 1);\nf(5) = 1;\nvlb = zeros(7, 1);\nvub = [];\na = [];\nb = [];\n[x, y] = linprog(f, a, b, Aeq, beq, vlb, vub);\nfx = x(1) + 3 * x(2) + 5 * x(3)\nlr = 2 * x(1) + 5 * x(2) + 8 * x(3)\n```\n\n#### 整数规划\n在线性规划模型中，如果各个决策变量的取值均为整数，则称此类模型为整数规划模型。\n整数规划的解法主要有穷举法(变量维数较高时不可行)、舍入凑整法、分支定界法(比较可行)、割平面法(比较可行)等。\n1. 舍入凑整法\n    感觉很是玄学，就是假装没有整数约束，求解出最优解后每个变量往下或者上取整比较一下。\n2. 分支界定法\n    如果不满足整数条件，任选一个不满足整数条件的变量来构造新的约束，在原可行域中剔除部分非整数解。然后，再在缩小的可行域中求解新构造的线性规划的最优解（好抽象）。\n    步骤：\n    1. 解没有整数约束的问题。\n    2. 定界\n    3. 分支\n    4. 修改上下界\n    5. 比较与剪枝\n\n##### 0-1 型整数规划\n约束条件为 $0 \\leq x_i \\leq 1,x_i$ 为整数。这样就和一般的整数规划问题统一了。 \n\n{%asset_img 整数规划.png 整数规划求解函数%}\n实例：\n```\nf = [-3; 2; -5];\nintcon = [1, 2, 3]; % 表示哪几个变量为整数\nA = [1 2 -1; 1 4 1; 1 1 0; 4 0 1];\nb = [2; 4; 3; 6];\nAeq = [];\nbeq = [];\nlb = [0; 0; 0]; % 如果下界为 0 上界为 1，其实就是 0-1 整数规划了。\nrb = [1; 1; 1];\n[x, val] = intlinprog(f, intcon, A, b, Aeq, beq, lb, rb)\n```\n\n##### 指派问题\n{%asset_img 指派问题.png 指派问题%}\n当人数和任务的个数不同的时候，会出现某些人没有任务可做或者某些任务无人完成的情况。出现这两种情况的时候只需将约束条件中的某一个等于 1 的约束条件修改为小于等于 1 即可。有时也可以一对多（一个人多任务，一个任务多个人）。\n2013 年碎纸片拼接复原问题 1：\n```\ncell{1,1}=imread('000.bmp');\ncell{1,2}=imread('001.bmp');\ncell{1,3}=imread('002.bmp');\ncell{1,4}=imread('003.bmp');\ncell{1,5}=imread('004.bmp');\ncell{1,6}=imread('005.bmp');\ncell{1,7}=imread('006.bmp');\ncell{1,8}=imread('007.bmp');\ncell{1,9}=imread('008.bmp');\ncell{1,10}=imread('009.bmp');\ncell{1,11}=imread('010.bmp');\ncell{1,12}=imread('011.bmp');\ncell{1,13}=imread('012.bmp');\ncell{1,14}=imread('013.bmp');\ncell{1,15}=imread('014.bmp');\ncell{1,16}=imread('015.bmp');\ncell{1,17}=imread('016.bmp');\ncell{1,18}=imread('017.bmp');\ncell{1,19}=imread('018.bmp');\n\nfor i=1:19\nlevel=graythresh(cell{1,i});%选择灰度阈值\ncell1{1,i}=im2bw(cell{1,i},level); %将图像二值化\nend\n\nfor i=1:19                %循环19个图像\n    for k=1:19\n        xs(i,k)=0;\n        for j=1:1980\n            if (cell1{1,i}(j,72)==cell1{1,k}(j,1))%判断图像的边缘信息特征，求相似度矩阵\n                xs(i,k)=1+xs(i,k);\n            end\n        end\n    end\nend\n\nfor i=1:19\n    xs(i,i)\nend\n\nfor i=1:19 \nda(i)=max(xs(i,:));\nend\nwei=find(da==max(da));for i=1:19\n    k=find(xs(i,[1:19])==da(i));  %求两两相邻的矩阵\n    lian(i,1)=i;                  %前面一个\n    lian(i,2)=k;                  %后面一个\nend\nlian(wei,1)=0;\ntou=lian(wei,2);\nxu(1)=tou;\nfor i=1:18\n    xu(i+1)=lian(xu(i),2);        %正确的排列顺序\nend\n%根据排出来顺序xu画图\nfor i=1:19\nI(:,[72*(i-1)+1:72*i])=cell{1,xu(i)};   %图像的整合\nend\n\nimwrite(I,'hanzi.jpg','quality',100);\nimshow('hanzi.jpg')          %输出图像\n\n```\n\n##### 选址问题\n集合覆盖选址模型和最大覆盖选址模型。\n","slug":"规划论模型","published":1,"updated":"2023-08-27T05:14:54.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szoj00215oog1oze7n4g","content":"<p>规划论模型也成为运筹与优化模型，在实际问题的建模中应用最为广泛，涉及面较广。</p>\n<h4 id=\"线性规划\"><a href=\"#线性规划\" class=\"headerlink\" title=\"线性规划\"></a>线性规划</h4><p>通常对于只有两个决策变量的情形，可以使用图解法加以求解。而对于大于两个决策变量的情形，需要借助单纯形方法加以求解。单纯形方法的基本思想是迭代思想的一种体现。首先找到初始可行解，并通过迭代逐步从可行域的一个顶点走向另一个顶点，最终走到最优解。<br><img src=\"/2023/08/26/%E8%A7%84%E5%88%92%E8%AE%BA%E6%A8%A1%E5%9E%8B/linprog.png\" class=\"\"><br>下面的例题：<br><img src=\"/2023/08/26/%E8%A7%84%E5%88%92%E8%AE%BA%E6%A8%A1%E5%9E%8B/problem1.jpg\" class=\"\"><br>其中，求 max，所以我们把 z 的系数取反。第二个不等式是大于等于，我们也同样取反。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = [-1; -2; 3];</span><br><span class=\"line\">A = [3 2 1; -4 -7 6];</span><br><span class=\"line\">b = [6; -8];</span><br><span class=\"line\">Aeq = [2 1 5];</span><br><span class=\"line\">beq = [4];</span><br><span class=\"line\">vlb = [0; 0; 0];</span><br><span class=\"line\">vub= [];</span><br><span class=\"line\">[x, fval] = linprog(f, A, b, Aeq, beq, vlb, vub)</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"运输问题\"><a href=\"#运输问题\" class=\"headerlink\" title=\"运输问题\"></a>运输问题</h5><p>较为常见的运输模型叙述如下：</p>\n<blockquote>\n<p>某物资有 m 个原产地 $A_i$，产量为 $a_i$；有 n 个销地 $B_j$，销量关系为 $b_j$，从 $A_i$ 到 $B_j$ 之间的单位物资运价为 $d_{ij}$，则产销平衡时有 $\\sum\\limits_{i = 1}^{m}a_i = \\sum\\limits_{j = 1}^{n} b_j$</p>\n</blockquote>\n<h5 id=\"多目标规划问题\"><a href=\"#多目标规划问题\" class=\"headerlink\" title=\"多目标规划问题\"></a>多目标规划问题</h5><p>在建立优化模型时有时追求的目标可能是多个，无论忽略其中的哪个因素可能都会降低优化结果的可信度。对于这类问题通常有下面的三种处理方式：</p>\n<ol>\n<li>为每个目标设置重要性权重。<br> 当存在 n 个目标时，首先对目标函数进行归一化处理（就是消除量纲的影响，进行标准统一）后分别设置自己的权重，假设第 i 个目标的权重为 $\\alpha_i$，目标取值为 $M_i$，则可以建立下面的优化模型：$\\max \\alpha_1M_1 + \\alpha_2M_2 + … + \\alpha_nM_n$</li>\n<li>为各种目标设定优先权，并将模型转化为多个优化模型。</li>\n<li>分别求得个目标的最优值后，将主要目标设定为目标函数，而将次要目标适当调整后修改为约束条件。</li>\n</ol>\n<h4 id=\"适度指标的线性处理\"><a href=\"#适度指标的线性处理\" class=\"headerlink\" title=\"适度指标的线性处理\"></a>适度指标的线性处理</h4><p>适度指标是指该指标的他正是数据大了或者小了均不好，要充分地接近于某一事先给定的标准指标，比如水的 PH 值。<br>求 $\\min |x - D|$，D 为数据指标的理想取值。<br>例题：<br>一个富豪准备拿 10 万元买股票。经过他的筛选，有三种候选投资股票。这三种股票的价格、收益率以及风险系数如表所示：<br><img src=\"/2023/08/26/%E8%A7%84%E5%88%92%E8%AE%BA%E6%A8%A1%E5%9E%8B/%E8%82%A1%E7%A5%A8.png\" class=\"\"><br>这是一个多规划问题，我们如果直接列两个不等式的话，可能存在无解的情况。所以我们可以采取上面所说的方法2，建立如下的两个不等式条件：<br><img src=\"/2023/08/26/%E8%A7%84%E5%88%92%E8%AE%BA%E6%A8%A1%E5%9E%8B/%E7%AD%89%E5%BC%8F.png\" class=\"\"><br>如果我们优先考虑投资的风险，就可以建立下面的线性规划模型：<br><img src=\"/2023/08/26/%E8%A7%84%E5%88%92%E8%AE%BA%E6%A8%A1%E5%9E%8B/%E6%A8%A1%E5%9E%8B.png\" class=\"\"><br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear all</span><br><span class=\"line\">Aeq = [1 3 5 1 -1 0 0; 2 5 8 0 0 1 -1; 10 20 30 0 0 0 0];</span><br><span class=\"line\">beq = [15000; 25000; 100000];</span><br><span class=\"line\">f = zeros(7, 1);</span><br><span class=\"line\">f(5) = 1;</span><br><span class=\"line\">vlb = zeros(7, 1);</span><br><span class=\"line\">vub = [];</span><br><span class=\"line\">a = [];</span><br><span class=\"line\">b = [];</span><br><span class=\"line\">[x, y] = linprog(f, a, b, Aeq, beq, vlb, vub);</span><br><span class=\"line\">fx = x(1) + 3 * x(2) + 5 * x(3)</span><br><span class=\"line\">lr = 2 * x(1) + 5 * x(2) + 8 * x(3)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"整数规划\"><a href=\"#整数规划\" class=\"headerlink\" title=\"整数规划\"></a>整数规划</h4><p>在线性规划模型中，如果各个决策变量的取值均为整数，则称此类模型为整数规划模型。<br>整数规划的解法主要有穷举法(变量维数较高时不可行)、舍入凑整法、分支定界法(比较可行)、割平面法(比较可行)等。</p>\n<ol>\n<li>舍入凑整法<br> 感觉很是玄学，就是假装没有整数约束，求解出最优解后每个变量往下或者上取整比较一下。</li>\n<li>分支界定法<br> 如果不满足整数条件，任选一个不满足整数条件的变量来构造新的约束，在原可行域中剔除部分非整数解。然后，再在缩小的可行域中求解新构造的线性规划的最优解（好抽象）。<br> 步骤：<ol>\n<li>解没有整数约束的问题。</li>\n<li>定界</li>\n<li>分支</li>\n<li>修改上下界</li>\n<li>比较与剪枝</li>\n</ol>\n</li>\n</ol>\n<h5 id=\"0-1-型整数规划\"><a href=\"#0-1-型整数规划\" class=\"headerlink\" title=\"0-1 型整数规划\"></a>0-1 型整数规划</h5><p>约束条件为 $0 \\leq x_i \\leq 1,x_i$ 为整数。这样就和一般的整数规划问题统一了。 </p>\n<img src=\"/2023/08/26/%E8%A7%84%E5%88%92%E8%AE%BA%E6%A8%A1%E5%9E%8B/%E6%95%B4%E6%95%B0%E8%A7%84%E5%88%92.png\" class=\"\" title=\"整数规划求解函数\">\n<p>实例：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = [-3; 2; -5];</span><br><span class=\"line\">intcon = [1, 2, 3]; % 表示哪几个变量为整数</span><br><span class=\"line\">A = [1 2 -1; 1 4 1; 1 1 0; 4 0 1];</span><br><span class=\"line\">b = [2; 4; 3; 6];</span><br><span class=\"line\">Aeq = [];</span><br><span class=\"line\">beq = [];</span><br><span class=\"line\">lb = [0; 0; 0]; % 如果下界为 0 上界为 1，其实就是 0-1 整数规划了。</span><br><span class=\"line\">rb = [1; 1; 1];</span><br><span class=\"line\">[x, val] = intlinprog(f, intcon, A, b, Aeq, beq, lb, rb)</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"指派问题\"><a href=\"#指派问题\" class=\"headerlink\" title=\"指派问题\"></a>指派问题</h5><img src=\"/2023/08/26/%E8%A7%84%E5%88%92%E8%AE%BA%E6%A8%A1%E5%9E%8B/%E6%8C%87%E6%B4%BE%E9%97%AE%E9%A2%98.png\" class=\"\" title=\"指派问题\">\n<p>当人数和任务的个数不同的时候，会出现某些人没有任务可做或者某些任务无人完成的情况。出现这两种情况的时候只需将约束条件中的某一个等于 1 的约束条件修改为小于等于 1 即可。有时也可以一对多（一个人多任务，一个任务多个人）。<br>2013 年碎纸片拼接复原问题 1：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cell&#123;1,1&#125;=imread(&#x27;000.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,2&#125;=imread(&#x27;001.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,3&#125;=imread(&#x27;002.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,4&#125;=imread(&#x27;003.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,5&#125;=imread(&#x27;004.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,6&#125;=imread(&#x27;005.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,7&#125;=imread(&#x27;006.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,8&#125;=imread(&#x27;007.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,9&#125;=imread(&#x27;008.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,10&#125;=imread(&#x27;009.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,11&#125;=imread(&#x27;010.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,12&#125;=imread(&#x27;011.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,13&#125;=imread(&#x27;012.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,14&#125;=imread(&#x27;013.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,15&#125;=imread(&#x27;014.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,16&#125;=imread(&#x27;015.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,17&#125;=imread(&#x27;016.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,18&#125;=imread(&#x27;017.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,19&#125;=imread(&#x27;018.bmp&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">for i=1:19</span><br><span class=\"line\">level=graythresh(cell&#123;1,i&#125;);%选择灰度阈值</span><br><span class=\"line\">cell1&#123;1,i&#125;=im2bw(cell&#123;1,i&#125;,level); %将图像二值化</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">for i=1:19                %循环19个图像</span><br><span class=\"line\">    for k=1:19</span><br><span class=\"line\">        xs(i,k)=0;</span><br><span class=\"line\">        for j=1:1980</span><br><span class=\"line\">            if (cell1&#123;1,i&#125;(j,72)==cell1&#123;1,k&#125;(j,1))%判断图像的边缘信息特征，求相似度矩阵</span><br><span class=\"line\">                xs(i,k)=1+xs(i,k);</span><br><span class=\"line\">            end</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">for i=1:19</span><br><span class=\"line\">    xs(i,i)</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">for i=1:19 </span><br><span class=\"line\">da(i)=max(xs(i,:));</span><br><span class=\"line\">end</span><br><span class=\"line\">wei=find(da==max(da));for i=1:19</span><br><span class=\"line\">    k=find(xs(i,[1:19])==da(i));  %求两两相邻的矩阵</span><br><span class=\"line\">    lian(i,1)=i;                  %前面一个</span><br><span class=\"line\">    lian(i,2)=k;                  %后面一个</span><br><span class=\"line\">end</span><br><span class=\"line\">lian(wei,1)=0;</span><br><span class=\"line\">tou=lian(wei,2);</span><br><span class=\"line\">xu(1)=tou;</span><br><span class=\"line\">for i=1:18</span><br><span class=\"line\">    xu(i+1)=lian(xu(i),2);        %正确的排列顺序</span><br><span class=\"line\">end</span><br><span class=\"line\">%根据排出来顺序xu画图</span><br><span class=\"line\">for i=1:19</span><br><span class=\"line\">I(:,[72*(i-1)+1:72*i])=cell&#123;1,xu(i)&#125;;   %图像的整合</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">imwrite(I,&#x27;hanzi.jpg&#x27;,&#x27;quality&#x27;,100);</span><br><span class=\"line\">imshow(&#x27;hanzi.jpg&#x27;)          %输出图像</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"选址问题\"><a href=\"#选址问题\" class=\"headerlink\" title=\"选址问题\"></a>选址问题</h5><p>集合覆盖选址模型和最大覆盖选址模型。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>规划论模型也成为运筹与优化模型，在实际问题的建模中应用最为广泛，涉及面较广。</p>\n<h4 id=\"线性规划\"><a href=\"#线性规划\" class=\"headerlink\" title=\"线性规划\"></a>线性规划</h4><p>通常对于只有两个决策变量的情形，可以使用图解法加以求解。而对于大于两个决策变量的情形，需要借助单纯形方法加以求解。单纯形方法的基本思想是迭代思想的一种体现。首先找到初始可行解，并通过迭代逐步从可行域的一个顶点走向另一个顶点，最终走到最优解。<br><img src=\"/2023/08/26/%E8%A7%84%E5%88%92%E8%AE%BA%E6%A8%A1%E5%9E%8B/linprog.png\" class=\"\"><br>下面的例题：<br><img src=\"/2023/08/26/%E8%A7%84%E5%88%92%E8%AE%BA%E6%A8%A1%E5%9E%8B/problem1.jpg\" class=\"\"><br>其中，求 max，所以我们把 z 的系数取反。第二个不等式是大于等于，我们也同样取反。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = [-1; -2; 3];</span><br><span class=\"line\">A = [3 2 1; -4 -7 6];</span><br><span class=\"line\">b = [6; -8];</span><br><span class=\"line\">Aeq = [2 1 5];</span><br><span class=\"line\">beq = [4];</span><br><span class=\"line\">vlb = [0; 0; 0];</span><br><span class=\"line\">vub= [];</span><br><span class=\"line\">[x, fval] = linprog(f, A, b, Aeq, beq, vlb, vub)</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"运输问题\"><a href=\"#运输问题\" class=\"headerlink\" title=\"运输问题\"></a>运输问题</h5><p>较为常见的运输模型叙述如下：</p>\n<blockquote>\n<p>某物资有 m 个原产地 $A_i$，产量为 $a_i$；有 n 个销地 $B_j$，销量关系为 $b_j$，从 $A_i$ 到 $B_j$ 之间的单位物资运价为 $d_{ij}$，则产销平衡时有 $\\sum\\limits_{i = 1}^{m}a_i = \\sum\\limits_{j = 1}^{n} b_j$</p>\n</blockquote>\n<h5 id=\"多目标规划问题\"><a href=\"#多目标规划问题\" class=\"headerlink\" title=\"多目标规划问题\"></a>多目标规划问题</h5><p>在建立优化模型时有时追求的目标可能是多个，无论忽略其中的哪个因素可能都会降低优化结果的可信度。对于这类问题通常有下面的三种处理方式：</p>\n<ol>\n<li>为每个目标设置重要性权重。<br> 当存在 n 个目标时，首先对目标函数进行归一化处理（就是消除量纲的影响，进行标准统一）后分别设置自己的权重，假设第 i 个目标的权重为 $\\alpha_i$，目标取值为 $M_i$，则可以建立下面的优化模型：$\\max \\alpha_1M_1 + \\alpha_2M_2 + … + \\alpha_nM_n$</li>\n<li>为各种目标设定优先权，并将模型转化为多个优化模型。</li>\n<li>分别求得个目标的最优值后，将主要目标设定为目标函数，而将次要目标适当调整后修改为约束条件。</li>\n</ol>\n<h4 id=\"适度指标的线性处理\"><a href=\"#适度指标的线性处理\" class=\"headerlink\" title=\"适度指标的线性处理\"></a>适度指标的线性处理</h4><p>适度指标是指该指标的他正是数据大了或者小了均不好，要充分地接近于某一事先给定的标准指标，比如水的 PH 值。<br>求 $\\min |x - D|$，D 为数据指标的理想取值。<br>例题：<br>一个富豪准备拿 10 万元买股票。经过他的筛选，有三种候选投资股票。这三种股票的价格、收益率以及风险系数如表所示：<br><img src=\"/2023/08/26/%E8%A7%84%E5%88%92%E8%AE%BA%E6%A8%A1%E5%9E%8B/%E8%82%A1%E7%A5%A8.png\" class=\"\"><br>这是一个多规划问题，我们如果直接列两个不等式的话，可能存在无解的情况。所以我们可以采取上面所说的方法2，建立如下的两个不等式条件：<br><img src=\"/2023/08/26/%E8%A7%84%E5%88%92%E8%AE%BA%E6%A8%A1%E5%9E%8B/%E7%AD%89%E5%BC%8F.png\" class=\"\"><br>如果我们优先考虑投资的风险，就可以建立下面的线性规划模型：<br><img src=\"/2023/08/26/%E8%A7%84%E5%88%92%E8%AE%BA%E6%A8%A1%E5%9E%8B/%E6%A8%A1%E5%9E%8B.png\" class=\"\"><br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear all</span><br><span class=\"line\">Aeq = [1 3 5 1 -1 0 0; 2 5 8 0 0 1 -1; 10 20 30 0 0 0 0];</span><br><span class=\"line\">beq = [15000; 25000; 100000];</span><br><span class=\"line\">f = zeros(7, 1);</span><br><span class=\"line\">f(5) = 1;</span><br><span class=\"line\">vlb = zeros(7, 1);</span><br><span class=\"line\">vub = [];</span><br><span class=\"line\">a = [];</span><br><span class=\"line\">b = [];</span><br><span class=\"line\">[x, y] = linprog(f, a, b, Aeq, beq, vlb, vub);</span><br><span class=\"line\">fx = x(1) + 3 * x(2) + 5 * x(3)</span><br><span class=\"line\">lr = 2 * x(1) + 5 * x(2) + 8 * x(3)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"整数规划\"><a href=\"#整数规划\" class=\"headerlink\" title=\"整数规划\"></a>整数规划</h4><p>在线性规划模型中，如果各个决策变量的取值均为整数，则称此类模型为整数规划模型。<br>整数规划的解法主要有穷举法(变量维数较高时不可行)、舍入凑整法、分支定界法(比较可行)、割平面法(比较可行)等。</p>\n<ol>\n<li>舍入凑整法<br> 感觉很是玄学，就是假装没有整数约束，求解出最优解后每个变量往下或者上取整比较一下。</li>\n<li>分支界定法<br> 如果不满足整数条件，任选一个不满足整数条件的变量来构造新的约束，在原可行域中剔除部分非整数解。然后，再在缩小的可行域中求解新构造的线性规划的最优解（好抽象）。<br> 步骤：<ol>\n<li>解没有整数约束的问题。</li>\n<li>定界</li>\n<li>分支</li>\n<li>修改上下界</li>\n<li>比较与剪枝</li>\n</ol>\n</li>\n</ol>\n<h5 id=\"0-1-型整数规划\"><a href=\"#0-1-型整数规划\" class=\"headerlink\" title=\"0-1 型整数规划\"></a>0-1 型整数规划</h5><p>约束条件为 $0 \\leq x_i \\leq 1,x_i$ 为整数。这样就和一般的整数规划问题统一了。 </p>\n<img src=\"/2023/08/26/%E8%A7%84%E5%88%92%E8%AE%BA%E6%A8%A1%E5%9E%8B/%E6%95%B4%E6%95%B0%E8%A7%84%E5%88%92.png\" class=\"\" title=\"整数规划求解函数\">\n<p>实例：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = [-3; 2; -5];</span><br><span class=\"line\">intcon = [1, 2, 3]; % 表示哪几个变量为整数</span><br><span class=\"line\">A = [1 2 -1; 1 4 1; 1 1 0; 4 0 1];</span><br><span class=\"line\">b = [2; 4; 3; 6];</span><br><span class=\"line\">Aeq = [];</span><br><span class=\"line\">beq = [];</span><br><span class=\"line\">lb = [0; 0; 0]; % 如果下界为 0 上界为 1，其实就是 0-1 整数规划了。</span><br><span class=\"line\">rb = [1; 1; 1];</span><br><span class=\"line\">[x, val] = intlinprog(f, intcon, A, b, Aeq, beq, lb, rb)</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"指派问题\"><a href=\"#指派问题\" class=\"headerlink\" title=\"指派问题\"></a>指派问题</h5><img src=\"/2023/08/26/%E8%A7%84%E5%88%92%E8%AE%BA%E6%A8%A1%E5%9E%8B/%E6%8C%87%E6%B4%BE%E9%97%AE%E9%A2%98.png\" class=\"\" title=\"指派问题\">\n<p>当人数和任务的个数不同的时候，会出现某些人没有任务可做或者某些任务无人完成的情况。出现这两种情况的时候只需将约束条件中的某一个等于 1 的约束条件修改为小于等于 1 即可。有时也可以一对多（一个人多任务，一个任务多个人）。<br>2013 年碎纸片拼接复原问题 1：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cell&#123;1,1&#125;=imread(&#x27;000.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,2&#125;=imread(&#x27;001.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,3&#125;=imread(&#x27;002.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,4&#125;=imread(&#x27;003.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,5&#125;=imread(&#x27;004.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,6&#125;=imread(&#x27;005.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,7&#125;=imread(&#x27;006.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,8&#125;=imread(&#x27;007.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,9&#125;=imread(&#x27;008.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,10&#125;=imread(&#x27;009.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,11&#125;=imread(&#x27;010.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,12&#125;=imread(&#x27;011.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,13&#125;=imread(&#x27;012.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,14&#125;=imread(&#x27;013.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,15&#125;=imread(&#x27;014.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,16&#125;=imread(&#x27;015.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,17&#125;=imread(&#x27;016.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,18&#125;=imread(&#x27;017.bmp&#x27;);</span><br><span class=\"line\">cell&#123;1,19&#125;=imread(&#x27;018.bmp&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">for i=1:19</span><br><span class=\"line\">level=graythresh(cell&#123;1,i&#125;);%选择灰度阈值</span><br><span class=\"line\">cell1&#123;1,i&#125;=im2bw(cell&#123;1,i&#125;,level); %将图像二值化</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">for i=1:19                %循环19个图像</span><br><span class=\"line\">    for k=1:19</span><br><span class=\"line\">        xs(i,k)=0;</span><br><span class=\"line\">        for j=1:1980</span><br><span class=\"line\">            if (cell1&#123;1,i&#125;(j,72)==cell1&#123;1,k&#125;(j,1))%判断图像的边缘信息特征，求相似度矩阵</span><br><span class=\"line\">                xs(i,k)=1+xs(i,k);</span><br><span class=\"line\">            end</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">for i=1:19</span><br><span class=\"line\">    xs(i,i)</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">for i=1:19 </span><br><span class=\"line\">da(i)=max(xs(i,:));</span><br><span class=\"line\">end</span><br><span class=\"line\">wei=find(da==max(da));for i=1:19</span><br><span class=\"line\">    k=find(xs(i,[1:19])==da(i));  %求两两相邻的矩阵</span><br><span class=\"line\">    lian(i,1)=i;                  %前面一个</span><br><span class=\"line\">    lian(i,2)=k;                  %后面一个</span><br><span class=\"line\">end</span><br><span class=\"line\">lian(wei,1)=0;</span><br><span class=\"line\">tou=lian(wei,2);</span><br><span class=\"line\">xu(1)=tou;</span><br><span class=\"line\">for i=1:18</span><br><span class=\"line\">    xu(i+1)=lian(xu(i),2);        %正确的排列顺序</span><br><span class=\"line\">end</span><br><span class=\"line\">%根据排出来顺序xu画图</span><br><span class=\"line\">for i=1:19</span><br><span class=\"line\">I(:,[72*(i-1)+1:72*i])=cell&#123;1,xu(i)&#125;;   %图像的整合</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">imwrite(I,&#x27;hanzi.jpg&#x27;,&#x27;quality&#x27;,100);</span><br><span class=\"line\">imshow(&#x27;hanzi.jpg&#x27;)          %输出图像</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"选址问题\"><a href=\"#选址问题\" class=\"headerlink\" title=\"选址问题\"></a>选址问题</h5><p>集合覆盖选址模型和最大覆盖选址模型。</p>\n"},{"title":"跳表(skiplist)","date":"2023-10-30T06:39:04.000Z","description":"the code of SkipList","_content":"\n#### 代码：\n```\n#include <vector>\n#include <iostream>\n\nclass SkipListNode {\n    public:\n        int value;\n        std::vector<SkipListNode*> nxt;\n        SkipListNode(int val, int level)\n            : value(val)\n            , nxt(level, nullptr) {}\n};\n\nclass Skiplist {\npublic:\n    int maxLevel = 32;\n    int level;\n    SkipListNode* head;\n    Skiplist() {\n        level = 1;\n        head = new SkipListNode(0, maxLevel);\n    }\n    int randomLevel() {\n        int level = 1;\n        while (level < maxLevel && (rand() % 2 == 0)) {\n            level++;\n        }\n        return level;\n    }\n    bool search(int target) {\n        SkipListNode* current = head;\n        for (int i = level - 1; i >= 0; --i) {\n            while (current->nxt[i] && current->nxt[i]->value < target) {\n                current = current->nxt[i];\n            }\n        }\n        if (current && current->nxt[0] && current->nxt[0]->value == target) {\n            return true;\n        }\n        return false;\n    }\n    \n    void add(int num) {\n        std::vector<SkipListNode*> update(maxLevel, nullptr);\n        SkipListNode* current = head;\n        for (int i = level - 1; i >= 0; --i) {\n            while (current->nxt[i] && current->nxt[i]->value < num) {\n                current = current->nxt[i];\n            }\n            update[i] = current;\n        }\n        int newLevel = randomLevel();\n        if (newLevel > level) {\n            for (int i = level; i < newLevel; ++i) {\n                update[i] = head;\n            }\n            level = newLevel;\n        }\n        SkipListNode* newNode = new SkipListNode(num, newLevel);\n        for (int i = 0; i < newLevel; ++i) {\n            newNode->nxt[i] = update[i]->nxt[i];\n            update[i]->nxt[i] = newNode;\n        }\n    }\n    \n    bool erase(int num) {\n        SkipListNode* current = head;\n        std::vector<SkipListNode*> update(maxLevel, nullptr);\n        for (int i = level - 1; i >= 0; --i) {\n            while (current->nxt[i] && current->nxt[i]->value < num) {\n                current = current->nxt[i];\n            }\n            update[i] = current;\n        }\n        if (!current || !current->nxt[0] || current->nxt[0]->value != num) {\n            return false;\n        }\n        if (current->nxt[0] && current->nxt[0]->value == num) {\n            SkipListNode* toRemove = current->nxt[0];\n            for (int i = 0; i < level; ++i) {\n                if (update[i]->nxt[i] != toRemove) { // 不能直接判断 value 因为可能出现多个相同数值的情况\n                    break;\n                }\n                update[i]->nxt[i] = toRemove->nxt[i];\n            }\n            delete toRemove;\n        }   \n        // 更新 level\n        while (level > 1 && head->nxt[level - 1] == nullptr)\n            level--;\n        return true;\n    }\n};\n```\n\n#### 参考：\nhttps://github.com/youngyangyang04/Skiplist-CPP/blob/master/skiplist.h\nhttps://www.luogu.com.cn/problem/solution/P3369?page=2\nleetcode 跳表题解\nhttps://yuerblog.cc/2019/02/13/skiplist-rank/ 实现 rank\n","source":"_posts/跳表-skiplist.md","raw":"---\ntitle: 跳表(skiplist)\ndate: 2023-10-30 14:39:04\ntags: Data Structure\ndescription: the code of SkipList\n---\n\n#### 代码：\n```\n#include <vector>\n#include <iostream>\n\nclass SkipListNode {\n    public:\n        int value;\n        std::vector<SkipListNode*> nxt;\n        SkipListNode(int val, int level)\n            : value(val)\n            , nxt(level, nullptr) {}\n};\n\nclass Skiplist {\npublic:\n    int maxLevel = 32;\n    int level;\n    SkipListNode* head;\n    Skiplist() {\n        level = 1;\n        head = new SkipListNode(0, maxLevel);\n    }\n    int randomLevel() {\n        int level = 1;\n        while (level < maxLevel && (rand() % 2 == 0)) {\n            level++;\n        }\n        return level;\n    }\n    bool search(int target) {\n        SkipListNode* current = head;\n        for (int i = level - 1; i >= 0; --i) {\n            while (current->nxt[i] && current->nxt[i]->value < target) {\n                current = current->nxt[i];\n            }\n        }\n        if (current && current->nxt[0] && current->nxt[0]->value == target) {\n            return true;\n        }\n        return false;\n    }\n    \n    void add(int num) {\n        std::vector<SkipListNode*> update(maxLevel, nullptr);\n        SkipListNode* current = head;\n        for (int i = level - 1; i >= 0; --i) {\n            while (current->nxt[i] && current->nxt[i]->value < num) {\n                current = current->nxt[i];\n            }\n            update[i] = current;\n        }\n        int newLevel = randomLevel();\n        if (newLevel > level) {\n            for (int i = level; i < newLevel; ++i) {\n                update[i] = head;\n            }\n            level = newLevel;\n        }\n        SkipListNode* newNode = new SkipListNode(num, newLevel);\n        for (int i = 0; i < newLevel; ++i) {\n            newNode->nxt[i] = update[i]->nxt[i];\n            update[i]->nxt[i] = newNode;\n        }\n    }\n    \n    bool erase(int num) {\n        SkipListNode* current = head;\n        std::vector<SkipListNode*> update(maxLevel, nullptr);\n        for (int i = level - 1; i >= 0; --i) {\n            while (current->nxt[i] && current->nxt[i]->value < num) {\n                current = current->nxt[i];\n            }\n            update[i] = current;\n        }\n        if (!current || !current->nxt[0] || current->nxt[0]->value != num) {\n            return false;\n        }\n        if (current->nxt[0] && current->nxt[0]->value == num) {\n            SkipListNode* toRemove = current->nxt[0];\n            for (int i = 0; i < level; ++i) {\n                if (update[i]->nxt[i] != toRemove) { // 不能直接判断 value 因为可能出现多个相同数值的情况\n                    break;\n                }\n                update[i]->nxt[i] = toRemove->nxt[i];\n            }\n            delete toRemove;\n        }   \n        // 更新 level\n        while (level > 1 && head->nxt[level - 1] == nullptr)\n            level--;\n        return true;\n    }\n};\n```\n\n#### 参考：\nhttps://github.com/youngyangyang04/Skiplist-CPP/blob/master/skiplist.h\nhttps://www.luogu.com.cn/problem/solution/P3369?page=2\nleetcode 跳表题解\nhttps://yuerblog.cc/2019/02/13/skiplist-rank/ 实现 rank\n","slug":"跳表-skiplist","published":1,"updated":"2023-11-12T10:49:09.509Z","_id":"clov7szoj00225oogbb13cpjz","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">class SkipListNode &#123;</span><br><span class=\"line\">    public:</span><br><span class=\"line\">        int value;</span><br><span class=\"line\">        std::vector&lt;SkipListNode*&gt; nxt;</span><br><span class=\"line\">        SkipListNode(int val, int level)</span><br><span class=\"line\">            : value(val)</span><br><span class=\"line\">            , nxt(level, nullptr) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">class Skiplist &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    int maxLevel = 32;</span><br><span class=\"line\">    int level;</span><br><span class=\"line\">    SkipListNode* head;</span><br><span class=\"line\">    Skiplist() &#123;</span><br><span class=\"line\">        level = 1;</span><br><span class=\"line\">        head = new SkipListNode(0, maxLevel);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int randomLevel() &#123;</span><br><span class=\"line\">        int level = 1;</span><br><span class=\"line\">        while (level &lt; maxLevel &amp;&amp; (rand() % 2 == 0)) &#123;</span><br><span class=\"line\">            level++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return level;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bool search(int target) &#123;</span><br><span class=\"line\">        SkipListNode* current = head;</span><br><span class=\"line\">        for (int i = level - 1; i &gt;= 0; --i) &#123;</span><br><span class=\"line\">            while (current-&gt;nxt[i] &amp;&amp; current-&gt;nxt[i]-&gt;value &lt; target) &#123;</span><br><span class=\"line\">                current = current-&gt;nxt[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (current &amp;&amp; current-&gt;nxt[0] &amp;&amp; current-&gt;nxt[0]-&gt;value == target) &#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    void add(int num) &#123;</span><br><span class=\"line\">        std::vector&lt;SkipListNode*&gt; update(maxLevel, nullptr);</span><br><span class=\"line\">        SkipListNode* current = head;</span><br><span class=\"line\">        for (int i = level - 1; i &gt;= 0; --i) &#123;</span><br><span class=\"line\">            while (current-&gt;nxt[i] &amp;&amp; current-&gt;nxt[i]-&gt;value &lt; num) &#123;</span><br><span class=\"line\">                current = current-&gt;nxt[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            update[i] = current;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int newLevel = randomLevel();</span><br><span class=\"line\">        if (newLevel &gt; level) &#123;</span><br><span class=\"line\">            for (int i = level; i &lt; newLevel; ++i) &#123;</span><br><span class=\"line\">                update[i] = head;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            level = newLevel;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        SkipListNode* newNode = new SkipListNode(num, newLevel);</span><br><span class=\"line\">        for (int i = 0; i &lt; newLevel; ++i) &#123;</span><br><span class=\"line\">            newNode-&gt;nxt[i] = update[i]-&gt;nxt[i];</span><br><span class=\"line\">            update[i]-&gt;nxt[i] = newNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    bool erase(int num) &#123;</span><br><span class=\"line\">        SkipListNode* current = head;</span><br><span class=\"line\">        std::vector&lt;SkipListNode*&gt; update(maxLevel, nullptr);</span><br><span class=\"line\">        for (int i = level - 1; i &gt;= 0; --i) &#123;</span><br><span class=\"line\">            while (current-&gt;nxt[i] &amp;&amp; current-&gt;nxt[i]-&gt;value &lt; num) &#123;</span><br><span class=\"line\">                current = current-&gt;nxt[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            update[i] = current;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (!current || !current-&gt;nxt[0] || current-&gt;nxt[0]-&gt;value != num) &#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (current-&gt;nxt[0] &amp;&amp; current-&gt;nxt[0]-&gt;value == num) &#123;</span><br><span class=\"line\">            SkipListNode* toRemove = current-&gt;nxt[0];</span><br><span class=\"line\">            for (int i = 0; i &lt; level; ++i) &#123;</span><br><span class=\"line\">                if (update[i]-&gt;nxt[i] != toRemove) &#123; // 不能直接判断 value 因为可能出现多个相同数值的情况</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                update[i]-&gt;nxt[i] = toRemove-&gt;nxt[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            delete toRemove;</span><br><span class=\"line\">        &#125;   </span><br><span class=\"line\">        // 更新 level</span><br><span class=\"line\">        while (level &gt; 1 &amp;&amp; head-&gt;nxt[level - 1] == nullptr)</span><br><span class=\"line\">            level--;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h4><p><a href=\"https://github.com/youngyangyang04/Skiplist-CPP/blob/master/skiplist.h\">https://github.com/youngyangyang04/Skiplist-CPP/blob/master/skiplist.h</a><br><a href=\"https://www.luogu.com.cn/problem/solution/P3369?page=2\">https://www.luogu.com.cn/problem/solution/P3369?page=2</a><br>leetcode 跳表题解<br><a href=\"https://yuerblog.cc/2019/02/13/skiplist-rank/\">https://yuerblog.cc/2019/02/13/skiplist-rank/</a> 实现 rank</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">class SkipListNode &#123;</span><br><span class=\"line\">    public:</span><br><span class=\"line\">        int value;</span><br><span class=\"line\">        std::vector&lt;SkipListNode*&gt; nxt;</span><br><span class=\"line\">        SkipListNode(int val, int level)</span><br><span class=\"line\">            : value(val)</span><br><span class=\"line\">            , nxt(level, nullptr) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">class Skiplist &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    int maxLevel = 32;</span><br><span class=\"line\">    int level;</span><br><span class=\"line\">    SkipListNode* head;</span><br><span class=\"line\">    Skiplist() &#123;</span><br><span class=\"line\">        level = 1;</span><br><span class=\"line\">        head = new SkipListNode(0, maxLevel);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int randomLevel() &#123;</span><br><span class=\"line\">        int level = 1;</span><br><span class=\"line\">        while (level &lt; maxLevel &amp;&amp; (rand() % 2 == 0)) &#123;</span><br><span class=\"line\">            level++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return level;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bool search(int target) &#123;</span><br><span class=\"line\">        SkipListNode* current = head;</span><br><span class=\"line\">        for (int i = level - 1; i &gt;= 0; --i) &#123;</span><br><span class=\"line\">            while (current-&gt;nxt[i] &amp;&amp; current-&gt;nxt[i]-&gt;value &lt; target) &#123;</span><br><span class=\"line\">                current = current-&gt;nxt[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (current &amp;&amp; current-&gt;nxt[0] &amp;&amp; current-&gt;nxt[0]-&gt;value == target) &#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    void add(int num) &#123;</span><br><span class=\"line\">        std::vector&lt;SkipListNode*&gt; update(maxLevel, nullptr);</span><br><span class=\"line\">        SkipListNode* current = head;</span><br><span class=\"line\">        for (int i = level - 1; i &gt;= 0; --i) &#123;</span><br><span class=\"line\">            while (current-&gt;nxt[i] &amp;&amp; current-&gt;nxt[i]-&gt;value &lt; num) &#123;</span><br><span class=\"line\">                current = current-&gt;nxt[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            update[i] = current;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int newLevel = randomLevel();</span><br><span class=\"line\">        if (newLevel &gt; level) &#123;</span><br><span class=\"line\">            for (int i = level; i &lt; newLevel; ++i) &#123;</span><br><span class=\"line\">                update[i] = head;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            level = newLevel;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        SkipListNode* newNode = new SkipListNode(num, newLevel);</span><br><span class=\"line\">        for (int i = 0; i &lt; newLevel; ++i) &#123;</span><br><span class=\"line\">            newNode-&gt;nxt[i] = update[i]-&gt;nxt[i];</span><br><span class=\"line\">            update[i]-&gt;nxt[i] = newNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    bool erase(int num) &#123;</span><br><span class=\"line\">        SkipListNode* current = head;</span><br><span class=\"line\">        std::vector&lt;SkipListNode*&gt; update(maxLevel, nullptr);</span><br><span class=\"line\">        for (int i = level - 1; i &gt;= 0; --i) &#123;</span><br><span class=\"line\">            while (current-&gt;nxt[i] &amp;&amp; current-&gt;nxt[i]-&gt;value &lt; num) &#123;</span><br><span class=\"line\">                current = current-&gt;nxt[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            update[i] = current;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (!current || !current-&gt;nxt[0] || current-&gt;nxt[0]-&gt;value != num) &#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (current-&gt;nxt[0] &amp;&amp; current-&gt;nxt[0]-&gt;value == num) &#123;</span><br><span class=\"line\">            SkipListNode* toRemove = current-&gt;nxt[0];</span><br><span class=\"line\">            for (int i = 0; i &lt; level; ++i) &#123;</span><br><span class=\"line\">                if (update[i]-&gt;nxt[i] != toRemove) &#123; // 不能直接判断 value 因为可能出现多个相同数值的情况</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                update[i]-&gt;nxt[i] = toRemove-&gt;nxt[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            delete toRemove;</span><br><span class=\"line\">        &#125;   </span><br><span class=\"line\">        // 更新 level</span><br><span class=\"line\">        while (level &gt; 1 &amp;&amp; head-&gt;nxt[level - 1] == nullptr)</span><br><span class=\"line\">            level--;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h4><p><a href=\"https://github.com/youngyangyang04/Skiplist-CPP/blob/master/skiplist.h\">https://github.com/youngyangyang04/Skiplist-CPP/blob/master/skiplist.h</a><br><a href=\"https://www.luogu.com.cn/problem/solution/P3369?page=2\">https://www.luogu.com.cn/problem/solution/P3369?page=2</a><br>leetcode 跳表题解<br><a href=\"https://yuerblog.cc/2019/02/13/skiplist-rank/\">https://yuerblog.cc/2019/02/13/skiplist-rank/</a> 实现 rank</p>\n"},{"title":"随机数","date":"2023-10-07T06:40:40.000Z","description":"the key record of generating random number.","_content":"\n##### 线性同余法\n\n线性同余法是目前应用广泛的**伪随机数生成算法**。基本思想是对于一个数进行线性运算并取模从而得到下一个数，递归公式为：$x_{n+1}=(ax_n+c) \\pmod{m}, y_{n + 1} = x_{n+1}/m$\n\n线性同余法的最大周期是 m，但是一般情况下会小于 m，如果要使得周期达到最大，应该满足：\n1. c 和 m 互质\n2. m 所有质因子的积能整除 a-1\n3. a c 初值都比 m 小\n4. a c 是正整数\n\n##### 梅森旋转法\n\n梅森旋转法也是一种伪随机数产生算法。\n\n##### 密码学安全随机数生成器\n\n##### 硬件随机数生成器\n\n","source":"_posts/随机数.md","raw":"---\ntitle: 随机数\ndate: 2023-10-07 14:40:40\ntags:\ndescription: the key record of generating random number. \n---\n\n##### 线性同余法\n\n线性同余法是目前应用广泛的**伪随机数生成算法**。基本思想是对于一个数进行线性运算并取模从而得到下一个数，递归公式为：$x_{n+1}=(ax_n+c) \\pmod{m}, y_{n + 1} = x_{n+1}/m$\n\n线性同余法的最大周期是 m，但是一般情况下会小于 m，如果要使得周期达到最大，应该满足：\n1. c 和 m 互质\n2. m 所有质因子的积能整除 a-1\n3. a c 初值都比 m 小\n4. a c 是正整数\n\n##### 梅森旋转法\n\n梅森旋转法也是一种伪随机数产生算法。\n\n##### 密码学安全随机数生成器\n\n##### 硬件随机数生成器\n\n","slug":"随机数","published":1,"updated":"2023-10-07T06:53:45.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szok00245oogg4h28fxi","content":"<h5 id=\"线性同余法\"><a href=\"#线性同余法\" class=\"headerlink\" title=\"线性同余法\"></a>线性同余法</h5><p>线性同余法是目前应用广泛的<strong>伪随机数生成算法</strong>。基本思想是对于一个数进行线性运算并取模从而得到下一个数，递归公式为：$x_{n+1}=(ax_n+c) \\pmod{m}, y_{n + 1} = x_{n+1}/m$</p>\n<p>线性同余法的最大周期是 m，但是一般情况下会小于 m，如果要使得周期达到最大，应该满足：</p>\n<ol>\n<li>c 和 m 互质</li>\n<li>m 所有质因子的积能整除 a-1</li>\n<li>a c 初值都比 m 小</li>\n<li>a c 是正整数</li>\n</ol>\n<h5 id=\"梅森旋转法\"><a href=\"#梅森旋转法\" class=\"headerlink\" title=\"梅森旋转法\"></a>梅森旋转法</h5><p>梅森旋转法也是一种伪随机数产生算法。</p>\n<h5 id=\"密码学安全随机数生成器\"><a href=\"#密码学安全随机数生成器\" class=\"headerlink\" title=\"密码学安全随机数生成器\"></a>密码学安全随机数生成器</h5><h5 id=\"硬件随机数生成器\"><a href=\"#硬件随机数生成器\" class=\"headerlink\" title=\"硬件随机数生成器\"></a>硬件随机数生成器</h5>","site":{"data":{}},"excerpt":"","more":"<h5 id=\"线性同余法\"><a href=\"#线性同余法\" class=\"headerlink\" title=\"线性同余法\"></a>线性同余法</h5><p>线性同余法是目前应用广泛的<strong>伪随机数生成算法</strong>。基本思想是对于一个数进行线性运算并取模从而得到下一个数，递归公式为：$x_{n+1}=(ax_n+c) \\pmod{m}, y_{n + 1} = x_{n+1}/m$</p>\n<p>线性同余法的最大周期是 m，但是一般情况下会小于 m，如果要使得周期达到最大，应该满足：</p>\n<ol>\n<li>c 和 m 互质</li>\n<li>m 所有质因子的积能整除 a-1</li>\n<li>a c 初值都比 m 小</li>\n<li>a c 是正整数</li>\n</ol>\n<h5 id=\"梅森旋转法\"><a href=\"#梅森旋转法\" class=\"headerlink\" title=\"梅森旋转法\"></a>梅森旋转法</h5><p>梅森旋转法也是一种伪随机数产生算法。</p>\n<h5 id=\"密码学安全随机数生成器\"><a href=\"#密码学安全随机数生成器\" class=\"headerlink\" title=\"密码学安全随机数生成器\"></a>密码学安全随机数生成器</h5><h5 id=\"硬件随机数生成器\"><a href=\"#硬件随机数生成器\" class=\"headerlink\" title=\"硬件随机数生成器\"></a>硬件随机数生成器</h5>"},{"title":"一维随机游走常返性证明","_content":"\n参考博客 https://zhuanlan.zhihu.com/p/553201794\n","source":"_drafts/一维随机游走常返性证明.md","raw":"---\ntitle: 一维随机游走常返性证明\ntags:\n---\n\n参考博客 https://zhuanlan.zhihu.com/p/553201794\n","slug":"一维随机游走常返性证明","published":0,"date":"2023-08-24T05:41:51.262Z","updated":"2023-08-24T05:42:10.568Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szok00255oogcgxs8ggb","content":"<p>参考博客 <a href=\"https://zhuanlan.zhihu.com/p/553201794\">https://zhuanlan.zhihu.com/p/553201794</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>参考博客 <a href=\"https://zhuanlan.zhihu.com/p/553201794\">https://zhuanlan.zhihu.com/p/553201794</a></p>\n"},{"title":"计算机组成原理","date":"2023-09-20T01:45:07.000Z","description":"The key record of computer composition and principle.","_content":"#### 第一章\n计算机可以分成两个部分：硬件和软件。\n软件的话，又分为**系统软件**和**应用软件**两种。\n\n下层是硬件，硬件进行了相对的封装，它对软件提供了接口，比如说提供了指令集，软件可以利用这些指令集，编写完成一定功能的软件。\n\n最早出现的语言是 **机器语言**(是由 01 代码构成的)，为了简化记忆，人们提出了汇编代码，符号化。汇编语言和机器语言之间一般是一一对应的，也就是一条汇编语言指令对应一条机器语言指令。\n\n{%asset_img 语言发展.png%}  \n\n##### 冯诺伊曼计算机\n冯诺依曼也被称为现代计算机之父。\n\n###### EDVAC\nEDVAC(Electronic Discrete Variable Automatic Computer)是计算机科学史上一台著名的计算机，是早期计算机发展中的一个里程碑。下面是它的一些特点：\n1. 存储程序。是世界上第一台真正的**存储程序计算机**。这意味着它可以存储和执行在存储器中的程序，而不仅仅是执行预先固定在硬件中的计算任务。**这一概念成为现代计算机架构的基础**\n2. 二进制表示。EDVAC 使用了二进制表示法来处理数据和指令。\n3. 使用了冯诺伊曼体系结构\n4. 高度可编程。EDVAC的可编程性使得它可以执行各种计算任务，而不仅仅是用于特定目的的计算。\n\n而ENIAC是一台**固定程序计算机**，它的计算任务是**通过物理重新连接电路来更改的**，而不是通过存储在内存中的程序。这使得ENIAC的重新配置非常耗时和繁琐，限制了它的通用性。\n\n###### **冯诺依曼结构特点：**\n1. 计算机由五大部件组成。\n2. 指令和数据以同等地位存储在存储器，可按地址访问。\n3. 指令和数据都是二进制表示。\n4. 指令由操作码和地址码组成，操作码就是表明这条指令干什么，地址码指明了**操作数在哪里**。\n5. **存储程序。程序存储在存储器中(核心特征)。**\n6. 以运算器为中心。\n\n{%asset_img 冯诺伊曼计算机硬件框架.png%}\n\n###### **冯诺依曼结构的问题：**\n1. TODO\n\nALU 和 CU 合成了 CPU\n存储器又被分为了 主存和辅存\nCPU 和存储器构成了我们的主机(也就是运算器、存储器、控制器构成了我们的主机)\n\n##### 存储器的基本组成\n\n存储单元：存放一串二进制代码。存储单元构成存储体。\n存储字：在存储单元中存放的二进制代码组合。\n存储字长：存储单元中二进制代码的位数。\n\n{%asset_img 存储器组成.png%}\n\nMAR 存储器地址寄存器，反应存储器的个数。这个寄存器的长度和存储单元的个数相关。\nMDR 保存了要保存到存储体中的数据或者是刚刚从存储器中取出来的数据。所以，这个寄存器的长度是存储单元的长度。\n\n##### 运算器基本组成及操作\n{%asset_img 运算器基本组成及操作.png%}\n加法的操作过程\n初态 ACC 中保存了被减数和被加数\n下一个操作就是把内存单元中的内容 M 放入寄存器 X\n\n{%asset_img 乘法操作.png%}\n\n{%asset_img 除法操作.png%}\n\n##### 控制器基本结构\n\n{%asset_img 控制器结构.png%}\nIR 中也就是指令的操作码，其中核心是 CU，来执行指令。\n\n##### 主机\n运算器、存储器、控制器构成了主机。\n将上面我们各自讲解的结构组合在一起，就得到了 **主机的架构**。\n{%asset_img 主机架构.png%}\n\n对于取数操作：\n1. 先获得取数指令。PC 中存储的是指令地址，传到 MAR，在内存单元中获得指令，然后将指令传到 MDR，再传给\nIR(IR 中存储的是指令信息)。\n2. IR 中拿到了指令，再交给 CU 对于指令进行分析。对于操作码分析是取数，将地址码传递到 MAR，在内存单元中寻找获得数值，然后传递给 MDR，再传递给 ACC(累加器)，完成取数操作。\n\n#### 第二章\n这一章不是很重要。\n\n#### 第三章\n\n##### 总线的基本概念\n\n为了解决分散连接的**不易扩展性**，我们采取了**总线**(bus)来连接各个部件的信息传出线，是各个部件共享的传输介质。总线的英文就是 BUS 其实很生动形象了。\n\n传输方式有**串行和并行**两种。但是并行传输的话，线和线之间会有干扰，所以如果传输距离比较长的话信息会不准确。所以，对于并行传输一般仅用于距离较短的传输。\n\n##### 总线的结构\n总线的结构有单总线、面向 CPU 的双总线和面向存储器的双总线\n\n总线是信号的公共传输线。在任意时刻只能有一个部件来使用总线，对于单总线，会成为我们系统的一个瓶颈。\n{%asset_img 单总线结构.png%}\n\n为了改进这种问题，我们提出了 **面向 CPU 的双总线结构**。\n容易看出，这种总线主存和I/O设备交互的时候，CPU执行任务还是会打断，所以我们提出了 **面向存储器的总线结构**。\n{%asset_img 面向CPU的总线结构.png%}\n\n面向存储器的总线结构：\n{%asset_img 以存储器为中心的总线结构.png%}\n\n##### 总线的分类\n按照不同分类标准总线可以分为好多中。\n如果按照在计算机内部的位置来分类有两大种：\n1. 片内总线。芯片内部的总线\n2. 系统总线。计算机各部件之间的信息传输线\n系统总线又可以分为：数据总线、地址总线、控制总线\n\n##### 总线特性及指标\n总线要想进行有效的连接，必须满足一些特性。\n{%asset_img 总线特性.png%}\n\n##### 总线的性能指标\n1. 总线宽度\n2. 标准传输律：每秒传输的最大字节\n3. 时钟同步\n4. 总线复用 地址线和数据线共用。为什么复用？主要是为了减少芯片的管脚数，芯片的管脚数越少，芯片的封装性越好。\n5. 信号线数 地址线、数据线和控制线的总和。\n\n##### 总线的控制\n\n#### 第四章\n\n##### 存储器的分类\n\n标准很多，所以分类也很多。\n1. 按照介质分类\n    半导体存储器 TTL MOS    易失\n    磁表面存储器 磁头、载磁体\n    磁芯存储器\n    光盘存储器\n2. 按照存取方式分类\n    存取时间和物理地址无关(随机访问)\n    存取时间和物理地址有关(串行访问) 如磁带、磁带\n3. 按照在计算机种的作用分类\n\n高速缓冲存储器 (Cache) 是在 CPU 与 主存之间的一块存储器。\n\n##### 存储器的层次结构\n{%asset_img 存储器层次.png%}\n\n主存和辅存之间通过软硬件相结合的方式连接在一起。他俩连接在一起如何定位存储地址呢？我们使用的是虚拟地址，就是我们以我们比较好理解的形式来写地址，比如 `0x7fff` 但是在执行的时候是有特定的机构去**将虚拟地址转换为内存单元种的地址。**\n\n##### 主存储器\n\n###### 主存储器的地址分配\n\n高位字节地址为字地址称为「大端、大尾方式」\n低位字节地址为字地址称为「小端、小尾方式」\n这两种方式都有机器使用，但是这样的话两种机器进行通讯就会出现问题。\n\n###### 主存的技术指标\n\n主要是速度和容量两个方面。\n\n##### 半导体存储芯片\n\nCS Chip Select   选择芯片\nCE Chip Enable   芯片使能，和 CS 功能一样\nWE Write Enable  允许写入\nOE Output Enable 允许输出\nWR Write         允许写入的另一个形式?  \n上面的一般都是低电位有效。\n\nColumn Address Select CAS 列选\nRow Address Select RAS 行选\nlatency time 延迟时间\n\n\n双稳态触发器\n珊极\n\n###### 随机存取存储器\n\n有静态的和动态的。\n\n动态 RAM 是利用电容存储电荷的方式来存储信息的。 \n如果不对于动态 RAM 进行刷新，电容就会漏电，原来内部保存的 1 就会变成 0。动态 RAM 的刷新与行地址有关。\n\n动态 RAM 和静态 RAM 比价：\n{%asset_img 动态RAM和静态RAM比较.png%}\n\nDRAM 一般用来做主存，SRAM 一般用来做缓存\n\n最初的 ROM 芯片是固定的，数据在制造时被写入并且无法更改。即使后来出现了 EPROM(Erasable Programmable Read-Only Memory) EEPROM(Electrically Erasable Programmable Read-Only Memory) 和闪存，这种可擦除可编程的，也仍然用 ROM 来称呼他们。EPROM 使用紫外线来擦除，后者 EEPROM 使用电子来擦除。\n\n##### 存储器和 CPU 的连接\n\n存储器的两种扩展：位扩展(增加存储字长)和字扩展(增加存储字的数量)\n{%asset_img 位扩展.png%}\n其中字扩展是使用地址线最高位 是 1 或者是 0 来作为片选器(CS)\n{%asset_img 字扩展.png%}\n\n还有字和位同时扩展：\n{%asset_img 字和位扩展.png%}\n\nMREQ 通常是计算机领域用来表示内存请求信号的缩写，其全称是 \"Memory Request\"。这个信号通常用于微处理器（CPU）与计算机系统中的内存之间的通信，以请求对内存进行读取或写入操作。\n当 CPU 需要访问内存中的数据或指令时，它会生成 MREQ 信号，该信号将传递给内存控制器或内存子系统。内存控制器将根据 MREQ 信号执行相应的操作，例如读取请求时，将数据从内存中读取并提供给 CPU，或者写入请求时，将数据写入内存。**一般是低电平是存储器，高电平时访问IO**\n\n\n\n#### 扩展\n\n计算机的多样性：\n{%asset_img 计算机的多样性.png%}\n\nHPC 是 `High-Performance-Computer` 的简称，一般指一些超级计算机。\n\nMPI 消息传递接口 `Messag Passing Interface` 服务程序通常是指在高性能计算 (HPC) 环境中使用的一种通信库或协议，用于在分布式计算集群中的不同节点之间进行通信和数据交换(毕竟程序之间的并行运算必须有数据信息的交互)。\n\n控制器负责译码。","source":"_posts/计算机组成原理.md","raw":"---\ntitle: 计算机组成原理\ndate: 2023-09-20 09:45:07\ntags: ComputerScience\ndescription: The key record of computer composition and principle. \n---\n#### 第一章\n计算机可以分成两个部分：硬件和软件。\n软件的话，又分为**系统软件**和**应用软件**两种。\n\n下层是硬件，硬件进行了相对的封装，它对软件提供了接口，比如说提供了指令集，软件可以利用这些指令集，编写完成一定功能的软件。\n\n最早出现的语言是 **机器语言**(是由 01 代码构成的)，为了简化记忆，人们提出了汇编代码，符号化。汇编语言和机器语言之间一般是一一对应的，也就是一条汇编语言指令对应一条机器语言指令。\n\n{%asset_img 语言发展.png%}  \n\n##### 冯诺伊曼计算机\n冯诺依曼也被称为现代计算机之父。\n\n###### EDVAC\nEDVAC(Electronic Discrete Variable Automatic Computer)是计算机科学史上一台著名的计算机，是早期计算机发展中的一个里程碑。下面是它的一些特点：\n1. 存储程序。是世界上第一台真正的**存储程序计算机**。这意味着它可以存储和执行在存储器中的程序，而不仅仅是执行预先固定在硬件中的计算任务。**这一概念成为现代计算机架构的基础**\n2. 二进制表示。EDVAC 使用了二进制表示法来处理数据和指令。\n3. 使用了冯诺伊曼体系结构\n4. 高度可编程。EDVAC的可编程性使得它可以执行各种计算任务，而不仅仅是用于特定目的的计算。\n\n而ENIAC是一台**固定程序计算机**，它的计算任务是**通过物理重新连接电路来更改的**，而不是通过存储在内存中的程序。这使得ENIAC的重新配置非常耗时和繁琐，限制了它的通用性。\n\n###### **冯诺依曼结构特点：**\n1. 计算机由五大部件组成。\n2. 指令和数据以同等地位存储在存储器，可按地址访问。\n3. 指令和数据都是二进制表示。\n4. 指令由操作码和地址码组成，操作码就是表明这条指令干什么，地址码指明了**操作数在哪里**。\n5. **存储程序。程序存储在存储器中(核心特征)。**\n6. 以运算器为中心。\n\n{%asset_img 冯诺伊曼计算机硬件框架.png%}\n\n###### **冯诺依曼结构的问题：**\n1. TODO\n\nALU 和 CU 合成了 CPU\n存储器又被分为了 主存和辅存\nCPU 和存储器构成了我们的主机(也就是运算器、存储器、控制器构成了我们的主机)\n\n##### 存储器的基本组成\n\n存储单元：存放一串二进制代码。存储单元构成存储体。\n存储字：在存储单元中存放的二进制代码组合。\n存储字长：存储单元中二进制代码的位数。\n\n{%asset_img 存储器组成.png%}\n\nMAR 存储器地址寄存器，反应存储器的个数。这个寄存器的长度和存储单元的个数相关。\nMDR 保存了要保存到存储体中的数据或者是刚刚从存储器中取出来的数据。所以，这个寄存器的长度是存储单元的长度。\n\n##### 运算器基本组成及操作\n{%asset_img 运算器基本组成及操作.png%}\n加法的操作过程\n初态 ACC 中保存了被减数和被加数\n下一个操作就是把内存单元中的内容 M 放入寄存器 X\n\n{%asset_img 乘法操作.png%}\n\n{%asset_img 除法操作.png%}\n\n##### 控制器基本结构\n\n{%asset_img 控制器结构.png%}\nIR 中也就是指令的操作码，其中核心是 CU，来执行指令。\n\n##### 主机\n运算器、存储器、控制器构成了主机。\n将上面我们各自讲解的结构组合在一起，就得到了 **主机的架构**。\n{%asset_img 主机架构.png%}\n\n对于取数操作：\n1. 先获得取数指令。PC 中存储的是指令地址，传到 MAR，在内存单元中获得指令，然后将指令传到 MDR，再传给\nIR(IR 中存储的是指令信息)。\n2. IR 中拿到了指令，再交给 CU 对于指令进行分析。对于操作码分析是取数，将地址码传递到 MAR，在内存单元中寻找获得数值，然后传递给 MDR，再传递给 ACC(累加器)，完成取数操作。\n\n#### 第二章\n这一章不是很重要。\n\n#### 第三章\n\n##### 总线的基本概念\n\n为了解决分散连接的**不易扩展性**，我们采取了**总线**(bus)来连接各个部件的信息传出线，是各个部件共享的传输介质。总线的英文就是 BUS 其实很生动形象了。\n\n传输方式有**串行和并行**两种。但是并行传输的话，线和线之间会有干扰，所以如果传输距离比较长的话信息会不准确。所以，对于并行传输一般仅用于距离较短的传输。\n\n##### 总线的结构\n总线的结构有单总线、面向 CPU 的双总线和面向存储器的双总线\n\n总线是信号的公共传输线。在任意时刻只能有一个部件来使用总线，对于单总线，会成为我们系统的一个瓶颈。\n{%asset_img 单总线结构.png%}\n\n为了改进这种问题，我们提出了 **面向 CPU 的双总线结构**。\n容易看出，这种总线主存和I/O设备交互的时候，CPU执行任务还是会打断，所以我们提出了 **面向存储器的总线结构**。\n{%asset_img 面向CPU的总线结构.png%}\n\n面向存储器的总线结构：\n{%asset_img 以存储器为中心的总线结构.png%}\n\n##### 总线的分类\n按照不同分类标准总线可以分为好多中。\n如果按照在计算机内部的位置来分类有两大种：\n1. 片内总线。芯片内部的总线\n2. 系统总线。计算机各部件之间的信息传输线\n系统总线又可以分为：数据总线、地址总线、控制总线\n\n##### 总线特性及指标\n总线要想进行有效的连接，必须满足一些特性。\n{%asset_img 总线特性.png%}\n\n##### 总线的性能指标\n1. 总线宽度\n2. 标准传输律：每秒传输的最大字节\n3. 时钟同步\n4. 总线复用 地址线和数据线共用。为什么复用？主要是为了减少芯片的管脚数，芯片的管脚数越少，芯片的封装性越好。\n5. 信号线数 地址线、数据线和控制线的总和。\n\n##### 总线的控制\n\n#### 第四章\n\n##### 存储器的分类\n\n标准很多，所以分类也很多。\n1. 按照介质分类\n    半导体存储器 TTL MOS    易失\n    磁表面存储器 磁头、载磁体\n    磁芯存储器\n    光盘存储器\n2. 按照存取方式分类\n    存取时间和物理地址无关(随机访问)\n    存取时间和物理地址有关(串行访问) 如磁带、磁带\n3. 按照在计算机种的作用分类\n\n高速缓冲存储器 (Cache) 是在 CPU 与 主存之间的一块存储器。\n\n##### 存储器的层次结构\n{%asset_img 存储器层次.png%}\n\n主存和辅存之间通过软硬件相结合的方式连接在一起。他俩连接在一起如何定位存储地址呢？我们使用的是虚拟地址，就是我们以我们比较好理解的形式来写地址，比如 `0x7fff` 但是在执行的时候是有特定的机构去**将虚拟地址转换为内存单元种的地址。**\n\n##### 主存储器\n\n###### 主存储器的地址分配\n\n高位字节地址为字地址称为「大端、大尾方式」\n低位字节地址为字地址称为「小端、小尾方式」\n这两种方式都有机器使用，但是这样的话两种机器进行通讯就会出现问题。\n\n###### 主存的技术指标\n\n主要是速度和容量两个方面。\n\n##### 半导体存储芯片\n\nCS Chip Select   选择芯片\nCE Chip Enable   芯片使能，和 CS 功能一样\nWE Write Enable  允许写入\nOE Output Enable 允许输出\nWR Write         允许写入的另一个形式?  \n上面的一般都是低电位有效。\n\nColumn Address Select CAS 列选\nRow Address Select RAS 行选\nlatency time 延迟时间\n\n\n双稳态触发器\n珊极\n\n###### 随机存取存储器\n\n有静态的和动态的。\n\n动态 RAM 是利用电容存储电荷的方式来存储信息的。 \n如果不对于动态 RAM 进行刷新，电容就会漏电，原来内部保存的 1 就会变成 0。动态 RAM 的刷新与行地址有关。\n\n动态 RAM 和静态 RAM 比价：\n{%asset_img 动态RAM和静态RAM比较.png%}\n\nDRAM 一般用来做主存，SRAM 一般用来做缓存\n\n最初的 ROM 芯片是固定的，数据在制造时被写入并且无法更改。即使后来出现了 EPROM(Erasable Programmable Read-Only Memory) EEPROM(Electrically Erasable Programmable Read-Only Memory) 和闪存，这种可擦除可编程的，也仍然用 ROM 来称呼他们。EPROM 使用紫外线来擦除，后者 EEPROM 使用电子来擦除。\n\n##### 存储器和 CPU 的连接\n\n存储器的两种扩展：位扩展(增加存储字长)和字扩展(增加存储字的数量)\n{%asset_img 位扩展.png%}\n其中字扩展是使用地址线最高位 是 1 或者是 0 来作为片选器(CS)\n{%asset_img 字扩展.png%}\n\n还有字和位同时扩展：\n{%asset_img 字和位扩展.png%}\n\nMREQ 通常是计算机领域用来表示内存请求信号的缩写，其全称是 \"Memory Request\"。这个信号通常用于微处理器（CPU）与计算机系统中的内存之间的通信，以请求对内存进行读取或写入操作。\n当 CPU 需要访问内存中的数据或指令时，它会生成 MREQ 信号，该信号将传递给内存控制器或内存子系统。内存控制器将根据 MREQ 信号执行相应的操作，例如读取请求时，将数据从内存中读取并提供给 CPU，或者写入请求时，将数据写入内存。**一般是低电平是存储器，高电平时访问IO**\n\n\n\n#### 扩展\n\n计算机的多样性：\n{%asset_img 计算机的多样性.png%}\n\nHPC 是 `High-Performance-Computer` 的简称，一般指一些超级计算机。\n\nMPI 消息传递接口 `Messag Passing Interface` 服务程序通常是指在高性能计算 (HPC) 环境中使用的一种通信库或协议，用于在分布式计算集群中的不同节点之间进行通信和数据交换(毕竟程序之间的并行运算必须有数据信息的交互)。\n\n控制器负责译码。","slug":"计算机组成原理","published":1,"updated":"2023-09-29T10:57:50.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szok00265oogdnxacksx","content":"<h4 id=\"第一章\"><a href=\"#第一章\" class=\"headerlink\" title=\"第一章\"></a>第一章</h4><p>计算机可以分成两个部分：硬件和软件。<br>软件的话，又分为<strong>系统软件</strong>和<strong>应用软件</strong>两种。</p>\n<p>下层是硬件，硬件进行了相对的封装，它对软件提供了接口，比如说提供了指令集，软件可以利用这些指令集，编写完成一定功能的软件。</p>\n<p>最早出现的语言是 <strong>机器语言</strong>(是由 01 代码构成的)，为了简化记忆，人们提出了汇编代码，符号化。汇编语言和机器语言之间一般是一一对应的，也就是一条汇编语言指令对应一条机器语言指令。</p>\n<img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AF%AD%E8%A8%80%E5%8F%91%E5%B1%95.png\" class=\"\">  \n<h5 id=\"冯诺伊曼计算机\"><a href=\"#冯诺伊曼计算机\" class=\"headerlink\" title=\"冯诺伊曼计算机\"></a>冯诺伊曼计算机</h5><p>冯诺依曼也被称为现代计算机之父。</p>\n<h6 id=\"EDVAC\"><a href=\"#EDVAC\" class=\"headerlink\" title=\"EDVAC\"></a>EDVAC</h6><p>EDVAC(Electronic Discrete Variable Automatic Computer)是计算机科学史上一台著名的计算机，是早期计算机发展中的一个里程碑。下面是它的一些特点：</p>\n<ol>\n<li>存储程序。是世界上第一台真正的<strong>存储程序计算机</strong>。这意味着它可以存储和执行在存储器中的程序，而不仅仅是执行预先固定在硬件中的计算任务。<strong>这一概念成为现代计算机架构的基础</strong></li>\n<li>二进制表示。EDVAC 使用了二进制表示法来处理数据和指令。</li>\n<li>使用了冯诺伊曼体系结构</li>\n<li>高度可编程。EDVAC的可编程性使得它可以执行各种计算任务，而不仅仅是用于特定目的的计算。</li>\n</ol>\n<p>而ENIAC是一台<strong>固定程序计算机</strong>，它的计算任务是<strong>通过物理重新连接电路来更改的</strong>，而不是通过存储在内存中的程序。这使得ENIAC的重新配置非常耗时和繁琐，限制了它的通用性。</p>\n<h6 id=\"冯诺依曼结构特点：\"><a href=\"#冯诺依曼结构特点：\" class=\"headerlink\" title=\"冯诺依曼结构特点：\"></a><strong>冯诺依曼结构特点：</strong></h6><ol>\n<li>计算机由五大部件组成。</li>\n<li>指令和数据以同等地位存储在存储器，可按地址访问。</li>\n<li>指令和数据都是二进制表示。</li>\n<li>指令由操作码和地址码组成，操作码就是表明这条指令干什么，地址码指明了<strong>操作数在哪里</strong>。</li>\n<li><strong>存储程序。程序存储在存储器中(核心特征)。</strong></li>\n<li>以运算器为中心。</li>\n</ol>\n<img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E5%86%AF%E8%AF%BA%E4%BC%8A%E6%9B%BC%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6%E6%A1%86%E6%9E%B6.png\" class=\"\">\n<h6 id=\"冯诺依曼结构的问题：\"><a href=\"#冯诺依曼结构的问题：\" class=\"headerlink\" title=\"冯诺依曼结构的问题：\"></a><strong>冯诺依曼结构的问题：</strong></h6><ol>\n<li>TODO</li>\n</ol>\n<p>ALU 和 CU 合成了 CPU<br>存储器又被分为了 主存和辅存<br>CPU 和存储器构成了我们的主机(也就是运算器、存储器、控制器构成了我们的主机)</p>\n<h5 id=\"存储器的基本组成\"><a href=\"#存储器的基本组成\" class=\"headerlink\" title=\"存储器的基本组成\"></a>存储器的基本组成</h5><p>存储单元：存放一串二进制代码。存储单元构成存储体。<br>存储字：在存储单元中存放的二进制代码组合。<br>存储字长：存储单元中二进制代码的位数。</p>\n<img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E5%AD%98%E5%82%A8%E5%99%A8%E7%BB%84%E6%88%90.png\" class=\"\">\n<p>MAR 存储器地址寄存器，反应存储器的个数。这个寄存器的长度和存储单元的个数相关。<br>MDR 保存了要保存到存储体中的数据或者是刚刚从存储器中取出来的数据。所以，这个寄存器的长度是存储单元的长度。</p>\n<h5 id=\"运算器基本组成及操作\"><a href=\"#运算器基本组成及操作\" class=\"headerlink\" title=\"运算器基本组成及操作\"></a>运算器基本组成及操作</h5><img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%BF%90%E7%AE%97%E5%99%A8%E5%9F%BA%E6%9C%AC%E7%BB%84%E6%88%90%E5%8F%8A%E6%93%8D%E4%BD%9C.png\" class=\"\">\n<p>加法的操作过程<br>初态 ACC 中保存了被减数和被加数<br>下一个操作就是把内存单元中的内容 M 放入寄存器 X</p>\n<img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E4%B9%98%E6%B3%95%E6%93%8D%E4%BD%9C.png\" class=\"\">\n<img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E9%99%A4%E6%B3%95%E6%93%8D%E4%BD%9C.png\" class=\"\">\n<h5 id=\"控制器基本结构\"><a href=\"#控制器基本结构\" class=\"headerlink\" title=\"控制器基本结构\"></a>控制器基本结构</h5><img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E6%8E%A7%E5%88%B6%E5%99%A8%E7%BB%93%E6%9E%84.png\" class=\"\">\n<p>IR 中也就是指令的操作码，其中核心是 CU，来执行指令。</p>\n<h5 id=\"主机\"><a href=\"#主机\" class=\"headerlink\" title=\"主机\"></a>主机</h5><p>运算器、存储器、控制器构成了主机。<br>将上面我们各自讲解的结构组合在一起，就得到了 <strong>主机的架构</strong>。<br><img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E4%B8%BB%E6%9C%BA%E6%9E%B6%E6%9E%84.png\" class=\"\"></p>\n<p>对于取数操作：</p>\n<ol>\n<li>先获得取数指令。PC 中存储的是指令地址，传到 MAR，在内存单元中获得指令，然后将指令传到 MDR，再传给<br>IR(IR 中存储的是指令信息)。</li>\n<li>IR 中拿到了指令，再交给 CU 对于指令进行分析。对于操作码分析是取数，将地址码传递到 MAR，在内存单元中寻找获得数值，然后传递给 MDR，再传递给 ACC(累加器)，完成取数操作。</li>\n</ol>\n<h4 id=\"第二章\"><a href=\"#第二章\" class=\"headerlink\" title=\"第二章\"></a>第二章</h4><p>这一章不是很重要。</p>\n<h4 id=\"第三章\"><a href=\"#第三章\" class=\"headerlink\" title=\"第三章\"></a>第三章</h4><h5 id=\"总线的基本概念\"><a href=\"#总线的基本概念\" class=\"headerlink\" title=\"总线的基本概念\"></a>总线的基本概念</h5><p>为了解决分散连接的<strong>不易扩展性</strong>，我们采取了<strong>总线</strong>(bus)来连接各个部件的信息传出线，是各个部件共享的传输介质。总线的英文就是 BUS 其实很生动形象了。</p>\n<p>传输方式有<strong>串行和并行</strong>两种。但是并行传输的话，线和线之间会有干扰，所以如果传输距离比较长的话信息会不准确。所以，对于并行传输一般仅用于距离较短的传输。</p>\n<h5 id=\"总线的结构\"><a href=\"#总线的结构\" class=\"headerlink\" title=\"总线的结构\"></a>总线的结构</h5><p>总线的结构有单总线、面向 CPU 的双总线和面向存储器的双总线</p>\n<p>总线是信号的公共传输线。在任意时刻只能有一个部件来使用总线，对于单总线，会成为我们系统的一个瓶颈。<br><img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E5%8D%95%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%84.png\" class=\"\"></p>\n<p>为了改进这种问题，我们提出了 <strong>面向 CPU 的双总线结构</strong>。<br>容易看出，这种总线主存和I/O设备交互的时候，CPU执行任务还是会打断，所以我们提出了 <strong>面向存储器的总线结构</strong>。<br><img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E9%9D%A2%E5%90%91CPU%E7%9A%84%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%84.png\" class=\"\"></p>\n<p>面向存储器的总线结构：<br><img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E4%BB%A5%E5%AD%98%E5%82%A8%E5%99%A8%E4%B8%BA%E4%B8%AD%E5%BF%83%E7%9A%84%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%84.png\" class=\"\"></p>\n<h5 id=\"总线的分类\"><a href=\"#总线的分类\" class=\"headerlink\" title=\"总线的分类\"></a>总线的分类</h5><p>按照不同分类标准总线可以分为好多中。<br>如果按照在计算机内部的位置来分类有两大种：</p>\n<ol>\n<li>片内总线。芯片内部的总线</li>\n<li>系统总线。计算机各部件之间的信息传输线<br>系统总线又可以分为：数据总线、地址总线、控制总线</li>\n</ol>\n<h5 id=\"总线特性及指标\"><a href=\"#总线特性及指标\" class=\"headerlink\" title=\"总线特性及指标\"></a>总线特性及指标</h5><p>总线要想进行有效的连接，必须满足一些特性。<br><img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E6%80%BB%E7%BA%BF%E7%89%B9%E6%80%A7.png\" class=\"\"></p>\n<h5 id=\"总线的性能指标\"><a href=\"#总线的性能指标\" class=\"headerlink\" title=\"总线的性能指标\"></a>总线的性能指标</h5><ol>\n<li>总线宽度</li>\n<li>标准传输律：每秒传输的最大字节</li>\n<li>时钟同步</li>\n<li>总线复用 地址线和数据线共用。为什么复用？主要是为了减少芯片的管脚数，芯片的管脚数越少，芯片的封装性越好。</li>\n<li>信号线数 地址线、数据线和控制线的总和。</li>\n</ol>\n<h5 id=\"总线的控制\"><a href=\"#总线的控制\" class=\"headerlink\" title=\"总线的控制\"></a>总线的控制</h5><h4 id=\"第四章\"><a href=\"#第四章\" class=\"headerlink\" title=\"第四章\"></a>第四章</h4><h5 id=\"存储器的分类\"><a href=\"#存储器的分类\" class=\"headerlink\" title=\"存储器的分类\"></a>存储器的分类</h5><p>标准很多，所以分类也很多。</p>\n<ol>\n<li>按照介质分类<br> 半导体存储器 TTL MOS    易失<br> 磁表面存储器 磁头、载磁体<br> 磁芯存储器<br> 光盘存储器</li>\n<li>按照存取方式分类<br> 存取时间和物理地址无关(随机访问)<br> 存取时间和物理地址有关(串行访问) 如磁带、磁带</li>\n<li>按照在计算机种的作用分类</li>\n</ol>\n<p>高速缓冲存储器 (Cache) 是在 CPU 与 主存之间的一块存储器。</p>\n<h5 id=\"存储器的层次结构\"><a href=\"#存储器的层次结构\" class=\"headerlink\" title=\"存储器的层次结构\"></a>存储器的层次结构</h5><img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1.png\" class=\"\">\n<p>主存和辅存之间通过软硬件相结合的方式连接在一起。他俩连接在一起如何定位存储地址呢？我们使用的是虚拟地址，就是我们以我们比较好理解的形式来写地址，比如 <code>0x7fff</code> 但是在执行的时候是有特定的机构去<strong>将虚拟地址转换为内存单元种的地址。</strong></p>\n<h5 id=\"主存储器\"><a href=\"#主存储器\" class=\"headerlink\" title=\"主存储器\"></a>主存储器</h5><h6 id=\"主存储器的地址分配\"><a href=\"#主存储器的地址分配\" class=\"headerlink\" title=\"主存储器的地址分配\"></a>主存储器的地址分配</h6><p>高位字节地址为字地址称为「大端、大尾方式」<br>低位字节地址为字地址称为「小端、小尾方式」<br>这两种方式都有机器使用，但是这样的话两种机器进行通讯就会出现问题。</p>\n<h6 id=\"主存的技术指标\"><a href=\"#主存的技术指标\" class=\"headerlink\" title=\"主存的技术指标\"></a>主存的技术指标</h6><p>主要是速度和容量两个方面。</p>\n<h5 id=\"半导体存储芯片\"><a href=\"#半导体存储芯片\" class=\"headerlink\" title=\"半导体存储芯片\"></a>半导体存储芯片</h5><p>CS Chip Select   选择芯片<br>CE Chip Enable   芯片使能，和 CS 功能一样<br>WE Write Enable  允许写入<br>OE Output Enable 允许输出<br>WR Write         允许写入的另一个形式?<br>上面的一般都是低电位有效。</p>\n<p>Column Address Select CAS 列选<br>Row Address Select RAS 行选<br>latency time 延迟时间</p>\n<p>双稳态触发器<br>珊极</p>\n<h6 id=\"随机存取存储器\"><a href=\"#随机存取存储器\" class=\"headerlink\" title=\"随机存取存储器\"></a>随机存取存储器</h6><p>有静态的和动态的。</p>\n<p>动态 RAM 是利用电容存储电荷的方式来存储信息的。<br>如果不对于动态 RAM 进行刷新，电容就会漏电，原来内部保存的 1 就会变成 0。动态 RAM 的刷新与行地址有关。</p>\n<p>动态 RAM 和静态 RAM 比价：<br><img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E5%8A%A8%E6%80%81RAM%E5%92%8C%E9%9D%99%E6%80%81RAM%E6%AF%94%E8%BE%83.png\" class=\"\"></p>\n<p>DRAM 一般用来做主存，SRAM 一般用来做缓存</p>\n<p>最初的 ROM 芯片是固定的，数据在制造时被写入并且无法更改。即使后来出现了 EPROM(Erasable Programmable Read-Only Memory) EEPROM(Electrically Erasable Programmable Read-Only Memory) 和闪存，这种可擦除可编程的，也仍然用 ROM 来称呼他们。EPROM 使用紫外线来擦除，后者 EEPROM 使用电子来擦除。</p>\n<h5 id=\"存储器和-CPU-的连接\"><a href=\"#存储器和-CPU-的连接\" class=\"headerlink\" title=\"存储器和 CPU 的连接\"></a>存储器和 CPU 的连接</h5><p>存储器的两种扩展：位扩展(增加存储字长)和字扩展(增加存储字的数量)<br><img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E4%BD%8D%E6%89%A9%E5%B1%95.png\" class=\"\"><br>其中字扩展是使用地址线最高位 是 1 或者是 0 来作为片选器(CS)<br><img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E5%AD%97%E6%89%A9%E5%B1%95.png\" class=\"\"></p>\n<p>还有字和位同时扩展：<br><img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E5%AD%97%E5%92%8C%E4%BD%8D%E6%89%A9%E5%B1%95.png\" class=\"\"></p>\n<p>MREQ 通常是计算机领域用来表示内存请求信号的缩写，其全称是 “Memory Request”。这个信号通常用于微处理器（CPU）与计算机系统中的内存之间的通信，以请求对内存进行读取或写入操作。<br>当 CPU 需要访问内存中的数据或指令时，它会生成 MREQ 信号，该信号将传递给内存控制器或内存子系统。内存控制器将根据 MREQ 信号执行相应的操作，例如读取请求时，将数据从内存中读取并提供给 CPU，或者写入请求时，将数据写入内存。<strong>一般是低电平是存储器，高电平时访问IO</strong></p>\n<h4 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h4><p>计算机的多样性：<br><img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E5%A4%9A%E6%A0%B7%E6%80%A7.png\" class=\"\"></p>\n<p>HPC 是 <code>High-Performance-Computer</code> 的简称，一般指一些超级计算机。</p>\n<p>MPI 消息传递接口 <code>Messag Passing Interface</code> 服务程序通常是指在高性能计算 (HPC) 环境中使用的一种通信库或协议，用于在分布式计算集群中的不同节点之间进行通信和数据交换(毕竟程序之间的并行运算必须有数据信息的交互)。</p>\n<p>控制器负责译码。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"第一章\"><a href=\"#第一章\" class=\"headerlink\" title=\"第一章\"></a>第一章</h4><p>计算机可以分成两个部分：硬件和软件。<br>软件的话，又分为<strong>系统软件</strong>和<strong>应用软件</strong>两种。</p>\n<p>下层是硬件，硬件进行了相对的封装，它对软件提供了接口，比如说提供了指令集，软件可以利用这些指令集，编写完成一定功能的软件。</p>\n<p>最早出现的语言是 <strong>机器语言</strong>(是由 01 代码构成的)，为了简化记忆，人们提出了汇编代码，符号化。汇编语言和机器语言之间一般是一一对应的，也就是一条汇编语言指令对应一条机器语言指令。</p>\n<img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AF%AD%E8%A8%80%E5%8F%91%E5%B1%95.png\" class=\"\">  \n<h5 id=\"冯诺伊曼计算机\"><a href=\"#冯诺伊曼计算机\" class=\"headerlink\" title=\"冯诺伊曼计算机\"></a>冯诺伊曼计算机</h5><p>冯诺依曼也被称为现代计算机之父。</p>\n<h6 id=\"EDVAC\"><a href=\"#EDVAC\" class=\"headerlink\" title=\"EDVAC\"></a>EDVAC</h6><p>EDVAC(Electronic Discrete Variable Automatic Computer)是计算机科学史上一台著名的计算机，是早期计算机发展中的一个里程碑。下面是它的一些特点：</p>\n<ol>\n<li>存储程序。是世界上第一台真正的<strong>存储程序计算机</strong>。这意味着它可以存储和执行在存储器中的程序，而不仅仅是执行预先固定在硬件中的计算任务。<strong>这一概念成为现代计算机架构的基础</strong></li>\n<li>二进制表示。EDVAC 使用了二进制表示法来处理数据和指令。</li>\n<li>使用了冯诺伊曼体系结构</li>\n<li>高度可编程。EDVAC的可编程性使得它可以执行各种计算任务，而不仅仅是用于特定目的的计算。</li>\n</ol>\n<p>而ENIAC是一台<strong>固定程序计算机</strong>，它的计算任务是<strong>通过物理重新连接电路来更改的</strong>，而不是通过存储在内存中的程序。这使得ENIAC的重新配置非常耗时和繁琐，限制了它的通用性。</p>\n<h6 id=\"冯诺依曼结构特点：\"><a href=\"#冯诺依曼结构特点：\" class=\"headerlink\" title=\"冯诺依曼结构特点：\"></a><strong>冯诺依曼结构特点：</strong></h6><ol>\n<li>计算机由五大部件组成。</li>\n<li>指令和数据以同等地位存储在存储器，可按地址访问。</li>\n<li>指令和数据都是二进制表示。</li>\n<li>指令由操作码和地址码组成，操作码就是表明这条指令干什么，地址码指明了<strong>操作数在哪里</strong>。</li>\n<li><strong>存储程序。程序存储在存储器中(核心特征)。</strong></li>\n<li>以运算器为中心。</li>\n</ol>\n<img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E5%86%AF%E8%AF%BA%E4%BC%8A%E6%9B%BC%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6%E6%A1%86%E6%9E%B6.png\" class=\"\">\n<h6 id=\"冯诺依曼结构的问题：\"><a href=\"#冯诺依曼结构的问题：\" class=\"headerlink\" title=\"冯诺依曼结构的问题：\"></a><strong>冯诺依曼结构的问题：</strong></h6><ol>\n<li>TODO</li>\n</ol>\n<p>ALU 和 CU 合成了 CPU<br>存储器又被分为了 主存和辅存<br>CPU 和存储器构成了我们的主机(也就是运算器、存储器、控制器构成了我们的主机)</p>\n<h5 id=\"存储器的基本组成\"><a href=\"#存储器的基本组成\" class=\"headerlink\" title=\"存储器的基本组成\"></a>存储器的基本组成</h5><p>存储单元：存放一串二进制代码。存储单元构成存储体。<br>存储字：在存储单元中存放的二进制代码组合。<br>存储字长：存储单元中二进制代码的位数。</p>\n<img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E5%AD%98%E5%82%A8%E5%99%A8%E7%BB%84%E6%88%90.png\" class=\"\">\n<p>MAR 存储器地址寄存器，反应存储器的个数。这个寄存器的长度和存储单元的个数相关。<br>MDR 保存了要保存到存储体中的数据或者是刚刚从存储器中取出来的数据。所以，这个寄存器的长度是存储单元的长度。</p>\n<h5 id=\"运算器基本组成及操作\"><a href=\"#运算器基本组成及操作\" class=\"headerlink\" title=\"运算器基本组成及操作\"></a>运算器基本组成及操作</h5><img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%BF%90%E7%AE%97%E5%99%A8%E5%9F%BA%E6%9C%AC%E7%BB%84%E6%88%90%E5%8F%8A%E6%93%8D%E4%BD%9C.png\" class=\"\">\n<p>加法的操作过程<br>初态 ACC 中保存了被减数和被加数<br>下一个操作就是把内存单元中的内容 M 放入寄存器 X</p>\n<img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E4%B9%98%E6%B3%95%E6%93%8D%E4%BD%9C.png\" class=\"\">\n<img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E9%99%A4%E6%B3%95%E6%93%8D%E4%BD%9C.png\" class=\"\">\n<h5 id=\"控制器基本结构\"><a href=\"#控制器基本结构\" class=\"headerlink\" title=\"控制器基本结构\"></a>控制器基本结构</h5><img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E6%8E%A7%E5%88%B6%E5%99%A8%E7%BB%93%E6%9E%84.png\" class=\"\">\n<p>IR 中也就是指令的操作码，其中核心是 CU，来执行指令。</p>\n<h5 id=\"主机\"><a href=\"#主机\" class=\"headerlink\" title=\"主机\"></a>主机</h5><p>运算器、存储器、控制器构成了主机。<br>将上面我们各自讲解的结构组合在一起，就得到了 <strong>主机的架构</strong>。<br><img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E4%B8%BB%E6%9C%BA%E6%9E%B6%E6%9E%84.png\" class=\"\"></p>\n<p>对于取数操作：</p>\n<ol>\n<li>先获得取数指令。PC 中存储的是指令地址，传到 MAR，在内存单元中获得指令，然后将指令传到 MDR，再传给<br>IR(IR 中存储的是指令信息)。</li>\n<li>IR 中拿到了指令，再交给 CU 对于指令进行分析。对于操作码分析是取数，将地址码传递到 MAR，在内存单元中寻找获得数值，然后传递给 MDR，再传递给 ACC(累加器)，完成取数操作。</li>\n</ol>\n<h4 id=\"第二章\"><a href=\"#第二章\" class=\"headerlink\" title=\"第二章\"></a>第二章</h4><p>这一章不是很重要。</p>\n<h4 id=\"第三章\"><a href=\"#第三章\" class=\"headerlink\" title=\"第三章\"></a>第三章</h4><h5 id=\"总线的基本概念\"><a href=\"#总线的基本概念\" class=\"headerlink\" title=\"总线的基本概念\"></a>总线的基本概念</h5><p>为了解决分散连接的<strong>不易扩展性</strong>，我们采取了<strong>总线</strong>(bus)来连接各个部件的信息传出线，是各个部件共享的传输介质。总线的英文就是 BUS 其实很生动形象了。</p>\n<p>传输方式有<strong>串行和并行</strong>两种。但是并行传输的话，线和线之间会有干扰，所以如果传输距离比较长的话信息会不准确。所以，对于并行传输一般仅用于距离较短的传输。</p>\n<h5 id=\"总线的结构\"><a href=\"#总线的结构\" class=\"headerlink\" title=\"总线的结构\"></a>总线的结构</h5><p>总线的结构有单总线、面向 CPU 的双总线和面向存储器的双总线</p>\n<p>总线是信号的公共传输线。在任意时刻只能有一个部件来使用总线，对于单总线，会成为我们系统的一个瓶颈。<br><img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E5%8D%95%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%84.png\" class=\"\"></p>\n<p>为了改进这种问题，我们提出了 <strong>面向 CPU 的双总线结构</strong>。<br>容易看出，这种总线主存和I/O设备交互的时候，CPU执行任务还是会打断，所以我们提出了 <strong>面向存储器的总线结构</strong>。<br><img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E9%9D%A2%E5%90%91CPU%E7%9A%84%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%84.png\" class=\"\"></p>\n<p>面向存储器的总线结构：<br><img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E4%BB%A5%E5%AD%98%E5%82%A8%E5%99%A8%E4%B8%BA%E4%B8%AD%E5%BF%83%E7%9A%84%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%84.png\" class=\"\"></p>\n<h5 id=\"总线的分类\"><a href=\"#总线的分类\" class=\"headerlink\" title=\"总线的分类\"></a>总线的分类</h5><p>按照不同分类标准总线可以分为好多中。<br>如果按照在计算机内部的位置来分类有两大种：</p>\n<ol>\n<li>片内总线。芯片内部的总线</li>\n<li>系统总线。计算机各部件之间的信息传输线<br>系统总线又可以分为：数据总线、地址总线、控制总线</li>\n</ol>\n<h5 id=\"总线特性及指标\"><a href=\"#总线特性及指标\" class=\"headerlink\" title=\"总线特性及指标\"></a>总线特性及指标</h5><p>总线要想进行有效的连接，必须满足一些特性。<br><img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E6%80%BB%E7%BA%BF%E7%89%B9%E6%80%A7.png\" class=\"\"></p>\n<h5 id=\"总线的性能指标\"><a href=\"#总线的性能指标\" class=\"headerlink\" title=\"总线的性能指标\"></a>总线的性能指标</h5><ol>\n<li>总线宽度</li>\n<li>标准传输律：每秒传输的最大字节</li>\n<li>时钟同步</li>\n<li>总线复用 地址线和数据线共用。为什么复用？主要是为了减少芯片的管脚数，芯片的管脚数越少，芯片的封装性越好。</li>\n<li>信号线数 地址线、数据线和控制线的总和。</li>\n</ol>\n<h5 id=\"总线的控制\"><a href=\"#总线的控制\" class=\"headerlink\" title=\"总线的控制\"></a>总线的控制</h5><h4 id=\"第四章\"><a href=\"#第四章\" class=\"headerlink\" title=\"第四章\"></a>第四章</h4><h5 id=\"存储器的分类\"><a href=\"#存储器的分类\" class=\"headerlink\" title=\"存储器的分类\"></a>存储器的分类</h5><p>标准很多，所以分类也很多。</p>\n<ol>\n<li>按照介质分类<br> 半导体存储器 TTL MOS    易失<br> 磁表面存储器 磁头、载磁体<br> 磁芯存储器<br> 光盘存储器</li>\n<li>按照存取方式分类<br> 存取时间和物理地址无关(随机访问)<br> 存取时间和物理地址有关(串行访问) 如磁带、磁带</li>\n<li>按照在计算机种的作用分类</li>\n</ol>\n<p>高速缓冲存储器 (Cache) 是在 CPU 与 主存之间的一块存储器。</p>\n<h5 id=\"存储器的层次结构\"><a href=\"#存储器的层次结构\" class=\"headerlink\" title=\"存储器的层次结构\"></a>存储器的层次结构</h5><img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1.png\" class=\"\">\n<p>主存和辅存之间通过软硬件相结合的方式连接在一起。他俩连接在一起如何定位存储地址呢？我们使用的是虚拟地址，就是我们以我们比较好理解的形式来写地址，比如 <code>0x7fff</code> 但是在执行的时候是有特定的机构去<strong>将虚拟地址转换为内存单元种的地址。</strong></p>\n<h5 id=\"主存储器\"><a href=\"#主存储器\" class=\"headerlink\" title=\"主存储器\"></a>主存储器</h5><h6 id=\"主存储器的地址分配\"><a href=\"#主存储器的地址分配\" class=\"headerlink\" title=\"主存储器的地址分配\"></a>主存储器的地址分配</h6><p>高位字节地址为字地址称为「大端、大尾方式」<br>低位字节地址为字地址称为「小端、小尾方式」<br>这两种方式都有机器使用，但是这样的话两种机器进行通讯就会出现问题。</p>\n<h6 id=\"主存的技术指标\"><a href=\"#主存的技术指标\" class=\"headerlink\" title=\"主存的技术指标\"></a>主存的技术指标</h6><p>主要是速度和容量两个方面。</p>\n<h5 id=\"半导体存储芯片\"><a href=\"#半导体存储芯片\" class=\"headerlink\" title=\"半导体存储芯片\"></a>半导体存储芯片</h5><p>CS Chip Select   选择芯片<br>CE Chip Enable   芯片使能，和 CS 功能一样<br>WE Write Enable  允许写入<br>OE Output Enable 允许输出<br>WR Write         允许写入的另一个形式?<br>上面的一般都是低电位有效。</p>\n<p>Column Address Select CAS 列选<br>Row Address Select RAS 行选<br>latency time 延迟时间</p>\n<p>双稳态触发器<br>珊极</p>\n<h6 id=\"随机存取存储器\"><a href=\"#随机存取存储器\" class=\"headerlink\" title=\"随机存取存储器\"></a>随机存取存储器</h6><p>有静态的和动态的。</p>\n<p>动态 RAM 是利用电容存储电荷的方式来存储信息的。<br>如果不对于动态 RAM 进行刷新，电容就会漏电，原来内部保存的 1 就会变成 0。动态 RAM 的刷新与行地址有关。</p>\n<p>动态 RAM 和静态 RAM 比价：<br><img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E5%8A%A8%E6%80%81RAM%E5%92%8C%E9%9D%99%E6%80%81RAM%E6%AF%94%E8%BE%83.png\" class=\"\"></p>\n<p>DRAM 一般用来做主存，SRAM 一般用来做缓存</p>\n<p>最初的 ROM 芯片是固定的，数据在制造时被写入并且无法更改。即使后来出现了 EPROM(Erasable Programmable Read-Only Memory) EEPROM(Electrically Erasable Programmable Read-Only Memory) 和闪存，这种可擦除可编程的，也仍然用 ROM 来称呼他们。EPROM 使用紫外线来擦除，后者 EEPROM 使用电子来擦除。</p>\n<h5 id=\"存储器和-CPU-的连接\"><a href=\"#存储器和-CPU-的连接\" class=\"headerlink\" title=\"存储器和 CPU 的连接\"></a>存储器和 CPU 的连接</h5><p>存储器的两种扩展：位扩展(增加存储字长)和字扩展(增加存储字的数量)<br><img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E4%BD%8D%E6%89%A9%E5%B1%95.png\" class=\"\"><br>其中字扩展是使用地址线最高位 是 1 或者是 0 来作为片选器(CS)<br><img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E5%AD%97%E6%89%A9%E5%B1%95.png\" class=\"\"></p>\n<p>还有字和位同时扩展：<br><img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E5%AD%97%E5%92%8C%E4%BD%8D%E6%89%A9%E5%B1%95.png\" class=\"\"></p>\n<p>MREQ 通常是计算机领域用来表示内存请求信号的缩写，其全称是 “Memory Request”。这个信号通常用于微处理器（CPU）与计算机系统中的内存之间的通信，以请求对内存进行读取或写入操作。<br>当 CPU 需要访问内存中的数据或指令时，它会生成 MREQ 信号，该信号将传递给内存控制器或内存子系统。内存控制器将根据 MREQ 信号执行相应的操作，例如读取请求时，将数据从内存中读取并提供给 CPU，或者写入请求时，将数据写入内存。<strong>一般是低电平是存储器，高电平时访问IO</strong></p>\n<h4 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h4><p>计算机的多样性：<br><img src=\"/2023/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E5%A4%9A%E6%A0%B7%E6%80%A7.png\" class=\"\"></p>\n<p>HPC 是 <code>High-Performance-Computer</code> 的简称，一般指一些超级计算机。</p>\n<p>MPI 消息传递接口 <code>Messag Passing Interface</code> 服务程序通常是指在高性能计算 (HPC) 环境中使用的一种通信库或协议，用于在分布式计算集群中的不同节点之间进行通信和数据交换(毕竟程序之间的并行运算必须有数据信息的交互)。</p>\n<p>控制器负责译码。</p>\n"},{"title":"图解机器学习","description":"The key record of this book.","mathjax":true,"_content":"这些最新的机器学习算法，都是在最经典的算法——最小二乘法的基础上发展起来的。\n\n### 第一部分 绪论\n\n#### 第 1 章\n\n使计算机获得这种泛化能力，是监督学习的最终目标。\n这一类机器学习的典型任务包括：预测数值型数据的回归、预测分类标签的分类、预测顺序的排序等。\n\n无监督学习的目标可以不是十分明确，它在人造卫星故障诊断、视频分析、社交网站解析和声音信号解析等方面大显身手。\n\n强化学习，指在没有老师提示的情况下，自己对预测的结果进行评估的方法。\n\n异常检测，一般情况下，在异常检测任务中，对于什么样的数据是异常的，什么样的数据是正常的，在事先是未知的。在这样的无监督的异常检测中，一般采用**密度估计**的办法，把靠近密度中心的数据作为正常的数据，偏离的作为异常的数据。\n\n降维，从高维空间提取**关键信息**，转化为易于计算的低维问题进而求解的方法。\n\n$\\max_y p(y|x)$ 是指当 y 取得特定值的时候，$p(y|x)$ 的最大值。\n\n$\\text{argmax} \\ {p(y|x)}$ 是指当 $p(y|x)$ 取得最大值时，y 对应的值。\n\n#### 第 2 章\n\n在线性模型中，多项式或者三角多项式等基函数与训练样本是毫不相关的。但是 **核模型** 则会在基函数设计的时候用到输入样本。\n\n核模型，是以使用被称为 **核函数**的二元函数 $K(.,.)$，以 $K(x, x_j)_{j=1}^{n}$ 的线性结合方式加以定义的。$f_{\\theta}(x) = \\sum\\limits_{i = 1}^{n}\\theta_j K(x, x_j)$ \n\n在众多的核函数中，以高斯核函数的使用最为广泛：$K(x, c) = \\exp{(-\\dfrac{||x-c||^{2}}{2h^2})}$\n\n与参数相关的非线性模型，称为非线性模型。其中，需要特别拿出来的，就是非线性模型中的「层级模型」。\n\n$f_{\\theta}(x) = \\sum\\limits_{j = 1}^{b} \\alpha_j\\phi(x;\\beta)_j$，其中 $\\alpha$ 和 $\\beta$ 都是参数。\n\n基函数通常采用 S 型函数：\n$\\phi(x;\\beta) = \\dfrac{1}{1 + \\exp{(-x^{T}\\omega -\\gamma)}}$ 或者高斯函数 $\\phi(x; \\beta) = \\exp{(-\\dfrac{||x - c||^{2}}{2h^2})}$\n\nS 型函数模仿的是人类脑细胞的输入输出函数，因此使用 S 型函数的层级模型也经常称为人工神经网络模型。\n\n### 第二部分 有监督学习\n\n#### 第 3 章 最小二乘学习法\n\n对于 $J_{LS}(\\theta) = \\frac{1}{2} \\sum\\limits_{i = 1}^{n}(f_{\\theta}(x_i) - y_i)^{2}$ 最小时的参数 $\\theta$ 进行学习。其中，LS 是 Least Squares 的首字母。\n\n随机梯度算法是指，沿着训练平方误差 $J_{LS}$ 的梯度下降，对参数 $\\theta$ 依次进行学习的方法。\n\n#### 第 4 章 带有约束条件的最小二乘法\n\n单纯的最小二乘法对于包含噪声的学习过程经常有过拟合的弱点。这往往是由于学习模型对于训练样本而言过度复杂。下面本章将介绍能够控制模型复杂情况的、带有约束条件的最小二乘学习法。\n\n","source":"_drafts/图解机器学习.md","raw":"---\ntitle: 图解机器学习\ntags: machine learning\ndescription: The key record of this book. \nmathjax: true\n---\n这些最新的机器学习算法，都是在最经典的算法——最小二乘法的基础上发展起来的。\n\n### 第一部分 绪论\n\n#### 第 1 章\n\n使计算机获得这种泛化能力，是监督学习的最终目标。\n这一类机器学习的典型任务包括：预测数值型数据的回归、预测分类标签的分类、预测顺序的排序等。\n\n无监督学习的目标可以不是十分明确，它在人造卫星故障诊断、视频分析、社交网站解析和声音信号解析等方面大显身手。\n\n强化学习，指在没有老师提示的情况下，自己对预测的结果进行评估的方法。\n\n异常检测，一般情况下，在异常检测任务中，对于什么样的数据是异常的，什么样的数据是正常的，在事先是未知的。在这样的无监督的异常检测中，一般采用**密度估计**的办法，把靠近密度中心的数据作为正常的数据，偏离的作为异常的数据。\n\n降维，从高维空间提取**关键信息**，转化为易于计算的低维问题进而求解的方法。\n\n$\\max_y p(y|x)$ 是指当 y 取得特定值的时候，$p(y|x)$ 的最大值。\n\n$\\text{argmax} \\ {p(y|x)}$ 是指当 $p(y|x)$ 取得最大值时，y 对应的值。\n\n#### 第 2 章\n\n在线性模型中，多项式或者三角多项式等基函数与训练样本是毫不相关的。但是 **核模型** 则会在基函数设计的时候用到输入样本。\n\n核模型，是以使用被称为 **核函数**的二元函数 $K(.,.)$，以 $K(x, x_j)_{j=1}^{n}$ 的线性结合方式加以定义的。$f_{\\theta}(x) = \\sum\\limits_{i = 1}^{n}\\theta_j K(x, x_j)$ \n\n在众多的核函数中，以高斯核函数的使用最为广泛：$K(x, c) = \\exp{(-\\dfrac{||x-c||^{2}}{2h^2})}$\n\n与参数相关的非线性模型，称为非线性模型。其中，需要特别拿出来的，就是非线性模型中的「层级模型」。\n\n$f_{\\theta}(x) = \\sum\\limits_{j = 1}^{b} \\alpha_j\\phi(x;\\beta)_j$，其中 $\\alpha$ 和 $\\beta$ 都是参数。\n\n基函数通常采用 S 型函数：\n$\\phi(x;\\beta) = \\dfrac{1}{1 + \\exp{(-x^{T}\\omega -\\gamma)}}$ 或者高斯函数 $\\phi(x; \\beta) = \\exp{(-\\dfrac{||x - c||^{2}}{2h^2})}$\n\nS 型函数模仿的是人类脑细胞的输入输出函数，因此使用 S 型函数的层级模型也经常称为人工神经网络模型。\n\n### 第二部分 有监督学习\n\n#### 第 3 章 最小二乘学习法\n\n对于 $J_{LS}(\\theta) = \\frac{1}{2} \\sum\\limits_{i = 1}^{n}(f_{\\theta}(x_i) - y_i)^{2}$ 最小时的参数 $\\theta$ 进行学习。其中，LS 是 Least Squares 的首字母。\n\n随机梯度算法是指，沿着训练平方误差 $J_{LS}$ 的梯度下降，对参数 $\\theta$ 依次进行学习的方法。\n\n#### 第 4 章 带有约束条件的最小二乘法\n\n单纯的最小二乘法对于包含噪声的学习过程经常有过拟合的弱点。这往往是由于学习模型对于训练样本而言过度复杂。下面本章将介绍能够控制模型复杂情况的、带有约束条件的最小二乘学习法。\n\n","slug":"图解机器学习","published":0,"date":"2023-08-23T09:22:33.616Z","updated":"2023-08-23T15:44:54.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szol00275oogdrc84ngd","content":"<p>这些最新的机器学习算法，都是在最经典的算法——最小二乘法的基础上发展起来的。</p>\n<h3 id=\"第一部分-绪论\"><a href=\"#第一部分-绪论\" class=\"headerlink\" title=\"第一部分 绪论\"></a>第一部分 绪论</h3><h4 id=\"第-1-章\"><a href=\"#第-1-章\" class=\"headerlink\" title=\"第 1 章\"></a>第 1 章</h4><p>使计算机获得这种泛化能力，是监督学习的最终目标。<br>这一类机器学习的典型任务包括：预测数值型数据的回归、预测分类标签的分类、预测顺序的排序等。</p>\n<p>无监督学习的目标可以不是十分明确，它在人造卫星故障诊断、视频分析、社交网站解析和声音信号解析等方面大显身手。</p>\n<p>强化学习，指在没有老师提示的情况下，自己对预测的结果进行评估的方法。</p>\n<p>异常检测，一般情况下，在异常检测任务中，对于什么样的数据是异常的，什么样的数据是正常的，在事先是未知的。在这样的无监督的异常检测中，一般采用<strong>密度估计</strong>的办法，把靠近密度中心的数据作为正常的数据，偏离的作为异常的数据。</p>\n<p>降维，从高维空间提取<strong>关键信息</strong>，转化为易于计算的低维问题进而求解的方法。</p>\n<p>$\\max_y p(y|x)$ 是指当 y 取得特定值的时候，$p(y|x)$ 的最大值。</p>\n<p>$\\text{argmax} \\ {p(y|x)}$ 是指当 $p(y|x)$ 取得最大值时，y 对应的值。</p>\n<h4 id=\"第-2-章\"><a href=\"#第-2-章\" class=\"headerlink\" title=\"第 2 章\"></a>第 2 章</h4><p>在线性模型中，多项式或者三角多项式等基函数与训练样本是毫不相关的。但是 <strong>核模型</strong> 则会在基函数设计的时候用到输入样本。</p>\n<p>核模型，是以使用被称为 <strong>核函数</strong>的二元函数 $K(.,.)$，以 $K(x, x_j)_{j=1}^{n}$ 的线性结合方式加以定义的。$f_{\\theta}(x) = \\sum\\limits_{i = 1}^{n}\\theta_j K(x, x_j)$ </p>\n<p>在众多的核函数中，以高斯核函数的使用最为广泛：$K(x, c) = \\exp{(-\\dfrac{||x-c||^{2}}{2h^2})}$</p>\n<p>与参数相关的非线性模型，称为非线性模型。其中，需要特别拿出来的，就是非线性模型中的「层级模型」。</p>\n<p>$f_{\\theta}(x) = \\sum\\limits_{j = 1}^{b} \\alpha_j\\phi(x;\\beta)_j$，其中 $\\alpha$ 和 $\\beta$ 都是参数。</p>\n<p>基函数通常采用 S 型函数：<br>$\\phi(x;\\beta) = \\dfrac{1}{1 + \\exp{(-x^{T}\\omega -\\gamma)}}$ 或者高斯函数 $\\phi(x; \\beta) = \\exp{(-\\dfrac{||x - c||^{2}}{2h^2})}$</p>\n<p>S 型函数模仿的是人类脑细胞的输入输出函数，因此使用 S 型函数的层级模型也经常称为人工神经网络模型。</p>\n<h3 id=\"第二部分-有监督学习\"><a href=\"#第二部分-有监督学习\" class=\"headerlink\" title=\"第二部分 有监督学习\"></a>第二部分 有监督学习</h3><h4 id=\"第-3-章-最小二乘学习法\"><a href=\"#第-3-章-最小二乘学习法\" class=\"headerlink\" title=\"第 3 章 最小二乘学习法\"></a>第 3 章 最小二乘学习法</h4><p>对于 $J_{LS}(\\theta) = \\frac{1}{2} \\sum\\limits_{i = 1}^{n}(f_{\\theta}(x_i) - y_i)^{2}$ 最小时的参数 $\\theta$ 进行学习。其中，LS 是 Least Squares 的首字母。</p>\n<p>随机梯度算法是指，沿着训练平方误差 $J_{LS}$ 的梯度下降，对参数 $\\theta$ 依次进行学习的方法。</p>\n<h4 id=\"第-4-章-带有约束条件的最小二乘法\"><a href=\"#第-4-章-带有约束条件的最小二乘法\" class=\"headerlink\" title=\"第 4 章 带有约束条件的最小二乘法\"></a>第 4 章 带有约束条件的最小二乘法</h4><p>单纯的最小二乘法对于包含噪声的学习过程经常有过拟合的弱点。这往往是由于学习模型对于训练样本而言过度复杂。下面本章将介绍能够控制模型复杂情况的、带有约束条件的最小二乘学习法。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这些最新的机器学习算法，都是在最经典的算法——最小二乘法的基础上发展起来的。</p>\n<h3 id=\"第一部分-绪论\"><a href=\"#第一部分-绪论\" class=\"headerlink\" title=\"第一部分 绪论\"></a>第一部分 绪论</h3><h4 id=\"第-1-章\"><a href=\"#第-1-章\" class=\"headerlink\" title=\"第 1 章\"></a>第 1 章</h4><p>使计算机获得这种泛化能力，是监督学习的最终目标。<br>这一类机器学习的典型任务包括：预测数值型数据的回归、预测分类标签的分类、预测顺序的排序等。</p>\n<p>无监督学习的目标可以不是十分明确，它在人造卫星故障诊断、视频分析、社交网站解析和声音信号解析等方面大显身手。</p>\n<p>强化学习，指在没有老师提示的情况下，自己对预测的结果进行评估的方法。</p>\n<p>异常检测，一般情况下，在异常检测任务中，对于什么样的数据是异常的，什么样的数据是正常的，在事先是未知的。在这样的无监督的异常检测中，一般采用<strong>密度估计</strong>的办法，把靠近密度中心的数据作为正常的数据，偏离的作为异常的数据。</p>\n<p>降维，从高维空间提取<strong>关键信息</strong>，转化为易于计算的低维问题进而求解的方法。</p>\n<p>$\\max_y p(y|x)$ 是指当 y 取得特定值的时候，$p(y|x)$ 的最大值。</p>\n<p>$\\text{argmax} \\ {p(y|x)}$ 是指当 $p(y|x)$ 取得最大值时，y 对应的值。</p>\n<h4 id=\"第-2-章\"><a href=\"#第-2-章\" class=\"headerlink\" title=\"第 2 章\"></a>第 2 章</h4><p>在线性模型中，多项式或者三角多项式等基函数与训练样本是毫不相关的。但是 <strong>核模型</strong> 则会在基函数设计的时候用到输入样本。</p>\n<p>核模型，是以使用被称为 <strong>核函数</strong>的二元函数 $K(.,.)$，以 $K(x, x_j)_{j=1}^{n}$ 的线性结合方式加以定义的。$f_{\\theta}(x) = \\sum\\limits_{i = 1}^{n}\\theta_j K(x, x_j)$ </p>\n<p>在众多的核函数中，以高斯核函数的使用最为广泛：$K(x, c) = \\exp{(-\\dfrac{||x-c||^{2}}{2h^2})}$</p>\n<p>与参数相关的非线性模型，称为非线性模型。其中，需要特别拿出来的，就是非线性模型中的「层级模型」。</p>\n<p>$f_{\\theta}(x) = \\sum\\limits_{j = 1}^{b} \\alpha_j\\phi(x;\\beta)_j$，其中 $\\alpha$ 和 $\\beta$ 都是参数。</p>\n<p>基函数通常采用 S 型函数：<br>$\\phi(x;\\beta) = \\dfrac{1}{1 + \\exp{(-x^{T}\\omega -\\gamma)}}$ 或者高斯函数 $\\phi(x; \\beta) = \\exp{(-\\dfrac{||x - c||^{2}}{2h^2})}$</p>\n<p>S 型函数模仿的是人类脑细胞的输入输出函数，因此使用 S 型函数的层级模型也经常称为人工神经网络模型。</p>\n<h3 id=\"第二部分-有监督学习\"><a href=\"#第二部分-有监督学习\" class=\"headerlink\" title=\"第二部分 有监督学习\"></a>第二部分 有监督学习</h3><h4 id=\"第-3-章-最小二乘学习法\"><a href=\"#第-3-章-最小二乘学习法\" class=\"headerlink\" title=\"第 3 章 最小二乘学习法\"></a>第 3 章 最小二乘学习法</h4><p>对于 $J_{LS}(\\theta) = \\frac{1}{2} \\sum\\limits_{i = 1}^{n}(f_{\\theta}(x_i) - y_i)^{2}$ 最小时的参数 $\\theta$ 进行学习。其中，LS 是 Least Squares 的首字母。</p>\n<p>随机梯度算法是指，沿着训练平方误差 $J_{LS}$ 的梯度下降，对参数 $\\theta$ 依次进行学习的方法。</p>\n<h4 id=\"第-4-章-带有约束条件的最小二乘法\"><a href=\"#第-4-章-带有约束条件的最小二乘法\" class=\"headerlink\" title=\"第 4 章 带有约束条件的最小二乘法\"></a>第 4 章 带有约束条件的最小二乘法</h4><p>单纯的最小二乘法对于包含噪声的学习过程经常有过拟合的弱点。这往往是由于学习模型对于训练样本而言过度复杂。下面本章将介绍能够控制模型复杂情况的、带有约束条件的最小二乘学习法。</p>\n"},{"title":"奇异值分解","mathjax":true,"description":"Learning about SVD.","_content":"#### 介绍\n奇异值分解是一个有着明显物理意义的方法，它可以将一个比较复杂的矩阵用更小更简单的几个子矩阵的相乘来表示，这些小矩阵描述的是矩阵的重要的特性。\n\n就像是描述一个人一样，给别人描述说这个人长得浓眉大眼，方脸，络腮胡，而且带个黑框的眼镜，这样寥寥的几个特征，就让别人脑海里面就有一个较为清楚的认识，实际上，人脸上的特征是有着无数种的，之所以能这么描述，是因为人天生就有着非常好的抽取重要特征的能力，**让机器学会抽取重要的特征，SVD是一个重要的方法。**\n\n在机器学习领域，有相当多的应用与奇异值都可以扯上关系，比如做feature reduction的PCA，做数据压缩（以图像压缩为代表）的算法，还有做搜索引擎语义层次检索的LSI（Latent Semantic Indexing）\n\n#### 分析\n\n特征值分解是一个提取矩阵特征很不错的方法，但是它只是对方阵而言的。现实生活中，我们看到的大部分矩阵都不是方阵，那么我们如何描述这样普通矩阵的重要特征呢？奇异值分解就可以来做这个事情，奇异值分解是一个能使用于任意矩阵的一种分解方式。\n\n$\\begin{aligned}\nA = U \\Sigma V^{T}\n\\end{aligned}$，其中 U 是一个 N * N 的矩阵（里面的向量是正交的，U里面的向量称为左奇异向量），$\\Sigma$ 是一个 N * M 的矩阵（除了对角线的元素都是0，对角线上的元素称为奇异值），V 是一个 M * M 的矩阵（里面的向量也是正交的，V里面的向量称为右奇异向量）。\n\n那么奇异值和特征值是如何对应起来的呢？我们对于 $(A^{T}A) \\vec{v_i} = \\lambda \\vec{v_i}$，这里得到的 $v$ 就是上面的右奇异向量。\n\n此外，我们还可以得到 $\\sigma_i = \\sqrt{\\lambda_i}, u_i = \\dfrac{1}{\\sigma_i}A\\vec{v_i}$\n\n这里的σ就是上面说的奇异值，u就是上面说的左奇异向量。奇异值σ跟特征值类似，在矩阵Σ中也是从大到小排列，而且σ的减少特别的快，在很多情况下，前10%甚至1%的奇异值的和就占了全部的奇异值之和的99%以上了。也就是说，我们也可以用前r大的奇异值来近似描述矩阵，这里定义一下部分奇异值分解：$A_{m \\times n} = U_{m \\times r} \\Sigma_{r \\times r} V^{T}_{r \\times n}$，其中 r 是一个远小于 m、n 的数。\n\n右边的三个矩阵相乘的结果将会是一个接近于A的矩阵，在这儿，r越接近于n，则相乘的结果越接近于A。而这三个矩阵的面积之和（在存储观点来说，矩阵面积越小，存储量就越小）要远远小于原始的矩阵A，我们如果想要压缩空间来表示原矩阵A，我们存下这里的三个矩阵：U、Σ、V就好了。\n\n#### 奇异值的应用\n1. 图像压缩\n    我们只保留前面一定数目的比较重要的项，就可以把一个图片差不多展示出来。\n2. 图像去噪\n    在图像处理领域，奇异值不仅可以应用在数据压缩上，还可以对图像去噪。如果一副图像包含噪声，我们有理由相信那些较小的奇异值就是由于噪声引起的。当我们强行令这些较小的奇异值为0时，就可以去除图片中的噪声。\n\n#### 参考文章\n\n1. https://zhuanlan.zhihu.com/p/59324612","source":"_drafts/奇异值分解.md","raw":"---\ntitle: 奇异值分解\ntags: Mathematic\nmathjax: true\ndescription: Learning about SVD.\n---\n#### 介绍\n奇异值分解是一个有着明显物理意义的方法，它可以将一个比较复杂的矩阵用更小更简单的几个子矩阵的相乘来表示，这些小矩阵描述的是矩阵的重要的特性。\n\n就像是描述一个人一样，给别人描述说这个人长得浓眉大眼，方脸，络腮胡，而且带个黑框的眼镜，这样寥寥的几个特征，就让别人脑海里面就有一个较为清楚的认识，实际上，人脸上的特征是有着无数种的，之所以能这么描述，是因为人天生就有着非常好的抽取重要特征的能力，**让机器学会抽取重要的特征，SVD是一个重要的方法。**\n\n在机器学习领域，有相当多的应用与奇异值都可以扯上关系，比如做feature reduction的PCA，做数据压缩（以图像压缩为代表）的算法，还有做搜索引擎语义层次检索的LSI（Latent Semantic Indexing）\n\n#### 分析\n\n特征值分解是一个提取矩阵特征很不错的方法，但是它只是对方阵而言的。现实生活中，我们看到的大部分矩阵都不是方阵，那么我们如何描述这样普通矩阵的重要特征呢？奇异值分解就可以来做这个事情，奇异值分解是一个能使用于任意矩阵的一种分解方式。\n\n$\\begin{aligned}\nA = U \\Sigma V^{T}\n\\end{aligned}$，其中 U 是一个 N * N 的矩阵（里面的向量是正交的，U里面的向量称为左奇异向量），$\\Sigma$ 是一个 N * M 的矩阵（除了对角线的元素都是0，对角线上的元素称为奇异值），V 是一个 M * M 的矩阵（里面的向量也是正交的，V里面的向量称为右奇异向量）。\n\n那么奇异值和特征值是如何对应起来的呢？我们对于 $(A^{T}A) \\vec{v_i} = \\lambda \\vec{v_i}$，这里得到的 $v$ 就是上面的右奇异向量。\n\n此外，我们还可以得到 $\\sigma_i = \\sqrt{\\lambda_i}, u_i = \\dfrac{1}{\\sigma_i}A\\vec{v_i}$\n\n这里的σ就是上面说的奇异值，u就是上面说的左奇异向量。奇异值σ跟特征值类似，在矩阵Σ中也是从大到小排列，而且σ的减少特别的快，在很多情况下，前10%甚至1%的奇异值的和就占了全部的奇异值之和的99%以上了。也就是说，我们也可以用前r大的奇异值来近似描述矩阵，这里定义一下部分奇异值分解：$A_{m \\times n} = U_{m \\times r} \\Sigma_{r \\times r} V^{T}_{r \\times n}$，其中 r 是一个远小于 m、n 的数。\n\n右边的三个矩阵相乘的结果将会是一个接近于A的矩阵，在这儿，r越接近于n，则相乘的结果越接近于A。而这三个矩阵的面积之和（在存储观点来说，矩阵面积越小，存储量就越小）要远远小于原始的矩阵A，我们如果想要压缩空间来表示原矩阵A，我们存下这里的三个矩阵：U、Σ、V就好了。\n\n#### 奇异值的应用\n1. 图像压缩\n    我们只保留前面一定数目的比较重要的项，就可以把一个图片差不多展示出来。\n2. 图像去噪\n    在图像处理领域，奇异值不仅可以应用在数据压缩上，还可以对图像去噪。如果一副图像包含噪声，我们有理由相信那些较小的奇异值就是由于噪声引起的。当我们强行令这些较小的奇异值为0时，就可以去除图片中的噪声。\n\n#### 参考文章\n\n1. https://zhuanlan.zhihu.com/p/59324612","slug":"奇异值分解","published":0,"date":"2023-08-23T14:38:11.604Z","updated":"2023-08-23T15:36:35.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szol00295oogg2a5f9fr","content":"<h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>奇异值分解是一个有着明显物理意义的方法，它可以将一个比较复杂的矩阵用更小更简单的几个子矩阵的相乘来表示，这些小矩阵描述的是矩阵的重要的特性。</p>\n<p>就像是描述一个人一样，给别人描述说这个人长得浓眉大眼，方脸，络腮胡，而且带个黑框的眼镜，这样寥寥的几个特征，就让别人脑海里面就有一个较为清楚的认识，实际上，人脸上的特征是有着无数种的，之所以能这么描述，是因为人天生就有着非常好的抽取重要特征的能力，<strong>让机器学会抽取重要的特征，SVD是一个重要的方法。</strong></p>\n<p>在机器学习领域，有相当多的应用与奇异值都可以扯上关系，比如做feature reduction的PCA，做数据压缩（以图像压缩为代表）的算法，还有做搜索引擎语义层次检索的LSI（Latent Semantic Indexing）</p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>特征值分解是一个提取矩阵特征很不错的方法，但是它只是对方阵而言的。现实生活中，我们看到的大部分矩阵都不是方阵，那么我们如何描述这样普通矩阵的重要特征呢？奇异值分解就可以来做这个事情，奇异值分解是一个能使用于任意矩阵的一种分解方式。</p>\n<p>$\\begin{aligned}<br>A = U \\Sigma V^{T}<br>\\end{aligned}$，其中 U 是一个 N <em> N 的矩阵（里面的向量是正交的，U里面的向量称为左奇异向量），$\\Sigma$ 是一个 N </em> M 的矩阵（除了对角线的元素都是0，对角线上的元素称为奇异值），V 是一个 M * M 的矩阵（里面的向量也是正交的，V里面的向量称为右奇异向量）。</p>\n<p>那么奇异值和特征值是如何对应起来的呢？我们对于 $(A^{T}A) \\vec{v_i} = \\lambda \\vec{v_i}$，这里得到的 $v$ 就是上面的右奇异向量。</p>\n<p>此外，我们还可以得到 $\\sigma_i = \\sqrt{\\lambda_i}, u_i = \\dfrac{1}{\\sigma_i}A\\vec{v_i}$</p>\n<p>这里的σ就是上面说的奇异值，u就是上面说的左奇异向量。奇异值σ跟特征值类似，在矩阵Σ中也是从大到小排列，而且σ的减少特别的快，在很多情况下，前10%甚至1%的奇异值的和就占了全部的奇异值之和的99%以上了。也就是说，我们也可以用前r大的奇异值来近似描述矩阵，这里定义一下部分奇异值分解：$A_{m \\times n} = U_{m \\times r} \\Sigma_{r \\times r} V^{T}_{r \\times n}$，其中 r 是一个远小于 m、n 的数。</p>\n<p>右边的三个矩阵相乘的结果将会是一个接近于A的矩阵，在这儿，r越接近于n，则相乘的结果越接近于A。而这三个矩阵的面积之和（在存储观点来说，矩阵面积越小，存储量就越小）要远远小于原始的矩阵A，我们如果想要压缩空间来表示原矩阵A，我们存下这里的三个矩阵：U、Σ、V就好了。</p>\n<h4 id=\"奇异值的应用\"><a href=\"#奇异值的应用\" class=\"headerlink\" title=\"奇异值的应用\"></a>奇异值的应用</h4><ol>\n<li>图像压缩<br> 我们只保留前面一定数目的比较重要的项，就可以把一个图片差不多展示出来。</li>\n<li>图像去噪<br> 在图像处理领域，奇异值不仅可以应用在数据压缩上，还可以对图像去噪。如果一副图像包含噪声，我们有理由相信那些较小的奇异值就是由于噪声引起的。当我们强行令这些较小的奇异值为0时，就可以去除图片中的噪声。</li>\n</ol>\n<h4 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h4><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/59324612\">https://zhuanlan.zhihu.com/p/59324612</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>奇异值分解是一个有着明显物理意义的方法，它可以将一个比较复杂的矩阵用更小更简单的几个子矩阵的相乘来表示，这些小矩阵描述的是矩阵的重要的特性。</p>\n<p>就像是描述一个人一样，给别人描述说这个人长得浓眉大眼，方脸，络腮胡，而且带个黑框的眼镜，这样寥寥的几个特征，就让别人脑海里面就有一个较为清楚的认识，实际上，人脸上的特征是有着无数种的，之所以能这么描述，是因为人天生就有着非常好的抽取重要特征的能力，<strong>让机器学会抽取重要的特征，SVD是一个重要的方法。</strong></p>\n<p>在机器学习领域，有相当多的应用与奇异值都可以扯上关系，比如做feature reduction的PCA，做数据压缩（以图像压缩为代表）的算法，还有做搜索引擎语义层次检索的LSI（Latent Semantic Indexing）</p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>特征值分解是一个提取矩阵特征很不错的方法，但是它只是对方阵而言的。现实生活中，我们看到的大部分矩阵都不是方阵，那么我们如何描述这样普通矩阵的重要特征呢？奇异值分解就可以来做这个事情，奇异值分解是一个能使用于任意矩阵的一种分解方式。</p>\n<p>$\\begin{aligned}<br>A = U \\Sigma V^{T}<br>\\end{aligned}$，其中 U 是一个 N <em> N 的矩阵（里面的向量是正交的，U里面的向量称为左奇异向量），$\\Sigma$ 是一个 N </em> M 的矩阵（除了对角线的元素都是0，对角线上的元素称为奇异值），V 是一个 M * M 的矩阵（里面的向量也是正交的，V里面的向量称为右奇异向量）。</p>\n<p>那么奇异值和特征值是如何对应起来的呢？我们对于 $(A^{T}A) \\vec{v_i} = \\lambda \\vec{v_i}$，这里得到的 $v$ 就是上面的右奇异向量。</p>\n<p>此外，我们还可以得到 $\\sigma_i = \\sqrt{\\lambda_i}, u_i = \\dfrac{1}{\\sigma_i}A\\vec{v_i}$</p>\n<p>这里的σ就是上面说的奇异值，u就是上面说的左奇异向量。奇异值σ跟特征值类似，在矩阵Σ中也是从大到小排列，而且σ的减少特别的快，在很多情况下，前10%甚至1%的奇异值的和就占了全部的奇异值之和的99%以上了。也就是说，我们也可以用前r大的奇异值来近似描述矩阵，这里定义一下部分奇异值分解：$A_{m \\times n} = U_{m \\times r} \\Sigma_{r \\times r} V^{T}_{r \\times n}$，其中 r 是一个远小于 m、n 的数。</p>\n<p>右边的三个矩阵相乘的结果将会是一个接近于A的矩阵，在这儿，r越接近于n，则相乘的结果越接近于A。而这三个矩阵的面积之和（在存储观点来说，矩阵面积越小，存储量就越小）要远远小于原始的矩阵A，我们如果想要压缩空间来表示原矩阵A，我们存下这里的三个矩阵：U、Σ、V就好了。</p>\n<h4 id=\"奇异值的应用\"><a href=\"#奇异值的应用\" class=\"headerlink\" title=\"奇异值的应用\"></a>奇异值的应用</h4><ol>\n<li>图像压缩<br> 我们只保留前面一定数目的比较重要的项，就可以把一个图片差不多展示出来。</li>\n<li>图像去噪<br> 在图像处理领域，奇异值不仅可以应用在数据压缩上，还可以对图像去噪。如果一副图像包含噪声，我们有理由相信那些较小的奇异值就是由于噪声引起的。当我们强行令这些较小的奇异值为0时，就可以去除图片中的噪声。</li>\n</ol>\n<h4 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h4><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/59324612\">https://zhuanlan.zhihu.com/p/59324612</a></li>\n</ol>\n"},{"title":"杂记","date":"2023-08-31T12:27:31.000Z","description":"Just record some miscellaneous things.","_content":"#### Auto.js\nAuto.js 是一种基于 JavaScript 的自动化工具，它允许你编写和运行 JavaScript 脚本来自动化执行 Android 设备上的各种任务。因此，Auto.js 使用 JavaScript 作为其编程语言。\n\n关于 Auto.js 和 JavaScript 的关系如下：\n\n1. Auto.js 使用 JavaScript：Auto.js 的脚本是用 JavaScript 编写的，因此你可以在 Auto.js 中编写标准的 JavaScript 代码。这使得 Auto.js 在编写和运行自动化脚本时非常灵活，因为你可以使用 JavaScript 的语法和功能。\n\n2. Auto.js 扩展了 JavaScript：尽管 Auto.js 使用 JavaScript 作为其编程语言，但它还提供了一组额外的 API 和库，这些 API 和库允许你与 Android 设备的各种功能和资源进行交互，如模拟用户输入、操作屏幕、访问文件系统等。这些功能通常不是标准的 JavaScript 语言特性，而是 Auto.js 为 Android 自动化提供的功能扩展。\n\n3. Auto.js 是 JavaScript 的运行环境：Auto.js 提供了一个运行 JavaScript 脚本的环境，这个环境专门设计用于在 Android 设备上执行脚本。它允许你使用 JavaScript 控制 Android 设备的各种操作，例如自动点击、滑动、截屏等等。\n\n总之，Auto.js 是一个工具，它使用 JavaScript 作为编程语言，并扩展了 JavaScript，以便在 Android 设备上执行自动化任务。这使得开发人员可以使用 JavaScript 的语法和功能，结合 Auto.js 提供的 Android 自动化 API，编写用于自动化控制和操作 Android 应用和设备的脚本。\n\n#### C++ 赋值\n\n- 对于函数的变量，我们可以使用值传递或者引用传递，取决于函数的参数类型。如果是带有 `&`，此时就是引用传递，在函数中对于变量修改会影响到函数外部的值。对于数组，向函数传递的实际上是指向数组首元素的指针，这意味着参数的本质上是通过地址传递的，所以函数内部的修改可以影响到外部。\n- 在C++中，当您将一个类对象赋值给另一个类对象时，默认情况下是使用复制构造函数来执行赋值操作，因此这也是一种值传递。这意味着目标对象会被复制为源对象的一个副本，两个对象之间是相互独立的，修改一个对象的属性不会影响另一个对象。\n\n#### VSCode 重命名所有匹配项\n按住 `alt` + `shift`\nhttps://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf VScode 的快捷键表\n\n#### ES5 和 ES6 含义\nES6 和 ES5 是 JavaScript 的不同版本，它们代表了不同的 ECMAScript（简称 ES）标准。ECMAScript 是 JavaScript 语言的标准化规范，规定了 JavaScript 语法、特性和行为。\n1. ES5（ECMAScript 5）： ES5 是 JavaScript 的第五个主要版本，它在2009年发布。它引入了许多重要的新特性，例如严格模式（Strict Mode）、数组方法（如 forEach、map、filter 等）和更强大的对象属性定义（Object.defineProperty）。ES5被广泛支持，并且在早期的浏览器中是主要的 JavaScript 标准。\n2. ES6（ECMAScript 2015）： ES6 是 JavaScript 的第六个主要版本，也称为 ECMAScript 2015。它于2015年发布，并引入了许多新的特性和语法改进，如箭头函数、类、模块、解构赋值、let 和 const 变量声明等。ES6使得 JavaScript 更加现代化和强大，并提供了更好的开发工具和技术。尽管它在发布时得到了广泛的支持，但由于浏览器的兼容性问题，需要一些时间才能在所有主要环境中广泛使用。\n\n#### Span\n<span> 是一个行内元素（inline element）或内联元素，用于在文本中包裹一部分内容，而不会引入新的块级元素或换行。<span> 通常用于对文本的一部分进行样式设置或添加其他属性，以便在不破坏文本流的情况下对其进行操作。\n<span> 元素本身不会对其包含的文本内容产生任何视觉效果，它主要用于以下情况：\n\n1. 样式设置：你可以使用 <span> 元素为文本添加 CSS 样式，例如更改文本的颜色、字体、背景色等。这使得你可以有选择性地为文本的一部分应用样式，而不必更改整个段落或文本块的样式。\n```\n<p>This is <span style=\"color: red;\">red text</span> and this is <span style=\"font-weight: bold;\">bold text</span>.</p>\n```\n2. JavaScript 操作：<span> 通常用于 JavaScript 操作，你可以通过 JavaScript 选择 <span> 元素并修改其内容或属性。\n```\n<p>Click <span id=\"mySpan\" onclick=\"changeText()\">here</span>.</p>\n\n<script>\nfunction changeText() {\n  var spanElement = document.getElementById(\"mySpan\");\n  spanElement.innerHTML = \"clicked!\";\n}\n</script>\n```\n\n#### HTML 中 img 标签中的 alt 属性\n`alt` 属性用于提供图片的替代文本(Alternative Text)\n1. 替代文字：如果图像无法加载或无法显示，浏览器会显示 alt 属性中的文本，以提供对图像内容的文字描述，从而使页面更具可访问性。\n2. 辅助工具：屏幕阅读器等辅助技术会读取 alt 文本，以向用户描述图像。因此，良好的 alt 文本可以帮助视觉障碍者理解图像的含义。\n3. 优化 SEO：搜索引擎可以使用 alt 文本来理解图像的内容，从而更好地索引和排名网页。\n4. 图像加载失败时的占位符。\n5. 提示信息：一些浏览器在用户将鼠标悬停在图像上时会显示 alt 文本作为工具提示，以提供附加信息。\n```\n<img src=\"example.jpg\" alt=\"一只可爱的猫咪\">\n```\n\n#### axios 和 jQuery\naxios 是一个独立的 JavaScript 库，专注于处理 HTTP 请求。它是一个现代的、基于 Promise 的库，主要用于前端和后端（Node.js）开发，提供了清晰、简单的 API。\n$.ajax() 是 jQuery 库的一部分，用于处理各种类型的 AJAX 请求。它除了处理 HTTP 请求外，还包括许多其他功能，如 DOM 操作、事件处理、动画等。因此，$.ajax() 只是 jQuery 库的一部分。\n总结来说就是，axios 是一个相对较小的库，专注于 HTTP 请求。你可以单独引入它，而无需加载整个 jQuery 库。$.ajax() 是 jQuery 的一部分，如果你只需要进行 HTTP 请求，使用 jQuery 会显得冗余，因为它包含了许多其他功能。\n\n#### VSCode 多光标编辑\n1. 按住 `alt` 点击多个位置(这个方法选择就没有约束)。\n2. 按住鼠标滚轮，往下拖动(这个方法只是支持在同一竖线上的多位置编辑)。\n\n#### 快速创建 HTML 模板\n创建xxx.html文件，输入: ! + Tab\n\n#### 实体字符\n在HTML中，实体字符是一种特殊的编码方式，用来表示一些特殊字符或保留字符，以确保它们能够正确地显示在网页上，而不会被解释为HTML标记。以下是一些常见的HTML实体字符\n{%asset_img 实体字符.png%}\n\n#### 系统变量和用户变量\n系统变量与用户变量的区别，最重要的即系统变量的优先级高于用户变量。\n\n#### BeautifulSoup 库\nBeautiful Soup 是一个Python库，用于从HTML或XML文档中提取数据。它是一个强大的解析库，可以帮助你轻松地解析复杂的网页内容，并从中提取所需的信息。\n它可以帮助我们(在使用Beautiful Soup库时，通常需要指定一个底层的解析器，而 lxml 是一个常用的解析器之一，因为它具有高性能和稳定性。Beautiful Soup本身并没有自带解析器，因此需要依赖第三方解析器来处理HTML或XML文档)：\n1. 解析 HTML 和 XML。将他们转换为 Python 对象的树状结构。\n2. 寻找元素。寻找特定的元素、属性、文本内容，从而提取所需的数据。\n3. 修改文档结构。\n4. 清除数据。\n\n#### RE regular expression regex\n正则表达式，是用来简介表达一组字符串特征的表达式，最主要的应用在字符串匹配。\n具体内容见文章 python 爬虫。\n\n#### IP 地址\nIP地址（Internet Protocol Address，互联网协议地址）是一种用于在计算机网络中唯一标识和定位设备的数字地址。IP地址在互联网通信中起到了非常重要的作用，它允许设备在全球范围内进行通信。\n一些概念和要点：\n1. 唯一性：每个设备（如计算机、服务器、路由器）连接到互联网时都被分配一个唯一的IP地址。这确保了在互联网上的每个设备都可以被准确标识和寻址。\n2. IPv4和IPv6：有两个主要的IP地址版本，分别是IPv4（Internet Protocol Version 4）和IPv6（Internet Protocol Version 6）。IPv4地址是32位的，通常以点分十进制表示，如192.168.1.1。IPv6地址是128位的，通常以冒号分隔的十六进制表示，如2001:0db8:85a3:0000:0000:8a2e:0370:7334。由于IPv4地址空间有限，IPv6被引入以满足不断增长的互联网连接需求。\n3. 分层和路由：IP地址的设计允许数据在网络中进行分层和路由。它可以告诉路由器和交换机如何将数据包从源设备传送到目标设备，经过多个网络节点。\n4. 公共和私有IP地址：IP地址可以是公共的或私有的。公共IP地址用于直接连接到互联网，而私有IP地址用于在私有网络中进行内部通信。私有IP地址通常在家庭网络和企业内部网络中使用，路由器负责将这些地址与公共IP地址进行映射。\n5. 动态和静态IP地址：IP地址可以是动态的或静态的。动态IP地址由DHCP（动态主机配置协议）服务器动态分配给设备，而静态IP地址是由网络管理员手动配置的，通常不会更改。\n6. 网络服务：IP地址不仅用于标识设备，还用于定位网络服务和资源，如网站、邮件服务器、数据库服务器等。DNS（域名系统）用于将域名映射到IP地址，使人们更容易访问网络资源。\n\n#### Ctrl + R\n在 VSCode 中可以直接搜索文件夹。\n\n#### 抓包 packet capture\n「抓包」是将网络传输发送与接受的数据包进行截获、重发、编辑、转存等操作，也用来检查网络安全。抓包经常被用来进行数据截取等。\n\n##### 为什么抓包\n1. Web 表单中会有很多隐藏的字段，这些隐藏字段一般都有一些特殊的用途，比如收集用户的数据，预防 CRSF 攻击，防网络爬虫，以及一些其他用途。这些隐藏字段在界面上都看不到，如果想检测这些字段，就必须要使用抓包工具。\n2. 经常使用抓包工具辅助测试，可以很好的了解整个系统，比如数据传输过程前后端的关系，以及整个系统的结构。特别是对现在的微服务架构的产品，抓包能够更好的梳理和掌握整个系统各个服务之间的关系，大大增加测试的覆盖度。另外还可以增进对代码、HTTP协议方面知识的理解。\n\n##### 常用的抓包工具\n1. httpwatch\n2. fiddler\n3. wireshark\n4. firebug\n\n#### HMAC-SHA256 算法\nHMAC-SHA256（Hash-based Message Authentication Code with SHA-256）是一种基于哈希函数和密钥的消息认证码算法，用于确保消息的完整性和认证消息的发送方。它是SHA-256哈希函数与密钥结合使用\n\n#### Token Cookie 和 Session\n1. Token\nToken 是一种轻量级的身份验证令牌，通常是一个长字符串，用于识别用户。\n**原理：**当用户登录应用程序时，服务器会颁发一个Token给客户端（通常是JSON Web Token - JWT）。客户端将Token存储在本地（通常是在浏览器的localStorage或sessionStorage中，或在移动应用的存储中）。后面客户端的每个 HTTP 请求都会在 Headers 中附带 Token，服务器**只需要通过特定的密钥和加密算法来验证即可**，不需要再去额外存储用户的 Token 信息。\n**优点：** 无状态(只需要验证，无需存储)、可扩展性强，适用于分布式系统和 API。\n**缺点：** 需要额外的处理来管理 Token 的过期、刷新和安全性。\n2. Cookie\nCookie是一小段数据，由服务器发送到用户浏览器，存储在用户本地。它通常包含了一些标识信息和可选的数据。\n**原理：** 服务器在响应HTTP请求时，可以通过Set-Cookie头来设置Cookie。浏览器会将Cookie存储在用户的计算机上，并在后续请求中自动发送给服务器。\n**优点：** 简单、易用，可以持久保存数据，对用户透明。\n**缺点：** 有限的存储容量，每个请求都会带上Cookie，可能会影响性能和安全性（例如，可能受到跨站脚本攻击的影响）。\n3. Session\nSession是一种服务器端机制，用于跟踪用户在应用程序中的状态和身份。\n**原理：** 服务器在用户登录时创建一个唯一的会话标识，通常是一个Session ID，并将其存储在服务器上。Session ID 可以存储在Cookie中或通过URL重写等方式传递给客户端。\n**优点：** 相对于 Cookie 更加安全，可以存储更多的数据，不受 Cookie 容量限制。\n**缺点：** 占用服务器内存，需要额外的服务器资源，不适于分布式系统。\n通常，现代Web应用程序使用Token进行身份验证和授权，而Cookie和Session用于保持用户状态和临时数据的存储。\n\n#### 通信协议\n通信协议是计算机和网络设备之间进行数据交换和通信的**规则**和**约定**。它们定义了数据的格式、传输方式、错误检测和纠正机制以及通信参与方之间的行为。\n\n##### 1. OSI 模型\nOSI 模型即 **开放式通信系统互联参考模型**(Open System Interconnection Reference Model)，是国际标准化组织 ISO 提出的一个试图使各种计算机在世界范围内互联为网络的标准框架，简称 OSI\n\nOSI 七层模型\nOSI 定义了网络互连的七层模型，物理层、数据链路层、网络层、传输层、会话层、表示层、应用层\n{%asset_img OSI模型.png%}\n首字母组成 All people seem to need data processing. 所有人似乎都需要数据处理，这句话可以帮助来记忆。\n\n##### 2. TCP/IP 协议族\n从字面意义上讲，有人可能会认为 TCP/IP 是指 TCP 和 IP 两种协议。实际生活当中有时也确实就是指这两种协议。然而很多情况下，它只是利用 IP 进行通信时所必须用到的协议群的统称。\n它是把 OSI 七层模型简化成了五层模型，每一层模型都呼叫它的下一层所提供的网络来完成自己的需求。\n{%asset_img OSI与TCPIP关联.png%}\n\n##### 3. TCP 协议\nTCP 是**面向连接的运输层协议**。应用程序在使用 TCP 协议之前，必须**先建立** TCP 连接。在传送数据完毕以后，**必须释放**已经建立的 TCP 连接(HTTP 协议通常使用 TCP 作为传输协议，HTTP 是典型的无状态，所以可以用来理解 TCP 协议)。\n\n每一条 TCP 连接只能有两个端点，是点对点的。\n\nTCP 提供**可靠交付**的服务。通过 TCP 连接传送的数据，无差错、不丢失、不重复，并且按序到达。\n\nTCP 协议是**面向字节流**的，意味着TCP将数据视为一连串的字节而不是消息或数据块的集合。\n\n产生的影响：\n1. 无消息边界。\n在TCP连接中，数据被视为一个连续的字节流，没有明确的消息边界或分隔符。这意味着TCP不会为你自动识别消息的开始或结束。你需要自行定义和实现消息的分割和解析机制。\n2. 字节级的精确性\nTCP保证了数据的字节级精确性，即接收到的数据的每个字节都与发送端相匹配。如果数据在传输过程中损坏或丢失，TCP会负责重传丢失的部分，以确保接收端获得完整且准确的数据。\n\nTCP 提供了可靠的、有效的数据传输但是不考虑消息的边界。因此，我们在使用 TCP 协议的时候，应用程序需要负责**定义和实现消息的分割和解析方法**。\n\nhttps://zhuanlan.zhihu.com/p/64155705 TCP 协议详解\n\n##### 4. HTTP 协议\nHTTP 是 Hyper Text Transfer Protocol(超文本传输协议) 的缩写。HTTP 协议用于 WWW 服务器传输超文本到本地浏览器的传送协议。\n它不仅可以保证计算机**正确快速地传输**超文本文档，还确定传输文档中哪一部分，以及哪部分内容首先显示(如文本优先于图像)。\nHTTP 是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型，是一个无状态的协议。\n\n**特点：**\n1. 简单快速。客户向服务器请求服务的时候，只需要请求方法和路径。请求方法通常包括 GET、HEAD、POST。\n2. 灵活。HTTP 允许传输任意类型的数据对象，正在传输的类型由 Content-Type 加以标记。\n\n**持久连接**\nHTTP 1.1 版本的变化，就是引入了持久连接（persistent connection），即 TCP 连接默认不关闭，可以被多个请求复用，不用声明 `Connection: keep-alive`。客户端和服务器发现对方一段时间没有活动，就可以主动关闭连接。不过，规范的做法是，客户端在发送最后一个请求时，发送 `Connection: close`，明确要求服务器关闭 TCP 连接。\n\n**Content-Length** 字段\n一个 TCP 连接现在可以传送多个回应，势必就要有一种机制，区分数据包是属于哪个回应的。这就是 Content-Length 字段的作用，声明本次回应的数据长度。\n```\nContent-Length: 3295\n```\n上面代码告诉浏览器，本次回应的长度是3295个字节，后面的字节就属于下一个回应了。\n\n在 1.0 版本中，Content-Length 字段不是必需的，因为浏览器发现服务器关闭了 TCP 连接，就表明收到的数据包已经全了。\n使用 Content-Length 的前提是，服务器发送回应前，必须知道回应的数据长度。**对于一些很耗时的动态操作来说，这意味着服务器要完成所有操作以后才可以发送数据**(毕竟是动态的)，显然这样的数据并不是很高。更好的处理方法是，产生一块数据就发送一块，采用「流模式」(stream) 取代「缓存模式」(buffer)。\n因此，1.1 版本规定可以不使用 Content-Length 字段，而是使用「分块传输编码」(chunked transfer encoding)。只要请求或者回应的头信息有 Transfer-Encoding 字段，就表明回应将由数量未定的数据块组成。\n{%asset_img http和tcp关系.png%}\n\n##### 5. FTP 协议\nFTP 协议(File Transfer Protocol)，也是运行在 TCP 上，保证了文件传输的可靠性。与 HTTP 相比，FTP 面向的直接是服务器的文件系统，并且具有维持状态的特点，在文件传输管理上，FTP 更胜一筹。\n**传输流程**\n{%asset_img FTP工作流程.png%}\n一共有两个并行的连接，一个是「控制连接」(port: 21)，另一个是「数据连接」(port: 20)。\n其中，控制连接用于在两个主机之间传输控制信息，如口令、用户标识、存放，获取文件等命令。数据连接用于实际发送一个文件，发送完文件以后数据连接是会关闭的。\n由于 FTP 使用一个独立的控制连接，所以我们也称 FTP 的控制信息是带外(out-of-band) 传送的。HTTP 协议是在传输文件的同一个 TCP 连接中发送请求和响应首部行的，所以，HTTP 也可以说是带内 (in-band) 发送控制信息的。\n**传输方式**\nFTP 支持两种方式的传输：文本(ASCII)方式和二进制(Binary)方式。\n通常文本文件的传输采用 ASCII 方式；而图像、声音文件、加密和压缩文件等非文本文件采用二级制传输方式。\n**传输模式**\nFTP 有两种传输模式--主动(FTP Port)模式和被动(FTP Passive)模式。由于主动模式存在着安全问题，最近几年，大部分的 FTP 客户端开始默认使用被动模式。\nhttps://zhuanlan.zhihu.com/p/337513218\nhttps://zhuanlan.zhihu.com/p/141472331\n\n##### 6. DNS 协议\n互联网上主机的一种标识方式是使用它的「主机名」(hostname)，如 `www.facebook.com`、`www.google.com` 等。但是这是我们人类的记忆方式，路由器不会这么理解，路由器喜欢定长的、有层次结构的 IP 地址。\n> 主机名 (Hostname) 是计算机或者设备在网络上的名称标识符，用于唯一标识一个特定的计算机或者网络设备。**主机名**通常是人类可读的形式，**但是在网络协议中国会被映射为 IP 地址进行通信**。\n\nIP 地址由 4 字节组成，并且有着严格的层次结构。例如 `121.7.106.83` 然而路由器喜欢的是 IP 地址进行解析，我们人类便于记忆的确实网址，此时就用到 DNS 了。\nDNS 的全称是 `Domain Name System`，是由一个分层的 DNS 服务器(DNS Server) 实现的分布式数据库；还是一个使得主机能够查询分布式数据库的应用层协议。DNS 服务器通常是运行 `Berkeley Internet Name Domain` 软件的 Unix 机器。DNS 协议运行在 UDP 之上，使用 53 端口。\n\nDNS 是**一个分布式的系统**\n\nhttps://zhuanlan.zhihu.com/p/346236071\n\n\n#### h 文件和 hpp 文件区别\n{%asset_img h和hpp.png%}\n\n#### 低耦合 Low Coupling\n是在讨论软件工程中的一种设计原则，旨在创建更可维护、可扩展和可重用的代码。低耦合涉及到将代码分解成松散耦合的模块或组件，这些模块之间的依赖性尽量降低。\n\n#### lambda 表达式\n在 C++ 中，lambda 表达式的结构：\n```\n[capture clause](parameters) -> return_type {\n    // 函数体\n}\n```\n解释：\n{%asset_img lambda表达式.png%}\n\n#### delete 和 delete[]\n当你使用 new[] 来分配动态数组时，编译器会记住你分配了多少个元素，因此在释放内存时，你必须使用 delete[] 来确保所有元素都得到释放。如果你使用 delete（而不是 delete[]）来尝试释放动态数组的内存，将导致未定义的行为，可能会导致内存泄漏或程序崩溃。\n```\nint* data_ = new int[size];\ndelete[] data_;\n```\n\n#### 静态数组\n静态数组需要在编译的时候知道它的大小\n```\nint a[size];\n```\n也就是说其中的 `size` 需要是一个常量表达式。如果我们 `cin >> size;` 后面又 `int a[size];` 是不行的，因为静态数组要求 **编译的时候大小就确定。**\n\n静态数组的内存分配发生在程序的静态存储区域，通常在编译的时候分配，并且在程序结束的时候才会释放，具有全局的声明周期。\n\n#### 动态数组\n动态数组的大小在运行的时候确定，通常在堆中分配内存。`int* ptr = new int[size];`。在最后不使用的时候记得要 `delete[] ptr;` \n其中 `new int[size]` 会在堆上分配一段连续的内存，大小为 `size * sizeof(int)` 个字节，然后返回一个指向这块内存的指针，并将这个指针赋值给 `ptr`\n\n堆上分配的内存不会自动释放，需要程序员负责在确保不需要的时候手动释放，否则可能导致内存泄漏。\n\n#### 栈内存\n栈内存用于存储局部变量和函数调用信息。每个线程通常都有自己的栈。\n栈内存的分配和释放是自动的，发生在函数的入栈和出栈过程中。当函数返回时，其局部变量的内存会自动被释放。\n栈内存的生命周期与函数调用有关，它们在函数调用结束后自动释放。\n\n#### 程序运行时内存区域\n1. 栈区 Stack\n栈区用于存储函数调用的局部变量、函数的参数值以及函数调用的返回地址。\n栈区是**自动管理**的，函数的局部变量在函数被调用时分配内存，在函数结束时自动释放内存。\n**栈区的大小通常较小**，且生命周期短暂，用于管理函数的执行和调用。\n2. 堆区 Heap\n堆区用于动态分配内存，例如使用 new 和 malloc 来分配内存。\n堆区的内存分配和释放需要程序员**手动管理**，使用 delete 和 free 来释放内存。\n**堆区的大小通常较大**，用于存储动态分配的数据结构，如动态数组、对象等。\n3. 静态存储区域 Static Storage\n静态存储区域用于**存储全局变量、静态变量和常量**(如静态分配的数组)。\n这些变量在程序启动时分配内存，在程序结束时释放内存。\n静态存储区域的变量具有全局可见性，并且在整个程序的生命周期内保持不变。\n4. 代码区 Code Segment\n代码区包含程序的机器码指令，用于执行程序的逻辑。\n代码区通常是只读的，不允许写入和修改。\n代码区存储程序的执行指令，每个函数和方法的机器代码以及程序的静态数据。\n5. 常量区 Constant Area\n常量区用于存储常量数据，如字符串文字（string literals）和全局 const 变量。\n常量区的数据是只读的，不允许修改。\n6. 栈帧区 Stack Frame\n\n#### malloc free 和 new delete\n\n**语言差异**：\nmalloc 和 free 是C语言中的函数，可以在C++中使用，但通常不推荐在C++代码中使用它们，因为C++提供了更强大的内存管理工具。\nnew 和 delete 是C++中的操作符，专门用于创建和销毁对象，并与类的构造函数和析构函数一起工作。\n\n**类型安全性：**\nnew 和 delete 是类型安全的，它们会为对象的构造和销毁调用适当的构造函数和析构函数。这对于管理类对象非常重要。\nmalloc 和 free 不了解对象的类型，它们只是分配和释放内存块。如果你使用它们来分配和释放类对象，可能会绕过构造函数和析构函数，导致对象的行为不正常。\n\n尽管 malloc 和 free 是C语言中的标准内存分配函数，但在C++中通常更推荐使用 new 和 delete，因为它们提供了更好的类型安全性、异常处理和对象生命周期管理。只有在特殊情况下，如与C库一起使用或需要更底层的内存分配控制时，才使用 malloc 和 free。\n\n其中需要注意，malloc 函数返回的是 `void*` 类型的指针，也就是并没有规定它的类型，需要我们人为规定。所以我们一般写成这样的形式：\n```\nchar* p = (char*)malloc(100);\n```\n其中，100 表示 100 个字节。\n\n#### C++ 对象构造\n有四种方式创建对象：\n```\nMyClass myClass;\nMyClass myClass = MyClass();\nMyClass* myClass = new MyClass();\nMyClass* myClass = new MyClass;\n```\n其中，前两种方式是在栈中分配内存，由操作系统进行内存的分配和管理。\n后两种是在堆中分配内存，由管理者(程序员)进行内存的分配和管理，用完必须 delete，否则会造成内存的泄露。\n\n##### 不使用 new\n对于第一种和第二种，一个隐式调用，一个显式调用。\n**第一种：**\n- 如果有构造函数，默认使用构造函数来初始化对象。\n- 如果没有默认的构造函数，编译器会报错。\n\n**第二种：**\n- 默认使用构造函数\n- 如果没有构造函数，编译器会报错。\n- 与第一种方法不同，这个是先创建一个对象，然后进行对象的复制。\n\n虽然上面两种那么说，但是如果我们没有显式定义构造函数，编译器会自动生成一个默认构造函数的。这个默认构造函数会对类中的一些基本数据类型的数据进行初始化，就是随机赋值。\n\n所以，通常情况下，前两种方式相比较，第一种方式直接 `MyClass myClass;` 是更加直接高效的方法，一般使用这种方式。\n\n##### 使用 new\n\n在使用 new 创建对象的时候。对于有构造函数的类，不论有没有括号，都用构造函数进行初始化。如果没有构造函数，则不加括号的new只分配内存空间，不进行内存的初始化，而加了括号的new会在分配内存的同时初始化为0。\n\n对于 new 创建对象，可以作为函数的返回值和参数，因为如果不用new，函数中不能返回该对象的指针，因为函数结束后，该对象的内存就被释放了(函数是栈空间嘛，如果是 new 则在堆空间，由我们人为决定其寿命)。\n\n{%asset_img new构造.png%}\n上面是两种new构造的区别，其实不是很大，一般加个括号就好了。\n\n使用 new 创建对象的实际步骤是：\n1. 分配内存：new 会在堆上动态分配足够的内存来存储对象的数据成员，包括对象的成员变量和虚函数表（如果有的话）。\n\n2. 调用构造函数：一旦内存分配完成，C++会调用对象的构造函数来初始化这块内存。构造函数是类的特殊成员函数，用于初始化对象的状态。如果你没有显式定义构造函数，编译器会为你生成一个默认的构造函数来执行默认的初始化操作。\n\n3. 返回指针：new 表达式返回指向分配的内存的指针，该指针指向一个已经构造完成的对象。\n\n#### CSV 文件(Comma-Separated Values)\nCSV 格式是处理和存储数据的常用格式之一。\n1. 简单易懂：CSV文件使用纯文本格式，数据之间使用逗号或其他分隔符分隔。\n2. 跨平台兼容性：CSV文件是纯文本文件，几乎所有操作系统和应用程序都可以处理它们。\n3. 轻量级。\n4. 广泛支持：几乎所有类型的编程语言都支持 CSV 格式文件操作。\n\n#### codecs\n\"codecs\" 是 Python 编程语言中的一个标准库模块，用于处理各种字符编码和解码操作。\ncodecs 的名称来自 `code and decode`，提供了一种在不同字符码之间进行转换的方式，这在处理文本数据的时候非常有用。\n下面是一个简单的示例，将 UTF-8 的编码转换为 ASCII 编码。\n```\nimport codecs\n\n# 要转换的文本\ntext = \"Hello, 你好\"\n\n# 将文本从UTF-8编码转换为ASCII编码\nascii_text = codecs.encode(text, 'ascii', 'ignore')  # ignore 是一种错误处理，\"ignore\" 表示在转换时忽略不能被目标字符编码表示的字符。还有 replace 等\n\n# 输出转换后的文本\nprint(ascii_text)\n```\n\n#### Python 列表推导(List Comprehension)\n列表推导是一种简洁的方式来创建新的列表。\n```\n[expression for item in iterable if condition]\n```\n其中 `expression` 是生成新列表中元素的表达式，`item` 是可迭代对象 `iterable` 中的元素.\n下面是一些例子：\n```\n# 创建一个包含1到10的平方的列表\nsquares = [x**2 for x in range(1, 11)]\n\n# 将字符串列表中的所有字符串转换为大写\nwords = [\"hello\", \"world\", \"python\"]\nuppercase_words = [word.upper() for word in words]\n\n# 筛选出一个列表中的偶数元素\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers = [x for x in numbers if x % 2 == 0]\n```\n\n#### Python 赋值\n在 Python 中，赋值分为两种情况：\n1. 不可变对象(Immutable Objects)\n包括数字、字符串、元组等不可修改的对象。对不可变对象的赋值是值传递（Pass by Value），意味着在赋值时会创建一个新的对象，并将其值赋给新的变量，而不是将原始对象的引用传递给新的变量。\n```\nx = 5\ny = x  # 这是值传递，y 拥有一个新的 5 的副本\n```\n2. 可变对象(Mutable Objects)\n包括列表、字典、集合等可以修改的对象。对可变对象的赋值是地址传递（Pass by Reference），意味着在赋值时不会创建新的对象，而是将原始对象的引用传递给新的变量。因此，如果修改一个可变对象，会影响到所有引用它的变量。\n```\nlist1 = [1, 2, 3]\nlist2 = list1  # 这是地址传递，list2 和 list1 引用同一个列表对象\n```\n\n#### Python 切片\n切片是 Python 中非常强大的功能，可以用于许多不同的场景。\n1. 提取子序列\n可以提取列表、字符串或元组中的特定元素子集。\n```\nmy_list = [1, 2, 3, 4, 5]\nsubset = my_list[1:4]  # 提取索引1到索引3的元素，得到[2, 3, 4]\n```\n2. 复制切片\n我们上面说了，Python 序列是址传递的，所以我们想复制序列的话不可以简单的 `list2 = list1`\n```\noriginal_list = [1, 2, 3, 4, 5]\ncopy_list = original_list[:]  # 创建一个原始列表的副本，修改 copy_list 不会影响到 original_list\n```\n3. 步进切片\n我们可以指定一个步进值\n```\nmy_list = [1, 2, 3, 4, 5]\nevery_other = my_list[::2]  # 每隔一个元素提取，得到[1, 3, 5]\n```\n4. 字符串反转 or 序列 反转\n```\nmy_string = \"Hello, World!\"\nsubstring = my_string[0:5]  # 提取前五个字符 \"Hello\"\nreversed_string = my_string[::-1]  # 字符串翻转\n```\n5. 删除元素\n```\nmy_list = [1, 2, 3, 4, 5]\ndel my_list[1:3]  # 删除索引1到索引2的元素，my_list变为[1, 4, 5]\n```\n6. 替换元素\n```\nmy_list = [1, 2, 3, 4, 5]\nmy_list[1:4] = [10, 20, 30]  # 替换索引1到索引3的元素，my_list变为[1, 10, 20, 30, 5]\n```\n7. 过滤数据\n```\nmy_list = [1, 2, 3, 4, 5]\nfiltered_list = [x for x in my_list if x % 2 == 0]  # 过滤偶数，得到[2, 4]\n```\n\n#### 字符串面值的赋值\n字符串字面值是指在代码中直接以文本形式表示的字符串，通常用双引号括起来的一系列字符。字符串字面值在编程中用于表示固定的文本数据。例如，以下是一些字符串字面值的示例：\n```\n\"Hello, World!\"\n\"This is a string literal.\"\n\"12345\"\n```\n字符串面值通常是只读的，意味着我们不能对于它们的内容进行修改。\n{%asset_img 字符串面值的赋值.png%}\n\n#### 关于 char[] 与 char*\n##### char[] \n- 它是一个字符数组，它在栈上分配内存，并且为数组内的每个元素分配空间。\n- 当您使用字符串字面值来初始化字符数组时，编译器会自动为数组分配足够的空间来存储字符串字面值的内容，包括字符串结束符 '\\0'(与指针直接指向字符串字面值的地址不同，数组是新创建一个空间，然后相当于在新的字符串空间中将字符串字面值给复制过去)。\n\n##### char*\n- char* 是一个字符指针，只是指向一个字符的内存地址。\n- 当我们使用字符串字面值来初始化数组时，实际上是将字符串字面值的地址赋给了指针(但是我们知道，字符串字面值通常只是只读的，所以说我们指针指向了那个地址也是无法修改字符串的值的，因此一般不这么写，编译器也会报警告)。\n- 如果我们想使用 char* \n\n并且对于 char* 和 char[]，C/C++ 有一种约定成俗的习惯，使用 cout 输出时，会自动识别数组或者指针指向的字符串，并且输出字符串的内容直到遇到空字符 `'\\0'` 停止。\n\n这种行为是通过C/C++标准库中的重载运算符和内置函数来实现的，它们会自动迭代字符数组或指针，并输出字符直到遇到空字符。这使得输出字符串变得方便，无需显式循环来逐个字符输出。\n\n同样的，不仅仅是对于 `cout`，对于 char 的一些函数如 `strlen`、`strcpy`，参数为 char* 的时候，同样也是遇到 `'\\0'` 时停止函数操作(一般来说，这些函数是操作 `char*` 的，我们如果操作 `char[]` 也是能操作的，因为 **字符数组可以隐式转换为字符指针**)。\n\n如果我们实在想对于 `char*` 类型赋值，可以：\n```\nchar* str = new char[20]; // 使用 new 动态分配 20 个字符的内存\n\n// 将字符串常值赋值给 str\nstrcpy(str, \"Hello, World!\");\n\n// 在不需要时记得释放内存\ndelete[] str;\n```\n\n#### 常见的 char* 函数\n1. 字符串长度函数\n`strlen(const char* str)`: 返回字符串的长度，不包括空字符终止符。\n2. `strcpy(char* dest, const char* src)`: 将源字符串复制到目标字符串，包括空字符终止符。需要确保目标字符串有足够的空间来存储源字符串。\n`strncpy(char* dest, const char* src, size_t n)`: 将源字符串的前 n 个字符复制到目标字符串，可以控制复制的字符数。\n3. `strcat(char* dest, const char* src)`: 将源字符串连接到目标字符串的末尾，需要确保目标字符串有足够的空间来容纳源字符串\n4. `strcmp(const char* str1, const char* str2)`: 比较两个字符串，返回值表示它们的字典顺序关系。\n请注意，使用这些函数时应格外小心，确保正确处理内存和边界情况，以避免安全漏洞和未定义的行为。\n\n{%asset_img strcpy和strdup.png%}\n{%asset_img strdup使用.png%}\n\n#### endl 与 \"\\n\"\n{%asset_img endl与n.png %}\n\n#### vector 创建二维数组\n\n一次性定义：\n此种方法适用于每一行的列数都相等的二维数组定义(与初始化)\n```\n//使用vector一次性完成二维数组的定义（注意：此种方法适用于每一行的列数相等的二维数组）\nvector<vector<int>> matrix(m, vector<int>(n, -1));\n\n//以下是拆分理解\n//创建一维数组matirx，这个数组里有m个元素，元素是int型vector。\nvector<vector<int>> matrix(m);\n//除了定义数组类型及数组大小外，同时给数组中的元素赋值：将元素赋值为大小为n的int型vector。\nvector<vector<int>> matrix(m, vector<int>(n));\n//除了定义数组类型、数组大小、列的大小，同时给数组列中的元素（或者说，数组中的所有元素）赋值为-1。\nvector<vector<int>> matrix(m, vector<int>(n, -1));\n```\n\n插入元素型定义：\n此种方法适用于每一行的列数都相等或不相等的二维数组的定义（与初始化）。\n```\n//比较具有普遍性的写法（注意：此种方法适用于每一行的列数相等的二维数组）\nvector<vector<int>> matrix;//创建一维数组matirx，这个数组里的元素是int型vector。\nint m = 3; //matrix有m行\nint n = 10; //matrix有n列\nint value = 1; //最终matrix成为二维数组后，其中每个元素的值为1（如果不需要进行初始化，此语句可以省略）\nfor (int i = 0; i < m; ++ i) {\n    vector<int> tmp(n, value); //定义int型一维数组tmp，该数组有n个int型元素，且每个元素的初始值为value\n    matrix.push_back(tmp); //将一维数组tmp（小容器）加入matrix（大容器）中，使之成为matrix的元素，令matrix成为二维数组\n}\n\n//如果需要每一行的列数不同（虽然一般很少这样做），也可以使用下面这种写法进行定义、初始化\nvector<vector<int>> matrix;\n\nvector<int> a(10, 1); //单独定义每个小容器的元素个数和元素初始值\nvector<int> b(5, 2);\nvector<int> c(10, 3);\n\nmatrix.push_back(a); //将每个小容器加入matrix（大容器）中\nmatrix.push_back(b);\nmatrix.push_back(c);\n```\n\n#### assign 函数分配与初始化\n\n其实也可以使用 vector 的构造函数来初始化。\n\nassign 函数主要用于重新分配 vector 元素并进行初始化。它的用法主要有两种：\n1. 用迭代器范围进行分配：\nassign 可以结构两个迭代器参数，从另一个容器或者序列中复制元素到当前 vector 中。\n```\nstd::vector<int> vec;\nstd::vector<int> anotherVec = {1, 2, 3, 4, 5};\n\nvec.assign(anotherVec.begin(), anotherVec.end());\n```\n2. 用大小和值进行分配：\nassign 函数也可以接受一个大小参数和一个值参数，用于将 std::vector 的大小更改为指定大小，并用指定的值填充所有新元素。这是一种用于重新分配 std::vector 并**进行初始化的方法**。\n```\nstd::vector<int> vec(5, 42); // 就是将 vec 的大小设置为 5，每一项设置为 42\n\nstd::vector<vector<int>> v(5, vector<int>(5, 0)); // 创建一个二维数组 v，其中是 5 行 5 列并且每一个元素都是 0\n```\n\n#### 遍历 vector 的几种方式\n1. \n```\nfor (int i = 0; i < v.size(); ++i)\n```\n2. \n使用迭代器\n```\nfor (std::vector<int>::iterator it = v.begin(); it != v.end(); ++it)\n```\n3. \n使用 auto 关键字\n```\nfor (auto iterator it = v.begin(); it != v.end(); ++it)\n\nfor (const auto& element : v)\n```\n关于为什么写成 `const auto&` 可以避免拷贝(加快速度)，保持元素的不可变性。\n\n#### 关于 vector 迭代器\nvector 中迭代器是一个用于访问容器元素的抽象概念。它提供了一种通用的方式来遍历容器中的元素，而不依赖于容器的具体实现细节。\n在 C++ 中，std::vector 提供了**两种主要类型**的迭代器：\n1. begin() 迭代器。这个迭代器指向容器中的第一个元素。\n2. end() 迭代器。这个迭代器指向容器中**最后一个元素的下一个位置**。\n\n#### 主存\n主存指的是内存 RAM\n\n#### SSD\nSSD 是固态硬盘 (Solid State Drive) 的缩写。与传统的机械硬盘（HDD）不同，SSD不包含可移动的机械部件，而是使用闪存存储技术来存储数据。这使得SSD在许多方面都具有一些显著的优势，包括：\n1. 更快的速度：SSD比HDD更快，因为它们不需要旋转磁盘和寻道操作来读取数据。这意味着计算机可以更快地启动、加载应用程序和执行文件传输等任务\n2. 更低的能耗：由于没有旋转的机械部件，SSD消耗的能量较少，因此在笔记本电脑和移动设备中通常能够延长电池寿命。\n3. 更高的可靠性与更轻便\n但是价格比较高。\nHDD (Hard Disk Drive) 硬盘驱动器，有时候也成为硬盘或者机械硬盘\n\n#### BIOS\nBIOS（基本输入/输出系统，Basic Input/Output System）是计算机系统中的一组固件程序，它们位于计算机的主板上的一个特殊芯片中，通常是闪存芯片。\n1. 启动自检（POST）：在计算机启动时，BIOS会执行自检程序，检查计算机的硬件组件，如处理器、内存、硬盘、光驱等是否正常工作。如果发现问题，BIOS通常会发出蜂鸣声或显示错误信息，以指示问题的位置。\n2. 引导操作系统：一旦自检完成，BIOS会寻找可引导的设备，通常是硬盘驱动器或其他存储设备。它会加载操作系统的引导加载程序（Boot Loader），并将控制权转交给操作系统，使其能够继续启动过程。\n3. 设置硬件参数：BIOS还包括一组用户可配置的硬件设置，这些设置通常可通过计算机的BIOS设置界面进行调整。用户可以在BIOS中设置硬盘启动顺序、系统时间、密码保护等选项。\n4. 提供基本的输入/输出服务：BIOS提供了一些基本的输入/输出功能，以便在操作系统加载之前进行一些基本的操作，如键盘输入、显示输出和存储设备的读写。\n\n#### Transistor-Transistor Logic\n在集成电路型号中，通常以 74 开头的数字代表它们属于标准的 Transistor-Transistor Logic\n具体来说，\"74\" 表示了 TTL 系列中的特定子系列。TTL 门和触发器的型号通常以 \"74\" 开头，例如，\"7400\" 代表四输入 NAND 门，\"74138\" 代表 3-8 译码器/多路复用器，等等。\n\n#### vector 中的 find 函数\n**find 函数是在 `algorithm` 中的，不写的话会报错，血的教训。**\nC++ 标准库中的 `std::find()` 函数可以用来在容器 (包括 std::vector) 中查找特定值的位置。它的用法如下：\n```#include <algorithm> // 必须包含这个头文件\n\n// ...\n\nvector<int> myVector = {1, 2, 3, 4, 5};\nint targetValue = 3;\n\n// 使用std::find查找特定值\nauto it = std::find(myVector.begin(), myVector.end(), targetValue);\n\nif (it != myVector.end()) {\n    // 找到了目标值\n    // 'it' 是一个迭代器，指向找到的元素的位置\n    // 在这里，它指向了值为3的元素\n    cout << \"找到了目标值: \" << *it << endl;\n} else {\n    // 没找到目标值\n    cout << \"未找到目标值\" << endl;\n}\n```\nstd::find函数的返回类型是一个迭代器（iterator），它是一个指向容器中找到的元素的位置的指针。\n\n#### string\nstring 中也是有着迭代器的\n\n#### 电源适配器 power adapter\n提到电源适配器可能很多人都不知道这是什么东西，如果说笔记本电脑充电线上那个长方形的配件或者说手机充电器大家倒是常见，是的，那个就是电源适配器，电源适配器（Power adapter）又叫外置电源，是小型便携式电子设备及电子电器的供电电压变换设备，常见于手机、液晶显示器和笔记本电脑等小型电子产品上。\n它的作用是将家里的220伏高电压转换成这些电子产品能工作的5伏至20伏左右稳定的低电压，使他们能正常工作,一般由外壳、变压器、电感、电容、控制IC、PCB板等元器件组成，它的工作原理由交流输入转换为直流输出\n\n#### vscode 中 alt 加 上下键\n\n可以将光标所在的位置的代码行直接进行移动，向上或者向下移动。\n\n#### 栈帧\n\n当一个函数被调用时，通常会创建一个包含该函数的局部变量、参数和执行上下文信息的数据结构，这个数据结构称为栈帧（也称为调用帧或执行帧）。栈帧用于存储函数执行期间的局部状态信息，包括局部变量、函数参数、返回地址等。在函数调用栈中，每个函数调用都对应一个栈帧，它们按照调用的顺序依次排列。\n\n所以我们采取非递归算法，即使是在函数中模拟栈，但是我们并没有过多递归导致产生过多栈帧，所以通常是更加节省空间的。\n\n#### 比较函数规则\n\n通常情况下，比较函数的返回值为1表示前面的元素大于后面的元素，而返回-1ee或者0表示前面的元素小于或等于后面的元素。这是一种常见的约定，但也可以根据具体需求和实现来定义不同的比较规则。\n\n#### pair 模板类\n\nstd::pair 是 C++ 标准库提供的一个模板类，用于将两个不同类型的值组合成一个单元。定位于头文件 `utility` 中。\n\nstd::pair 最常见的用法是在函数的返回值中返回多个值，或者在容器中存储多个类型的数据。pair 有两个公共成员 `first` 和 `second` \n\n#### \\0\n在C/C++中，\\0 通常用作字符串的结束标志，标识字符串的结尾。\n\n当你在一个以\\0结尾的字符数组（C-Style字符串）中遇到\\0字符时，它表示字符串的结束，告诉程序在这里停止处理字符串。例如：\n\n#### map 等容器创建\n\n在C++中，std::map对象的创建方式取决于它是如何声明的。std::map可以在栈上或堆上创建，具体取决于其声明方式。\n\n#### 模块化\n\n将代码写成如下的形式：\n```\n void insert(const T& value) {\n        insertNode(root, value);\n}\n```\n有下面的好处：\n1. 代码模块化：将插入操作分为两个函数可以使得代码更加模块化，每个函数负责一个明确定义的任务。使得代码更加容易理解和维护。外部调用者著需要调用 insert 函数，而不需要了解内部的递归细节。\n2. 可读性：使用 insert 和 insertNode 两个函数可以在外部接口提供更具描述性的函数名，使得代码更加容易理解。\n3. 封装内部细节：insertNode 函数是一个内部的实现细节，不需要暴露给用户。这有助于隐藏内部数据结构和实现细节，提高了代码的封装性和安全性。\n\n将插入操作拆分为两个函数是一种常见的编程实践，有助于提高代码的清晰度、可维护性和可读性。这种模块化设计方法可以应用于其他类似的操作，使代码更易于管理和扩展。\n\n#### STL 容器传递用于比较的函数对象类\n\n在C++的STL容器中（如std::map、std::set等），如果您想要自定义元素的比较行为，您可以传递一个用于比较的函数对象类，而不是传递一个函数对象的实例。这是因为STL容器需要在需要比较元素时创建比较器对象的实例，而不是在容器创建时就传递一个现成的比较结果。\n\n因此，当您向std::map（或其他STL容器）传递一个自定义的比较函数对象时，STL容器会在内部创建该函数对象的实例，以便在需要时进行元素比较。这允许STL容器根据需要多次使用相同的比较器类的不同实例。\n\n所以我们写为：\n```\n#include <iostream>\n#include <map>\n\n// 自定义的比较函数对象类\nstruct MyComparator {\n    bool operator()(int a, int b) const {\n        return a > b; // 比较a是否大于b\n    }\n};\n\nint main() {\n    // 使用自定义比较函数对象创建std::map\n    std::map<int, std::string, MyComparator> customMap; // 传递一个结构体，而不是它的实例对象，STL容器会自动创建实例对象来比较\n\n    // 插入一些元素\n    customMap[5] = \"Five\";\n    customMap[2] = \"Two\";\n    customMap[8] = \"Eight\";\n\n    // 遍历并打印map的内容\n    for (const auto& pair : customMap) {\n        std::cout << pair.first << \": \" << pair.second << std::endl;\n    }\n\n    return 0;\n}\n```\n\n#### struct 和 class\n\n在C++中，struct和class都是用来定义用户自定义数据类型的关键字，它们之间的主要区别在于默认的访问控制和一些语法细节。下面是它们的主要区别和适用场景：\n\n1. 访问控制：\n\nstruct：struct中的成员默认都是公共的（public），可以被外部代码直接访问。\nclass：class中的成员默认都是私有的（private），需要通过成员函数（方法）来访问。\n2. 数据封装：\n\n由于class默认成员是私有的，它更适合用于实现数据封装，即将数据隐藏在类的内部，通过公共接口提供访问和修改数据的方法，以维护数据的完整性和安全性。\nstruct通常用于轻量级的数据结构，其成员都是公开的，用于存储一组相关数据，不提供严格的封装。\n继承：\n\n3. struct和class都可以用于实现继承，但默认情况下，class的继承是私有的，而struct的继承是公共的。这意味着从class继承的成员在子类中默认是私有的，而从struct继承的成员在子类中默认是公共的。\n适用场景：\n\n4. 使用class：当需要实现封装、数据隐藏、访问控制、继承以及更复杂的类层次结构时，通常使用class。\n使用struct：当只需要一个简单的数据容器，没有需要隐藏的数据，或者需要与C语言交互时，通常使用struct。也可以将struct用于只包含数据而不包含成员函数的情况。\n无论选择使用struct还是class，都可以在其中定义成员函数（方法）以提供对数据的操作，这取决于您的设计需求和数据封装的程度。在实际应用中，这两个关键字的选择通常是根据项目的需求和编码风格来确定的。\n\n#### 深入理解 C++ STL 迭代器\n\nSTL（Standard Template Library）中的容器实现迭代器是通过将迭代器作为容器类的内部类来实现的。迭代器是一种用于遍历容器中元素的抽象概念，它提供了访问容器元素的接口，使得可以轻松地遍历容器的内容。\n\n以下是关于STL容器中迭代器的一些一般性原则：\n\n1. 迭代器是容器的一部分：迭代器通常被定义为容器类的内部类，因此它们可以访问容器内部的数据结构，并提供访问和操作元素的方法。\n\n2. 迭代器的种类：不同类型的STL容器可以提供不同种类的迭代器，例如前向迭代器、双向迭代器和随机访问迭代器。迭代器的种类决定了迭代器的功能和效率，不同的容器支持不同种类的迭代器。\n\n3. 迭代器的操作：迭代器通常支持一组标准操作，如前进、后退、解引用等。这些操作允许您在容器中移动并访问元素。\n\n4. Begin 和 End：STL容器通常提供 begin() 和 end() 成员函数，分别返回指向容器第一个元素和尾后位置（即不指向任何元素的位置）的迭代器。这些函数用于迭代容器的所有元素。\n\n5. 迭代器的使用：迭代器可以用于遍历容器的元素，从容器的开始（begin()）到结束（end()）。使用迭代器，您可以执行诸如遍历、查找、修改和删除元素等操作。\n\n6. 具体的实现细节和迭代器的性能特征取决于特定的容器类型。例如，std::vector 提供了随机访问迭代器，因此支持快速的随机访问，而 std::list 提供了双向迭代器，因此在列表中的元素上前进和后退较为高效。\n\n总之，STL容器通过定义迭代器来提供对容器元素的访问和遍历，这是STL的一个核心概念，使得STL容器在使用上非常灵活。\n\n#### 红黑树和 AVL 树实现差异\n\n1. AVL树的插入操作通常使用递归来实现，这是因为AVL树在插入后需要递归地重新平衡，以确保树保持平衡因子的性质。与AVL树不同，红黑树的平衡性质更容易通过迭代修复，因为它只涉及相邻节点之间的颜色变化和旋转操作，而不需要像AVL树那样严格的平衡因子维护。\n\n在红黑树中，使用迭代而不是递归的原因之一是它更简单且更高效。另一方面，AVL树的平衡因子维护涉及到更复杂的旋转和递归操作，因此递归更容易理解和实现。\n\n总之，红黑树通常使用迭代插入操作，而AVL树通常使用递归插入操作。不同的数据结构有不同的性质和平衡要求，因此它们的插入和平衡策略也不同。\n\n#### 类和结构体\n\n1. 访问权限\n类（class）的默认访问权限是私有（private）。这意味着类中的成员（数据成员和成员函数）默认情况下只能在类的内部访问，需要使用公有接口才能从外部访问。\n结构体（struct）的默认访问权限是公共（public）。这意味着结构体中的成员在外部可以直接访问。\n\n2. 继承\n类可以用于实现类的继承和多态，因为类支持访问控制符（如private、protected、public）来控制基类成员的可见性和访问权限。\n结构体也可以用于继承，但默认的访问权限是公共，因此它们的成员在子类中具有相同的访问权限。\n\n3. 使用习惯\n通常情况下，类用于表示具有私有成员和行为的抽象数据类型，用于封装数据和操作。\n结构体通常用于表示简单的数据结构，其中成员通常是相关的数据字段而不包含复杂的行为。\n\n#### 宏定义 define\n\n宏定义是在编译前由预处理器处理的，因此它们不会进行类型检查，可能会导致一些潜在的错误。\n作用：\n1. 宏替换：预处理器会根据宏定义将源代码中的标识符替换为相应的文本。这允许您创建常量、宏函数以及在代码中的其他地方重复使用文本片段。这提高了代码的可维护性和可读性。\n2. 条件编译：通过使用条件指令（如#ifdef、#ifndef、#if、#elif、#else和#endif），您可以根据条件包含或排除代码段。这对于在不同的编译环境或配置下启用或禁用特定功能非常有用，例如调试模式或发布模式下的不同行为。\n3. 包含文件：#include指令允许您在源代码中包含其他头文件，以便使用其中定义的函数、变量和类型。这有助于模块化代码并实现代码重用\n4. 删除注释：预处理器可以删除注释，这样它们不会包含在编译后的代码中。这有助于减小可执行文件的大小，同时保留了代码的可读性。\n5. 定义符号常量：通过#define指令，您可以定义符号常量，以便在代码中使用这些常量而不必硬编码它们的值。这有助于提高代码的可维护性，并减少代码中的魔法数字。\n\n#### 数据库语言\n\n操作数据库经常使用特定的数据库查询语言(Database Query Language)。最常见的数据库查询语言是 SQL(Structured Query Language, 结构化查询语言)。\n\nDBMS(Database manage system) 数据库管理系统\n\n绝大多数数据库软件都支持 SQL 语言，尤其是关系型数据库管理系统(RDBMS)\n\n**MySQL 和 SQLite 的关系：**\nMySQL：MySQL是一个强大的关系型数据库管理系统，通常用于大型企业应用程序和高负载的网站。它可以处理大量数据和高并发访问。\nSQLite：SQLite是一种轻量级的嵌入式数据库，适用于小型到中等规模的应用程序。它通常用于移动应用、桌面应用、嵌入\n式系统等，不适用于大规模或高并发的场景。\n\n其中，嵌入式指的是 **运行方式和部署方式**。这意味着它的数据库引擎以库（库文件或代码库）的形式直接嵌入到应用程序中，而不是作为一个独立的数据库服务器运行。(还记得如果使用 MySQL 的话，需要在电脑上开启它)\n\n##### Redis\nRedis(Remote Dictionary Server)。Redis 是一种开源的**内存数据库**，可以用作缓存、消息代理、持久化存储以及多种数据结构的高效存储和检索。\n\n内存数据库将数据存储在内存中，可以实现非常快的读取和写入操作。这使得内存数据库在需要快速响应的应用中有非常大的优势，例如实时数据分析、缓存和实时计算。\n\n##### std::string::npos\n\nstd::string::npos 是C++标准库中的一个特殊常量值，通常用于表示字符串操作的无效或失败状态，特别是在查找子字符串或字符时。\n\n常见的使用方式是在 `std::string` 的 `find` 函数中\n\n```\n#include <string>\n#include <iostream>\n\nint main() {\n    std::string text = \"Hello, World!\";\n    std::size_t found = text.find(\"foo\"); // 在字符串中查找\"foo\"\n    \n    if (found != std::string::npos) {\n        std::cout << \"Substring found at position \" << found << std::endl;\n    } else {\n        std::cout << \"Substring not found.\" << std::endl;\n    }\n\n    return 0;\n}\n```\n\n#### size_t\n\n`size_t`  是C/C++标准库中定义的一种用于表示对象大小或索引的无符号整数类型。它通常被用于数组索引、容器大小、内存分配、字符串长度以及其他需要表示对象大小的上下文中。\n```\n#include <vector>\n#include <iostream>\n\nint main() {\n    std::vector<int> v = {1, 2, 3, 4, 5};\n    for (size_t i = 0; i < v.size(); ++i) {\n        std::cout << v[i] << \" \";\n    }\n    return 0;\n}\n```\n\n","source":"_posts/杂记.md","raw":"---\ntitle: 杂记\ndate: 2023-08-31 20:27:31\ntags: Miscellaneous\ndescription: Just record some miscellaneous things.\n---\n#### Auto.js\nAuto.js 是一种基于 JavaScript 的自动化工具，它允许你编写和运行 JavaScript 脚本来自动化执行 Android 设备上的各种任务。因此，Auto.js 使用 JavaScript 作为其编程语言。\n\n关于 Auto.js 和 JavaScript 的关系如下：\n\n1. Auto.js 使用 JavaScript：Auto.js 的脚本是用 JavaScript 编写的，因此你可以在 Auto.js 中编写标准的 JavaScript 代码。这使得 Auto.js 在编写和运行自动化脚本时非常灵活，因为你可以使用 JavaScript 的语法和功能。\n\n2. Auto.js 扩展了 JavaScript：尽管 Auto.js 使用 JavaScript 作为其编程语言，但它还提供了一组额外的 API 和库，这些 API 和库允许你与 Android 设备的各种功能和资源进行交互，如模拟用户输入、操作屏幕、访问文件系统等。这些功能通常不是标准的 JavaScript 语言特性，而是 Auto.js 为 Android 自动化提供的功能扩展。\n\n3. Auto.js 是 JavaScript 的运行环境：Auto.js 提供了一个运行 JavaScript 脚本的环境，这个环境专门设计用于在 Android 设备上执行脚本。它允许你使用 JavaScript 控制 Android 设备的各种操作，例如自动点击、滑动、截屏等等。\n\n总之，Auto.js 是一个工具，它使用 JavaScript 作为编程语言，并扩展了 JavaScript，以便在 Android 设备上执行自动化任务。这使得开发人员可以使用 JavaScript 的语法和功能，结合 Auto.js 提供的 Android 自动化 API，编写用于自动化控制和操作 Android 应用和设备的脚本。\n\n#### C++ 赋值\n\n- 对于函数的变量，我们可以使用值传递或者引用传递，取决于函数的参数类型。如果是带有 `&`，此时就是引用传递，在函数中对于变量修改会影响到函数外部的值。对于数组，向函数传递的实际上是指向数组首元素的指针，这意味着参数的本质上是通过地址传递的，所以函数内部的修改可以影响到外部。\n- 在C++中，当您将一个类对象赋值给另一个类对象时，默认情况下是使用复制构造函数来执行赋值操作，因此这也是一种值传递。这意味着目标对象会被复制为源对象的一个副本，两个对象之间是相互独立的，修改一个对象的属性不会影响另一个对象。\n\n#### VSCode 重命名所有匹配项\n按住 `alt` + `shift`\nhttps://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf VScode 的快捷键表\n\n#### ES5 和 ES6 含义\nES6 和 ES5 是 JavaScript 的不同版本，它们代表了不同的 ECMAScript（简称 ES）标准。ECMAScript 是 JavaScript 语言的标准化规范，规定了 JavaScript 语法、特性和行为。\n1. ES5（ECMAScript 5）： ES5 是 JavaScript 的第五个主要版本，它在2009年发布。它引入了许多重要的新特性，例如严格模式（Strict Mode）、数组方法（如 forEach、map、filter 等）和更强大的对象属性定义（Object.defineProperty）。ES5被广泛支持，并且在早期的浏览器中是主要的 JavaScript 标准。\n2. ES6（ECMAScript 2015）： ES6 是 JavaScript 的第六个主要版本，也称为 ECMAScript 2015。它于2015年发布，并引入了许多新的特性和语法改进，如箭头函数、类、模块、解构赋值、let 和 const 变量声明等。ES6使得 JavaScript 更加现代化和强大，并提供了更好的开发工具和技术。尽管它在发布时得到了广泛的支持，但由于浏览器的兼容性问题，需要一些时间才能在所有主要环境中广泛使用。\n\n#### Span\n<span> 是一个行内元素（inline element）或内联元素，用于在文本中包裹一部分内容，而不会引入新的块级元素或换行。<span> 通常用于对文本的一部分进行样式设置或添加其他属性，以便在不破坏文本流的情况下对其进行操作。\n<span> 元素本身不会对其包含的文本内容产生任何视觉效果，它主要用于以下情况：\n\n1. 样式设置：你可以使用 <span> 元素为文本添加 CSS 样式，例如更改文本的颜色、字体、背景色等。这使得你可以有选择性地为文本的一部分应用样式，而不必更改整个段落或文本块的样式。\n```\n<p>This is <span style=\"color: red;\">red text</span> and this is <span style=\"font-weight: bold;\">bold text</span>.</p>\n```\n2. JavaScript 操作：<span> 通常用于 JavaScript 操作，你可以通过 JavaScript 选择 <span> 元素并修改其内容或属性。\n```\n<p>Click <span id=\"mySpan\" onclick=\"changeText()\">here</span>.</p>\n\n<script>\nfunction changeText() {\n  var spanElement = document.getElementById(\"mySpan\");\n  spanElement.innerHTML = \"clicked!\";\n}\n</script>\n```\n\n#### HTML 中 img 标签中的 alt 属性\n`alt` 属性用于提供图片的替代文本(Alternative Text)\n1. 替代文字：如果图像无法加载或无法显示，浏览器会显示 alt 属性中的文本，以提供对图像内容的文字描述，从而使页面更具可访问性。\n2. 辅助工具：屏幕阅读器等辅助技术会读取 alt 文本，以向用户描述图像。因此，良好的 alt 文本可以帮助视觉障碍者理解图像的含义。\n3. 优化 SEO：搜索引擎可以使用 alt 文本来理解图像的内容，从而更好地索引和排名网页。\n4. 图像加载失败时的占位符。\n5. 提示信息：一些浏览器在用户将鼠标悬停在图像上时会显示 alt 文本作为工具提示，以提供附加信息。\n```\n<img src=\"example.jpg\" alt=\"一只可爱的猫咪\">\n```\n\n#### axios 和 jQuery\naxios 是一个独立的 JavaScript 库，专注于处理 HTTP 请求。它是一个现代的、基于 Promise 的库，主要用于前端和后端（Node.js）开发，提供了清晰、简单的 API。\n$.ajax() 是 jQuery 库的一部分，用于处理各种类型的 AJAX 请求。它除了处理 HTTP 请求外，还包括许多其他功能，如 DOM 操作、事件处理、动画等。因此，$.ajax() 只是 jQuery 库的一部分。\n总结来说就是，axios 是一个相对较小的库，专注于 HTTP 请求。你可以单独引入它，而无需加载整个 jQuery 库。$.ajax() 是 jQuery 的一部分，如果你只需要进行 HTTP 请求，使用 jQuery 会显得冗余，因为它包含了许多其他功能。\n\n#### VSCode 多光标编辑\n1. 按住 `alt` 点击多个位置(这个方法选择就没有约束)。\n2. 按住鼠标滚轮，往下拖动(这个方法只是支持在同一竖线上的多位置编辑)。\n\n#### 快速创建 HTML 模板\n创建xxx.html文件，输入: ! + Tab\n\n#### 实体字符\n在HTML中，实体字符是一种特殊的编码方式，用来表示一些特殊字符或保留字符，以确保它们能够正确地显示在网页上，而不会被解释为HTML标记。以下是一些常见的HTML实体字符\n{%asset_img 实体字符.png%}\n\n#### 系统变量和用户变量\n系统变量与用户变量的区别，最重要的即系统变量的优先级高于用户变量。\n\n#### BeautifulSoup 库\nBeautiful Soup 是一个Python库，用于从HTML或XML文档中提取数据。它是一个强大的解析库，可以帮助你轻松地解析复杂的网页内容，并从中提取所需的信息。\n它可以帮助我们(在使用Beautiful Soup库时，通常需要指定一个底层的解析器，而 lxml 是一个常用的解析器之一，因为它具有高性能和稳定性。Beautiful Soup本身并没有自带解析器，因此需要依赖第三方解析器来处理HTML或XML文档)：\n1. 解析 HTML 和 XML。将他们转换为 Python 对象的树状结构。\n2. 寻找元素。寻找特定的元素、属性、文本内容，从而提取所需的数据。\n3. 修改文档结构。\n4. 清除数据。\n\n#### RE regular expression regex\n正则表达式，是用来简介表达一组字符串特征的表达式，最主要的应用在字符串匹配。\n具体内容见文章 python 爬虫。\n\n#### IP 地址\nIP地址（Internet Protocol Address，互联网协议地址）是一种用于在计算机网络中唯一标识和定位设备的数字地址。IP地址在互联网通信中起到了非常重要的作用，它允许设备在全球范围内进行通信。\n一些概念和要点：\n1. 唯一性：每个设备（如计算机、服务器、路由器）连接到互联网时都被分配一个唯一的IP地址。这确保了在互联网上的每个设备都可以被准确标识和寻址。\n2. IPv4和IPv6：有两个主要的IP地址版本，分别是IPv4（Internet Protocol Version 4）和IPv6（Internet Protocol Version 6）。IPv4地址是32位的，通常以点分十进制表示，如192.168.1.1。IPv6地址是128位的，通常以冒号分隔的十六进制表示，如2001:0db8:85a3:0000:0000:8a2e:0370:7334。由于IPv4地址空间有限，IPv6被引入以满足不断增长的互联网连接需求。\n3. 分层和路由：IP地址的设计允许数据在网络中进行分层和路由。它可以告诉路由器和交换机如何将数据包从源设备传送到目标设备，经过多个网络节点。\n4. 公共和私有IP地址：IP地址可以是公共的或私有的。公共IP地址用于直接连接到互联网，而私有IP地址用于在私有网络中进行内部通信。私有IP地址通常在家庭网络和企业内部网络中使用，路由器负责将这些地址与公共IP地址进行映射。\n5. 动态和静态IP地址：IP地址可以是动态的或静态的。动态IP地址由DHCP（动态主机配置协议）服务器动态分配给设备，而静态IP地址是由网络管理员手动配置的，通常不会更改。\n6. 网络服务：IP地址不仅用于标识设备，还用于定位网络服务和资源，如网站、邮件服务器、数据库服务器等。DNS（域名系统）用于将域名映射到IP地址，使人们更容易访问网络资源。\n\n#### Ctrl + R\n在 VSCode 中可以直接搜索文件夹。\n\n#### 抓包 packet capture\n「抓包」是将网络传输发送与接受的数据包进行截获、重发、编辑、转存等操作，也用来检查网络安全。抓包经常被用来进行数据截取等。\n\n##### 为什么抓包\n1. Web 表单中会有很多隐藏的字段，这些隐藏字段一般都有一些特殊的用途，比如收集用户的数据，预防 CRSF 攻击，防网络爬虫，以及一些其他用途。这些隐藏字段在界面上都看不到，如果想检测这些字段，就必须要使用抓包工具。\n2. 经常使用抓包工具辅助测试，可以很好的了解整个系统，比如数据传输过程前后端的关系，以及整个系统的结构。特别是对现在的微服务架构的产品，抓包能够更好的梳理和掌握整个系统各个服务之间的关系，大大增加测试的覆盖度。另外还可以增进对代码、HTTP协议方面知识的理解。\n\n##### 常用的抓包工具\n1. httpwatch\n2. fiddler\n3. wireshark\n4. firebug\n\n#### HMAC-SHA256 算法\nHMAC-SHA256（Hash-based Message Authentication Code with SHA-256）是一种基于哈希函数和密钥的消息认证码算法，用于确保消息的完整性和认证消息的发送方。它是SHA-256哈希函数与密钥结合使用\n\n#### Token Cookie 和 Session\n1. Token\nToken 是一种轻量级的身份验证令牌，通常是一个长字符串，用于识别用户。\n**原理：**当用户登录应用程序时，服务器会颁发一个Token给客户端（通常是JSON Web Token - JWT）。客户端将Token存储在本地（通常是在浏览器的localStorage或sessionStorage中，或在移动应用的存储中）。后面客户端的每个 HTTP 请求都会在 Headers 中附带 Token，服务器**只需要通过特定的密钥和加密算法来验证即可**，不需要再去额外存储用户的 Token 信息。\n**优点：** 无状态(只需要验证，无需存储)、可扩展性强，适用于分布式系统和 API。\n**缺点：** 需要额外的处理来管理 Token 的过期、刷新和安全性。\n2. Cookie\nCookie是一小段数据，由服务器发送到用户浏览器，存储在用户本地。它通常包含了一些标识信息和可选的数据。\n**原理：** 服务器在响应HTTP请求时，可以通过Set-Cookie头来设置Cookie。浏览器会将Cookie存储在用户的计算机上，并在后续请求中自动发送给服务器。\n**优点：** 简单、易用，可以持久保存数据，对用户透明。\n**缺点：** 有限的存储容量，每个请求都会带上Cookie，可能会影响性能和安全性（例如，可能受到跨站脚本攻击的影响）。\n3. Session\nSession是一种服务器端机制，用于跟踪用户在应用程序中的状态和身份。\n**原理：** 服务器在用户登录时创建一个唯一的会话标识，通常是一个Session ID，并将其存储在服务器上。Session ID 可以存储在Cookie中或通过URL重写等方式传递给客户端。\n**优点：** 相对于 Cookie 更加安全，可以存储更多的数据，不受 Cookie 容量限制。\n**缺点：** 占用服务器内存，需要额外的服务器资源，不适于分布式系统。\n通常，现代Web应用程序使用Token进行身份验证和授权，而Cookie和Session用于保持用户状态和临时数据的存储。\n\n#### 通信协议\n通信协议是计算机和网络设备之间进行数据交换和通信的**规则**和**约定**。它们定义了数据的格式、传输方式、错误检测和纠正机制以及通信参与方之间的行为。\n\n##### 1. OSI 模型\nOSI 模型即 **开放式通信系统互联参考模型**(Open System Interconnection Reference Model)，是国际标准化组织 ISO 提出的一个试图使各种计算机在世界范围内互联为网络的标准框架，简称 OSI\n\nOSI 七层模型\nOSI 定义了网络互连的七层模型，物理层、数据链路层、网络层、传输层、会话层、表示层、应用层\n{%asset_img OSI模型.png%}\n首字母组成 All people seem to need data processing. 所有人似乎都需要数据处理，这句话可以帮助来记忆。\n\n##### 2. TCP/IP 协议族\n从字面意义上讲，有人可能会认为 TCP/IP 是指 TCP 和 IP 两种协议。实际生活当中有时也确实就是指这两种协议。然而很多情况下，它只是利用 IP 进行通信时所必须用到的协议群的统称。\n它是把 OSI 七层模型简化成了五层模型，每一层模型都呼叫它的下一层所提供的网络来完成自己的需求。\n{%asset_img OSI与TCPIP关联.png%}\n\n##### 3. TCP 协议\nTCP 是**面向连接的运输层协议**。应用程序在使用 TCP 协议之前，必须**先建立** TCP 连接。在传送数据完毕以后，**必须释放**已经建立的 TCP 连接(HTTP 协议通常使用 TCP 作为传输协议，HTTP 是典型的无状态，所以可以用来理解 TCP 协议)。\n\n每一条 TCP 连接只能有两个端点，是点对点的。\n\nTCP 提供**可靠交付**的服务。通过 TCP 连接传送的数据，无差错、不丢失、不重复，并且按序到达。\n\nTCP 协议是**面向字节流**的，意味着TCP将数据视为一连串的字节而不是消息或数据块的集合。\n\n产生的影响：\n1. 无消息边界。\n在TCP连接中，数据被视为一个连续的字节流，没有明确的消息边界或分隔符。这意味着TCP不会为你自动识别消息的开始或结束。你需要自行定义和实现消息的分割和解析机制。\n2. 字节级的精确性\nTCP保证了数据的字节级精确性，即接收到的数据的每个字节都与发送端相匹配。如果数据在传输过程中损坏或丢失，TCP会负责重传丢失的部分，以确保接收端获得完整且准确的数据。\n\nTCP 提供了可靠的、有效的数据传输但是不考虑消息的边界。因此，我们在使用 TCP 协议的时候，应用程序需要负责**定义和实现消息的分割和解析方法**。\n\nhttps://zhuanlan.zhihu.com/p/64155705 TCP 协议详解\n\n##### 4. HTTP 协议\nHTTP 是 Hyper Text Transfer Protocol(超文本传输协议) 的缩写。HTTP 协议用于 WWW 服务器传输超文本到本地浏览器的传送协议。\n它不仅可以保证计算机**正确快速地传输**超文本文档，还确定传输文档中哪一部分，以及哪部分内容首先显示(如文本优先于图像)。\nHTTP 是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型，是一个无状态的协议。\n\n**特点：**\n1. 简单快速。客户向服务器请求服务的时候，只需要请求方法和路径。请求方法通常包括 GET、HEAD、POST。\n2. 灵活。HTTP 允许传输任意类型的数据对象，正在传输的类型由 Content-Type 加以标记。\n\n**持久连接**\nHTTP 1.1 版本的变化，就是引入了持久连接（persistent connection），即 TCP 连接默认不关闭，可以被多个请求复用，不用声明 `Connection: keep-alive`。客户端和服务器发现对方一段时间没有活动，就可以主动关闭连接。不过，规范的做法是，客户端在发送最后一个请求时，发送 `Connection: close`，明确要求服务器关闭 TCP 连接。\n\n**Content-Length** 字段\n一个 TCP 连接现在可以传送多个回应，势必就要有一种机制，区分数据包是属于哪个回应的。这就是 Content-Length 字段的作用，声明本次回应的数据长度。\n```\nContent-Length: 3295\n```\n上面代码告诉浏览器，本次回应的长度是3295个字节，后面的字节就属于下一个回应了。\n\n在 1.0 版本中，Content-Length 字段不是必需的，因为浏览器发现服务器关闭了 TCP 连接，就表明收到的数据包已经全了。\n使用 Content-Length 的前提是，服务器发送回应前，必须知道回应的数据长度。**对于一些很耗时的动态操作来说，这意味着服务器要完成所有操作以后才可以发送数据**(毕竟是动态的)，显然这样的数据并不是很高。更好的处理方法是，产生一块数据就发送一块，采用「流模式」(stream) 取代「缓存模式」(buffer)。\n因此，1.1 版本规定可以不使用 Content-Length 字段，而是使用「分块传输编码」(chunked transfer encoding)。只要请求或者回应的头信息有 Transfer-Encoding 字段，就表明回应将由数量未定的数据块组成。\n{%asset_img http和tcp关系.png%}\n\n##### 5. FTP 协议\nFTP 协议(File Transfer Protocol)，也是运行在 TCP 上，保证了文件传输的可靠性。与 HTTP 相比，FTP 面向的直接是服务器的文件系统，并且具有维持状态的特点，在文件传输管理上，FTP 更胜一筹。\n**传输流程**\n{%asset_img FTP工作流程.png%}\n一共有两个并行的连接，一个是「控制连接」(port: 21)，另一个是「数据连接」(port: 20)。\n其中，控制连接用于在两个主机之间传输控制信息，如口令、用户标识、存放，获取文件等命令。数据连接用于实际发送一个文件，发送完文件以后数据连接是会关闭的。\n由于 FTP 使用一个独立的控制连接，所以我们也称 FTP 的控制信息是带外(out-of-band) 传送的。HTTP 协议是在传输文件的同一个 TCP 连接中发送请求和响应首部行的，所以，HTTP 也可以说是带内 (in-band) 发送控制信息的。\n**传输方式**\nFTP 支持两种方式的传输：文本(ASCII)方式和二进制(Binary)方式。\n通常文本文件的传输采用 ASCII 方式；而图像、声音文件、加密和压缩文件等非文本文件采用二级制传输方式。\n**传输模式**\nFTP 有两种传输模式--主动(FTP Port)模式和被动(FTP Passive)模式。由于主动模式存在着安全问题，最近几年，大部分的 FTP 客户端开始默认使用被动模式。\nhttps://zhuanlan.zhihu.com/p/337513218\nhttps://zhuanlan.zhihu.com/p/141472331\n\n##### 6. DNS 协议\n互联网上主机的一种标识方式是使用它的「主机名」(hostname)，如 `www.facebook.com`、`www.google.com` 等。但是这是我们人类的记忆方式，路由器不会这么理解，路由器喜欢定长的、有层次结构的 IP 地址。\n> 主机名 (Hostname) 是计算机或者设备在网络上的名称标识符，用于唯一标识一个特定的计算机或者网络设备。**主机名**通常是人类可读的形式，**但是在网络协议中国会被映射为 IP 地址进行通信**。\n\nIP 地址由 4 字节组成，并且有着严格的层次结构。例如 `121.7.106.83` 然而路由器喜欢的是 IP 地址进行解析，我们人类便于记忆的确实网址，此时就用到 DNS 了。\nDNS 的全称是 `Domain Name System`，是由一个分层的 DNS 服务器(DNS Server) 实现的分布式数据库；还是一个使得主机能够查询分布式数据库的应用层协议。DNS 服务器通常是运行 `Berkeley Internet Name Domain` 软件的 Unix 机器。DNS 协议运行在 UDP 之上，使用 53 端口。\n\nDNS 是**一个分布式的系统**\n\nhttps://zhuanlan.zhihu.com/p/346236071\n\n\n#### h 文件和 hpp 文件区别\n{%asset_img h和hpp.png%}\n\n#### 低耦合 Low Coupling\n是在讨论软件工程中的一种设计原则，旨在创建更可维护、可扩展和可重用的代码。低耦合涉及到将代码分解成松散耦合的模块或组件，这些模块之间的依赖性尽量降低。\n\n#### lambda 表达式\n在 C++ 中，lambda 表达式的结构：\n```\n[capture clause](parameters) -> return_type {\n    // 函数体\n}\n```\n解释：\n{%asset_img lambda表达式.png%}\n\n#### delete 和 delete[]\n当你使用 new[] 来分配动态数组时，编译器会记住你分配了多少个元素，因此在释放内存时，你必须使用 delete[] 来确保所有元素都得到释放。如果你使用 delete（而不是 delete[]）来尝试释放动态数组的内存，将导致未定义的行为，可能会导致内存泄漏或程序崩溃。\n```\nint* data_ = new int[size];\ndelete[] data_;\n```\n\n#### 静态数组\n静态数组需要在编译的时候知道它的大小\n```\nint a[size];\n```\n也就是说其中的 `size` 需要是一个常量表达式。如果我们 `cin >> size;` 后面又 `int a[size];` 是不行的，因为静态数组要求 **编译的时候大小就确定。**\n\n静态数组的内存分配发生在程序的静态存储区域，通常在编译的时候分配，并且在程序结束的时候才会释放，具有全局的声明周期。\n\n#### 动态数组\n动态数组的大小在运行的时候确定，通常在堆中分配内存。`int* ptr = new int[size];`。在最后不使用的时候记得要 `delete[] ptr;` \n其中 `new int[size]` 会在堆上分配一段连续的内存，大小为 `size * sizeof(int)` 个字节，然后返回一个指向这块内存的指针，并将这个指针赋值给 `ptr`\n\n堆上分配的内存不会自动释放，需要程序员负责在确保不需要的时候手动释放，否则可能导致内存泄漏。\n\n#### 栈内存\n栈内存用于存储局部变量和函数调用信息。每个线程通常都有自己的栈。\n栈内存的分配和释放是自动的，发生在函数的入栈和出栈过程中。当函数返回时，其局部变量的内存会自动被释放。\n栈内存的生命周期与函数调用有关，它们在函数调用结束后自动释放。\n\n#### 程序运行时内存区域\n1. 栈区 Stack\n栈区用于存储函数调用的局部变量、函数的参数值以及函数调用的返回地址。\n栈区是**自动管理**的，函数的局部变量在函数被调用时分配内存，在函数结束时自动释放内存。\n**栈区的大小通常较小**，且生命周期短暂，用于管理函数的执行和调用。\n2. 堆区 Heap\n堆区用于动态分配内存，例如使用 new 和 malloc 来分配内存。\n堆区的内存分配和释放需要程序员**手动管理**，使用 delete 和 free 来释放内存。\n**堆区的大小通常较大**，用于存储动态分配的数据结构，如动态数组、对象等。\n3. 静态存储区域 Static Storage\n静态存储区域用于**存储全局变量、静态变量和常量**(如静态分配的数组)。\n这些变量在程序启动时分配内存，在程序结束时释放内存。\n静态存储区域的变量具有全局可见性，并且在整个程序的生命周期内保持不变。\n4. 代码区 Code Segment\n代码区包含程序的机器码指令，用于执行程序的逻辑。\n代码区通常是只读的，不允许写入和修改。\n代码区存储程序的执行指令，每个函数和方法的机器代码以及程序的静态数据。\n5. 常量区 Constant Area\n常量区用于存储常量数据，如字符串文字（string literals）和全局 const 变量。\n常量区的数据是只读的，不允许修改。\n6. 栈帧区 Stack Frame\n\n#### malloc free 和 new delete\n\n**语言差异**：\nmalloc 和 free 是C语言中的函数，可以在C++中使用，但通常不推荐在C++代码中使用它们，因为C++提供了更强大的内存管理工具。\nnew 和 delete 是C++中的操作符，专门用于创建和销毁对象，并与类的构造函数和析构函数一起工作。\n\n**类型安全性：**\nnew 和 delete 是类型安全的，它们会为对象的构造和销毁调用适当的构造函数和析构函数。这对于管理类对象非常重要。\nmalloc 和 free 不了解对象的类型，它们只是分配和释放内存块。如果你使用它们来分配和释放类对象，可能会绕过构造函数和析构函数，导致对象的行为不正常。\n\n尽管 malloc 和 free 是C语言中的标准内存分配函数，但在C++中通常更推荐使用 new 和 delete，因为它们提供了更好的类型安全性、异常处理和对象生命周期管理。只有在特殊情况下，如与C库一起使用或需要更底层的内存分配控制时，才使用 malloc 和 free。\n\n其中需要注意，malloc 函数返回的是 `void*` 类型的指针，也就是并没有规定它的类型，需要我们人为规定。所以我们一般写成这样的形式：\n```\nchar* p = (char*)malloc(100);\n```\n其中，100 表示 100 个字节。\n\n#### C++ 对象构造\n有四种方式创建对象：\n```\nMyClass myClass;\nMyClass myClass = MyClass();\nMyClass* myClass = new MyClass();\nMyClass* myClass = new MyClass;\n```\n其中，前两种方式是在栈中分配内存，由操作系统进行内存的分配和管理。\n后两种是在堆中分配内存，由管理者(程序员)进行内存的分配和管理，用完必须 delete，否则会造成内存的泄露。\n\n##### 不使用 new\n对于第一种和第二种，一个隐式调用，一个显式调用。\n**第一种：**\n- 如果有构造函数，默认使用构造函数来初始化对象。\n- 如果没有默认的构造函数，编译器会报错。\n\n**第二种：**\n- 默认使用构造函数\n- 如果没有构造函数，编译器会报错。\n- 与第一种方法不同，这个是先创建一个对象，然后进行对象的复制。\n\n虽然上面两种那么说，但是如果我们没有显式定义构造函数，编译器会自动生成一个默认构造函数的。这个默认构造函数会对类中的一些基本数据类型的数据进行初始化，就是随机赋值。\n\n所以，通常情况下，前两种方式相比较，第一种方式直接 `MyClass myClass;` 是更加直接高效的方法，一般使用这种方式。\n\n##### 使用 new\n\n在使用 new 创建对象的时候。对于有构造函数的类，不论有没有括号，都用构造函数进行初始化。如果没有构造函数，则不加括号的new只分配内存空间，不进行内存的初始化，而加了括号的new会在分配内存的同时初始化为0。\n\n对于 new 创建对象，可以作为函数的返回值和参数，因为如果不用new，函数中不能返回该对象的指针，因为函数结束后，该对象的内存就被释放了(函数是栈空间嘛，如果是 new 则在堆空间，由我们人为决定其寿命)。\n\n{%asset_img new构造.png%}\n上面是两种new构造的区别，其实不是很大，一般加个括号就好了。\n\n使用 new 创建对象的实际步骤是：\n1. 分配内存：new 会在堆上动态分配足够的内存来存储对象的数据成员，包括对象的成员变量和虚函数表（如果有的话）。\n\n2. 调用构造函数：一旦内存分配完成，C++会调用对象的构造函数来初始化这块内存。构造函数是类的特殊成员函数，用于初始化对象的状态。如果你没有显式定义构造函数，编译器会为你生成一个默认的构造函数来执行默认的初始化操作。\n\n3. 返回指针：new 表达式返回指向分配的内存的指针，该指针指向一个已经构造完成的对象。\n\n#### CSV 文件(Comma-Separated Values)\nCSV 格式是处理和存储数据的常用格式之一。\n1. 简单易懂：CSV文件使用纯文本格式，数据之间使用逗号或其他分隔符分隔。\n2. 跨平台兼容性：CSV文件是纯文本文件，几乎所有操作系统和应用程序都可以处理它们。\n3. 轻量级。\n4. 广泛支持：几乎所有类型的编程语言都支持 CSV 格式文件操作。\n\n#### codecs\n\"codecs\" 是 Python 编程语言中的一个标准库模块，用于处理各种字符编码和解码操作。\ncodecs 的名称来自 `code and decode`，提供了一种在不同字符码之间进行转换的方式，这在处理文本数据的时候非常有用。\n下面是一个简单的示例，将 UTF-8 的编码转换为 ASCII 编码。\n```\nimport codecs\n\n# 要转换的文本\ntext = \"Hello, 你好\"\n\n# 将文本从UTF-8编码转换为ASCII编码\nascii_text = codecs.encode(text, 'ascii', 'ignore')  # ignore 是一种错误处理，\"ignore\" 表示在转换时忽略不能被目标字符编码表示的字符。还有 replace 等\n\n# 输出转换后的文本\nprint(ascii_text)\n```\n\n#### Python 列表推导(List Comprehension)\n列表推导是一种简洁的方式来创建新的列表。\n```\n[expression for item in iterable if condition]\n```\n其中 `expression` 是生成新列表中元素的表达式，`item` 是可迭代对象 `iterable` 中的元素.\n下面是一些例子：\n```\n# 创建一个包含1到10的平方的列表\nsquares = [x**2 for x in range(1, 11)]\n\n# 将字符串列表中的所有字符串转换为大写\nwords = [\"hello\", \"world\", \"python\"]\nuppercase_words = [word.upper() for word in words]\n\n# 筛选出一个列表中的偶数元素\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers = [x for x in numbers if x % 2 == 0]\n```\n\n#### Python 赋值\n在 Python 中，赋值分为两种情况：\n1. 不可变对象(Immutable Objects)\n包括数字、字符串、元组等不可修改的对象。对不可变对象的赋值是值传递（Pass by Value），意味着在赋值时会创建一个新的对象，并将其值赋给新的变量，而不是将原始对象的引用传递给新的变量。\n```\nx = 5\ny = x  # 这是值传递，y 拥有一个新的 5 的副本\n```\n2. 可变对象(Mutable Objects)\n包括列表、字典、集合等可以修改的对象。对可变对象的赋值是地址传递（Pass by Reference），意味着在赋值时不会创建新的对象，而是将原始对象的引用传递给新的变量。因此，如果修改一个可变对象，会影响到所有引用它的变量。\n```\nlist1 = [1, 2, 3]\nlist2 = list1  # 这是地址传递，list2 和 list1 引用同一个列表对象\n```\n\n#### Python 切片\n切片是 Python 中非常强大的功能，可以用于许多不同的场景。\n1. 提取子序列\n可以提取列表、字符串或元组中的特定元素子集。\n```\nmy_list = [1, 2, 3, 4, 5]\nsubset = my_list[1:4]  # 提取索引1到索引3的元素，得到[2, 3, 4]\n```\n2. 复制切片\n我们上面说了，Python 序列是址传递的，所以我们想复制序列的话不可以简单的 `list2 = list1`\n```\noriginal_list = [1, 2, 3, 4, 5]\ncopy_list = original_list[:]  # 创建一个原始列表的副本，修改 copy_list 不会影响到 original_list\n```\n3. 步进切片\n我们可以指定一个步进值\n```\nmy_list = [1, 2, 3, 4, 5]\nevery_other = my_list[::2]  # 每隔一个元素提取，得到[1, 3, 5]\n```\n4. 字符串反转 or 序列 反转\n```\nmy_string = \"Hello, World!\"\nsubstring = my_string[0:5]  # 提取前五个字符 \"Hello\"\nreversed_string = my_string[::-1]  # 字符串翻转\n```\n5. 删除元素\n```\nmy_list = [1, 2, 3, 4, 5]\ndel my_list[1:3]  # 删除索引1到索引2的元素，my_list变为[1, 4, 5]\n```\n6. 替换元素\n```\nmy_list = [1, 2, 3, 4, 5]\nmy_list[1:4] = [10, 20, 30]  # 替换索引1到索引3的元素，my_list变为[1, 10, 20, 30, 5]\n```\n7. 过滤数据\n```\nmy_list = [1, 2, 3, 4, 5]\nfiltered_list = [x for x in my_list if x % 2 == 0]  # 过滤偶数，得到[2, 4]\n```\n\n#### 字符串面值的赋值\n字符串字面值是指在代码中直接以文本形式表示的字符串，通常用双引号括起来的一系列字符。字符串字面值在编程中用于表示固定的文本数据。例如，以下是一些字符串字面值的示例：\n```\n\"Hello, World!\"\n\"This is a string literal.\"\n\"12345\"\n```\n字符串面值通常是只读的，意味着我们不能对于它们的内容进行修改。\n{%asset_img 字符串面值的赋值.png%}\n\n#### 关于 char[] 与 char*\n##### char[] \n- 它是一个字符数组，它在栈上分配内存，并且为数组内的每个元素分配空间。\n- 当您使用字符串字面值来初始化字符数组时，编译器会自动为数组分配足够的空间来存储字符串字面值的内容，包括字符串结束符 '\\0'(与指针直接指向字符串字面值的地址不同，数组是新创建一个空间，然后相当于在新的字符串空间中将字符串字面值给复制过去)。\n\n##### char*\n- char* 是一个字符指针，只是指向一个字符的内存地址。\n- 当我们使用字符串字面值来初始化数组时，实际上是将字符串字面值的地址赋给了指针(但是我们知道，字符串字面值通常只是只读的，所以说我们指针指向了那个地址也是无法修改字符串的值的，因此一般不这么写，编译器也会报警告)。\n- 如果我们想使用 char* \n\n并且对于 char* 和 char[]，C/C++ 有一种约定成俗的习惯，使用 cout 输出时，会自动识别数组或者指针指向的字符串，并且输出字符串的内容直到遇到空字符 `'\\0'` 停止。\n\n这种行为是通过C/C++标准库中的重载运算符和内置函数来实现的，它们会自动迭代字符数组或指针，并输出字符直到遇到空字符。这使得输出字符串变得方便，无需显式循环来逐个字符输出。\n\n同样的，不仅仅是对于 `cout`，对于 char 的一些函数如 `strlen`、`strcpy`，参数为 char* 的时候，同样也是遇到 `'\\0'` 时停止函数操作(一般来说，这些函数是操作 `char*` 的，我们如果操作 `char[]` 也是能操作的，因为 **字符数组可以隐式转换为字符指针**)。\n\n如果我们实在想对于 `char*` 类型赋值，可以：\n```\nchar* str = new char[20]; // 使用 new 动态分配 20 个字符的内存\n\n// 将字符串常值赋值给 str\nstrcpy(str, \"Hello, World!\");\n\n// 在不需要时记得释放内存\ndelete[] str;\n```\n\n#### 常见的 char* 函数\n1. 字符串长度函数\n`strlen(const char* str)`: 返回字符串的长度，不包括空字符终止符。\n2. `strcpy(char* dest, const char* src)`: 将源字符串复制到目标字符串，包括空字符终止符。需要确保目标字符串有足够的空间来存储源字符串。\n`strncpy(char* dest, const char* src, size_t n)`: 将源字符串的前 n 个字符复制到目标字符串，可以控制复制的字符数。\n3. `strcat(char* dest, const char* src)`: 将源字符串连接到目标字符串的末尾，需要确保目标字符串有足够的空间来容纳源字符串\n4. `strcmp(const char* str1, const char* str2)`: 比较两个字符串，返回值表示它们的字典顺序关系。\n请注意，使用这些函数时应格外小心，确保正确处理内存和边界情况，以避免安全漏洞和未定义的行为。\n\n{%asset_img strcpy和strdup.png%}\n{%asset_img strdup使用.png%}\n\n#### endl 与 \"\\n\"\n{%asset_img endl与n.png %}\n\n#### vector 创建二维数组\n\n一次性定义：\n此种方法适用于每一行的列数都相等的二维数组定义(与初始化)\n```\n//使用vector一次性完成二维数组的定义（注意：此种方法适用于每一行的列数相等的二维数组）\nvector<vector<int>> matrix(m, vector<int>(n, -1));\n\n//以下是拆分理解\n//创建一维数组matirx，这个数组里有m个元素，元素是int型vector。\nvector<vector<int>> matrix(m);\n//除了定义数组类型及数组大小外，同时给数组中的元素赋值：将元素赋值为大小为n的int型vector。\nvector<vector<int>> matrix(m, vector<int>(n));\n//除了定义数组类型、数组大小、列的大小，同时给数组列中的元素（或者说，数组中的所有元素）赋值为-1。\nvector<vector<int>> matrix(m, vector<int>(n, -1));\n```\n\n插入元素型定义：\n此种方法适用于每一行的列数都相等或不相等的二维数组的定义（与初始化）。\n```\n//比较具有普遍性的写法（注意：此种方法适用于每一行的列数相等的二维数组）\nvector<vector<int>> matrix;//创建一维数组matirx，这个数组里的元素是int型vector。\nint m = 3; //matrix有m行\nint n = 10; //matrix有n列\nint value = 1; //最终matrix成为二维数组后，其中每个元素的值为1（如果不需要进行初始化，此语句可以省略）\nfor (int i = 0; i < m; ++ i) {\n    vector<int> tmp(n, value); //定义int型一维数组tmp，该数组有n个int型元素，且每个元素的初始值为value\n    matrix.push_back(tmp); //将一维数组tmp（小容器）加入matrix（大容器）中，使之成为matrix的元素，令matrix成为二维数组\n}\n\n//如果需要每一行的列数不同（虽然一般很少这样做），也可以使用下面这种写法进行定义、初始化\nvector<vector<int>> matrix;\n\nvector<int> a(10, 1); //单独定义每个小容器的元素个数和元素初始值\nvector<int> b(5, 2);\nvector<int> c(10, 3);\n\nmatrix.push_back(a); //将每个小容器加入matrix（大容器）中\nmatrix.push_back(b);\nmatrix.push_back(c);\n```\n\n#### assign 函数分配与初始化\n\n其实也可以使用 vector 的构造函数来初始化。\n\nassign 函数主要用于重新分配 vector 元素并进行初始化。它的用法主要有两种：\n1. 用迭代器范围进行分配：\nassign 可以结构两个迭代器参数，从另一个容器或者序列中复制元素到当前 vector 中。\n```\nstd::vector<int> vec;\nstd::vector<int> anotherVec = {1, 2, 3, 4, 5};\n\nvec.assign(anotherVec.begin(), anotherVec.end());\n```\n2. 用大小和值进行分配：\nassign 函数也可以接受一个大小参数和一个值参数，用于将 std::vector 的大小更改为指定大小，并用指定的值填充所有新元素。这是一种用于重新分配 std::vector 并**进行初始化的方法**。\n```\nstd::vector<int> vec(5, 42); // 就是将 vec 的大小设置为 5，每一项设置为 42\n\nstd::vector<vector<int>> v(5, vector<int>(5, 0)); // 创建一个二维数组 v，其中是 5 行 5 列并且每一个元素都是 0\n```\n\n#### 遍历 vector 的几种方式\n1. \n```\nfor (int i = 0; i < v.size(); ++i)\n```\n2. \n使用迭代器\n```\nfor (std::vector<int>::iterator it = v.begin(); it != v.end(); ++it)\n```\n3. \n使用 auto 关键字\n```\nfor (auto iterator it = v.begin(); it != v.end(); ++it)\n\nfor (const auto& element : v)\n```\n关于为什么写成 `const auto&` 可以避免拷贝(加快速度)，保持元素的不可变性。\n\n#### 关于 vector 迭代器\nvector 中迭代器是一个用于访问容器元素的抽象概念。它提供了一种通用的方式来遍历容器中的元素，而不依赖于容器的具体实现细节。\n在 C++ 中，std::vector 提供了**两种主要类型**的迭代器：\n1. begin() 迭代器。这个迭代器指向容器中的第一个元素。\n2. end() 迭代器。这个迭代器指向容器中**最后一个元素的下一个位置**。\n\n#### 主存\n主存指的是内存 RAM\n\n#### SSD\nSSD 是固态硬盘 (Solid State Drive) 的缩写。与传统的机械硬盘（HDD）不同，SSD不包含可移动的机械部件，而是使用闪存存储技术来存储数据。这使得SSD在许多方面都具有一些显著的优势，包括：\n1. 更快的速度：SSD比HDD更快，因为它们不需要旋转磁盘和寻道操作来读取数据。这意味着计算机可以更快地启动、加载应用程序和执行文件传输等任务\n2. 更低的能耗：由于没有旋转的机械部件，SSD消耗的能量较少，因此在笔记本电脑和移动设备中通常能够延长电池寿命。\n3. 更高的可靠性与更轻便\n但是价格比较高。\nHDD (Hard Disk Drive) 硬盘驱动器，有时候也成为硬盘或者机械硬盘\n\n#### BIOS\nBIOS（基本输入/输出系统，Basic Input/Output System）是计算机系统中的一组固件程序，它们位于计算机的主板上的一个特殊芯片中，通常是闪存芯片。\n1. 启动自检（POST）：在计算机启动时，BIOS会执行自检程序，检查计算机的硬件组件，如处理器、内存、硬盘、光驱等是否正常工作。如果发现问题，BIOS通常会发出蜂鸣声或显示错误信息，以指示问题的位置。\n2. 引导操作系统：一旦自检完成，BIOS会寻找可引导的设备，通常是硬盘驱动器或其他存储设备。它会加载操作系统的引导加载程序（Boot Loader），并将控制权转交给操作系统，使其能够继续启动过程。\n3. 设置硬件参数：BIOS还包括一组用户可配置的硬件设置，这些设置通常可通过计算机的BIOS设置界面进行调整。用户可以在BIOS中设置硬盘启动顺序、系统时间、密码保护等选项。\n4. 提供基本的输入/输出服务：BIOS提供了一些基本的输入/输出功能，以便在操作系统加载之前进行一些基本的操作，如键盘输入、显示输出和存储设备的读写。\n\n#### Transistor-Transistor Logic\n在集成电路型号中，通常以 74 开头的数字代表它们属于标准的 Transistor-Transistor Logic\n具体来说，\"74\" 表示了 TTL 系列中的特定子系列。TTL 门和触发器的型号通常以 \"74\" 开头，例如，\"7400\" 代表四输入 NAND 门，\"74138\" 代表 3-8 译码器/多路复用器，等等。\n\n#### vector 中的 find 函数\n**find 函数是在 `algorithm` 中的，不写的话会报错，血的教训。**\nC++ 标准库中的 `std::find()` 函数可以用来在容器 (包括 std::vector) 中查找特定值的位置。它的用法如下：\n```#include <algorithm> // 必须包含这个头文件\n\n// ...\n\nvector<int> myVector = {1, 2, 3, 4, 5};\nint targetValue = 3;\n\n// 使用std::find查找特定值\nauto it = std::find(myVector.begin(), myVector.end(), targetValue);\n\nif (it != myVector.end()) {\n    // 找到了目标值\n    // 'it' 是一个迭代器，指向找到的元素的位置\n    // 在这里，它指向了值为3的元素\n    cout << \"找到了目标值: \" << *it << endl;\n} else {\n    // 没找到目标值\n    cout << \"未找到目标值\" << endl;\n}\n```\nstd::find函数的返回类型是一个迭代器（iterator），它是一个指向容器中找到的元素的位置的指针。\n\n#### string\nstring 中也是有着迭代器的\n\n#### 电源适配器 power adapter\n提到电源适配器可能很多人都不知道这是什么东西，如果说笔记本电脑充电线上那个长方形的配件或者说手机充电器大家倒是常见，是的，那个就是电源适配器，电源适配器（Power adapter）又叫外置电源，是小型便携式电子设备及电子电器的供电电压变换设备，常见于手机、液晶显示器和笔记本电脑等小型电子产品上。\n它的作用是将家里的220伏高电压转换成这些电子产品能工作的5伏至20伏左右稳定的低电压，使他们能正常工作,一般由外壳、变压器、电感、电容、控制IC、PCB板等元器件组成，它的工作原理由交流输入转换为直流输出\n\n#### vscode 中 alt 加 上下键\n\n可以将光标所在的位置的代码行直接进行移动，向上或者向下移动。\n\n#### 栈帧\n\n当一个函数被调用时，通常会创建一个包含该函数的局部变量、参数和执行上下文信息的数据结构，这个数据结构称为栈帧（也称为调用帧或执行帧）。栈帧用于存储函数执行期间的局部状态信息，包括局部变量、函数参数、返回地址等。在函数调用栈中，每个函数调用都对应一个栈帧，它们按照调用的顺序依次排列。\n\n所以我们采取非递归算法，即使是在函数中模拟栈，但是我们并没有过多递归导致产生过多栈帧，所以通常是更加节省空间的。\n\n#### 比较函数规则\n\n通常情况下，比较函数的返回值为1表示前面的元素大于后面的元素，而返回-1ee或者0表示前面的元素小于或等于后面的元素。这是一种常见的约定，但也可以根据具体需求和实现来定义不同的比较规则。\n\n#### pair 模板类\n\nstd::pair 是 C++ 标准库提供的一个模板类，用于将两个不同类型的值组合成一个单元。定位于头文件 `utility` 中。\n\nstd::pair 最常见的用法是在函数的返回值中返回多个值，或者在容器中存储多个类型的数据。pair 有两个公共成员 `first` 和 `second` \n\n#### \\0\n在C/C++中，\\0 通常用作字符串的结束标志，标识字符串的结尾。\n\n当你在一个以\\0结尾的字符数组（C-Style字符串）中遇到\\0字符时，它表示字符串的结束，告诉程序在这里停止处理字符串。例如：\n\n#### map 等容器创建\n\n在C++中，std::map对象的创建方式取决于它是如何声明的。std::map可以在栈上或堆上创建，具体取决于其声明方式。\n\n#### 模块化\n\n将代码写成如下的形式：\n```\n void insert(const T& value) {\n        insertNode(root, value);\n}\n```\n有下面的好处：\n1. 代码模块化：将插入操作分为两个函数可以使得代码更加模块化，每个函数负责一个明确定义的任务。使得代码更加容易理解和维护。外部调用者著需要调用 insert 函数，而不需要了解内部的递归细节。\n2. 可读性：使用 insert 和 insertNode 两个函数可以在外部接口提供更具描述性的函数名，使得代码更加容易理解。\n3. 封装内部细节：insertNode 函数是一个内部的实现细节，不需要暴露给用户。这有助于隐藏内部数据结构和实现细节，提高了代码的封装性和安全性。\n\n将插入操作拆分为两个函数是一种常见的编程实践，有助于提高代码的清晰度、可维护性和可读性。这种模块化设计方法可以应用于其他类似的操作，使代码更易于管理和扩展。\n\n#### STL 容器传递用于比较的函数对象类\n\n在C++的STL容器中（如std::map、std::set等），如果您想要自定义元素的比较行为，您可以传递一个用于比较的函数对象类，而不是传递一个函数对象的实例。这是因为STL容器需要在需要比较元素时创建比较器对象的实例，而不是在容器创建时就传递一个现成的比较结果。\n\n因此，当您向std::map（或其他STL容器）传递一个自定义的比较函数对象时，STL容器会在内部创建该函数对象的实例，以便在需要时进行元素比较。这允许STL容器根据需要多次使用相同的比较器类的不同实例。\n\n所以我们写为：\n```\n#include <iostream>\n#include <map>\n\n// 自定义的比较函数对象类\nstruct MyComparator {\n    bool operator()(int a, int b) const {\n        return a > b; // 比较a是否大于b\n    }\n};\n\nint main() {\n    // 使用自定义比较函数对象创建std::map\n    std::map<int, std::string, MyComparator> customMap; // 传递一个结构体，而不是它的实例对象，STL容器会自动创建实例对象来比较\n\n    // 插入一些元素\n    customMap[5] = \"Five\";\n    customMap[2] = \"Two\";\n    customMap[8] = \"Eight\";\n\n    // 遍历并打印map的内容\n    for (const auto& pair : customMap) {\n        std::cout << pair.first << \": \" << pair.second << std::endl;\n    }\n\n    return 0;\n}\n```\n\n#### struct 和 class\n\n在C++中，struct和class都是用来定义用户自定义数据类型的关键字，它们之间的主要区别在于默认的访问控制和一些语法细节。下面是它们的主要区别和适用场景：\n\n1. 访问控制：\n\nstruct：struct中的成员默认都是公共的（public），可以被外部代码直接访问。\nclass：class中的成员默认都是私有的（private），需要通过成员函数（方法）来访问。\n2. 数据封装：\n\n由于class默认成员是私有的，它更适合用于实现数据封装，即将数据隐藏在类的内部，通过公共接口提供访问和修改数据的方法，以维护数据的完整性和安全性。\nstruct通常用于轻量级的数据结构，其成员都是公开的，用于存储一组相关数据，不提供严格的封装。\n继承：\n\n3. struct和class都可以用于实现继承，但默认情况下，class的继承是私有的，而struct的继承是公共的。这意味着从class继承的成员在子类中默认是私有的，而从struct继承的成员在子类中默认是公共的。\n适用场景：\n\n4. 使用class：当需要实现封装、数据隐藏、访问控制、继承以及更复杂的类层次结构时，通常使用class。\n使用struct：当只需要一个简单的数据容器，没有需要隐藏的数据，或者需要与C语言交互时，通常使用struct。也可以将struct用于只包含数据而不包含成员函数的情况。\n无论选择使用struct还是class，都可以在其中定义成员函数（方法）以提供对数据的操作，这取决于您的设计需求和数据封装的程度。在实际应用中，这两个关键字的选择通常是根据项目的需求和编码风格来确定的。\n\n#### 深入理解 C++ STL 迭代器\n\nSTL（Standard Template Library）中的容器实现迭代器是通过将迭代器作为容器类的内部类来实现的。迭代器是一种用于遍历容器中元素的抽象概念，它提供了访问容器元素的接口，使得可以轻松地遍历容器的内容。\n\n以下是关于STL容器中迭代器的一些一般性原则：\n\n1. 迭代器是容器的一部分：迭代器通常被定义为容器类的内部类，因此它们可以访问容器内部的数据结构，并提供访问和操作元素的方法。\n\n2. 迭代器的种类：不同类型的STL容器可以提供不同种类的迭代器，例如前向迭代器、双向迭代器和随机访问迭代器。迭代器的种类决定了迭代器的功能和效率，不同的容器支持不同种类的迭代器。\n\n3. 迭代器的操作：迭代器通常支持一组标准操作，如前进、后退、解引用等。这些操作允许您在容器中移动并访问元素。\n\n4. Begin 和 End：STL容器通常提供 begin() 和 end() 成员函数，分别返回指向容器第一个元素和尾后位置（即不指向任何元素的位置）的迭代器。这些函数用于迭代容器的所有元素。\n\n5. 迭代器的使用：迭代器可以用于遍历容器的元素，从容器的开始（begin()）到结束（end()）。使用迭代器，您可以执行诸如遍历、查找、修改和删除元素等操作。\n\n6. 具体的实现细节和迭代器的性能特征取决于特定的容器类型。例如，std::vector 提供了随机访问迭代器，因此支持快速的随机访问，而 std::list 提供了双向迭代器，因此在列表中的元素上前进和后退较为高效。\n\n总之，STL容器通过定义迭代器来提供对容器元素的访问和遍历，这是STL的一个核心概念，使得STL容器在使用上非常灵活。\n\n#### 红黑树和 AVL 树实现差异\n\n1. AVL树的插入操作通常使用递归来实现，这是因为AVL树在插入后需要递归地重新平衡，以确保树保持平衡因子的性质。与AVL树不同，红黑树的平衡性质更容易通过迭代修复，因为它只涉及相邻节点之间的颜色变化和旋转操作，而不需要像AVL树那样严格的平衡因子维护。\n\n在红黑树中，使用迭代而不是递归的原因之一是它更简单且更高效。另一方面，AVL树的平衡因子维护涉及到更复杂的旋转和递归操作，因此递归更容易理解和实现。\n\n总之，红黑树通常使用迭代插入操作，而AVL树通常使用递归插入操作。不同的数据结构有不同的性质和平衡要求，因此它们的插入和平衡策略也不同。\n\n#### 类和结构体\n\n1. 访问权限\n类（class）的默认访问权限是私有（private）。这意味着类中的成员（数据成员和成员函数）默认情况下只能在类的内部访问，需要使用公有接口才能从外部访问。\n结构体（struct）的默认访问权限是公共（public）。这意味着结构体中的成员在外部可以直接访问。\n\n2. 继承\n类可以用于实现类的继承和多态，因为类支持访问控制符（如private、protected、public）来控制基类成员的可见性和访问权限。\n结构体也可以用于继承，但默认的访问权限是公共，因此它们的成员在子类中具有相同的访问权限。\n\n3. 使用习惯\n通常情况下，类用于表示具有私有成员和行为的抽象数据类型，用于封装数据和操作。\n结构体通常用于表示简单的数据结构，其中成员通常是相关的数据字段而不包含复杂的行为。\n\n#### 宏定义 define\n\n宏定义是在编译前由预处理器处理的，因此它们不会进行类型检查，可能会导致一些潜在的错误。\n作用：\n1. 宏替换：预处理器会根据宏定义将源代码中的标识符替换为相应的文本。这允许您创建常量、宏函数以及在代码中的其他地方重复使用文本片段。这提高了代码的可维护性和可读性。\n2. 条件编译：通过使用条件指令（如#ifdef、#ifndef、#if、#elif、#else和#endif），您可以根据条件包含或排除代码段。这对于在不同的编译环境或配置下启用或禁用特定功能非常有用，例如调试模式或发布模式下的不同行为。\n3. 包含文件：#include指令允许您在源代码中包含其他头文件，以便使用其中定义的函数、变量和类型。这有助于模块化代码并实现代码重用\n4. 删除注释：预处理器可以删除注释，这样它们不会包含在编译后的代码中。这有助于减小可执行文件的大小，同时保留了代码的可读性。\n5. 定义符号常量：通过#define指令，您可以定义符号常量，以便在代码中使用这些常量而不必硬编码它们的值。这有助于提高代码的可维护性，并减少代码中的魔法数字。\n\n#### 数据库语言\n\n操作数据库经常使用特定的数据库查询语言(Database Query Language)。最常见的数据库查询语言是 SQL(Structured Query Language, 结构化查询语言)。\n\nDBMS(Database manage system) 数据库管理系统\n\n绝大多数数据库软件都支持 SQL 语言，尤其是关系型数据库管理系统(RDBMS)\n\n**MySQL 和 SQLite 的关系：**\nMySQL：MySQL是一个强大的关系型数据库管理系统，通常用于大型企业应用程序和高负载的网站。它可以处理大量数据和高并发访问。\nSQLite：SQLite是一种轻量级的嵌入式数据库，适用于小型到中等规模的应用程序。它通常用于移动应用、桌面应用、嵌入\n式系统等，不适用于大规模或高并发的场景。\n\n其中，嵌入式指的是 **运行方式和部署方式**。这意味着它的数据库引擎以库（库文件或代码库）的形式直接嵌入到应用程序中，而不是作为一个独立的数据库服务器运行。(还记得如果使用 MySQL 的话，需要在电脑上开启它)\n\n##### Redis\nRedis(Remote Dictionary Server)。Redis 是一种开源的**内存数据库**，可以用作缓存、消息代理、持久化存储以及多种数据结构的高效存储和检索。\n\n内存数据库将数据存储在内存中，可以实现非常快的读取和写入操作。这使得内存数据库在需要快速响应的应用中有非常大的优势，例如实时数据分析、缓存和实时计算。\n\n##### std::string::npos\n\nstd::string::npos 是C++标准库中的一个特殊常量值，通常用于表示字符串操作的无效或失败状态，特别是在查找子字符串或字符时。\n\n常见的使用方式是在 `std::string` 的 `find` 函数中\n\n```\n#include <string>\n#include <iostream>\n\nint main() {\n    std::string text = \"Hello, World!\";\n    std::size_t found = text.find(\"foo\"); // 在字符串中查找\"foo\"\n    \n    if (found != std::string::npos) {\n        std::cout << \"Substring found at position \" << found << std::endl;\n    } else {\n        std::cout << \"Substring not found.\" << std::endl;\n    }\n\n    return 0;\n}\n```\n\n#### size_t\n\n`size_t`  是C/C++标准库中定义的一种用于表示对象大小或索引的无符号整数类型。它通常被用于数组索引、容器大小、内存分配、字符串长度以及其他需要表示对象大小的上下文中。\n```\n#include <vector>\n#include <iostream>\n\nint main() {\n    std::vector<int> v = {1, 2, 3, 4, 5};\n    for (size_t i = 0; i < v.size(); ++i) {\n        std::cout << v[i] << \" \";\n    }\n    return 0;\n}\n```\n\n","slug":"杂记","published":1,"updated":"2023-10-30T06:37:48.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clov7szol002a5oog6bb1hydc","content":"<h4 id=\"Auto-js\"><a href=\"#Auto-js\" class=\"headerlink\" title=\"Auto.js\"></a>Auto.js</h4><p>Auto.js 是一种基于 JavaScript 的自动化工具，它允许你编写和运行 JavaScript 脚本来自动化执行 Android 设备上的各种任务。因此，Auto.js 使用 JavaScript 作为其编程语言。</p>\n<p>关于 Auto.js 和 JavaScript 的关系如下：</p>\n<ol>\n<li><p>Auto.js 使用 JavaScript：Auto.js 的脚本是用 JavaScript 编写的，因此你可以在 Auto.js 中编写标准的 JavaScript 代码。这使得 Auto.js 在编写和运行自动化脚本时非常灵活，因为你可以使用 JavaScript 的语法和功能。</p>\n</li>\n<li><p>Auto.js 扩展了 JavaScript：尽管 Auto.js 使用 JavaScript 作为其编程语言，但它还提供了一组额外的 API 和库，这些 API 和库允许你与 Android 设备的各种功能和资源进行交互，如模拟用户输入、操作屏幕、访问文件系统等。这些功能通常不是标准的 JavaScript 语言特性，而是 Auto.js 为 Android 自动化提供的功能扩展。</p>\n</li>\n<li><p>Auto.js 是 JavaScript 的运行环境：Auto.js 提供了一个运行 JavaScript 脚本的环境，这个环境专门设计用于在 Android 设备上执行脚本。它允许你使用 JavaScript 控制 Android 设备的各种操作，例如自动点击、滑动、截屏等等。</p>\n</li>\n</ol>\n<p>总之，Auto.js 是一个工具，它使用 JavaScript 作为编程语言，并扩展了 JavaScript，以便在 Android 设备上执行自动化任务。这使得开发人员可以使用 JavaScript 的语法和功能，结合 Auto.js 提供的 Android 自动化 API，编写用于自动化控制和操作 Android 应用和设备的脚本。</p>\n<h4 id=\"C-赋值\"><a href=\"#C-赋值\" class=\"headerlink\" title=\"C++ 赋值\"></a>C++ 赋值</h4><ul>\n<li>对于函数的变量，我们可以使用值传递或者引用传递，取决于函数的参数类型。如果是带有 <code>&amp;</code>，此时就是引用传递，在函数中对于变量修改会影响到函数外部的值。对于数组，向函数传递的实际上是指向数组首元素的指针，这意味着参数的本质上是通过地址传递的，所以函数内部的修改可以影响到外部。</li>\n<li>在C++中，当您将一个类对象赋值给另一个类对象时，默认情况下是使用复制构造函数来执行赋值操作，因此这也是一种值传递。这意味着目标对象会被复制为源对象的一个副本，两个对象之间是相互独立的，修改一个对象的属性不会影响另一个对象。</li>\n</ul>\n<h4 id=\"VSCode-重命名所有匹配项\"><a href=\"#VSCode-重命名所有匹配项\" class=\"headerlink\" title=\"VSCode 重命名所有匹配项\"></a>VSCode 重命名所有匹配项</h4><p>按住 <code>alt</code> + <code>shift</code><br><a href=\"https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf\">https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf</a> VScode 的快捷键表</p>\n<h4 id=\"ES5-和-ES6-含义\"><a href=\"#ES5-和-ES6-含义\" class=\"headerlink\" title=\"ES5 和 ES6 含义\"></a>ES5 和 ES6 含义</h4><p>ES6 和 ES5 是 JavaScript 的不同版本，它们代表了不同的 ECMAScript（简称 ES）标准。ECMAScript 是 JavaScript 语言的标准化规范，规定了 JavaScript 语法、特性和行为。</p>\n<ol>\n<li>ES5（ECMAScript 5）： ES5 是 JavaScript 的第五个主要版本，它在2009年发布。它引入了许多重要的新特性，例如严格模式（Strict Mode）、数组方法（如 forEach、map、filter 等）和更强大的对象属性定义（Object.defineProperty）。ES5被广泛支持，并且在早期的浏览器中是主要的 JavaScript 标准。</li>\n<li>ES6（ECMAScript 2015）： ES6 是 JavaScript 的第六个主要版本，也称为 ECMAScript 2015。它于2015年发布，并引入了许多新的特性和语法改进，如箭头函数、类、模块、解构赋值、let 和 const 变量声明等。ES6使得 JavaScript 更加现代化和强大，并提供了更好的开发工具和技术。尽管它在发布时得到了广泛的支持，但由于浏览器的兼容性问题，需要一些时间才能在所有主要环境中广泛使用。</li>\n</ol>\n<h4 id=\"Span\"><a href=\"#Span\" class=\"headerlink\" title=\"Span\"></a>Span</h4><p><span> 是一个行内元素（inline element）或内联元素，用于在文本中包裹一部分内容，而不会引入新的块级元素或换行。<span> 通常用于对文本的一部分进行样式设置或添加其他属性，以便在不破坏文本流的情况下对其进行操作。<br><span> 元素本身不会对其包含的文本内容产生任何视觉效果，它主要用于以下情况：</p>\n<ol>\n<li>样式设置：你可以使用 <span> 元素为文本添加 CSS 样式，例如更改文本的颜色、字体、背景色等。这使得你可以有选择性地为文本的一部分应用样式，而不必更改整个段落或文本块的样式。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;This is &lt;span style=&quot;color: red;&quot;&gt;red text&lt;/span&gt; and this is &lt;span style=&quot;font-weight: bold;&quot;&gt;bold text&lt;/span&gt;.&lt;/p&gt;</span><br></pre></td></tr></table></figure></li>\n<li>JavaScript 操作：<span> 通常用于 JavaScript 操作，你可以通过 JavaScript 选择 <span> 元素并修改其内容或属性。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;Click &lt;span id=&quot;mySpan&quot; onclick=&quot;changeText()&quot;&gt;here&lt;/span&gt;.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">function changeText() &#123;</span><br><span class=\"line\">  var spanElement = document.getElementById(&quot;mySpan&quot;);</span><br><span class=\"line\">  spanElement.innerHTML = &quot;clicked!&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"HTML-中-img-标签中的-alt-属性\"><a href=\"#HTML-中-img-标签中的-alt-属性\" class=\"headerlink\" title=\"HTML 中 img 标签中的 alt 属性\"></a>HTML 中 img 标签中的 alt 属性</h4><p><code>alt</code> 属性用于提供图片的替代文本(Alternative Text)</p>\n<ol>\n<li>替代文字：如果图像无法加载或无法显示，浏览器会显示 alt 属性中的文本，以提供对图像内容的文字描述，从而使页面更具可访问性。</li>\n<li>辅助工具：屏幕阅读器等辅助技术会读取 alt 文本，以向用户描述图像。因此，良好的 alt 文本可以帮助视觉障碍者理解图像的含义。</li>\n<li>优化 SEO：搜索引擎可以使用 alt 文本来理解图像的内容，从而更好地索引和排名网页。</li>\n<li>图像加载失败时的占位符。</li>\n<li>提示信息：一些浏览器在用户将鼠标悬停在图像上时会显示 alt 文本作为工具提示，以提供附加信息。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=&quot;example.jpg&quot; alt=&quot;一只可爱的猫咪&quot;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"axios-和-jQuery\"><a href=\"#axios-和-jQuery\" class=\"headerlink\" title=\"axios 和 jQuery\"></a>axios 和 jQuery</h4><p>axios 是一个独立的 JavaScript 库，专注于处理 HTTP 请求。它是一个现代的、基于 Promise 的库，主要用于前端和后端（Node.js）开发，提供了清晰、简单的 API。<br>$.ajax() 是 jQuery 库的一部分，用于处理各种类型的 AJAX 请求。它除了处理 HTTP 请求外，还包括许多其他功能，如 DOM 操作、事件处理、动画等。因此，$.ajax() 只是 jQuery 库的一部分。<br>总结来说就是，axios 是一个相对较小的库，专注于 HTTP 请求。你可以单独引入它，而无需加载整个 jQuery 库。$.ajax() 是 jQuery 的一部分，如果你只需要进行 HTTP 请求，使用 jQuery 会显得冗余，因为它包含了许多其他功能。</p>\n<h4 id=\"VSCode-多光标编辑\"><a href=\"#VSCode-多光标编辑\" class=\"headerlink\" title=\"VSCode 多光标编辑\"></a>VSCode 多光标编辑</h4><ol>\n<li>按住 <code>alt</code> 点击多个位置(这个方法选择就没有约束)。</li>\n<li>按住鼠标滚轮，往下拖动(这个方法只是支持在同一竖线上的多位置编辑)。</li>\n</ol>\n<h4 id=\"快速创建-HTML-模板\"><a href=\"#快速创建-HTML-模板\" class=\"headerlink\" title=\"快速创建 HTML 模板\"></a>快速创建 HTML 模板</h4><p>创建xxx.html文件，输入: ! + Tab</p>\n<h4 id=\"实体字符\"><a href=\"#实体字符\" class=\"headerlink\" title=\"实体字符\"></a>实体字符</h4><p>在HTML中，实体字符是一种特殊的编码方式，用来表示一些特殊字符或保留字符，以确保它们能够正确地显示在网页上，而不会被解释为HTML标记。以下是一些常见的HTML实体字符<br><img src=\"/2023/08/31/%E6%9D%82%E8%AE%B0/%E5%AE%9E%E4%BD%93%E5%AD%97%E7%AC%A6.png\" class=\"\"></p>\n<h4 id=\"系统变量和用户变量\"><a href=\"#系统变量和用户变量\" class=\"headerlink\" title=\"系统变量和用户变量\"></a>系统变量和用户变量</h4><p>系统变量与用户变量的区别，最重要的即系统变量的优先级高于用户变量。</p>\n<h4 id=\"BeautifulSoup-库\"><a href=\"#BeautifulSoup-库\" class=\"headerlink\" title=\"BeautifulSoup 库\"></a>BeautifulSoup 库</h4><p>Beautiful Soup 是一个Python库，用于从HTML或XML文档中提取数据。它是一个强大的解析库，可以帮助你轻松地解析复杂的网页内容，并从中提取所需的信息。<br>它可以帮助我们(在使用Beautiful Soup库时，通常需要指定一个底层的解析器，而 lxml 是一个常用的解析器之一，因为它具有高性能和稳定性。Beautiful Soup本身并没有自带解析器，因此需要依赖第三方解析器来处理HTML或XML文档)：</p>\n<ol>\n<li>解析 HTML 和 XML。将他们转换为 Python 对象的树状结构。</li>\n<li>寻找元素。寻找特定的元素、属性、文本内容，从而提取所需的数据。</li>\n<li>修改文档结构。</li>\n<li>清除数据。</li>\n</ol>\n<h4 id=\"RE-regular-expression-regex\"><a href=\"#RE-regular-expression-regex\" class=\"headerlink\" title=\"RE regular expression regex\"></a>RE regular expression regex</h4><p>正则表达式，是用来简介表达一组字符串特征的表达式，最主要的应用在字符串匹配。<br>具体内容见文章 python 爬虫。</p>\n<h4 id=\"IP-地址\"><a href=\"#IP-地址\" class=\"headerlink\" title=\"IP 地址\"></a>IP 地址</h4><p>IP地址（Internet Protocol Address，互联网协议地址）是一种用于在计算机网络中唯一标识和定位设备的数字地址。IP地址在互联网通信中起到了非常重要的作用，它允许设备在全球范围内进行通信。<br>一些概念和要点：</p>\n<ol>\n<li>唯一性：每个设备（如计算机、服务器、路由器）连接到互联网时都被分配一个唯一的IP地址。这确保了在互联网上的每个设备都可以被准确标识和寻址。</li>\n<li>IPv4和IPv6：有两个主要的IP地址版本，分别是IPv4（Internet Protocol Version 4）和IPv6（Internet Protocol Version 6）。IPv4地址是32位的，通常以点分十进制表示，如192.168.1.1。IPv6地址是128位的，通常以冒号分隔的十六进制表示，如2001:0db8:85a3:0000:0000:8a2e:0370:7334。由于IPv4地址空间有限，IPv6被引入以满足不断增长的互联网连接需求。</li>\n<li>分层和路由：IP地址的设计允许数据在网络中进行分层和路由。它可以告诉路由器和交换机如何将数据包从源设备传送到目标设备，经过多个网络节点。</li>\n<li>公共和私有IP地址：IP地址可以是公共的或私有的。公共IP地址用于直接连接到互联网，而私有IP地址用于在私有网络中进行内部通信。私有IP地址通常在家庭网络和企业内部网络中使用，路由器负责将这些地址与公共IP地址进行映射。</li>\n<li>动态和静态IP地址：IP地址可以是动态的或静态的。动态IP地址由DHCP（动态主机配置协议）服务器动态分配给设备，而静态IP地址是由网络管理员手动配置的，通常不会更改。</li>\n<li>网络服务：IP地址不仅用于标识设备，还用于定位网络服务和资源，如网站、邮件服务器、数据库服务器等。DNS（域名系统）用于将域名映射到IP地址，使人们更容易访问网络资源。</li>\n</ol>\n<h4 id=\"Ctrl-R\"><a href=\"#Ctrl-R\" class=\"headerlink\" title=\"Ctrl + R\"></a>Ctrl + R</h4><p>在 VSCode 中可以直接搜索文件夹。</p>\n<h4 id=\"抓包-packet-capture\"><a href=\"#抓包-packet-capture\" class=\"headerlink\" title=\"抓包 packet capture\"></a>抓包 packet capture</h4><p>「抓包」是将网络传输发送与接受的数据包进行截获、重发、编辑、转存等操作，也用来检查网络安全。抓包经常被用来进行数据截取等。</p>\n<h5 id=\"为什么抓包\"><a href=\"#为什么抓包\" class=\"headerlink\" title=\"为什么抓包\"></a>为什么抓包</h5><ol>\n<li>Web 表单中会有很多隐藏的字段，这些隐藏字段一般都有一些特殊的用途，比如收集用户的数据，预防 CRSF 攻击，防网络爬虫，以及一些其他用途。这些隐藏字段在界面上都看不到，如果想检测这些字段，就必须要使用抓包工具。</li>\n<li>经常使用抓包工具辅助测试，可以很好的了解整个系统，比如数据传输过程前后端的关系，以及整个系统的结构。特别是对现在的微服务架构的产品，抓包能够更好的梳理和掌握整个系统各个服务之间的关系，大大增加测试的覆盖度。另外还可以增进对代码、HTTP协议方面知识的理解。</li>\n</ol>\n<h5 id=\"常用的抓包工具\"><a href=\"#常用的抓包工具\" class=\"headerlink\" title=\"常用的抓包工具\"></a>常用的抓包工具</h5><ol>\n<li>httpwatch</li>\n<li>fiddler</li>\n<li>wireshark</li>\n<li>firebug</li>\n</ol>\n<h4 id=\"HMAC-SHA256-算法\"><a href=\"#HMAC-SHA256-算法\" class=\"headerlink\" title=\"HMAC-SHA256 算法\"></a>HMAC-SHA256 算法</h4><p>HMAC-SHA256（Hash-based Message Authentication Code with SHA-256）是一种基于哈希函数和密钥的消息认证码算法，用于确保消息的完整性和认证消息的发送方。它是SHA-256哈希函数与密钥结合使用</p>\n<h4 id=\"Token-Cookie-和-Session\"><a href=\"#Token-Cookie-和-Session\" class=\"headerlink\" title=\"Token Cookie 和 Session\"></a>Token Cookie 和 Session</h4><ol>\n<li>Token<br>Token 是一种轻量级的身份验证令牌，通常是一个长字符串，用于识别用户。<br><strong>原理：</strong>当用户登录应用程序时，服务器会颁发一个Token给客户端（通常是JSON Web Token - JWT）。客户端将Token存储在本地（通常是在浏览器的localStorage或sessionStorage中，或在移动应用的存储中）。后面客户端的每个 HTTP 请求都会在 Headers 中附带 Token，服务器<strong>只需要通过特定的密钥和加密算法来验证即可</strong>，不需要再去额外存储用户的 Token 信息。<br><strong>优点：</strong> 无状态(只需要验证，无需存储)、可扩展性强，适用于分布式系统和 API。<br><strong>缺点：</strong> 需要额外的处理来管理 Token 的过期、刷新和安全性。</li>\n<li>Cookie<br>Cookie是一小段数据，由服务器发送到用户浏览器，存储在用户本地。它通常包含了一些标识信息和可选的数据。<br><strong>原理：</strong> 服务器在响应HTTP请求时，可以通过Set-Cookie头来设置Cookie。浏览器会将Cookie存储在用户的计算机上，并在后续请求中自动发送给服务器。<br><strong>优点：</strong> 简单、易用，可以持久保存数据，对用户透明。<br><strong>缺点：</strong> 有限的存储容量，每个请求都会带上Cookie，可能会影响性能和安全性（例如，可能受到跨站脚本攻击的影响）。</li>\n<li>Session<br>Session是一种服务器端机制，用于跟踪用户在应用程序中的状态和身份。<br><strong>原理：</strong> 服务器在用户登录时创建一个唯一的会话标识，通常是一个Session ID，并将其存储在服务器上。Session ID 可以存储在Cookie中或通过URL重写等方式传递给客户端。<br><strong>优点：</strong> 相对于 Cookie 更加安全，可以存储更多的数据，不受 Cookie 容量限制。<br><strong>缺点：</strong> 占用服务器内存，需要额外的服务器资源，不适于分布式系统。<br>通常，现代Web应用程序使用Token进行身份验证和授权，而Cookie和Session用于保持用户状态和临时数据的存储。</li>\n</ol>\n<h4 id=\"通信协议\"><a href=\"#通信协议\" class=\"headerlink\" title=\"通信协议\"></a>通信协议</h4><p>通信协议是计算机和网络设备之间进行数据交换和通信的<strong>规则</strong>和<strong>约定</strong>。它们定义了数据的格式、传输方式、错误检测和纠正机制以及通信参与方之间的行为。</p>\n<h5 id=\"1-OSI-模型\"><a href=\"#1-OSI-模型\" class=\"headerlink\" title=\"1. OSI 模型\"></a>1. OSI 模型</h5><p>OSI 模型即 <strong>开放式通信系统互联参考模型</strong>(Open System Interconnection Reference Model)，是国际标准化组织 ISO 提出的一个试图使各种计算机在世界范围内互联为网络的标准框架，简称 OSI</p>\n<p>OSI 七层模型<br>OSI 定义了网络互连的七层模型，物理层、数据链路层、网络层、传输层、会话层、表示层、应用层<br><img src=\"/2023/08/31/%E6%9D%82%E8%AE%B0/OSI%E6%A8%A1%E5%9E%8B.png\" class=\"\"><br>首字母组成 All people seem to need data processing. 所有人似乎都需要数据处理，这句话可以帮助来记忆。</p>\n<h5 id=\"2-TCP-IP-协议族\"><a href=\"#2-TCP-IP-协议族\" class=\"headerlink\" title=\"2. TCP/IP 协议族\"></a>2. TCP/IP 协议族</h5><p>从字面意义上讲，有人可能会认为 TCP/IP 是指 TCP 和 IP 两种协议。实际生活当中有时也确实就是指这两种协议。然而很多情况下，它只是利用 IP 进行通信时所必须用到的协议群的统称。<br>它是把 OSI 七层模型简化成了五层模型，每一层模型都呼叫它的下一层所提供的网络来完成自己的需求。<br><img src=\"/2023/08/31/%E6%9D%82%E8%AE%B0/OSI%E4%B8%8ETCPIP%E5%85%B3%E8%81%94.png\" class=\"\"></p>\n<h5 id=\"3-TCP-协议\"><a href=\"#3-TCP-协议\" class=\"headerlink\" title=\"3. TCP 协议\"></a>3. TCP 协议</h5><p>TCP 是<strong>面向连接的运输层协议</strong>。应用程序在使用 TCP 协议之前，必须<strong>先建立</strong> TCP 连接。在传送数据完毕以后，<strong>必须释放</strong>已经建立的 TCP 连接(HTTP 协议通常使用 TCP 作为传输协议，HTTP 是典型的无状态，所以可以用来理解 TCP 协议)。</p>\n<p>每一条 TCP 连接只能有两个端点，是点对点的。</p>\n<p>TCP 提供<strong>可靠交付</strong>的服务。通过 TCP 连接传送的数据，无差错、不丢失、不重复，并且按序到达。</p>\n<p>TCP 协议是<strong>面向字节流</strong>的，意味着TCP将数据视为一连串的字节而不是消息或数据块的集合。</p>\n<p>产生的影响：</p>\n<ol>\n<li>无消息边界。<br>在TCP连接中，数据被视为一个连续的字节流，没有明确的消息边界或分隔符。这意味着TCP不会为你自动识别消息的开始或结束。你需要自行定义和实现消息的分割和解析机制。</li>\n<li>字节级的精确性<br>TCP保证了数据的字节级精确性，即接收到的数据的每个字节都与发送端相匹配。如果数据在传输过程中损坏或丢失，TCP会负责重传丢失的部分，以确保接收端获得完整且准确的数据。</li>\n</ol>\n<p>TCP 提供了可靠的、有效的数据传输但是不考虑消息的边界。因此，我们在使用 TCP 协议的时候，应用程序需要负责<strong>定义和实现消息的分割和解析方法</strong>。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/64155705\">https://zhuanlan.zhihu.com/p/64155705</a> TCP 协议详解</p>\n<h5 id=\"4-HTTP-协议\"><a href=\"#4-HTTP-协议\" class=\"headerlink\" title=\"4. HTTP 协议\"></a>4. HTTP 协议</h5><p>HTTP 是 Hyper Text Transfer Protocol(超文本传输协议) 的缩写。HTTP 协议用于 WWW 服务器传输超文本到本地浏览器的传送协议。<br>它不仅可以保证计算机<strong>正确快速地传输</strong>超文本文档，还确定传输文档中哪一部分，以及哪部分内容首先显示(如文本优先于图像)。<br>HTTP 是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型，是一个无状态的协议。</p>\n<p><strong>特点：</strong></p>\n<ol>\n<li>简单快速。客户向服务器请求服务的时候，只需要请求方法和路径。请求方法通常包括 GET、HEAD、POST。</li>\n<li>灵活。HTTP 允许传输任意类型的数据对象，正在传输的类型由 Content-Type 加以标记。</li>\n</ol>\n<p><strong>持久连接</strong><br>HTTP 1.1 版本的变化，就是引入了持久连接（persistent connection），即 TCP 连接默认不关闭，可以被多个请求复用，不用声明 <code>Connection: keep-alive</code>。客户端和服务器发现对方一段时间没有活动，就可以主动关闭连接。不过，规范的做法是，客户端在发送最后一个请求时，发送 <code>Connection: close</code>，明确要求服务器关闭 TCP 连接。</p>\n<p><strong>Content-Length</strong> 字段<br>一个 TCP 连接现在可以传送多个回应，势必就要有一种机制，区分数据包是属于哪个回应的。这就是 Content-Length 字段的作用，声明本次回应的数据长度。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Length: 3295</span><br></pre></td></tr></table></figure><br>上面代码告诉浏览器，本次回应的长度是3295个字节，后面的字节就属于下一个回应了。</p>\n<p>在 1.0 版本中，Content-Length 字段不是必需的，因为浏览器发现服务器关闭了 TCP 连接，就表明收到的数据包已经全了。<br>使用 Content-Length 的前提是，服务器发送回应前，必须知道回应的数据长度。<strong>对于一些很耗时的动态操作来说，这意味着服务器要完成所有操作以后才可以发送数据</strong>(毕竟是动态的)，显然这样的数据并不是很高。更好的处理方法是，产生一块数据就发送一块，采用「流模式」(stream) 取代「缓存模式」(buffer)。<br>因此，1.1 版本规定可以不使用 Content-Length 字段，而是使用「分块传输编码」(chunked transfer encoding)。只要请求或者回应的头信息有 Transfer-Encoding 字段，就表明回应将由数量未定的数据块组成。<br><img src=\"/2023/08/31/%E6%9D%82%E8%AE%B0/http%E5%92%8Ctcp%E5%85%B3%E7%B3%BB.png\" class=\"\"></p>\n<h5 id=\"5-FTP-协议\"><a href=\"#5-FTP-协议\" class=\"headerlink\" title=\"5. FTP 协议\"></a>5. FTP 协议</h5><p>FTP 协议(File Transfer Protocol)，也是运行在 TCP 上，保证了文件传输的可靠性。与 HTTP 相比，FTP 面向的直接是服务器的文件系统，并且具有维持状态的特点，在文件传输管理上，FTP 更胜一筹。<br><strong>传输流程</strong><br><img src=\"/2023/08/31/%E6%9D%82%E8%AE%B0/FTP%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png\" class=\"\"><br>一共有两个并行的连接，一个是「控制连接」(port: 21)，另一个是「数据连接」(port: 20)。<br>其中，控制连接用于在两个主机之间传输控制信息，如口令、用户标识、存放，获取文件等命令。数据连接用于实际发送一个文件，发送完文件以后数据连接是会关闭的。<br>由于 FTP 使用一个独立的控制连接，所以我们也称 FTP 的控制信息是带外(out-of-band) 传送的。HTTP 协议是在传输文件的同一个 TCP 连接中发送请求和响应首部行的，所以，HTTP 也可以说是带内 (in-band) 发送控制信息的。<br><strong>传输方式</strong><br>FTP 支持两种方式的传输：文本(ASCII)方式和二进制(Binary)方式。<br>通常文本文件的传输采用 ASCII 方式；而图像、声音文件、加密和压缩文件等非文本文件采用二级制传输方式。<br><strong>传输模式</strong><br>FTP 有两种传输模式—主动(FTP Port)模式和被动(FTP Passive)模式。由于主动模式存在着安全问题，最近几年，大部分的 FTP 客户端开始默认使用被动模式。<br><a href=\"https://zhuanlan.zhihu.com/p/337513218\">https://zhuanlan.zhihu.com/p/337513218</a><br><a href=\"https://zhuanlan.zhihu.com/p/141472331\">https://zhuanlan.zhihu.com/p/141472331</a></p>\n<h5 id=\"6-DNS-协议\"><a href=\"#6-DNS-协议\" class=\"headerlink\" title=\"6. DNS 协议\"></a>6. DNS 协议</h5><p>互联网上主机的一种标识方式是使用它的「主机名」(hostname)，如 <code>www.facebook.com</code>、<code>www.google.com</code> 等。但是这是我们人类的记忆方式，路由器不会这么理解，路由器喜欢定长的、有层次结构的 IP 地址。</p>\n<blockquote>\n<p>主机名 (Hostname) 是计算机或者设备在网络上的名称标识符，用于唯一标识一个特定的计算机或者网络设备。<strong>主机名</strong>通常是人类可读的形式，<strong>但是在网络协议中国会被映射为 IP 地址进行通信</strong>。</p>\n</blockquote>\n<p>IP 地址由 4 字节组成，并且有着严格的层次结构。例如 <code>121.7.106.83</code> 然而路由器喜欢的是 IP 地址进行解析，我们人类便于记忆的确实网址，此时就用到 DNS 了。<br>DNS 的全称是 <code>Domain Name System</code>，是由一个分层的 DNS 服务器(DNS Server) 实现的分布式数据库；还是一个使得主机能够查询分布式数据库的应用层协议。DNS 服务器通常是运行 <code>Berkeley Internet Name Domain</code> 软件的 Unix 机器。DNS 协议运行在 UDP 之上，使用 53 端口。</p>\n<p>DNS 是<strong>一个分布式的系统</strong></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/346236071\">https://zhuanlan.zhihu.com/p/346236071</a></p>\n<h4 id=\"h-文件和-hpp-文件区别\"><a href=\"#h-文件和-hpp-文件区别\" class=\"headerlink\" title=\"h 文件和 hpp 文件区别\"></a>h 文件和 hpp 文件区别</h4><img src=\"/2023/08/31/%E6%9D%82%E8%AE%B0/h%E5%92%8Chpp.png\" class=\"\">\n<h4 id=\"低耦合-Low-Coupling\"><a href=\"#低耦合-Low-Coupling\" class=\"headerlink\" title=\"低耦合 Low Coupling\"></a>低耦合 Low Coupling</h4><p>是在讨论软件工程中的一种设计原则，旨在创建更可维护、可扩展和可重用的代码。低耦合涉及到将代码分解成松散耦合的模块或组件，这些模块之间的依赖性尽量降低。</p>\n<h4 id=\"lambda-表达式\"><a href=\"#lambda-表达式\" class=\"headerlink\" title=\"lambda 表达式\"></a>lambda 表达式</h4><p>在 C++ 中，lambda 表达式的结构：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[capture clause](parameters) -&gt; return_type &#123;</span><br><span class=\"line\">    // 函数体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>解释：<br><img src=\"/2023/08/31/%E6%9D%82%E8%AE%B0/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.png\" class=\"\"></p>\n<h4 id=\"delete-和-delete\"><a href=\"#delete-和-delete\" class=\"headerlink\" title=\"delete 和 delete[]\"></a>delete 和 delete[]</h4><p>当你使用 new[] 来分配动态数组时，编译器会记住你分配了多少个元素，因此在释放内存时，你必须使用 delete[] 来确保所有元素都得到释放。如果你使用 delete（而不是 delete[]）来尝试释放动态数组的内存，将导致未定义的行为，可能会导致内存泄漏或程序崩溃。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int* data_ = new int[size];</span><br><span class=\"line\">delete[] data_;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"静态数组\"><a href=\"#静态数组\" class=\"headerlink\" title=\"静态数组\"></a>静态数组</h4><p>静态数组需要在编译的时候知道它的大小<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a[size];</span><br></pre></td></tr></table></figure><br>也就是说其中的 <code>size</code> 需要是一个常量表达式。如果我们 <code>cin &gt;&gt; size;</code> 后面又 <code>int a[size];</code> 是不行的，因为静态数组要求 <strong>编译的时候大小就确定。</strong></p>\n<p>静态数组的内存分配发生在程序的静态存储区域，通常在编译的时候分配，并且在程序结束的时候才会释放，具有全局的声明周期。</p>\n<h4 id=\"动态数组\"><a href=\"#动态数组\" class=\"headerlink\" title=\"动态数组\"></a>动态数组</h4><p>动态数组的大小在运行的时候确定，通常在堆中分配内存。<code>int* ptr = new int[size];</code>。在最后不使用的时候记得要 <code>delete[] ptr;</code><br>其中 <code>new int[size]</code> 会在堆上分配一段连续的内存，大小为 <code>size * sizeof(int)</code> 个字节，然后返回一个指向这块内存的指针，并将这个指针赋值给 <code>ptr</code></p>\n<p>堆上分配的内存不会自动释放，需要程序员负责在确保不需要的时候手动释放，否则可能导致内存泄漏。</p>\n<h4 id=\"栈内存\"><a href=\"#栈内存\" class=\"headerlink\" title=\"栈内存\"></a>栈内存</h4><p>栈内存用于存储局部变量和函数调用信息。每个线程通常都有自己的栈。<br>栈内存的分配和释放是自动的，发生在函数的入栈和出栈过程中。当函数返回时，其局部变量的内存会自动被释放。<br>栈内存的生命周期与函数调用有关，它们在函数调用结束后自动释放。</p>\n<h4 id=\"程序运行时内存区域\"><a href=\"#程序运行时内存区域\" class=\"headerlink\" title=\"程序运行时内存区域\"></a>程序运行时内存区域</h4><ol>\n<li>栈区 Stack<br>栈区用于存储函数调用的局部变量、函数的参数值以及函数调用的返回地址。<br>栈区是<strong>自动管理</strong>的，函数的局部变量在函数被调用时分配内存，在函数结束时自动释放内存。<br><strong>栈区的大小通常较小</strong>，且生命周期短暂，用于管理函数的执行和调用。</li>\n<li>堆区 Heap<br>堆区用于动态分配内存，例如使用 new 和 malloc 来分配内存。<br>堆区的内存分配和释放需要程序员<strong>手动管理</strong>，使用 delete 和 free 来释放内存。<br><strong>堆区的大小通常较大</strong>，用于存储动态分配的数据结构，如动态数组、对象等。</li>\n<li>静态存储区域 Static Storage<br>静态存储区域用于<strong>存储全局变量、静态变量和常量</strong>(如静态分配的数组)。<br>这些变量在程序启动时分配内存，在程序结束时释放内存。<br>静态存储区域的变量具有全局可见性，并且在整个程序的生命周期内保持不变。</li>\n<li>代码区 Code Segment<br>代码区包含程序的机器码指令，用于执行程序的逻辑。<br>代码区通常是只读的，不允许写入和修改。<br>代码区存储程序的执行指令，每个函数和方法的机器代码以及程序的静态数据。</li>\n<li>常量区 Constant Area<br>常量区用于存储常量数据，如字符串文字（string literals）和全局 const 变量。<br>常量区的数据是只读的，不允许修改。</li>\n<li>栈帧区 Stack Frame</li>\n</ol>\n<h4 id=\"malloc-free-和-new-delete\"><a href=\"#malloc-free-和-new-delete\" class=\"headerlink\" title=\"malloc free 和 new delete\"></a>malloc free 和 new delete</h4><p><strong>语言差异</strong>：<br>malloc 和 free 是C语言中的函数，可以在C++中使用，但通常不推荐在C++代码中使用它们，因为C++提供了更强大的内存管理工具。<br>new 和 delete 是C++中的操作符，专门用于创建和销毁对象，并与类的构造函数和析构函数一起工作。</p>\n<p><strong>类型安全性：</strong><br>new 和 delete 是类型安全的，它们会为对象的构造和销毁调用适当的构造函数和析构函数。这对于管理类对象非常重要。<br>malloc 和 free 不了解对象的类型，它们只是分配和释放内存块。如果你使用它们来分配和释放类对象，可能会绕过构造函数和析构函数，导致对象的行为不正常。</p>\n<p>尽管 malloc 和 free 是C语言中的标准内存分配函数，但在C++中通常更推荐使用 new 和 delete，因为它们提供了更好的类型安全性、异常处理和对象生命周期管理。只有在特殊情况下，如与C库一起使用或需要更底层的内存分配控制时，才使用 malloc 和 free。</p>\n<p>其中需要注意，malloc 函数返回的是 <code>void*</code> 类型的指针，也就是并没有规定它的类型，需要我们人为规定。所以我们一般写成这样的形式：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char* p = (char*)malloc(100);</span><br></pre></td></tr></table></figure><br>其中，100 表示 100 个字节。</p>\n<h4 id=\"C-对象构造\"><a href=\"#C-对象构造\" class=\"headerlink\" title=\"C++ 对象构造\"></a>C++ 对象构造</h4><p>有四种方式创建对象：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyClass myClass;</span><br><span class=\"line\">MyClass myClass = MyClass();</span><br><span class=\"line\">MyClass* myClass = new MyClass();</span><br><span class=\"line\">MyClass* myClass = new MyClass;</span><br></pre></td></tr></table></figure><br>其中，前两种方式是在栈中分配内存，由操作系统进行内存的分配和管理。<br>后两种是在堆中分配内存，由管理者(程序员)进行内存的分配和管理，用完必须 delete，否则会造成内存的泄露。</p>\n<h5 id=\"不使用-new\"><a href=\"#不使用-new\" class=\"headerlink\" title=\"不使用 new\"></a>不使用 new</h5><p>对于第一种和第二种，一个隐式调用，一个显式调用。<br><strong>第一种：</strong></p>\n<ul>\n<li>如果有构造函数，默认使用构造函数来初始化对象。</li>\n<li>如果没有默认的构造函数，编译器会报错。</li>\n</ul>\n<p><strong>第二种：</strong></p>\n<ul>\n<li>默认使用构造函数</li>\n<li>如果没有构造函数，编译器会报错。</li>\n<li>与第一种方法不同，这个是先创建一个对象，然后进行对象的复制。</li>\n</ul>\n<p>虽然上面两种那么说，但是如果我们没有显式定义构造函数，编译器会自动生成一个默认构造函数的。这个默认构造函数会对类中的一些基本数据类型的数据进行初始化，就是随机赋值。</p>\n<p>所以，通常情况下，前两种方式相比较，第一种方式直接 <code>MyClass myClass;</code> 是更加直接高效的方法，一般使用这种方式。</p>\n<h5 id=\"使用-new\"><a href=\"#使用-new\" class=\"headerlink\" title=\"使用 new\"></a>使用 new</h5><p>在使用 new 创建对象的时候。对于有构造函数的类，不论有没有括号，都用构造函数进行初始化。如果没有构造函数，则不加括号的new只分配内存空间，不进行内存的初始化，而加了括号的new会在分配内存的同时初始化为0。</p>\n<p>对于 new 创建对象，可以作为函数的返回值和参数，因为如果不用new，函数中不能返回该对象的指针，因为函数结束后，该对象的内存就被释放了(函数是栈空间嘛，如果是 new 则在堆空间，由我们人为决定其寿命)。</p>\n<img src=\"/2023/08/31/%E6%9D%82%E8%AE%B0/new%E6%9E%84%E9%80%A0.png\" class=\"\">\n<p>上面是两种new构造的区别，其实不是很大，一般加个括号就好了。</p>\n<p>使用 new 创建对象的实际步骤是：</p>\n<ol>\n<li><p>分配内存：new 会在堆上动态分配足够的内存来存储对象的数据成员，包括对象的成员变量和虚函数表（如果有的话）。</p>\n</li>\n<li><p>调用构造函数：一旦内存分配完成，C++会调用对象的构造函数来初始化这块内存。构造函数是类的特殊成员函数，用于初始化对象的状态。如果你没有显式定义构造函数，编译器会为你生成一个默认的构造函数来执行默认的初始化操作。</p>\n</li>\n<li><p>返回指针：new 表达式返回指向分配的内存的指针，该指针指向一个已经构造完成的对象。</p>\n</li>\n</ol>\n<h4 id=\"CSV-文件-Comma-Separated-Values\"><a href=\"#CSV-文件-Comma-Separated-Values\" class=\"headerlink\" title=\"CSV 文件(Comma-Separated Values)\"></a>CSV 文件(Comma-Separated Values)</h4><p>CSV 格式是处理和存储数据的常用格式之一。</p>\n<ol>\n<li>简单易懂：CSV文件使用纯文本格式，数据之间使用逗号或其他分隔符分隔。</li>\n<li>跨平台兼容性：CSV文件是纯文本文件，几乎所有操作系统和应用程序都可以处理它们。</li>\n<li>轻量级。</li>\n<li>广泛支持：几乎所有类型的编程语言都支持 CSV 格式文件操作。</li>\n</ol>\n<h4 id=\"codecs\"><a href=\"#codecs\" class=\"headerlink\" title=\"codecs\"></a>codecs</h4><p>“codecs” 是 Python 编程语言中的一个标准库模块，用于处理各种字符编码和解码操作。<br>codecs 的名称来自 <code>code and decode</code>，提供了一种在不同字符码之间进行转换的方式，这在处理文本数据的时候非常有用。<br>下面是一个简单的示例，将 UTF-8 的编码转换为 ASCII 编码。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import codecs</span><br><span class=\"line\"></span><br><span class=\"line\"># 要转换的文本</span><br><span class=\"line\">text = &quot;Hello, 你好&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 将文本从UTF-8编码转换为ASCII编码</span><br><span class=\"line\">ascii_text = codecs.encode(text, &#x27;ascii&#x27;, &#x27;ignore&#x27;)  # ignore 是一种错误处理，&quot;ignore&quot; 表示在转换时忽略不能被目标字符编码表示的字符。还有 replace 等</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出转换后的文本</span><br><span class=\"line\">print(ascii_text)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Python-列表推导-List-Comprehension\"><a href=\"#Python-列表推导-List-Comprehension\" class=\"headerlink\" title=\"Python 列表推导(List Comprehension)\"></a>Python 列表推导(List Comprehension)</h4><p>列表推导是一种简洁的方式来创建新的列表。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[expression for item in iterable if condition]</span><br></pre></td></tr></table></figure><br>其中 <code>expression</code> 是生成新列表中元素的表达式，<code>item</code> 是可迭代对象 <code>iterable</code> 中的元素.<br>下面是一些例子：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建一个包含1到10的平方的列表</span><br><span class=\"line\">squares = [x**2 for x in range(1, 11)]</span><br><span class=\"line\"></span><br><span class=\"line\"># 将字符串列表中的所有字符串转换为大写</span><br><span class=\"line\">words = [&quot;hello&quot;, &quot;world&quot;, &quot;python&quot;]</span><br><span class=\"line\">uppercase_words = [word.upper() for word in words]</span><br><span class=\"line\"></span><br><span class=\"line\"># 筛选出一个列表中的偶数元素</span><br><span class=\"line\">numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span><br><span class=\"line\">even_numbers = [x for x in numbers if x % 2 == 0]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Python-赋值\"><a href=\"#Python-赋值\" class=\"headerlink\" title=\"Python 赋值\"></a>Python 赋值</h4><p>在 Python 中，赋值分为两种情况：</p>\n<ol>\n<li>不可变对象(Immutable Objects)<br>包括数字、字符串、元组等不可修改的对象。对不可变对象的赋值是值传递（Pass by Value），意味着在赋值时会创建一个新的对象，并将其值赋给新的变量，而不是将原始对象的引用传递给新的变量。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = 5</span><br><span class=\"line\">y = x  # 这是值传递，y 拥有一个新的 5 的副本</span><br></pre></td></tr></table></figure></li>\n<li>可变对象(Mutable Objects)<br>包括列表、字典、集合等可以修改的对象。对可变对象的赋值是地址传递（Pass by Reference），意味着在赋值时不会创建新的对象，而是将原始对象的引用传递给新的变量。因此，如果修改一个可变对象，会影响到所有引用它的变量。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list1 = [1, 2, 3]</span><br><span class=\"line\">list2 = list1  # 这是地址传递，list2 和 list1 引用同一个列表对象</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"Python-切片\"><a href=\"#Python-切片\" class=\"headerlink\" title=\"Python 切片\"></a>Python 切片</h4><p>切片是 Python 中非常强大的功能，可以用于许多不同的场景。</p>\n<ol>\n<li>提取子序列<br>可以提取列表、字符串或元组中的特定元素子集。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_list = [1, 2, 3, 4, 5]</span><br><span class=\"line\">subset = my_list[1:4]  # 提取索引1到索引3的元素，得到[2, 3, 4]</span><br></pre></td></tr></table></figure></li>\n<li>复制切片<br>我们上面说了，Python 序列是址传递的，所以我们想复制序列的话不可以简单的 <code>list2 = list1</code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">original_list = [1, 2, 3, 4, 5]</span><br><span class=\"line\">copy_list = original_list[:]  # 创建一个原始列表的副本，修改 copy_list 不会影响到 original_list</span><br></pre></td></tr></table></figure></li>\n<li>步进切片<br>我们可以指定一个步进值<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_list = [1, 2, 3, 4, 5]</span><br><span class=\"line\">every_other = my_list[::2]  # 每隔一个元素提取，得到[1, 3, 5]</span><br></pre></td></tr></table></figure></li>\n<li>字符串反转 or 序列 反转<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_string = &quot;Hello, World!&quot;</span><br><span class=\"line\">substring = my_string[0:5]  # 提取前五个字符 &quot;Hello&quot;</span><br><span class=\"line\">reversed_string = my_string[::-1]  # 字符串翻转</span><br></pre></td></tr></table></figure></li>\n<li>删除元素<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_list = [1, 2, 3, 4, 5]</span><br><span class=\"line\">del my_list[1:3]  # 删除索引1到索引2的元素，my_list变为[1, 4, 5]</span><br></pre></td></tr></table></figure></li>\n<li>替换元素<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_list = [1, 2, 3, 4, 5]</span><br><span class=\"line\">my_list[1:4] = [10, 20, 30]  # 替换索引1到索引3的元素，my_list变为[1, 10, 20, 30, 5]</span><br></pre></td></tr></table></figure></li>\n<li>过滤数据<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_list = [1, 2, 3, 4, 5]</span><br><span class=\"line\">filtered_list = [x for x in my_list if x % 2 == 0]  # 过滤偶数，得到[2, 4]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"字符串面值的赋值\"><a href=\"#字符串面值的赋值\" class=\"headerlink\" title=\"字符串面值的赋值\"></a>字符串面值的赋值</h4><p>字符串字面值是指在代码中直接以文本形式表示的字符串，通常用双引号括起来的一系列字符。字符串字面值在编程中用于表示固定的文本数据。例如，以下是一些字符串字面值的示例：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;Hello, World!&quot;</span><br><span class=\"line\">&quot;This is a string literal.&quot;</span><br><span class=\"line\">&quot;12345&quot;</span><br></pre></td></tr></table></figure><br>字符串面值通常是只读的，意味着我们不能对于它们的内容进行修改。<br><img src=\"/2023/08/31/%E6%9D%82%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%9D%A2%E5%80%BC%E7%9A%84%E8%B5%8B%E5%80%BC.png\" class=\"\"></p>\n<h4 id=\"关于-char-与-char\"><a href=\"#关于-char-与-char\" class=\"headerlink\" title=\"关于 char[] 与 char*\"></a>关于 char[] 与 char*</h4><h5 id=\"char\"><a href=\"#char\" class=\"headerlink\" title=\"char[]\"></a>char[]</h5><ul>\n<li>它是一个字符数组，它在栈上分配内存，并且为数组内的每个元素分配空间。</li>\n<li>当您使用字符串字面值来初始化字符数组时，编译器会自动为数组分配足够的空间来存储字符串字面值的内容，包括字符串结束符 ‘\\0’(与指针直接指向字符串字面值的地址不同，数组是新创建一个空间，然后相当于在新的字符串空间中将字符串字面值给复制过去)。</li>\n</ul>\n<h5 id=\"char-1\"><a href=\"#char-1\" class=\"headerlink\" title=\"char*\"></a>char*</h5><ul>\n<li>char* 是一个字符指针，只是指向一个字符的内存地址。</li>\n<li>当我们使用字符串字面值来初始化数组时，实际上是将字符串字面值的地址赋给了指针(但是我们知道，字符串字面值通常只是只读的，所以说我们指针指向了那个地址也是无法修改字符串的值的，因此一般不这么写，编译器也会报警告)。</li>\n<li>如果我们想使用 char* </li>\n</ul>\n<p>并且对于 char* 和 char[]，C/C++ 有一种约定成俗的习惯，使用 cout 输出时，会自动识别数组或者指针指向的字符串，并且输出字符串的内容直到遇到空字符 <code>&#39;\\0&#39;</code> 停止。</p>\n<p>这种行为是通过C/C++标准库中的重载运算符和内置函数来实现的，它们会自动迭代字符数组或指针，并输出字符直到遇到空字符。这使得输出字符串变得方便，无需显式循环来逐个字符输出。</p>\n<p>同样的，不仅仅是对于 <code>cout</code>，对于 char 的一些函数如 <code>strlen</code>、<code>strcpy</code>，参数为 char<em> 的时候，同样也是遇到 <code>&#39;\\0&#39;</code> 时停止函数操作(一般来说，这些函数是操作 `char</em><code>的，我们如果操作</code>char[]` 也是能操作的，因为 <strong>字符数组可以隐式转换为字符指针</strong>)。</p>\n<p>如果我们实在想对于 <code>char*</code> 类型赋值，可以：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char* str = new char[20]; // 使用 new 动态分配 20 个字符的内存</span><br><span class=\"line\"></span><br><span class=\"line\">// 将字符串常值赋值给 str</span><br><span class=\"line\">strcpy(str, &quot;Hello, World!&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 在不需要时记得释放内存</span><br><span class=\"line\">delete[] str;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"常见的-char-函数\"><a href=\"#常见的-char-函数\" class=\"headerlink\" title=\"常见的 char* 函数\"></a>常见的 char* 函数</h4><ol>\n<li>字符串长度函数<br><code>strlen(const char* str)</code>: 返回字符串的长度，不包括空字符终止符。</li>\n<li><code>strcpy(char* dest, const char* src)</code>: 将源字符串复制到目标字符串，包括空字符终止符。需要确保目标字符串有足够的空间来存储源字符串。<br><code>strncpy(char* dest, const char* src, size_t n)</code>: 将源字符串的前 n 个字符复制到目标字符串，可以控制复制的字符数。</li>\n<li><code>strcat(char* dest, const char* src)</code>: 将源字符串连接到目标字符串的末尾，需要确保目标字符串有足够的空间来容纳源字符串</li>\n<li><code>strcmp(const char* str1, const char* str2)</code>: 比较两个字符串，返回值表示它们的字典顺序关系。<br>请注意，使用这些函数时应格外小心，确保正确处理内存和边界情况，以避免安全漏洞和未定义的行为。</li>\n</ol>\n<img src=\"/2023/08/31/%E6%9D%82%E8%AE%B0/strcpy%E5%92%8Cstrdup.png\" class=\"\">\n<img src=\"/2023/08/31/%E6%9D%82%E8%AE%B0/strdup%E4%BD%BF%E7%94%A8.png\" class=\"\">\n<h4 id=\"endl-与-“-n”\"><a href=\"#endl-与-“-n”\" class=\"headerlink\" title=\"endl 与 “\\n”\"></a>endl 与 “\\n”</h4><img src=\"/2023/08/31/%E6%9D%82%E8%AE%B0/endl%E4%B8%8En.png\" class=\"\">\n<h4 id=\"vector-创建二维数组\"><a href=\"#vector-创建二维数组\" class=\"headerlink\" title=\"vector 创建二维数组\"></a>vector 创建二维数组</h4><p>一次性定义：<br>此种方法适用于每一行的列数都相等的二维数组定义(与初始化)<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用vector一次性完成二维数组的定义（注意：此种方法适用于每一行的列数相等的二维数组）</span><br><span class=\"line\">vector&lt;vector&lt;int&gt;&gt; matrix(m, vector&lt;int&gt;(n, -1));</span><br><span class=\"line\"></span><br><span class=\"line\">//以下是拆分理解</span><br><span class=\"line\">//创建一维数组matirx，这个数组里有m个元素，元素是int型vector。</span><br><span class=\"line\">vector&lt;vector&lt;int&gt;&gt; matrix(m);</span><br><span class=\"line\">//除了定义数组类型及数组大小外，同时给数组中的元素赋值：将元素赋值为大小为n的int型vector。</span><br><span class=\"line\">vector&lt;vector&lt;int&gt;&gt; matrix(m, vector&lt;int&gt;(n));</span><br><span class=\"line\">//除了定义数组类型、数组大小、列的大小，同时给数组列中的元素（或者说，数组中的所有元素）赋值为-1。</span><br><span class=\"line\">vector&lt;vector&lt;int&gt;&gt; matrix(m, vector&lt;int&gt;(n, -1));</span><br></pre></td></tr></table></figure></p>\n<p>插入元素型定义：<br>此种方法适用于每一行的列数都相等或不相等的二维数组的定义（与初始化）。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//比较具有普遍性的写法（注意：此种方法适用于每一行的列数相等的二维数组）</span><br><span class=\"line\">vector&lt;vector&lt;int&gt;&gt; matrix;//创建一维数组matirx，这个数组里的元素是int型vector。</span><br><span class=\"line\">int m = 3; //matrix有m行</span><br><span class=\"line\">int n = 10; //matrix有n列</span><br><span class=\"line\">int value = 1; //最终matrix成为二维数组后，其中每个元素的值为1（如果不需要进行初始化，此语句可以省略）</span><br><span class=\"line\">for (int i = 0; i &lt; m; ++ i) &#123;</span><br><span class=\"line\">    vector&lt;int&gt; tmp(n, value); //定义int型一维数组tmp，该数组有n个int型元素，且每个元素的初始值为value</span><br><span class=\"line\">    matrix.push_back(tmp); //将一维数组tmp（小容器）加入matrix（大容器）中，使之成为matrix的元素，令matrix成为二维数组</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//如果需要每一行的列数不同（虽然一般很少这样做），也可以使用下面这种写法进行定义、初始化</span><br><span class=\"line\">vector&lt;vector&lt;int&gt;&gt; matrix;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;int&gt; a(10, 1); //单独定义每个小容器的元素个数和元素初始值</span><br><span class=\"line\">vector&lt;int&gt; b(5, 2);</span><br><span class=\"line\">vector&lt;int&gt; c(10, 3);</span><br><span class=\"line\"></span><br><span class=\"line\">matrix.push_back(a); //将每个小容器加入matrix（大容器）中</span><br><span class=\"line\">matrix.push_back(b);</span><br><span class=\"line\">matrix.push_back(c);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"assign-函数分配与初始化\"><a href=\"#assign-函数分配与初始化\" class=\"headerlink\" title=\"assign 函数分配与初始化\"></a>assign 函数分配与初始化</h4><p>其实也可以使用 vector 的构造函数来初始化。</p>\n<p>assign 函数主要用于重新分配 vector 元素并进行初始化。它的用法主要有两种：</p>\n<ol>\n<li>用迭代器范围进行分配：<br>assign 可以结构两个迭代器参数，从另一个容器或者序列中复制元素到当前 vector 中。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::vector&lt;int&gt; vec;</span><br><span class=\"line\">std::vector&lt;int&gt; anotherVec = &#123;1, 2, 3, 4, 5&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">vec.assign(anotherVec.begin(), anotherVec.end());</span><br></pre></td></tr></table></figure></li>\n<li>用大小和值进行分配：<br>assign 函数也可以接受一个大小参数和一个值参数，用于将 std::vector 的大小更改为指定大小，并用指定的值填充所有新元素。这是一种用于重新分配 std::vector 并<strong>进行初始化的方法</strong>。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::vector&lt;int&gt; vec(5, 42); // 就是将 vec 的大小设置为 5，每一项设置为 42</span><br><span class=\"line\"></span><br><span class=\"line\">std::vector&lt;vector&lt;int&gt;&gt; v(5, vector&lt;int&gt;(5, 0)); // 创建一个二维数组 v，其中是 5 行 5 列并且每一个元素都是 0</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"遍历-vector-的几种方式\"><a href=\"#遍历-vector-的几种方式\" class=\"headerlink\" title=\"遍历 vector 的几种方式\"></a>遍历 vector 的几种方式</h4><ol>\n<li><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int i = 0; i &lt; v.size(); ++i)</span><br></pre></td></tr></table></figure></li>\n<li>使用迭代器<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (std::vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); ++it)</span><br></pre></td></tr></table></figure></li>\n<li>使用 auto 关键字<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (auto iterator it = v.begin(); it != v.end(); ++it)</span><br><span class=\"line\"></span><br><span class=\"line\">for (const auto&amp; element : v)</span><br></pre></td></tr></table></figure>\n关于为什么写成 <code>const auto&amp;</code> 可以避免拷贝(加快速度)，保持元素的不可变性。</li>\n</ol>\n<h4 id=\"关于-vector-迭代器\"><a href=\"#关于-vector-迭代器\" class=\"headerlink\" title=\"关于 vector 迭代器\"></a>关于 vector 迭代器</h4><p>vector 中迭代器是一个用于访问容器元素的抽象概念。它提供了一种通用的方式来遍历容器中的元素，而不依赖于容器的具体实现细节。<br>在 C++ 中，std::vector 提供了<strong>两种主要类型</strong>的迭代器：</p>\n<ol>\n<li>begin() 迭代器。这个迭代器指向容器中的第一个元素。</li>\n<li>end() 迭代器。这个迭代器指向容器中<strong>最后一个元素的下一个位置</strong>。</li>\n</ol>\n<h4 id=\"主存\"><a href=\"#主存\" class=\"headerlink\" title=\"主存\"></a>主存</h4><p>主存指的是内存 RAM</p>\n<h4 id=\"SSD\"><a href=\"#SSD\" class=\"headerlink\" title=\"SSD\"></a>SSD</h4><p>SSD 是固态硬盘 (Solid State Drive) 的缩写。与传统的机械硬盘（HDD）不同，SSD不包含可移动的机械部件，而是使用闪存存储技术来存储数据。这使得SSD在许多方面都具有一些显著的优势，包括：</p>\n<ol>\n<li>更快的速度：SSD比HDD更快，因为它们不需要旋转磁盘和寻道操作来读取数据。这意味着计算机可以更快地启动、加载应用程序和执行文件传输等任务</li>\n<li>更低的能耗：由于没有旋转的机械部件，SSD消耗的能量较少，因此在笔记本电脑和移动设备中通常能够延长电池寿命。</li>\n<li>更高的可靠性与更轻便<br>但是价格比较高。<br>HDD (Hard Disk Drive) 硬盘驱动器，有时候也成为硬盘或者机械硬盘</li>\n</ol>\n<h4 id=\"BIOS\"><a href=\"#BIOS\" class=\"headerlink\" title=\"BIOS\"></a>BIOS</h4><p>BIOS（基本输入/输出系统，Basic Input/Output System）是计算机系统中的一组固件程序，它们位于计算机的主板上的一个特殊芯片中，通常是闪存芯片。</p>\n<ol>\n<li>启动自检（POST）：在计算机启动时，BIOS会执行自检程序，检查计算机的硬件组件，如处理器、内存、硬盘、光驱等是否正常工作。如果发现问题，BIOS通常会发出蜂鸣声或显示错误信息，以指示问题的位置。</li>\n<li>引导操作系统：一旦自检完成，BIOS会寻找可引导的设备，通常是硬盘驱动器或其他存储设备。它会加载操作系统的引导加载程序（Boot Loader），并将控制权转交给操作系统，使其能够继续启动过程。</li>\n<li>设置硬件参数：BIOS还包括一组用户可配置的硬件设置，这些设置通常可通过计算机的BIOS设置界面进行调整。用户可以在BIOS中设置硬盘启动顺序、系统时间、密码保护等选项。</li>\n<li>提供基本的输入/输出服务：BIOS提供了一些基本的输入/输出功能，以便在操作系统加载之前进行一些基本的操作，如键盘输入、显示输出和存储设备的读写。</li>\n</ol>\n<h4 id=\"Transistor-Transistor-Logic\"><a href=\"#Transistor-Transistor-Logic\" class=\"headerlink\" title=\"Transistor-Transistor Logic\"></a>Transistor-Transistor Logic</h4><p>在集成电路型号中，通常以 74 开头的数字代表它们属于标准的 Transistor-Transistor Logic<br>具体来说，”74” 表示了 TTL 系列中的特定子系列。TTL 门和触发器的型号通常以 “74” 开头，例如，”7400” 代表四输入 NAND 门，”74138” 代表 3-8 译码器/多路复用器，等等。</p>\n<h4 id=\"vector-中的-find-函数\"><a href=\"#vector-中的-find-函数\" class=\"headerlink\" title=\"vector 中的 find 函数\"></a>vector 中的 find 函数</h4><p><strong>find 函数是在 <code>algorithm</code> 中的，不写的话会报错，血的教训。</strong><br>C++ 标准库中的 <code>std::find()</code> 函数可以用来在容器 (包括 std::vector) 中查找特定值的位置。它的用法如下：<br><figure class=\"highlight plaintext\"><figcaption><span><algorithm></span><a href=\"//\">必须包含这个头文件</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// ...</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;int&gt; myVector = &#123;1, 2, 3, 4, 5&#125;;</span><br><span class=\"line\">int targetValue = 3;</span><br><span class=\"line\"></span><br><span class=\"line\">// 使用std::find查找特定值</span><br><span class=\"line\">auto it = std::find(myVector.begin(), myVector.end(), targetValue);</span><br><span class=\"line\"></span><br><span class=\"line\">if (it != myVector.end()) &#123;</span><br><span class=\"line\">    // 找到了目标值</span><br><span class=\"line\">    // &#x27;it&#x27; 是一个迭代器，指向找到的元素的位置</span><br><span class=\"line\">    // 在这里，它指向了值为3的元素</span><br><span class=\"line\">    cout &lt;&lt; &quot;找到了目标值: &quot; &lt;&lt; *it &lt;&lt; endl;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    // 没找到目标值</span><br><span class=\"line\">    cout &lt;&lt; &quot;未找到目标值&quot; &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>std::find函数的返回类型是一个迭代器（iterator），它是一个指向容器中找到的元素的位置的指针。</p>\n<h4 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h4><p>string 中也是有着迭代器的</p>\n<h4 id=\"电源适配器-power-adapter\"><a href=\"#电源适配器-power-adapter\" class=\"headerlink\" title=\"电源适配器 power adapter\"></a>电源适配器 power adapter</h4><p>提到电源适配器可能很多人都不知道这是什么东西，如果说笔记本电脑充电线上那个长方形的配件或者说手机充电器大家倒是常见，是的，那个就是电源适配器，电源适配器（Power adapter）又叫外置电源，是小型便携式电子设备及电子电器的供电电压变换设备，常见于手机、液晶显示器和笔记本电脑等小型电子产品上。<br>它的作用是将家里的220伏高电压转换成这些电子产品能工作的5伏至20伏左右稳定的低电压，使他们能正常工作,一般由外壳、变压器、电感、电容、控制IC、PCB板等元器件组成，它的工作原理由交流输入转换为直流输出</p>\n<h4 id=\"vscode-中-alt-加-上下键\"><a href=\"#vscode-中-alt-加-上下键\" class=\"headerlink\" title=\"vscode 中 alt 加 上下键\"></a>vscode 中 alt 加 上下键</h4><p>可以将光标所在的位置的代码行直接进行移动，向上或者向下移动。</p>\n<h4 id=\"栈帧\"><a href=\"#栈帧\" class=\"headerlink\" title=\"栈帧\"></a>栈帧</h4><p>当一个函数被调用时，通常会创建一个包含该函数的局部变量、参数和执行上下文信息的数据结构，这个数据结构称为栈帧（也称为调用帧或执行帧）。栈帧用于存储函数执行期间的局部状态信息，包括局部变量、函数参数、返回地址等。在函数调用栈中，每个函数调用都对应一个栈帧，它们按照调用的顺序依次排列。</p>\n<p>所以我们采取非递归算法，即使是在函数中模拟栈，但是我们并没有过多递归导致产生过多栈帧，所以通常是更加节省空间的。</p>\n<h4 id=\"比较函数规则\"><a href=\"#比较函数规则\" class=\"headerlink\" title=\"比较函数规则\"></a>比较函数规则</h4><p>通常情况下，比较函数的返回值为1表示前面的元素大于后面的元素，而返回-1ee或者0表示前面的元素小于或等于后面的元素。这是一种常见的约定，但也可以根据具体需求和实现来定义不同的比较规则。</p>\n<h4 id=\"pair-模板类\"><a href=\"#pair-模板类\" class=\"headerlink\" title=\"pair 模板类\"></a>pair 模板类</h4><p>std::pair 是 C++ 标准库提供的一个模板类，用于将两个不同类型的值组合成一个单元。定位于头文件 <code>utility</code> 中。</p>\n<p>std::pair 最常见的用法是在函数的返回值中返回多个值，或者在容器中存储多个类型的数据。pair 有两个公共成员 <code>first</code> 和 <code>second</code> </p>\n<h4 id=\"0\"><a href=\"#0\" class=\"headerlink\" title=\"\\0\"></a>\\0</h4><p>在C/C++中，\\0 通常用作字符串的结束标志，标识字符串的结尾。</p>\n<p>当你在一个以\\0结尾的字符数组（C-Style字符串）中遇到\\0字符时，它表示字符串的结束，告诉程序在这里停止处理字符串。例如：</p>\n<h4 id=\"map-等容器创建\"><a href=\"#map-等容器创建\" class=\"headerlink\" title=\"map 等容器创建\"></a>map 等容器创建</h4><p>在C++中，std::map对象的创建方式取决于它是如何声明的。std::map可以在栈上或堆上创建，具体取决于其声明方式。</p>\n<h4 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h4><p>将代码写成如下的形式：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> void insert(const T&amp; value) &#123;</span><br><span class=\"line\">        insertNode(root, value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>有下面的好处：</p>\n<ol>\n<li>代码模块化：将插入操作分为两个函数可以使得代码更加模块化，每个函数负责一个明确定义的任务。使得代码更加容易理解和维护。外部调用者著需要调用 insert 函数，而不需要了解内部的递归细节。</li>\n<li>可读性：使用 insert 和 insertNode 两个函数可以在外部接口提供更具描述性的函数名，使得代码更加容易理解。</li>\n<li>封装内部细节：insertNode 函数是一个内部的实现细节，不需要暴露给用户。这有助于隐藏内部数据结构和实现细节，提高了代码的封装性和安全性。</li>\n</ol>\n<p>将插入操作拆分为两个函数是一种常见的编程实践，有助于提高代码的清晰度、可维护性和可读性。这种模块化设计方法可以应用于其他类似的操作，使代码更易于管理和扩展。</p>\n<h4 id=\"STL-容器传递用于比较的函数对象类\"><a href=\"#STL-容器传递用于比较的函数对象类\" class=\"headerlink\" title=\"STL 容器传递用于比较的函数对象类\"></a>STL 容器传递用于比较的函数对象类</h4><p>在C++的STL容器中（如std::map、std::set等），如果您想要自定义元素的比较行为，您可以传递一个用于比较的函数对象类，而不是传递一个函数对象的实例。这是因为STL容器需要在需要比较元素时创建比较器对象的实例，而不是在容器创建时就传递一个现成的比较结果。</p>\n<p>因此，当您向std::map（或其他STL容器）传递一个自定义的比较函数对象时，STL容器会在内部创建该函数对象的实例，以便在需要时进行元素比较。这允许STL容器根据需要多次使用相同的比较器类的不同实例。</p>\n<p>所以我们写为：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;map&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 自定义的比较函数对象类</span><br><span class=\"line\">struct MyComparator &#123;</span><br><span class=\"line\">    bool operator()(int a, int b) const &#123;</span><br><span class=\"line\">        return a &gt; b; // 比较a是否大于b</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">    // 使用自定义比较函数对象创建std::map</span><br><span class=\"line\">    std::map&lt;int, std::string, MyComparator&gt; customMap; // 传递一个结构体，而不是它的实例对象，STL容器会自动创建实例对象来比较</span><br><span class=\"line\"></span><br><span class=\"line\">    // 插入一些元素</span><br><span class=\"line\">    customMap[5] = &quot;Five&quot;;</span><br><span class=\"line\">    customMap[2] = &quot;Two&quot;;</span><br><span class=\"line\">    customMap[8] = &quot;Eight&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 遍历并打印map的内容</span><br><span class=\"line\">    for (const auto&amp; pair : customMap) &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; pair.first &lt;&lt; &quot;: &quot; &lt;&lt; pair.second &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"struct-和-class\"><a href=\"#struct-和-class\" class=\"headerlink\" title=\"struct 和 class\"></a>struct 和 class</h4><p>在C++中，struct和class都是用来定义用户自定义数据类型的关键字，它们之间的主要区别在于默认的访问控制和一些语法细节。下面是它们的主要区别和适用场景：</p>\n<ol>\n<li>访问控制：</li>\n</ol>\n<p>struct：struct中的成员默认都是公共的（public），可以被外部代码直接访问。<br>class：class中的成员默认都是私有的（private），需要通过成员函数（方法）来访问。</p>\n<ol>\n<li>数据封装：</li>\n</ol>\n<p>由于class默认成员是私有的，它更适合用于实现数据封装，即将数据隐藏在类的内部，通过公共接口提供访问和修改数据的方法，以维护数据的完整性和安全性。<br>struct通常用于轻量级的数据结构，其成员都是公开的，用于存储一组相关数据，不提供严格的封装。<br>继承：</p>\n<ol>\n<li><p>struct和class都可以用于实现继承，但默认情况下，class的继承是私有的，而struct的继承是公共的。这意味着从class继承的成员在子类中默认是私有的，而从struct继承的成员在子类中默认是公共的。<br>适用场景：</p>\n</li>\n<li><p>使用class：当需要实现封装、数据隐藏、访问控制、继承以及更复杂的类层次结构时，通常使用class。<br>使用struct：当只需要一个简单的数据容器，没有需要隐藏的数据，或者需要与C语言交互时，通常使用struct。也可以将struct用于只包含数据而不包含成员函数的情况。<br>无论选择使用struct还是class，都可以在其中定义成员函数（方法）以提供对数据的操作，这取决于您的设计需求和数据封装的程度。在实际应用中，这两个关键字的选择通常是根据项目的需求和编码风格来确定的。</p>\n</li>\n</ol>\n<h4 id=\"深入理解-C-STL-迭代器\"><a href=\"#深入理解-C-STL-迭代器\" class=\"headerlink\" title=\"深入理解 C++ STL 迭代器\"></a>深入理解 C++ STL 迭代器</h4><p>STL（Standard Template Library）中的容器实现迭代器是通过将迭代器作为容器类的内部类来实现的。迭代器是一种用于遍历容器中元素的抽象概念，它提供了访问容器元素的接口，使得可以轻松地遍历容器的内容。</p>\n<p>以下是关于STL容器中迭代器的一些一般性原则：</p>\n<ol>\n<li><p>迭代器是容器的一部分：迭代器通常被定义为容器类的内部类，因此它们可以访问容器内部的数据结构，并提供访问和操作元素的方法。</p>\n</li>\n<li><p>迭代器的种类：不同类型的STL容器可以提供不同种类的迭代器，例如前向迭代器、双向迭代器和随机访问迭代器。迭代器的种类决定了迭代器的功能和效率，不同的容器支持不同种类的迭代器。</p>\n</li>\n<li><p>迭代器的操作：迭代器通常支持一组标准操作，如前进、后退、解引用等。这些操作允许您在容器中移动并访问元素。</p>\n</li>\n<li><p>Begin 和 End：STL容器通常提供 begin() 和 end() 成员函数，分别返回指向容器第一个元素和尾后位置（即不指向任何元素的位置）的迭代器。这些函数用于迭代容器的所有元素。</p>\n</li>\n<li><p>迭代器的使用：迭代器可以用于遍历容器的元素，从容器的开始（begin()）到结束（end()）。使用迭代器，您可以执行诸如遍历、查找、修改和删除元素等操作。</p>\n</li>\n<li><p>具体的实现细节和迭代器的性能特征取决于特定的容器类型。例如，std::vector 提供了随机访问迭代器，因此支持快速的随机访问，而 std::list 提供了双向迭代器，因此在列表中的元素上前进和后退较为高效。</p>\n</li>\n</ol>\n<p>总之，STL容器通过定义迭代器来提供对容器元素的访问和遍历，这是STL的一个核心概念，使得STL容器在使用上非常灵活。</p>\n<h4 id=\"红黑树和-AVL-树实现差异\"><a href=\"#红黑树和-AVL-树实现差异\" class=\"headerlink\" title=\"红黑树和 AVL 树实现差异\"></a>红黑树和 AVL 树实现差异</h4><ol>\n<li>AVL树的插入操作通常使用递归来实现，这是因为AVL树在插入后需要递归地重新平衡，以确保树保持平衡因子的性质。与AVL树不同，红黑树的平衡性质更容易通过迭代修复，因为它只涉及相邻节点之间的颜色变化和旋转操作，而不需要像AVL树那样严格的平衡因子维护。</li>\n</ol>\n<p>在红黑树中，使用迭代而不是递归的原因之一是它更简单且更高效。另一方面，AVL树的平衡因子维护涉及到更复杂的旋转和递归操作，因此递归更容易理解和实现。</p>\n<p>总之，红黑树通常使用迭代插入操作，而AVL树通常使用递归插入操作。不同的数据结构有不同的性质和平衡要求，因此它们的插入和平衡策略也不同。</p>\n<h4 id=\"类和结构体\"><a href=\"#类和结构体\" class=\"headerlink\" title=\"类和结构体\"></a>类和结构体</h4><ol>\n<li><p>访问权限<br>类（class）的默认访问权限是私有（private）。这意味着类中的成员（数据成员和成员函数）默认情况下只能在类的内部访问，需要使用公有接口才能从外部访问。<br>结构体（struct）的默认访问权限是公共（public）。这意味着结构体中的成员在外部可以直接访问。</p>\n</li>\n<li><p>继承<br>类可以用于实现类的继承和多态，因为类支持访问控制符（如private、protected、public）来控制基类成员的可见性和访问权限。<br>结构体也可以用于继承，但默认的访问权限是公共，因此它们的成员在子类中具有相同的访问权限。</p>\n</li>\n<li><p>使用习惯<br>通常情况下，类用于表示具有私有成员和行为的抽象数据类型，用于封装数据和操作。<br>结构体通常用于表示简单的数据结构，其中成员通常是相关的数据字段而不包含复杂的行为。</p>\n</li>\n</ol>\n<h4 id=\"宏定义-define\"><a href=\"#宏定义-define\" class=\"headerlink\" title=\"宏定义 define\"></a>宏定义 define</h4><p>宏定义是在编译前由预处理器处理的，因此它们不会进行类型检查，可能会导致一些潜在的错误。<br>作用：</p>\n<ol>\n<li>宏替换：预处理器会根据宏定义将源代码中的标识符替换为相应的文本。这允许您创建常量、宏函数以及在代码中的其他地方重复使用文本片段。这提高了代码的可维护性和可读性。</li>\n<li>条件编译：通过使用条件指令（如#ifdef、#ifndef、#if、#elif、#else和#endif），您可以根据条件包含或排除代码段。这对于在不同的编译环境或配置下启用或禁用特定功能非常有用，例如调试模式或发布模式下的不同行为。</li>\n<li>包含文件：#include指令允许您在源代码中包含其他头文件，以便使用其中定义的函数、变量和类型。这有助于模块化代码并实现代码重用</li>\n<li>删除注释：预处理器可以删除注释，这样它们不会包含在编译后的代码中。这有助于减小可执行文件的大小，同时保留了代码的可读性。</li>\n<li>定义符号常量：通过#define指令，您可以定义符号常量，以便在代码中使用这些常量而不必硬编码它们的值。这有助于提高代码的可维护性，并减少代码中的魔法数字。</li>\n</ol>\n<h4 id=\"数据库语言\"><a href=\"#数据库语言\" class=\"headerlink\" title=\"数据库语言\"></a>数据库语言</h4><p>操作数据库经常使用特定的数据库查询语言(Database Query Language)。最常见的数据库查询语言是 SQL(Structured Query Language, 结构化查询语言)。</p>\n<p>DBMS(Database manage system) 数据库管理系统</p>\n<p>绝大多数数据库软件都支持 SQL 语言，尤其是关系型数据库管理系统(RDBMS)</p>\n<p><strong>MySQL 和 SQLite 的关系：</strong><br>MySQL：MySQL是一个强大的关系型数据库管理系统，通常用于大型企业应用程序和高负载的网站。它可以处理大量数据和高并发访问。<br>SQLite：SQLite是一种轻量级的嵌入式数据库，适用于小型到中等规模的应用程序。它通常用于移动应用、桌面应用、嵌入<br>式系统等，不适用于大规模或高并发的场景。</p>\n<p>其中，嵌入式指的是 <strong>运行方式和部署方式</strong>。这意味着它的数据库引擎以库（库文件或代码库）的形式直接嵌入到应用程序中，而不是作为一个独立的数据库服务器运行。(还记得如果使用 MySQL 的话，需要在电脑上开启它)</p>\n<h5 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h5><p>Redis(Remote Dictionary Server)。Redis 是一种开源的<strong>内存数据库</strong>，可以用作缓存、消息代理、持久化存储以及多种数据结构的高效存储和检索。</p>\n<p>内存数据库将数据存储在内存中，可以实现非常快的读取和写入操作。这使得内存数据库在需要快速响应的应用中有非常大的优势，例如实时数据分析、缓存和实时计算。</p>\n<h5 id=\"std-string-npos\"><a href=\"#std-string-npos\" class=\"headerlink\" title=\"std::string::npos\"></a>std::string::npos</h5><p>std::string::npos 是C++标准库中的一个特殊常量值，通常用于表示字符串操作的无效或失败状态，特别是在查找子字符串或字符时。</p>\n<p>常见的使用方式是在 <code>std::string</code> 的 <code>find</code> 函数中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">    std::string text = &quot;Hello, World!&quot;;</span><br><span class=\"line\">    std::size_t found = text.find(&quot;foo&quot;); // 在字符串中查找&quot;foo&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (found != std::string::npos) &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; &quot;Substring found at position &quot; &lt;&lt; found &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; &quot;Substring not found.&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"size-t\"><a href=\"#size-t\" class=\"headerlink\" title=\"size_t\"></a>size_t</h4><p><code>size_t</code>  是C/C++标准库中定义的一种用于表示对象大小或索引的无符号整数类型。它通常被用于数组索引、容器大小、内存分配、字符串长度以及其他需要表示对象大小的上下文中。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">    std::vector&lt;int&gt; v = &#123;1, 2, 3, 4, 5&#125;;</span><br><span class=\"line\">    for (size_t i = 0; i &lt; v.size(); ++i) &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; v[i] &lt;&lt; &quot; &quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Auto-js\"><a href=\"#Auto-js\" class=\"headerlink\" title=\"Auto.js\"></a>Auto.js</h4><p>Auto.js 是一种基于 JavaScript 的自动化工具，它允许你编写和运行 JavaScript 脚本来自动化执行 Android 设备上的各种任务。因此，Auto.js 使用 JavaScript 作为其编程语言。</p>\n<p>关于 Auto.js 和 JavaScript 的关系如下：</p>\n<ol>\n<li><p>Auto.js 使用 JavaScript：Auto.js 的脚本是用 JavaScript 编写的，因此你可以在 Auto.js 中编写标准的 JavaScript 代码。这使得 Auto.js 在编写和运行自动化脚本时非常灵活，因为你可以使用 JavaScript 的语法和功能。</p>\n</li>\n<li><p>Auto.js 扩展了 JavaScript：尽管 Auto.js 使用 JavaScript 作为其编程语言，但它还提供了一组额外的 API 和库，这些 API 和库允许你与 Android 设备的各种功能和资源进行交互，如模拟用户输入、操作屏幕、访问文件系统等。这些功能通常不是标准的 JavaScript 语言特性，而是 Auto.js 为 Android 自动化提供的功能扩展。</p>\n</li>\n<li><p>Auto.js 是 JavaScript 的运行环境：Auto.js 提供了一个运行 JavaScript 脚本的环境，这个环境专门设计用于在 Android 设备上执行脚本。它允许你使用 JavaScript 控制 Android 设备的各种操作，例如自动点击、滑动、截屏等等。</p>\n</li>\n</ol>\n<p>总之，Auto.js 是一个工具，它使用 JavaScript 作为编程语言，并扩展了 JavaScript，以便在 Android 设备上执行自动化任务。这使得开发人员可以使用 JavaScript 的语法和功能，结合 Auto.js 提供的 Android 自动化 API，编写用于自动化控制和操作 Android 应用和设备的脚本。</p>\n<h4 id=\"C-赋值\"><a href=\"#C-赋值\" class=\"headerlink\" title=\"C++ 赋值\"></a>C++ 赋值</h4><ul>\n<li>对于函数的变量，我们可以使用值传递或者引用传递，取决于函数的参数类型。如果是带有 <code>&amp;</code>，此时就是引用传递，在函数中对于变量修改会影响到函数外部的值。对于数组，向函数传递的实际上是指向数组首元素的指针，这意味着参数的本质上是通过地址传递的，所以函数内部的修改可以影响到外部。</li>\n<li>在C++中，当您将一个类对象赋值给另一个类对象时，默认情况下是使用复制构造函数来执行赋值操作，因此这也是一种值传递。这意味着目标对象会被复制为源对象的一个副本，两个对象之间是相互独立的，修改一个对象的属性不会影响另一个对象。</li>\n</ul>\n<h4 id=\"VSCode-重命名所有匹配项\"><a href=\"#VSCode-重命名所有匹配项\" class=\"headerlink\" title=\"VSCode 重命名所有匹配项\"></a>VSCode 重命名所有匹配项</h4><p>按住 <code>alt</code> + <code>shift</code><br><a href=\"https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf\">https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf</a> VScode 的快捷键表</p>\n<h4 id=\"ES5-和-ES6-含义\"><a href=\"#ES5-和-ES6-含义\" class=\"headerlink\" title=\"ES5 和 ES6 含义\"></a>ES5 和 ES6 含义</h4><p>ES6 和 ES5 是 JavaScript 的不同版本，它们代表了不同的 ECMAScript（简称 ES）标准。ECMAScript 是 JavaScript 语言的标准化规范，规定了 JavaScript 语法、特性和行为。</p>\n<ol>\n<li>ES5（ECMAScript 5）： ES5 是 JavaScript 的第五个主要版本，它在2009年发布。它引入了许多重要的新特性，例如严格模式（Strict Mode）、数组方法（如 forEach、map、filter 等）和更强大的对象属性定义（Object.defineProperty）。ES5被广泛支持，并且在早期的浏览器中是主要的 JavaScript 标准。</li>\n<li>ES6（ECMAScript 2015）： ES6 是 JavaScript 的第六个主要版本，也称为 ECMAScript 2015。它于2015年发布，并引入了许多新的特性和语法改进，如箭头函数、类、模块、解构赋值、let 和 const 变量声明等。ES6使得 JavaScript 更加现代化和强大，并提供了更好的开发工具和技术。尽管它在发布时得到了广泛的支持，但由于浏览器的兼容性问题，需要一些时间才能在所有主要环境中广泛使用。</li>\n</ol>\n<h4 id=\"Span\"><a href=\"#Span\" class=\"headerlink\" title=\"Span\"></a>Span</h4><p><span> 是一个行内元素（inline element）或内联元素，用于在文本中包裹一部分内容，而不会引入新的块级元素或换行。<span> 通常用于对文本的一部分进行样式设置或添加其他属性，以便在不破坏文本流的情况下对其进行操作。<br><span> 元素本身不会对其包含的文本内容产生任何视觉效果，它主要用于以下情况：</p>\n<ol>\n<li>样式设置：你可以使用 <span> 元素为文本添加 CSS 样式，例如更改文本的颜色、字体、背景色等。这使得你可以有选择性地为文本的一部分应用样式，而不必更改整个段落或文本块的样式。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;This is &lt;span style=&quot;color: red;&quot;&gt;red text&lt;/span&gt; and this is &lt;span style=&quot;font-weight: bold;&quot;&gt;bold text&lt;/span&gt;.&lt;/p&gt;</span><br></pre></td></tr></table></figure></li>\n<li>JavaScript 操作：<span> 通常用于 JavaScript 操作，你可以通过 JavaScript 选择 <span> 元素并修改其内容或属性。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;Click &lt;span id=&quot;mySpan&quot; onclick=&quot;changeText()&quot;&gt;here&lt;/span&gt;.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">function changeText() &#123;</span><br><span class=\"line\">  var spanElement = document.getElementById(&quot;mySpan&quot;);</span><br><span class=\"line\">  spanElement.innerHTML = &quot;clicked!&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"HTML-中-img-标签中的-alt-属性\"><a href=\"#HTML-中-img-标签中的-alt-属性\" class=\"headerlink\" title=\"HTML 中 img 标签中的 alt 属性\"></a>HTML 中 img 标签中的 alt 属性</h4><p><code>alt</code> 属性用于提供图片的替代文本(Alternative Text)</p>\n<ol>\n<li>替代文字：如果图像无法加载或无法显示，浏览器会显示 alt 属性中的文本，以提供对图像内容的文字描述，从而使页面更具可访问性。</li>\n<li>辅助工具：屏幕阅读器等辅助技术会读取 alt 文本，以向用户描述图像。因此，良好的 alt 文本可以帮助视觉障碍者理解图像的含义。</li>\n<li>优化 SEO：搜索引擎可以使用 alt 文本来理解图像的内容，从而更好地索引和排名网页。</li>\n<li>图像加载失败时的占位符。</li>\n<li>提示信息：一些浏览器在用户将鼠标悬停在图像上时会显示 alt 文本作为工具提示，以提供附加信息。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=&quot;example.jpg&quot; alt=&quot;一只可爱的猫咪&quot;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"axios-和-jQuery\"><a href=\"#axios-和-jQuery\" class=\"headerlink\" title=\"axios 和 jQuery\"></a>axios 和 jQuery</h4><p>axios 是一个独立的 JavaScript 库，专注于处理 HTTP 请求。它是一个现代的、基于 Promise 的库，主要用于前端和后端（Node.js）开发，提供了清晰、简单的 API。<br>$.ajax() 是 jQuery 库的一部分，用于处理各种类型的 AJAX 请求。它除了处理 HTTP 请求外，还包括许多其他功能，如 DOM 操作、事件处理、动画等。因此，$.ajax() 只是 jQuery 库的一部分。<br>总结来说就是，axios 是一个相对较小的库，专注于 HTTP 请求。你可以单独引入它，而无需加载整个 jQuery 库。$.ajax() 是 jQuery 的一部分，如果你只需要进行 HTTP 请求，使用 jQuery 会显得冗余，因为它包含了许多其他功能。</p>\n<h4 id=\"VSCode-多光标编辑\"><a href=\"#VSCode-多光标编辑\" class=\"headerlink\" title=\"VSCode 多光标编辑\"></a>VSCode 多光标编辑</h4><ol>\n<li>按住 <code>alt</code> 点击多个位置(这个方法选择就没有约束)。</li>\n<li>按住鼠标滚轮，往下拖动(这个方法只是支持在同一竖线上的多位置编辑)。</li>\n</ol>\n<h4 id=\"快速创建-HTML-模板\"><a href=\"#快速创建-HTML-模板\" class=\"headerlink\" title=\"快速创建 HTML 模板\"></a>快速创建 HTML 模板</h4><p>创建xxx.html文件，输入: ! + Tab</p>\n<h4 id=\"实体字符\"><a href=\"#实体字符\" class=\"headerlink\" title=\"实体字符\"></a>实体字符</h4><p>在HTML中，实体字符是一种特殊的编码方式，用来表示一些特殊字符或保留字符，以确保它们能够正确地显示在网页上，而不会被解释为HTML标记。以下是一些常见的HTML实体字符<br><img src=\"/2023/08/31/%E6%9D%82%E8%AE%B0/%E5%AE%9E%E4%BD%93%E5%AD%97%E7%AC%A6.png\" class=\"\"></p>\n<h4 id=\"系统变量和用户变量\"><a href=\"#系统变量和用户变量\" class=\"headerlink\" title=\"系统变量和用户变量\"></a>系统变量和用户变量</h4><p>系统变量与用户变量的区别，最重要的即系统变量的优先级高于用户变量。</p>\n<h4 id=\"BeautifulSoup-库\"><a href=\"#BeautifulSoup-库\" class=\"headerlink\" title=\"BeautifulSoup 库\"></a>BeautifulSoup 库</h4><p>Beautiful Soup 是一个Python库，用于从HTML或XML文档中提取数据。它是一个强大的解析库，可以帮助你轻松地解析复杂的网页内容，并从中提取所需的信息。<br>它可以帮助我们(在使用Beautiful Soup库时，通常需要指定一个底层的解析器，而 lxml 是一个常用的解析器之一，因为它具有高性能和稳定性。Beautiful Soup本身并没有自带解析器，因此需要依赖第三方解析器来处理HTML或XML文档)：</p>\n<ol>\n<li>解析 HTML 和 XML。将他们转换为 Python 对象的树状结构。</li>\n<li>寻找元素。寻找特定的元素、属性、文本内容，从而提取所需的数据。</li>\n<li>修改文档结构。</li>\n<li>清除数据。</li>\n</ol>\n<h4 id=\"RE-regular-expression-regex\"><a href=\"#RE-regular-expression-regex\" class=\"headerlink\" title=\"RE regular expression regex\"></a>RE regular expression regex</h4><p>正则表达式，是用来简介表达一组字符串特征的表达式，最主要的应用在字符串匹配。<br>具体内容见文章 python 爬虫。</p>\n<h4 id=\"IP-地址\"><a href=\"#IP-地址\" class=\"headerlink\" title=\"IP 地址\"></a>IP 地址</h4><p>IP地址（Internet Protocol Address，互联网协议地址）是一种用于在计算机网络中唯一标识和定位设备的数字地址。IP地址在互联网通信中起到了非常重要的作用，它允许设备在全球范围内进行通信。<br>一些概念和要点：</p>\n<ol>\n<li>唯一性：每个设备（如计算机、服务器、路由器）连接到互联网时都被分配一个唯一的IP地址。这确保了在互联网上的每个设备都可以被准确标识和寻址。</li>\n<li>IPv4和IPv6：有两个主要的IP地址版本，分别是IPv4（Internet Protocol Version 4）和IPv6（Internet Protocol Version 6）。IPv4地址是32位的，通常以点分十进制表示，如192.168.1.1。IPv6地址是128位的，通常以冒号分隔的十六进制表示，如2001:0db8:85a3:0000:0000:8a2e:0370:7334。由于IPv4地址空间有限，IPv6被引入以满足不断增长的互联网连接需求。</li>\n<li>分层和路由：IP地址的设计允许数据在网络中进行分层和路由。它可以告诉路由器和交换机如何将数据包从源设备传送到目标设备，经过多个网络节点。</li>\n<li>公共和私有IP地址：IP地址可以是公共的或私有的。公共IP地址用于直接连接到互联网，而私有IP地址用于在私有网络中进行内部通信。私有IP地址通常在家庭网络和企业内部网络中使用，路由器负责将这些地址与公共IP地址进行映射。</li>\n<li>动态和静态IP地址：IP地址可以是动态的或静态的。动态IP地址由DHCP（动态主机配置协议）服务器动态分配给设备，而静态IP地址是由网络管理员手动配置的，通常不会更改。</li>\n<li>网络服务：IP地址不仅用于标识设备，还用于定位网络服务和资源，如网站、邮件服务器、数据库服务器等。DNS（域名系统）用于将域名映射到IP地址，使人们更容易访问网络资源。</li>\n</ol>\n<h4 id=\"Ctrl-R\"><a href=\"#Ctrl-R\" class=\"headerlink\" title=\"Ctrl + R\"></a>Ctrl + R</h4><p>在 VSCode 中可以直接搜索文件夹。</p>\n<h4 id=\"抓包-packet-capture\"><a href=\"#抓包-packet-capture\" class=\"headerlink\" title=\"抓包 packet capture\"></a>抓包 packet capture</h4><p>「抓包」是将网络传输发送与接受的数据包进行截获、重发、编辑、转存等操作，也用来检查网络安全。抓包经常被用来进行数据截取等。</p>\n<h5 id=\"为什么抓包\"><a href=\"#为什么抓包\" class=\"headerlink\" title=\"为什么抓包\"></a>为什么抓包</h5><ol>\n<li>Web 表单中会有很多隐藏的字段，这些隐藏字段一般都有一些特殊的用途，比如收集用户的数据，预防 CRSF 攻击，防网络爬虫，以及一些其他用途。这些隐藏字段在界面上都看不到，如果想检测这些字段，就必须要使用抓包工具。</li>\n<li>经常使用抓包工具辅助测试，可以很好的了解整个系统，比如数据传输过程前后端的关系，以及整个系统的结构。特别是对现在的微服务架构的产品，抓包能够更好的梳理和掌握整个系统各个服务之间的关系，大大增加测试的覆盖度。另外还可以增进对代码、HTTP协议方面知识的理解。</li>\n</ol>\n<h5 id=\"常用的抓包工具\"><a href=\"#常用的抓包工具\" class=\"headerlink\" title=\"常用的抓包工具\"></a>常用的抓包工具</h5><ol>\n<li>httpwatch</li>\n<li>fiddler</li>\n<li>wireshark</li>\n<li>firebug</li>\n</ol>\n<h4 id=\"HMAC-SHA256-算法\"><a href=\"#HMAC-SHA256-算法\" class=\"headerlink\" title=\"HMAC-SHA256 算法\"></a>HMAC-SHA256 算法</h4><p>HMAC-SHA256（Hash-based Message Authentication Code with SHA-256）是一种基于哈希函数和密钥的消息认证码算法，用于确保消息的完整性和认证消息的发送方。它是SHA-256哈希函数与密钥结合使用</p>\n<h4 id=\"Token-Cookie-和-Session\"><a href=\"#Token-Cookie-和-Session\" class=\"headerlink\" title=\"Token Cookie 和 Session\"></a>Token Cookie 和 Session</h4><ol>\n<li>Token<br>Token 是一种轻量级的身份验证令牌，通常是一个长字符串，用于识别用户。<br><strong>原理：</strong>当用户登录应用程序时，服务器会颁发一个Token给客户端（通常是JSON Web Token - JWT）。客户端将Token存储在本地（通常是在浏览器的localStorage或sessionStorage中，或在移动应用的存储中）。后面客户端的每个 HTTP 请求都会在 Headers 中附带 Token，服务器<strong>只需要通过特定的密钥和加密算法来验证即可</strong>，不需要再去额外存储用户的 Token 信息。<br><strong>优点：</strong> 无状态(只需要验证，无需存储)、可扩展性强，适用于分布式系统和 API。<br><strong>缺点：</strong> 需要额外的处理来管理 Token 的过期、刷新和安全性。</li>\n<li>Cookie<br>Cookie是一小段数据，由服务器发送到用户浏览器，存储在用户本地。它通常包含了一些标识信息和可选的数据。<br><strong>原理：</strong> 服务器在响应HTTP请求时，可以通过Set-Cookie头来设置Cookie。浏览器会将Cookie存储在用户的计算机上，并在后续请求中自动发送给服务器。<br><strong>优点：</strong> 简单、易用，可以持久保存数据，对用户透明。<br><strong>缺点：</strong> 有限的存储容量，每个请求都会带上Cookie，可能会影响性能和安全性（例如，可能受到跨站脚本攻击的影响）。</li>\n<li>Session<br>Session是一种服务器端机制，用于跟踪用户在应用程序中的状态和身份。<br><strong>原理：</strong> 服务器在用户登录时创建一个唯一的会话标识，通常是一个Session ID，并将其存储在服务器上。Session ID 可以存储在Cookie中或通过URL重写等方式传递给客户端。<br><strong>优点：</strong> 相对于 Cookie 更加安全，可以存储更多的数据，不受 Cookie 容量限制。<br><strong>缺点：</strong> 占用服务器内存，需要额外的服务器资源，不适于分布式系统。<br>通常，现代Web应用程序使用Token进行身份验证和授权，而Cookie和Session用于保持用户状态和临时数据的存储。</li>\n</ol>\n<h4 id=\"通信协议\"><a href=\"#通信协议\" class=\"headerlink\" title=\"通信协议\"></a>通信协议</h4><p>通信协议是计算机和网络设备之间进行数据交换和通信的<strong>规则</strong>和<strong>约定</strong>。它们定义了数据的格式、传输方式、错误检测和纠正机制以及通信参与方之间的行为。</p>\n<h5 id=\"1-OSI-模型\"><a href=\"#1-OSI-模型\" class=\"headerlink\" title=\"1. OSI 模型\"></a>1. OSI 模型</h5><p>OSI 模型即 <strong>开放式通信系统互联参考模型</strong>(Open System Interconnection Reference Model)，是国际标准化组织 ISO 提出的一个试图使各种计算机在世界范围内互联为网络的标准框架，简称 OSI</p>\n<p>OSI 七层模型<br>OSI 定义了网络互连的七层模型，物理层、数据链路层、网络层、传输层、会话层、表示层、应用层<br><img src=\"/2023/08/31/%E6%9D%82%E8%AE%B0/OSI%E6%A8%A1%E5%9E%8B.png\" class=\"\"><br>首字母组成 All people seem to need data processing. 所有人似乎都需要数据处理，这句话可以帮助来记忆。</p>\n<h5 id=\"2-TCP-IP-协议族\"><a href=\"#2-TCP-IP-协议族\" class=\"headerlink\" title=\"2. TCP/IP 协议族\"></a>2. TCP/IP 协议族</h5><p>从字面意义上讲，有人可能会认为 TCP/IP 是指 TCP 和 IP 两种协议。实际生活当中有时也确实就是指这两种协议。然而很多情况下，它只是利用 IP 进行通信时所必须用到的协议群的统称。<br>它是把 OSI 七层模型简化成了五层模型，每一层模型都呼叫它的下一层所提供的网络来完成自己的需求。<br><img src=\"/2023/08/31/%E6%9D%82%E8%AE%B0/OSI%E4%B8%8ETCPIP%E5%85%B3%E8%81%94.png\" class=\"\"></p>\n<h5 id=\"3-TCP-协议\"><a href=\"#3-TCP-协议\" class=\"headerlink\" title=\"3. TCP 协议\"></a>3. TCP 协议</h5><p>TCP 是<strong>面向连接的运输层协议</strong>。应用程序在使用 TCP 协议之前，必须<strong>先建立</strong> TCP 连接。在传送数据完毕以后，<strong>必须释放</strong>已经建立的 TCP 连接(HTTP 协议通常使用 TCP 作为传输协议，HTTP 是典型的无状态，所以可以用来理解 TCP 协议)。</p>\n<p>每一条 TCP 连接只能有两个端点，是点对点的。</p>\n<p>TCP 提供<strong>可靠交付</strong>的服务。通过 TCP 连接传送的数据，无差错、不丢失、不重复，并且按序到达。</p>\n<p>TCP 协议是<strong>面向字节流</strong>的，意味着TCP将数据视为一连串的字节而不是消息或数据块的集合。</p>\n<p>产生的影响：</p>\n<ol>\n<li>无消息边界。<br>在TCP连接中，数据被视为一个连续的字节流，没有明确的消息边界或分隔符。这意味着TCP不会为你自动识别消息的开始或结束。你需要自行定义和实现消息的分割和解析机制。</li>\n<li>字节级的精确性<br>TCP保证了数据的字节级精确性，即接收到的数据的每个字节都与发送端相匹配。如果数据在传输过程中损坏或丢失，TCP会负责重传丢失的部分，以确保接收端获得完整且准确的数据。</li>\n</ol>\n<p>TCP 提供了可靠的、有效的数据传输但是不考虑消息的边界。因此，我们在使用 TCP 协议的时候，应用程序需要负责<strong>定义和实现消息的分割和解析方法</strong>。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/64155705\">https://zhuanlan.zhihu.com/p/64155705</a> TCP 协议详解</p>\n<h5 id=\"4-HTTP-协议\"><a href=\"#4-HTTP-协议\" class=\"headerlink\" title=\"4. HTTP 协议\"></a>4. HTTP 协议</h5><p>HTTP 是 Hyper Text Transfer Protocol(超文本传输协议) 的缩写。HTTP 协议用于 WWW 服务器传输超文本到本地浏览器的传送协议。<br>它不仅可以保证计算机<strong>正确快速地传输</strong>超文本文档，还确定传输文档中哪一部分，以及哪部分内容首先显示(如文本优先于图像)。<br>HTTP 是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型，是一个无状态的协议。</p>\n<p><strong>特点：</strong></p>\n<ol>\n<li>简单快速。客户向服务器请求服务的时候，只需要请求方法和路径。请求方法通常包括 GET、HEAD、POST。</li>\n<li>灵活。HTTP 允许传输任意类型的数据对象，正在传输的类型由 Content-Type 加以标记。</li>\n</ol>\n<p><strong>持久连接</strong><br>HTTP 1.1 版本的变化，就是引入了持久连接（persistent connection），即 TCP 连接默认不关闭，可以被多个请求复用，不用声明 <code>Connection: keep-alive</code>。客户端和服务器发现对方一段时间没有活动，就可以主动关闭连接。不过，规范的做法是，客户端在发送最后一个请求时，发送 <code>Connection: close</code>，明确要求服务器关闭 TCP 连接。</p>\n<p><strong>Content-Length</strong> 字段<br>一个 TCP 连接现在可以传送多个回应，势必就要有一种机制，区分数据包是属于哪个回应的。这就是 Content-Length 字段的作用，声明本次回应的数据长度。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Length: 3295</span><br></pre></td></tr></table></figure><br>上面代码告诉浏览器，本次回应的长度是3295个字节，后面的字节就属于下一个回应了。</p>\n<p>在 1.0 版本中，Content-Length 字段不是必需的，因为浏览器发现服务器关闭了 TCP 连接，就表明收到的数据包已经全了。<br>使用 Content-Length 的前提是，服务器发送回应前，必须知道回应的数据长度。<strong>对于一些很耗时的动态操作来说，这意味着服务器要完成所有操作以后才可以发送数据</strong>(毕竟是动态的)，显然这样的数据并不是很高。更好的处理方法是，产生一块数据就发送一块，采用「流模式」(stream) 取代「缓存模式」(buffer)。<br>因此，1.1 版本规定可以不使用 Content-Length 字段，而是使用「分块传输编码」(chunked transfer encoding)。只要请求或者回应的头信息有 Transfer-Encoding 字段，就表明回应将由数量未定的数据块组成。<br><img src=\"/2023/08/31/%E6%9D%82%E8%AE%B0/http%E5%92%8Ctcp%E5%85%B3%E7%B3%BB.png\" class=\"\"></p>\n<h5 id=\"5-FTP-协议\"><a href=\"#5-FTP-协议\" class=\"headerlink\" title=\"5. FTP 协议\"></a>5. FTP 协议</h5><p>FTP 协议(File Transfer Protocol)，也是运行在 TCP 上，保证了文件传输的可靠性。与 HTTP 相比，FTP 面向的直接是服务器的文件系统，并且具有维持状态的特点，在文件传输管理上，FTP 更胜一筹。<br><strong>传输流程</strong><br><img src=\"/2023/08/31/%E6%9D%82%E8%AE%B0/FTP%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png\" class=\"\"><br>一共有两个并行的连接，一个是「控制连接」(port: 21)，另一个是「数据连接」(port: 20)。<br>其中，控制连接用于在两个主机之间传输控制信息，如口令、用户标识、存放，获取文件等命令。数据连接用于实际发送一个文件，发送完文件以后数据连接是会关闭的。<br>由于 FTP 使用一个独立的控制连接，所以我们也称 FTP 的控制信息是带外(out-of-band) 传送的。HTTP 协议是在传输文件的同一个 TCP 连接中发送请求和响应首部行的，所以，HTTP 也可以说是带内 (in-band) 发送控制信息的。<br><strong>传输方式</strong><br>FTP 支持两种方式的传输：文本(ASCII)方式和二进制(Binary)方式。<br>通常文本文件的传输采用 ASCII 方式；而图像、声音文件、加密和压缩文件等非文本文件采用二级制传输方式。<br><strong>传输模式</strong><br>FTP 有两种传输模式—主动(FTP Port)模式和被动(FTP Passive)模式。由于主动模式存在着安全问题，最近几年，大部分的 FTP 客户端开始默认使用被动模式。<br><a href=\"https://zhuanlan.zhihu.com/p/337513218\">https://zhuanlan.zhihu.com/p/337513218</a><br><a href=\"https://zhuanlan.zhihu.com/p/141472331\">https://zhuanlan.zhihu.com/p/141472331</a></p>\n<h5 id=\"6-DNS-协议\"><a href=\"#6-DNS-协议\" class=\"headerlink\" title=\"6. DNS 协议\"></a>6. DNS 协议</h5><p>互联网上主机的一种标识方式是使用它的「主机名」(hostname)，如 <code>www.facebook.com</code>、<code>www.google.com</code> 等。但是这是我们人类的记忆方式，路由器不会这么理解，路由器喜欢定长的、有层次结构的 IP 地址。</p>\n<blockquote>\n<p>主机名 (Hostname) 是计算机或者设备在网络上的名称标识符，用于唯一标识一个特定的计算机或者网络设备。<strong>主机名</strong>通常是人类可读的形式，<strong>但是在网络协议中国会被映射为 IP 地址进行通信</strong>。</p>\n</blockquote>\n<p>IP 地址由 4 字节组成，并且有着严格的层次结构。例如 <code>121.7.106.83</code> 然而路由器喜欢的是 IP 地址进行解析，我们人类便于记忆的确实网址，此时就用到 DNS 了。<br>DNS 的全称是 <code>Domain Name System</code>，是由一个分层的 DNS 服务器(DNS Server) 实现的分布式数据库；还是一个使得主机能够查询分布式数据库的应用层协议。DNS 服务器通常是运行 <code>Berkeley Internet Name Domain</code> 软件的 Unix 机器。DNS 协议运行在 UDP 之上，使用 53 端口。</p>\n<p>DNS 是<strong>一个分布式的系统</strong></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/346236071\">https://zhuanlan.zhihu.com/p/346236071</a></p>\n<h4 id=\"h-文件和-hpp-文件区别\"><a href=\"#h-文件和-hpp-文件区别\" class=\"headerlink\" title=\"h 文件和 hpp 文件区别\"></a>h 文件和 hpp 文件区别</h4><img src=\"/2023/08/31/%E6%9D%82%E8%AE%B0/h%E5%92%8Chpp.png\" class=\"\">\n<h4 id=\"低耦合-Low-Coupling\"><a href=\"#低耦合-Low-Coupling\" class=\"headerlink\" title=\"低耦合 Low Coupling\"></a>低耦合 Low Coupling</h4><p>是在讨论软件工程中的一种设计原则，旨在创建更可维护、可扩展和可重用的代码。低耦合涉及到将代码分解成松散耦合的模块或组件，这些模块之间的依赖性尽量降低。</p>\n<h4 id=\"lambda-表达式\"><a href=\"#lambda-表达式\" class=\"headerlink\" title=\"lambda 表达式\"></a>lambda 表达式</h4><p>在 C++ 中，lambda 表达式的结构：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[capture clause](parameters) -&gt; return_type &#123;</span><br><span class=\"line\">    // 函数体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>解释：<br><img src=\"/2023/08/31/%E6%9D%82%E8%AE%B0/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.png\" class=\"\"></p>\n<h4 id=\"delete-和-delete\"><a href=\"#delete-和-delete\" class=\"headerlink\" title=\"delete 和 delete[]\"></a>delete 和 delete[]</h4><p>当你使用 new[] 来分配动态数组时，编译器会记住你分配了多少个元素，因此在释放内存时，你必须使用 delete[] 来确保所有元素都得到释放。如果你使用 delete（而不是 delete[]）来尝试释放动态数组的内存，将导致未定义的行为，可能会导致内存泄漏或程序崩溃。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int* data_ = new int[size];</span><br><span class=\"line\">delete[] data_;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"静态数组\"><a href=\"#静态数组\" class=\"headerlink\" title=\"静态数组\"></a>静态数组</h4><p>静态数组需要在编译的时候知道它的大小<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a[size];</span><br></pre></td></tr></table></figure><br>也就是说其中的 <code>size</code> 需要是一个常量表达式。如果我们 <code>cin &gt;&gt; size;</code> 后面又 <code>int a[size];</code> 是不行的，因为静态数组要求 <strong>编译的时候大小就确定。</strong></p>\n<p>静态数组的内存分配发生在程序的静态存储区域，通常在编译的时候分配，并且在程序结束的时候才会释放，具有全局的声明周期。</p>\n<h4 id=\"动态数组\"><a href=\"#动态数组\" class=\"headerlink\" title=\"动态数组\"></a>动态数组</h4><p>动态数组的大小在运行的时候确定，通常在堆中分配内存。<code>int* ptr = new int[size];</code>。在最后不使用的时候记得要 <code>delete[] ptr;</code><br>其中 <code>new int[size]</code> 会在堆上分配一段连续的内存，大小为 <code>size * sizeof(int)</code> 个字节，然后返回一个指向这块内存的指针，并将这个指针赋值给 <code>ptr</code></p>\n<p>堆上分配的内存不会自动释放，需要程序员负责在确保不需要的时候手动释放，否则可能导致内存泄漏。</p>\n<h4 id=\"栈内存\"><a href=\"#栈内存\" class=\"headerlink\" title=\"栈内存\"></a>栈内存</h4><p>栈内存用于存储局部变量和函数调用信息。每个线程通常都有自己的栈。<br>栈内存的分配和释放是自动的，发生在函数的入栈和出栈过程中。当函数返回时，其局部变量的内存会自动被释放。<br>栈内存的生命周期与函数调用有关，它们在函数调用结束后自动释放。</p>\n<h4 id=\"程序运行时内存区域\"><a href=\"#程序运行时内存区域\" class=\"headerlink\" title=\"程序运行时内存区域\"></a>程序运行时内存区域</h4><ol>\n<li>栈区 Stack<br>栈区用于存储函数调用的局部变量、函数的参数值以及函数调用的返回地址。<br>栈区是<strong>自动管理</strong>的，函数的局部变量在函数被调用时分配内存，在函数结束时自动释放内存。<br><strong>栈区的大小通常较小</strong>，且生命周期短暂，用于管理函数的执行和调用。</li>\n<li>堆区 Heap<br>堆区用于动态分配内存，例如使用 new 和 malloc 来分配内存。<br>堆区的内存分配和释放需要程序员<strong>手动管理</strong>，使用 delete 和 free 来释放内存。<br><strong>堆区的大小通常较大</strong>，用于存储动态分配的数据结构，如动态数组、对象等。</li>\n<li>静态存储区域 Static Storage<br>静态存储区域用于<strong>存储全局变量、静态变量和常量</strong>(如静态分配的数组)。<br>这些变量在程序启动时分配内存，在程序结束时释放内存。<br>静态存储区域的变量具有全局可见性，并且在整个程序的生命周期内保持不变。</li>\n<li>代码区 Code Segment<br>代码区包含程序的机器码指令，用于执行程序的逻辑。<br>代码区通常是只读的，不允许写入和修改。<br>代码区存储程序的执行指令，每个函数和方法的机器代码以及程序的静态数据。</li>\n<li>常量区 Constant Area<br>常量区用于存储常量数据，如字符串文字（string literals）和全局 const 变量。<br>常量区的数据是只读的，不允许修改。</li>\n<li>栈帧区 Stack Frame</li>\n</ol>\n<h4 id=\"malloc-free-和-new-delete\"><a href=\"#malloc-free-和-new-delete\" class=\"headerlink\" title=\"malloc free 和 new delete\"></a>malloc free 和 new delete</h4><p><strong>语言差异</strong>：<br>malloc 和 free 是C语言中的函数，可以在C++中使用，但通常不推荐在C++代码中使用它们，因为C++提供了更强大的内存管理工具。<br>new 和 delete 是C++中的操作符，专门用于创建和销毁对象，并与类的构造函数和析构函数一起工作。</p>\n<p><strong>类型安全性：</strong><br>new 和 delete 是类型安全的，它们会为对象的构造和销毁调用适当的构造函数和析构函数。这对于管理类对象非常重要。<br>malloc 和 free 不了解对象的类型，它们只是分配和释放内存块。如果你使用它们来分配和释放类对象，可能会绕过构造函数和析构函数，导致对象的行为不正常。</p>\n<p>尽管 malloc 和 free 是C语言中的标准内存分配函数，但在C++中通常更推荐使用 new 和 delete，因为它们提供了更好的类型安全性、异常处理和对象生命周期管理。只有在特殊情况下，如与C库一起使用或需要更底层的内存分配控制时，才使用 malloc 和 free。</p>\n<p>其中需要注意，malloc 函数返回的是 <code>void*</code> 类型的指针，也就是并没有规定它的类型，需要我们人为规定。所以我们一般写成这样的形式：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char* p = (char*)malloc(100);</span><br></pre></td></tr></table></figure><br>其中，100 表示 100 个字节。</p>\n<h4 id=\"C-对象构造\"><a href=\"#C-对象构造\" class=\"headerlink\" title=\"C++ 对象构造\"></a>C++ 对象构造</h4><p>有四种方式创建对象：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyClass myClass;</span><br><span class=\"line\">MyClass myClass = MyClass();</span><br><span class=\"line\">MyClass* myClass = new MyClass();</span><br><span class=\"line\">MyClass* myClass = new MyClass;</span><br></pre></td></tr></table></figure><br>其中，前两种方式是在栈中分配内存，由操作系统进行内存的分配和管理。<br>后两种是在堆中分配内存，由管理者(程序员)进行内存的分配和管理，用完必须 delete，否则会造成内存的泄露。</p>\n<h5 id=\"不使用-new\"><a href=\"#不使用-new\" class=\"headerlink\" title=\"不使用 new\"></a>不使用 new</h5><p>对于第一种和第二种，一个隐式调用，一个显式调用。<br><strong>第一种：</strong></p>\n<ul>\n<li>如果有构造函数，默认使用构造函数来初始化对象。</li>\n<li>如果没有默认的构造函数，编译器会报错。</li>\n</ul>\n<p><strong>第二种：</strong></p>\n<ul>\n<li>默认使用构造函数</li>\n<li>如果没有构造函数，编译器会报错。</li>\n<li>与第一种方法不同，这个是先创建一个对象，然后进行对象的复制。</li>\n</ul>\n<p>虽然上面两种那么说，但是如果我们没有显式定义构造函数，编译器会自动生成一个默认构造函数的。这个默认构造函数会对类中的一些基本数据类型的数据进行初始化，就是随机赋值。</p>\n<p>所以，通常情况下，前两种方式相比较，第一种方式直接 <code>MyClass myClass;</code> 是更加直接高效的方法，一般使用这种方式。</p>\n<h5 id=\"使用-new\"><a href=\"#使用-new\" class=\"headerlink\" title=\"使用 new\"></a>使用 new</h5><p>在使用 new 创建对象的时候。对于有构造函数的类，不论有没有括号，都用构造函数进行初始化。如果没有构造函数，则不加括号的new只分配内存空间，不进行内存的初始化，而加了括号的new会在分配内存的同时初始化为0。</p>\n<p>对于 new 创建对象，可以作为函数的返回值和参数，因为如果不用new，函数中不能返回该对象的指针，因为函数结束后，该对象的内存就被释放了(函数是栈空间嘛，如果是 new 则在堆空间，由我们人为决定其寿命)。</p>\n<img src=\"/2023/08/31/%E6%9D%82%E8%AE%B0/new%E6%9E%84%E9%80%A0.png\" class=\"\">\n<p>上面是两种new构造的区别，其实不是很大，一般加个括号就好了。</p>\n<p>使用 new 创建对象的实际步骤是：</p>\n<ol>\n<li><p>分配内存：new 会在堆上动态分配足够的内存来存储对象的数据成员，包括对象的成员变量和虚函数表（如果有的话）。</p>\n</li>\n<li><p>调用构造函数：一旦内存分配完成，C++会调用对象的构造函数来初始化这块内存。构造函数是类的特殊成员函数，用于初始化对象的状态。如果你没有显式定义构造函数，编译器会为你生成一个默认的构造函数来执行默认的初始化操作。</p>\n</li>\n<li><p>返回指针：new 表达式返回指向分配的内存的指针，该指针指向一个已经构造完成的对象。</p>\n</li>\n</ol>\n<h4 id=\"CSV-文件-Comma-Separated-Values\"><a href=\"#CSV-文件-Comma-Separated-Values\" class=\"headerlink\" title=\"CSV 文件(Comma-Separated Values)\"></a>CSV 文件(Comma-Separated Values)</h4><p>CSV 格式是处理和存储数据的常用格式之一。</p>\n<ol>\n<li>简单易懂：CSV文件使用纯文本格式，数据之间使用逗号或其他分隔符分隔。</li>\n<li>跨平台兼容性：CSV文件是纯文本文件，几乎所有操作系统和应用程序都可以处理它们。</li>\n<li>轻量级。</li>\n<li>广泛支持：几乎所有类型的编程语言都支持 CSV 格式文件操作。</li>\n</ol>\n<h4 id=\"codecs\"><a href=\"#codecs\" class=\"headerlink\" title=\"codecs\"></a>codecs</h4><p>“codecs” 是 Python 编程语言中的一个标准库模块，用于处理各种字符编码和解码操作。<br>codecs 的名称来自 <code>code and decode</code>，提供了一种在不同字符码之间进行转换的方式，这在处理文本数据的时候非常有用。<br>下面是一个简单的示例，将 UTF-8 的编码转换为 ASCII 编码。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import codecs</span><br><span class=\"line\"></span><br><span class=\"line\"># 要转换的文本</span><br><span class=\"line\">text = &quot;Hello, 你好&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 将文本从UTF-8编码转换为ASCII编码</span><br><span class=\"line\">ascii_text = codecs.encode(text, &#x27;ascii&#x27;, &#x27;ignore&#x27;)  # ignore 是一种错误处理，&quot;ignore&quot; 表示在转换时忽略不能被目标字符编码表示的字符。还有 replace 等</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出转换后的文本</span><br><span class=\"line\">print(ascii_text)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Python-列表推导-List-Comprehension\"><a href=\"#Python-列表推导-List-Comprehension\" class=\"headerlink\" title=\"Python 列表推导(List Comprehension)\"></a>Python 列表推导(List Comprehension)</h4><p>列表推导是一种简洁的方式来创建新的列表。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[expression for item in iterable if condition]</span><br></pre></td></tr></table></figure><br>其中 <code>expression</code> 是生成新列表中元素的表达式，<code>item</code> 是可迭代对象 <code>iterable</code> 中的元素.<br>下面是一些例子：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建一个包含1到10的平方的列表</span><br><span class=\"line\">squares = [x**2 for x in range(1, 11)]</span><br><span class=\"line\"></span><br><span class=\"line\"># 将字符串列表中的所有字符串转换为大写</span><br><span class=\"line\">words = [&quot;hello&quot;, &quot;world&quot;, &quot;python&quot;]</span><br><span class=\"line\">uppercase_words = [word.upper() for word in words]</span><br><span class=\"line\"></span><br><span class=\"line\"># 筛选出一个列表中的偶数元素</span><br><span class=\"line\">numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span><br><span class=\"line\">even_numbers = [x for x in numbers if x % 2 == 0]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Python-赋值\"><a href=\"#Python-赋值\" class=\"headerlink\" title=\"Python 赋值\"></a>Python 赋值</h4><p>在 Python 中，赋值分为两种情况：</p>\n<ol>\n<li>不可变对象(Immutable Objects)<br>包括数字、字符串、元组等不可修改的对象。对不可变对象的赋值是值传递（Pass by Value），意味着在赋值时会创建一个新的对象，并将其值赋给新的变量，而不是将原始对象的引用传递给新的变量。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = 5</span><br><span class=\"line\">y = x  # 这是值传递，y 拥有一个新的 5 的副本</span><br></pre></td></tr></table></figure></li>\n<li>可变对象(Mutable Objects)<br>包括列表、字典、集合等可以修改的对象。对可变对象的赋值是地址传递（Pass by Reference），意味着在赋值时不会创建新的对象，而是将原始对象的引用传递给新的变量。因此，如果修改一个可变对象，会影响到所有引用它的变量。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list1 = [1, 2, 3]</span><br><span class=\"line\">list2 = list1  # 这是地址传递，list2 和 list1 引用同一个列表对象</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"Python-切片\"><a href=\"#Python-切片\" class=\"headerlink\" title=\"Python 切片\"></a>Python 切片</h4><p>切片是 Python 中非常强大的功能，可以用于许多不同的场景。</p>\n<ol>\n<li>提取子序列<br>可以提取列表、字符串或元组中的特定元素子集。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_list = [1, 2, 3, 4, 5]</span><br><span class=\"line\">subset = my_list[1:4]  # 提取索引1到索引3的元素，得到[2, 3, 4]</span><br></pre></td></tr></table></figure></li>\n<li>复制切片<br>我们上面说了，Python 序列是址传递的，所以我们想复制序列的话不可以简单的 <code>list2 = list1</code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">original_list = [1, 2, 3, 4, 5]</span><br><span class=\"line\">copy_list = original_list[:]  # 创建一个原始列表的副本，修改 copy_list 不会影响到 original_list</span><br></pre></td></tr></table></figure></li>\n<li>步进切片<br>我们可以指定一个步进值<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_list = [1, 2, 3, 4, 5]</span><br><span class=\"line\">every_other = my_list[::2]  # 每隔一个元素提取，得到[1, 3, 5]</span><br></pre></td></tr></table></figure></li>\n<li>字符串反转 or 序列 反转<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_string = &quot;Hello, World!&quot;</span><br><span class=\"line\">substring = my_string[0:5]  # 提取前五个字符 &quot;Hello&quot;</span><br><span class=\"line\">reversed_string = my_string[::-1]  # 字符串翻转</span><br></pre></td></tr></table></figure></li>\n<li>删除元素<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_list = [1, 2, 3, 4, 5]</span><br><span class=\"line\">del my_list[1:3]  # 删除索引1到索引2的元素，my_list变为[1, 4, 5]</span><br></pre></td></tr></table></figure></li>\n<li>替换元素<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_list = [1, 2, 3, 4, 5]</span><br><span class=\"line\">my_list[1:4] = [10, 20, 30]  # 替换索引1到索引3的元素，my_list变为[1, 10, 20, 30, 5]</span><br></pre></td></tr></table></figure></li>\n<li>过滤数据<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_list = [1, 2, 3, 4, 5]</span><br><span class=\"line\">filtered_list = [x for x in my_list if x % 2 == 0]  # 过滤偶数，得到[2, 4]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"字符串面值的赋值\"><a href=\"#字符串面值的赋值\" class=\"headerlink\" title=\"字符串面值的赋值\"></a>字符串面值的赋值</h4><p>字符串字面值是指在代码中直接以文本形式表示的字符串，通常用双引号括起来的一系列字符。字符串字面值在编程中用于表示固定的文本数据。例如，以下是一些字符串字面值的示例：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;Hello, World!&quot;</span><br><span class=\"line\">&quot;This is a string literal.&quot;</span><br><span class=\"line\">&quot;12345&quot;</span><br></pre></td></tr></table></figure><br>字符串面值通常是只读的，意味着我们不能对于它们的内容进行修改。<br><img src=\"/2023/08/31/%E6%9D%82%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%9D%A2%E5%80%BC%E7%9A%84%E8%B5%8B%E5%80%BC.png\" class=\"\"></p>\n<h4 id=\"关于-char-与-char\"><a href=\"#关于-char-与-char\" class=\"headerlink\" title=\"关于 char[] 与 char*\"></a>关于 char[] 与 char*</h4><h5 id=\"char\"><a href=\"#char\" class=\"headerlink\" title=\"char[]\"></a>char[]</h5><ul>\n<li>它是一个字符数组，它在栈上分配内存，并且为数组内的每个元素分配空间。</li>\n<li>当您使用字符串字面值来初始化字符数组时，编译器会自动为数组分配足够的空间来存储字符串字面值的内容，包括字符串结束符 ‘\\0’(与指针直接指向字符串字面值的地址不同，数组是新创建一个空间，然后相当于在新的字符串空间中将字符串字面值给复制过去)。</li>\n</ul>\n<h5 id=\"char-1\"><a href=\"#char-1\" class=\"headerlink\" title=\"char*\"></a>char*</h5><ul>\n<li>char* 是一个字符指针，只是指向一个字符的内存地址。</li>\n<li>当我们使用字符串字面值来初始化数组时，实际上是将字符串字面值的地址赋给了指针(但是我们知道，字符串字面值通常只是只读的，所以说我们指针指向了那个地址也是无法修改字符串的值的，因此一般不这么写，编译器也会报警告)。</li>\n<li>如果我们想使用 char* </li>\n</ul>\n<p>并且对于 char* 和 char[]，C/C++ 有一种约定成俗的习惯，使用 cout 输出时，会自动识别数组或者指针指向的字符串，并且输出字符串的内容直到遇到空字符 <code>&#39;\\0&#39;</code> 停止。</p>\n<p>这种行为是通过C/C++标准库中的重载运算符和内置函数来实现的，它们会自动迭代字符数组或指针，并输出字符直到遇到空字符。这使得输出字符串变得方便，无需显式循环来逐个字符输出。</p>\n<p>同样的，不仅仅是对于 <code>cout</code>，对于 char 的一些函数如 <code>strlen</code>、<code>strcpy</code>，参数为 char<em> 的时候，同样也是遇到 <code>&#39;\\0&#39;</code> 时停止函数操作(一般来说，这些函数是操作 `char</em><code>的，我们如果操作</code>char[]` 也是能操作的，因为 <strong>字符数组可以隐式转换为字符指针</strong>)。</p>\n<p>如果我们实在想对于 <code>char*</code> 类型赋值，可以：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char* str = new char[20]; // 使用 new 动态分配 20 个字符的内存</span><br><span class=\"line\"></span><br><span class=\"line\">// 将字符串常值赋值给 str</span><br><span class=\"line\">strcpy(str, &quot;Hello, World!&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 在不需要时记得释放内存</span><br><span class=\"line\">delete[] str;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"常见的-char-函数\"><a href=\"#常见的-char-函数\" class=\"headerlink\" title=\"常见的 char* 函数\"></a>常见的 char* 函数</h4><ol>\n<li>字符串长度函数<br><code>strlen(const char* str)</code>: 返回字符串的长度，不包括空字符终止符。</li>\n<li><code>strcpy(char* dest, const char* src)</code>: 将源字符串复制到目标字符串，包括空字符终止符。需要确保目标字符串有足够的空间来存储源字符串。<br><code>strncpy(char* dest, const char* src, size_t n)</code>: 将源字符串的前 n 个字符复制到目标字符串，可以控制复制的字符数。</li>\n<li><code>strcat(char* dest, const char* src)</code>: 将源字符串连接到目标字符串的末尾，需要确保目标字符串有足够的空间来容纳源字符串</li>\n<li><code>strcmp(const char* str1, const char* str2)</code>: 比较两个字符串，返回值表示它们的字典顺序关系。<br>请注意，使用这些函数时应格外小心，确保正确处理内存和边界情况，以避免安全漏洞和未定义的行为。</li>\n</ol>\n<img src=\"/2023/08/31/%E6%9D%82%E8%AE%B0/strcpy%E5%92%8Cstrdup.png\" class=\"\">\n<img src=\"/2023/08/31/%E6%9D%82%E8%AE%B0/strdup%E4%BD%BF%E7%94%A8.png\" class=\"\">\n<h4 id=\"endl-与-“-n”\"><a href=\"#endl-与-“-n”\" class=\"headerlink\" title=\"endl 与 “\\n”\"></a>endl 与 “\\n”</h4><img src=\"/2023/08/31/%E6%9D%82%E8%AE%B0/endl%E4%B8%8En.png\" class=\"\">\n<h4 id=\"vector-创建二维数组\"><a href=\"#vector-创建二维数组\" class=\"headerlink\" title=\"vector 创建二维数组\"></a>vector 创建二维数组</h4><p>一次性定义：<br>此种方法适用于每一行的列数都相等的二维数组定义(与初始化)<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用vector一次性完成二维数组的定义（注意：此种方法适用于每一行的列数相等的二维数组）</span><br><span class=\"line\">vector&lt;vector&lt;int&gt;&gt; matrix(m, vector&lt;int&gt;(n, -1));</span><br><span class=\"line\"></span><br><span class=\"line\">//以下是拆分理解</span><br><span class=\"line\">//创建一维数组matirx，这个数组里有m个元素，元素是int型vector。</span><br><span class=\"line\">vector&lt;vector&lt;int&gt;&gt; matrix(m);</span><br><span class=\"line\">//除了定义数组类型及数组大小外，同时给数组中的元素赋值：将元素赋值为大小为n的int型vector。</span><br><span class=\"line\">vector&lt;vector&lt;int&gt;&gt; matrix(m, vector&lt;int&gt;(n));</span><br><span class=\"line\">//除了定义数组类型、数组大小、列的大小，同时给数组列中的元素（或者说，数组中的所有元素）赋值为-1。</span><br><span class=\"line\">vector&lt;vector&lt;int&gt;&gt; matrix(m, vector&lt;int&gt;(n, -1));</span><br></pre></td></tr></table></figure></p>\n<p>插入元素型定义：<br>此种方法适用于每一行的列数都相等或不相等的二维数组的定义（与初始化）。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//比较具有普遍性的写法（注意：此种方法适用于每一行的列数相等的二维数组）</span><br><span class=\"line\">vector&lt;vector&lt;int&gt;&gt; matrix;//创建一维数组matirx，这个数组里的元素是int型vector。</span><br><span class=\"line\">int m = 3; //matrix有m行</span><br><span class=\"line\">int n = 10; //matrix有n列</span><br><span class=\"line\">int value = 1; //最终matrix成为二维数组后，其中每个元素的值为1（如果不需要进行初始化，此语句可以省略）</span><br><span class=\"line\">for (int i = 0; i &lt; m; ++ i) &#123;</span><br><span class=\"line\">    vector&lt;int&gt; tmp(n, value); //定义int型一维数组tmp，该数组有n个int型元素，且每个元素的初始值为value</span><br><span class=\"line\">    matrix.push_back(tmp); //将一维数组tmp（小容器）加入matrix（大容器）中，使之成为matrix的元素，令matrix成为二维数组</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//如果需要每一行的列数不同（虽然一般很少这样做），也可以使用下面这种写法进行定义、初始化</span><br><span class=\"line\">vector&lt;vector&lt;int&gt;&gt; matrix;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;int&gt; a(10, 1); //单独定义每个小容器的元素个数和元素初始值</span><br><span class=\"line\">vector&lt;int&gt; b(5, 2);</span><br><span class=\"line\">vector&lt;int&gt; c(10, 3);</span><br><span class=\"line\"></span><br><span class=\"line\">matrix.push_back(a); //将每个小容器加入matrix（大容器）中</span><br><span class=\"line\">matrix.push_back(b);</span><br><span class=\"line\">matrix.push_back(c);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"assign-函数分配与初始化\"><a href=\"#assign-函数分配与初始化\" class=\"headerlink\" title=\"assign 函数分配与初始化\"></a>assign 函数分配与初始化</h4><p>其实也可以使用 vector 的构造函数来初始化。</p>\n<p>assign 函数主要用于重新分配 vector 元素并进行初始化。它的用法主要有两种：</p>\n<ol>\n<li>用迭代器范围进行分配：<br>assign 可以结构两个迭代器参数，从另一个容器或者序列中复制元素到当前 vector 中。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::vector&lt;int&gt; vec;</span><br><span class=\"line\">std::vector&lt;int&gt; anotherVec = &#123;1, 2, 3, 4, 5&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">vec.assign(anotherVec.begin(), anotherVec.end());</span><br></pre></td></tr></table></figure></li>\n<li>用大小和值进行分配：<br>assign 函数也可以接受一个大小参数和一个值参数，用于将 std::vector 的大小更改为指定大小，并用指定的值填充所有新元素。这是一种用于重新分配 std::vector 并<strong>进行初始化的方法</strong>。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::vector&lt;int&gt; vec(5, 42); // 就是将 vec 的大小设置为 5，每一项设置为 42</span><br><span class=\"line\"></span><br><span class=\"line\">std::vector&lt;vector&lt;int&gt;&gt; v(5, vector&lt;int&gt;(5, 0)); // 创建一个二维数组 v，其中是 5 行 5 列并且每一个元素都是 0</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"遍历-vector-的几种方式\"><a href=\"#遍历-vector-的几种方式\" class=\"headerlink\" title=\"遍历 vector 的几种方式\"></a>遍历 vector 的几种方式</h4><ol>\n<li><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int i = 0; i &lt; v.size(); ++i)</span><br></pre></td></tr></table></figure></li>\n<li>使用迭代器<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (std::vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); ++it)</span><br></pre></td></tr></table></figure></li>\n<li>使用 auto 关键字<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (auto iterator it = v.begin(); it != v.end(); ++it)</span><br><span class=\"line\"></span><br><span class=\"line\">for (const auto&amp; element : v)</span><br></pre></td></tr></table></figure>\n关于为什么写成 <code>const auto&amp;</code> 可以避免拷贝(加快速度)，保持元素的不可变性。</li>\n</ol>\n<h4 id=\"关于-vector-迭代器\"><a href=\"#关于-vector-迭代器\" class=\"headerlink\" title=\"关于 vector 迭代器\"></a>关于 vector 迭代器</h4><p>vector 中迭代器是一个用于访问容器元素的抽象概念。它提供了一种通用的方式来遍历容器中的元素，而不依赖于容器的具体实现细节。<br>在 C++ 中，std::vector 提供了<strong>两种主要类型</strong>的迭代器：</p>\n<ol>\n<li>begin() 迭代器。这个迭代器指向容器中的第一个元素。</li>\n<li>end() 迭代器。这个迭代器指向容器中<strong>最后一个元素的下一个位置</strong>。</li>\n</ol>\n<h4 id=\"主存\"><a href=\"#主存\" class=\"headerlink\" title=\"主存\"></a>主存</h4><p>主存指的是内存 RAM</p>\n<h4 id=\"SSD\"><a href=\"#SSD\" class=\"headerlink\" title=\"SSD\"></a>SSD</h4><p>SSD 是固态硬盘 (Solid State Drive) 的缩写。与传统的机械硬盘（HDD）不同，SSD不包含可移动的机械部件，而是使用闪存存储技术来存储数据。这使得SSD在许多方面都具有一些显著的优势，包括：</p>\n<ol>\n<li>更快的速度：SSD比HDD更快，因为它们不需要旋转磁盘和寻道操作来读取数据。这意味着计算机可以更快地启动、加载应用程序和执行文件传输等任务</li>\n<li>更低的能耗：由于没有旋转的机械部件，SSD消耗的能量较少，因此在笔记本电脑和移动设备中通常能够延长电池寿命。</li>\n<li>更高的可靠性与更轻便<br>但是价格比较高。<br>HDD (Hard Disk Drive) 硬盘驱动器，有时候也成为硬盘或者机械硬盘</li>\n</ol>\n<h4 id=\"BIOS\"><a href=\"#BIOS\" class=\"headerlink\" title=\"BIOS\"></a>BIOS</h4><p>BIOS（基本输入/输出系统，Basic Input/Output System）是计算机系统中的一组固件程序，它们位于计算机的主板上的一个特殊芯片中，通常是闪存芯片。</p>\n<ol>\n<li>启动自检（POST）：在计算机启动时，BIOS会执行自检程序，检查计算机的硬件组件，如处理器、内存、硬盘、光驱等是否正常工作。如果发现问题，BIOS通常会发出蜂鸣声或显示错误信息，以指示问题的位置。</li>\n<li>引导操作系统：一旦自检完成，BIOS会寻找可引导的设备，通常是硬盘驱动器或其他存储设备。它会加载操作系统的引导加载程序（Boot Loader），并将控制权转交给操作系统，使其能够继续启动过程。</li>\n<li>设置硬件参数：BIOS还包括一组用户可配置的硬件设置，这些设置通常可通过计算机的BIOS设置界面进行调整。用户可以在BIOS中设置硬盘启动顺序、系统时间、密码保护等选项。</li>\n<li>提供基本的输入/输出服务：BIOS提供了一些基本的输入/输出功能，以便在操作系统加载之前进行一些基本的操作，如键盘输入、显示输出和存储设备的读写。</li>\n</ol>\n<h4 id=\"Transistor-Transistor-Logic\"><a href=\"#Transistor-Transistor-Logic\" class=\"headerlink\" title=\"Transistor-Transistor Logic\"></a>Transistor-Transistor Logic</h4><p>在集成电路型号中，通常以 74 开头的数字代表它们属于标准的 Transistor-Transistor Logic<br>具体来说，”74” 表示了 TTL 系列中的特定子系列。TTL 门和触发器的型号通常以 “74” 开头，例如，”7400” 代表四输入 NAND 门，”74138” 代表 3-8 译码器/多路复用器，等等。</p>\n<h4 id=\"vector-中的-find-函数\"><a href=\"#vector-中的-find-函数\" class=\"headerlink\" title=\"vector 中的 find 函数\"></a>vector 中的 find 函数</h4><p><strong>find 函数是在 <code>algorithm</code> 中的，不写的话会报错，血的教训。</strong><br>C++ 标准库中的 <code>std::find()</code> 函数可以用来在容器 (包括 std::vector) 中查找特定值的位置。它的用法如下：<br><figure class=\"highlight plaintext\"><figcaption><span><algorithm></span><a href=\"//\">必须包含这个头文件</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// ...</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;int&gt; myVector = &#123;1, 2, 3, 4, 5&#125;;</span><br><span class=\"line\">int targetValue = 3;</span><br><span class=\"line\"></span><br><span class=\"line\">// 使用std::find查找特定值</span><br><span class=\"line\">auto it = std::find(myVector.begin(), myVector.end(), targetValue);</span><br><span class=\"line\"></span><br><span class=\"line\">if (it != myVector.end()) &#123;</span><br><span class=\"line\">    // 找到了目标值</span><br><span class=\"line\">    // &#x27;it&#x27; 是一个迭代器，指向找到的元素的位置</span><br><span class=\"line\">    // 在这里，它指向了值为3的元素</span><br><span class=\"line\">    cout &lt;&lt; &quot;找到了目标值: &quot; &lt;&lt; *it &lt;&lt; endl;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    // 没找到目标值</span><br><span class=\"line\">    cout &lt;&lt; &quot;未找到目标值&quot; &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>std::find函数的返回类型是一个迭代器（iterator），它是一个指向容器中找到的元素的位置的指针。</p>\n<h4 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h4><p>string 中也是有着迭代器的</p>\n<h4 id=\"电源适配器-power-adapter\"><a href=\"#电源适配器-power-adapter\" class=\"headerlink\" title=\"电源适配器 power adapter\"></a>电源适配器 power adapter</h4><p>提到电源适配器可能很多人都不知道这是什么东西，如果说笔记本电脑充电线上那个长方形的配件或者说手机充电器大家倒是常见，是的，那个就是电源适配器，电源适配器（Power adapter）又叫外置电源，是小型便携式电子设备及电子电器的供电电压变换设备，常见于手机、液晶显示器和笔记本电脑等小型电子产品上。<br>它的作用是将家里的220伏高电压转换成这些电子产品能工作的5伏至20伏左右稳定的低电压，使他们能正常工作,一般由外壳、变压器、电感、电容、控制IC、PCB板等元器件组成，它的工作原理由交流输入转换为直流输出</p>\n<h4 id=\"vscode-中-alt-加-上下键\"><a href=\"#vscode-中-alt-加-上下键\" class=\"headerlink\" title=\"vscode 中 alt 加 上下键\"></a>vscode 中 alt 加 上下键</h4><p>可以将光标所在的位置的代码行直接进行移动，向上或者向下移动。</p>\n<h4 id=\"栈帧\"><a href=\"#栈帧\" class=\"headerlink\" title=\"栈帧\"></a>栈帧</h4><p>当一个函数被调用时，通常会创建一个包含该函数的局部变量、参数和执行上下文信息的数据结构，这个数据结构称为栈帧（也称为调用帧或执行帧）。栈帧用于存储函数执行期间的局部状态信息，包括局部变量、函数参数、返回地址等。在函数调用栈中，每个函数调用都对应一个栈帧，它们按照调用的顺序依次排列。</p>\n<p>所以我们采取非递归算法，即使是在函数中模拟栈，但是我们并没有过多递归导致产生过多栈帧，所以通常是更加节省空间的。</p>\n<h4 id=\"比较函数规则\"><a href=\"#比较函数规则\" class=\"headerlink\" title=\"比较函数规则\"></a>比较函数规则</h4><p>通常情况下，比较函数的返回值为1表示前面的元素大于后面的元素，而返回-1ee或者0表示前面的元素小于或等于后面的元素。这是一种常见的约定，但也可以根据具体需求和实现来定义不同的比较规则。</p>\n<h4 id=\"pair-模板类\"><a href=\"#pair-模板类\" class=\"headerlink\" title=\"pair 模板类\"></a>pair 模板类</h4><p>std::pair 是 C++ 标准库提供的一个模板类，用于将两个不同类型的值组合成一个单元。定位于头文件 <code>utility</code> 中。</p>\n<p>std::pair 最常见的用法是在函数的返回值中返回多个值，或者在容器中存储多个类型的数据。pair 有两个公共成员 <code>first</code> 和 <code>second</code> </p>\n<h4 id=\"0\"><a href=\"#0\" class=\"headerlink\" title=\"\\0\"></a>\\0</h4><p>在C/C++中，\\0 通常用作字符串的结束标志，标识字符串的结尾。</p>\n<p>当你在一个以\\0结尾的字符数组（C-Style字符串）中遇到\\0字符时，它表示字符串的结束，告诉程序在这里停止处理字符串。例如：</p>\n<h4 id=\"map-等容器创建\"><a href=\"#map-等容器创建\" class=\"headerlink\" title=\"map 等容器创建\"></a>map 等容器创建</h4><p>在C++中，std::map对象的创建方式取决于它是如何声明的。std::map可以在栈上或堆上创建，具体取决于其声明方式。</p>\n<h4 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h4><p>将代码写成如下的形式：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> void insert(const T&amp; value) &#123;</span><br><span class=\"line\">        insertNode(root, value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>有下面的好处：</p>\n<ol>\n<li>代码模块化：将插入操作分为两个函数可以使得代码更加模块化，每个函数负责一个明确定义的任务。使得代码更加容易理解和维护。外部调用者著需要调用 insert 函数，而不需要了解内部的递归细节。</li>\n<li>可读性：使用 insert 和 insertNode 两个函数可以在外部接口提供更具描述性的函数名，使得代码更加容易理解。</li>\n<li>封装内部细节：insertNode 函数是一个内部的实现细节，不需要暴露给用户。这有助于隐藏内部数据结构和实现细节，提高了代码的封装性和安全性。</li>\n</ol>\n<p>将插入操作拆分为两个函数是一种常见的编程实践，有助于提高代码的清晰度、可维护性和可读性。这种模块化设计方法可以应用于其他类似的操作，使代码更易于管理和扩展。</p>\n<h4 id=\"STL-容器传递用于比较的函数对象类\"><a href=\"#STL-容器传递用于比较的函数对象类\" class=\"headerlink\" title=\"STL 容器传递用于比较的函数对象类\"></a>STL 容器传递用于比较的函数对象类</h4><p>在C++的STL容器中（如std::map、std::set等），如果您想要自定义元素的比较行为，您可以传递一个用于比较的函数对象类，而不是传递一个函数对象的实例。这是因为STL容器需要在需要比较元素时创建比较器对象的实例，而不是在容器创建时就传递一个现成的比较结果。</p>\n<p>因此，当您向std::map（或其他STL容器）传递一个自定义的比较函数对象时，STL容器会在内部创建该函数对象的实例，以便在需要时进行元素比较。这允许STL容器根据需要多次使用相同的比较器类的不同实例。</p>\n<p>所以我们写为：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;map&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 自定义的比较函数对象类</span><br><span class=\"line\">struct MyComparator &#123;</span><br><span class=\"line\">    bool operator()(int a, int b) const &#123;</span><br><span class=\"line\">        return a &gt; b; // 比较a是否大于b</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">    // 使用自定义比较函数对象创建std::map</span><br><span class=\"line\">    std::map&lt;int, std::string, MyComparator&gt; customMap; // 传递一个结构体，而不是它的实例对象，STL容器会自动创建实例对象来比较</span><br><span class=\"line\"></span><br><span class=\"line\">    // 插入一些元素</span><br><span class=\"line\">    customMap[5] = &quot;Five&quot;;</span><br><span class=\"line\">    customMap[2] = &quot;Two&quot;;</span><br><span class=\"line\">    customMap[8] = &quot;Eight&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 遍历并打印map的内容</span><br><span class=\"line\">    for (const auto&amp; pair : customMap) &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; pair.first &lt;&lt; &quot;: &quot; &lt;&lt; pair.second &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"struct-和-class\"><a href=\"#struct-和-class\" class=\"headerlink\" title=\"struct 和 class\"></a>struct 和 class</h4><p>在C++中，struct和class都是用来定义用户自定义数据类型的关键字，它们之间的主要区别在于默认的访问控制和一些语法细节。下面是它们的主要区别和适用场景：</p>\n<ol>\n<li>访问控制：</li>\n</ol>\n<p>struct：struct中的成员默认都是公共的（public），可以被外部代码直接访问。<br>class：class中的成员默认都是私有的（private），需要通过成员函数（方法）来访问。</p>\n<ol>\n<li>数据封装：</li>\n</ol>\n<p>由于class默认成员是私有的，它更适合用于实现数据封装，即将数据隐藏在类的内部，通过公共接口提供访问和修改数据的方法，以维护数据的完整性和安全性。<br>struct通常用于轻量级的数据结构，其成员都是公开的，用于存储一组相关数据，不提供严格的封装。<br>继承：</p>\n<ol>\n<li><p>struct和class都可以用于实现继承，但默认情况下，class的继承是私有的，而struct的继承是公共的。这意味着从class继承的成员在子类中默认是私有的，而从struct继承的成员在子类中默认是公共的。<br>适用场景：</p>\n</li>\n<li><p>使用class：当需要实现封装、数据隐藏、访问控制、继承以及更复杂的类层次结构时，通常使用class。<br>使用struct：当只需要一个简单的数据容器，没有需要隐藏的数据，或者需要与C语言交互时，通常使用struct。也可以将struct用于只包含数据而不包含成员函数的情况。<br>无论选择使用struct还是class，都可以在其中定义成员函数（方法）以提供对数据的操作，这取决于您的设计需求和数据封装的程度。在实际应用中，这两个关键字的选择通常是根据项目的需求和编码风格来确定的。</p>\n</li>\n</ol>\n<h4 id=\"深入理解-C-STL-迭代器\"><a href=\"#深入理解-C-STL-迭代器\" class=\"headerlink\" title=\"深入理解 C++ STL 迭代器\"></a>深入理解 C++ STL 迭代器</h4><p>STL（Standard Template Library）中的容器实现迭代器是通过将迭代器作为容器类的内部类来实现的。迭代器是一种用于遍历容器中元素的抽象概念，它提供了访问容器元素的接口，使得可以轻松地遍历容器的内容。</p>\n<p>以下是关于STL容器中迭代器的一些一般性原则：</p>\n<ol>\n<li><p>迭代器是容器的一部分：迭代器通常被定义为容器类的内部类，因此它们可以访问容器内部的数据结构，并提供访问和操作元素的方法。</p>\n</li>\n<li><p>迭代器的种类：不同类型的STL容器可以提供不同种类的迭代器，例如前向迭代器、双向迭代器和随机访问迭代器。迭代器的种类决定了迭代器的功能和效率，不同的容器支持不同种类的迭代器。</p>\n</li>\n<li><p>迭代器的操作：迭代器通常支持一组标准操作，如前进、后退、解引用等。这些操作允许您在容器中移动并访问元素。</p>\n</li>\n<li><p>Begin 和 End：STL容器通常提供 begin() 和 end() 成员函数，分别返回指向容器第一个元素和尾后位置（即不指向任何元素的位置）的迭代器。这些函数用于迭代容器的所有元素。</p>\n</li>\n<li><p>迭代器的使用：迭代器可以用于遍历容器的元素，从容器的开始（begin()）到结束（end()）。使用迭代器，您可以执行诸如遍历、查找、修改和删除元素等操作。</p>\n</li>\n<li><p>具体的实现细节和迭代器的性能特征取决于特定的容器类型。例如，std::vector 提供了随机访问迭代器，因此支持快速的随机访问，而 std::list 提供了双向迭代器，因此在列表中的元素上前进和后退较为高效。</p>\n</li>\n</ol>\n<p>总之，STL容器通过定义迭代器来提供对容器元素的访问和遍历，这是STL的一个核心概念，使得STL容器在使用上非常灵活。</p>\n<h4 id=\"红黑树和-AVL-树实现差异\"><a href=\"#红黑树和-AVL-树实现差异\" class=\"headerlink\" title=\"红黑树和 AVL 树实现差异\"></a>红黑树和 AVL 树实现差异</h4><ol>\n<li>AVL树的插入操作通常使用递归来实现，这是因为AVL树在插入后需要递归地重新平衡，以确保树保持平衡因子的性质。与AVL树不同，红黑树的平衡性质更容易通过迭代修复，因为它只涉及相邻节点之间的颜色变化和旋转操作，而不需要像AVL树那样严格的平衡因子维护。</li>\n</ol>\n<p>在红黑树中，使用迭代而不是递归的原因之一是它更简单且更高效。另一方面，AVL树的平衡因子维护涉及到更复杂的旋转和递归操作，因此递归更容易理解和实现。</p>\n<p>总之，红黑树通常使用迭代插入操作，而AVL树通常使用递归插入操作。不同的数据结构有不同的性质和平衡要求，因此它们的插入和平衡策略也不同。</p>\n<h4 id=\"类和结构体\"><a href=\"#类和结构体\" class=\"headerlink\" title=\"类和结构体\"></a>类和结构体</h4><ol>\n<li><p>访问权限<br>类（class）的默认访问权限是私有（private）。这意味着类中的成员（数据成员和成员函数）默认情况下只能在类的内部访问，需要使用公有接口才能从外部访问。<br>结构体（struct）的默认访问权限是公共（public）。这意味着结构体中的成员在外部可以直接访问。</p>\n</li>\n<li><p>继承<br>类可以用于实现类的继承和多态，因为类支持访问控制符（如private、protected、public）来控制基类成员的可见性和访问权限。<br>结构体也可以用于继承，但默认的访问权限是公共，因此它们的成员在子类中具有相同的访问权限。</p>\n</li>\n<li><p>使用习惯<br>通常情况下，类用于表示具有私有成员和行为的抽象数据类型，用于封装数据和操作。<br>结构体通常用于表示简单的数据结构，其中成员通常是相关的数据字段而不包含复杂的行为。</p>\n</li>\n</ol>\n<h4 id=\"宏定义-define\"><a href=\"#宏定义-define\" class=\"headerlink\" title=\"宏定义 define\"></a>宏定义 define</h4><p>宏定义是在编译前由预处理器处理的，因此它们不会进行类型检查，可能会导致一些潜在的错误。<br>作用：</p>\n<ol>\n<li>宏替换：预处理器会根据宏定义将源代码中的标识符替换为相应的文本。这允许您创建常量、宏函数以及在代码中的其他地方重复使用文本片段。这提高了代码的可维护性和可读性。</li>\n<li>条件编译：通过使用条件指令（如#ifdef、#ifndef、#if、#elif、#else和#endif），您可以根据条件包含或排除代码段。这对于在不同的编译环境或配置下启用或禁用特定功能非常有用，例如调试模式或发布模式下的不同行为。</li>\n<li>包含文件：#include指令允许您在源代码中包含其他头文件，以便使用其中定义的函数、变量和类型。这有助于模块化代码并实现代码重用</li>\n<li>删除注释：预处理器可以删除注释，这样它们不会包含在编译后的代码中。这有助于减小可执行文件的大小，同时保留了代码的可读性。</li>\n<li>定义符号常量：通过#define指令，您可以定义符号常量，以便在代码中使用这些常量而不必硬编码它们的值。这有助于提高代码的可维护性，并减少代码中的魔法数字。</li>\n</ol>\n<h4 id=\"数据库语言\"><a href=\"#数据库语言\" class=\"headerlink\" title=\"数据库语言\"></a>数据库语言</h4><p>操作数据库经常使用特定的数据库查询语言(Database Query Language)。最常见的数据库查询语言是 SQL(Structured Query Language, 结构化查询语言)。</p>\n<p>DBMS(Database manage system) 数据库管理系统</p>\n<p>绝大多数数据库软件都支持 SQL 语言，尤其是关系型数据库管理系统(RDBMS)</p>\n<p><strong>MySQL 和 SQLite 的关系：</strong><br>MySQL：MySQL是一个强大的关系型数据库管理系统，通常用于大型企业应用程序和高负载的网站。它可以处理大量数据和高并发访问。<br>SQLite：SQLite是一种轻量级的嵌入式数据库，适用于小型到中等规模的应用程序。它通常用于移动应用、桌面应用、嵌入<br>式系统等，不适用于大规模或高并发的场景。</p>\n<p>其中，嵌入式指的是 <strong>运行方式和部署方式</strong>。这意味着它的数据库引擎以库（库文件或代码库）的形式直接嵌入到应用程序中，而不是作为一个独立的数据库服务器运行。(还记得如果使用 MySQL 的话，需要在电脑上开启它)</p>\n<h5 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h5><p>Redis(Remote Dictionary Server)。Redis 是一种开源的<strong>内存数据库</strong>，可以用作缓存、消息代理、持久化存储以及多种数据结构的高效存储和检索。</p>\n<p>内存数据库将数据存储在内存中，可以实现非常快的读取和写入操作。这使得内存数据库在需要快速响应的应用中有非常大的优势，例如实时数据分析、缓存和实时计算。</p>\n<h5 id=\"std-string-npos\"><a href=\"#std-string-npos\" class=\"headerlink\" title=\"std::string::npos\"></a>std::string::npos</h5><p>std::string::npos 是C++标准库中的一个特殊常量值，通常用于表示字符串操作的无效或失败状态，特别是在查找子字符串或字符时。</p>\n<p>常见的使用方式是在 <code>std::string</code> 的 <code>find</code> 函数中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">    std::string text = &quot;Hello, World!&quot;;</span><br><span class=\"line\">    std::size_t found = text.find(&quot;foo&quot;); // 在字符串中查找&quot;foo&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (found != std::string::npos) &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; &quot;Substring found at position &quot; &lt;&lt; found &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; &quot;Substring not found.&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"size-t\"><a href=\"#size-t\" class=\"headerlink\" title=\"size_t\"></a>size_t</h4><p><code>size_t</code>  是C/C++标准库中定义的一种用于表示对象大小或索引的无符号整数类型。它通常被用于数组索引、容器大小、内存分配、字符串长度以及其他需要表示对象大小的上下文中。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">    std::vector&lt;int&gt; v = &#123;1, 2, 3, 4, 5&#125;;</span><br><span class=\"line\">    for (size_t i = 0; i &lt; v.size(); ++i) &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; v[i] &lt;&lt; &quot; &quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"杂记2","date":"2023-11-12T10:19:52.000Z","description":"the key record of something important.","_content":"#### apt\n\nUbuntu 主要使用 apt(Advanced Package Tool)作为包管理工具。APT 是一套工具集，用于安装、更新、卸载和管理软件包。\n\n下面是一些常见的 apt 指令：\nsudo apt update: 用于更新本地包信息的命令，以确保系统知道可用的软件包和更新。\nsudo apt upgrade: 用于升级已安装软件包的命令。\nsudo apt install package_name: 用于安装特定软件包的命令。\nsudo apt remove package_name: 用于卸载已安装的软件包。\nsudo apt search search_term: 用于在存储库中搜索软件包的命令。\nsudo apt list: 用于列出可用的软件包。\n\nUbuntu的软件存储库包含大量的开源软件包，而APT使得管理和安装这些软件包变得非常方便。APT还支持依赖解决，确保软件包安装时满足其所需的依赖项。\n\n虽然 Ubuntu 使用 apt，但是我们也可以在 Ubuntu 上面安装其他的包管理工具。\n\n#### Arch Linux\n\nArch Linux是一种面向Linux发烧友和高级用户的Linux发行版，以其**极简的设计和强大的定制性**而闻名。\n\nArch Linux采用滚动发布模型，这意味着它不会按照固定的版本发布，而是持续更新软件包以提供最新的功能和安全性修复。\n\nArch Linux的包管理系统使用称为\"pacman\"的工具，它允许用户轻松地安装、更新和删除软件包。用户可以通过Arch User Repository（AUR）来访问大量社区维护的软件包，这些软件包不包含在官方仓库中，从而增加了软件可用性。\n\n由于Arch Linux的定制性，用户必须亲自配置和设置系统，包括桌面环境、窗口管理器和其他系统组件。这使得Arch Linux适合那些喜欢自定义自己的Linux系统的用户，但也可能对新手来说有一定的学习曲线。\n\n#### 数据库结构\n\n一般数据库中有着不同的用户，不同用户下有着不同是数据库，并且不同数据库下有着不同的表格。\n\n这是数据库管理的一种基本安全和隔离策略，有助于确保数据的完整性、安全性和隔离。\n\n下面是一些应用情况：\n\n1. **不同用户访问不同的数据库**：不同用户可以被授予访问不同数据库的权限。这意味着用户A可以访问数据库A，而用户B可以访问数据库B，但它们无法相互访问对方的数据库。\n\n2. **不同用户访问相同数据库的不同表格**：即使多个用户可以访问相同的数据库，也可以根据其权限来访问和操作不同的表格。例如，用户A可能只能访问表格X，而用户B可以访问表格Y。\n\n3. **权限级别不同**：用户的权限级别可以不同，例如只读用户、读写用户、管理员等。这决定了用户可以执行的操作和管理的范围。\n\n#### GIS 系统\n\n\n#### os.path.join 函数\n\n`os.path.join` 函数用于构建文件和目录路径。\n它可以接受任意数量的字符串参数，然后根据操作系统的规则构建有效的路径字符串。\n**这对于创建跨平台的路径非常有用**，因为不同操作系统使用不同的路径分隔符（例如，在Unix和Linux系统上是/，在Windows系统上是\\）。\n\n#### os.listdir() 函数\n\n`os.listdir()` 函数用于列出指定目录中的文件和子目录。\n\n#### Dos 命令\n\n#### 低代码平台\n\n低代码平台(Low-Code Platform)是一种用于应用程序开发的软件开发工具或平台，它旨在简化和加速应用程序开发过程。这种平台允许开发人员使用图形用户界面、拖放式元素和少量的编程代码来创建应用程序，而不需要从头开始编写大量的传统编程代码。\n\n#### JDK 和 JRE\n\n1. Java开发工具包 (JDK): JDK 是用于开发Java应用程序的核心工具集。它包括Java编译器 (javac)、Java虚拟机 (JVM)、标准类库和各种开发工具。JDK是开发Java应用程序的必备组件，你需要安装它才能开始编写和运行Java代码。\n\n2. Java运行时环境 (JRE): JRE 包含Java应用程序的运行时组件，包括Java虚拟机 (JVM) 和标准类库。如果你只需要运行Java应用程序而不是开发它们，你可以安装JRE而不是完整的JDK。\n\n它们的简写是：\nJDK: Java Development Kit（Java开发工具包）\nJRE: Java Runtime Environment（Java运行时环境）\n\njavac 是 Java 编程语言中的编译器。它用于将 Java 源代码文件（以 .java 为扩展名）转换成 Java 字节码文件（以 .class 为扩展名），这些字节码文件可以由 Java 虚拟机（JVM）执行。编译器负责将源代码翻译成计算机可以理解的字节码，以便在运行时执行。\n\n使用 javac 命令，你可以编译你的 Java 源代码文件，检查代码中是否有语法错误，以及生成可执行的字节码文件。\n\n#### 使用 JVM 执行\n\n使用 JVM 执行编译后的 java 代码，有很多重要作用。\n\n1. 跨平台性：Java程序编译成字节码，而不是与特定操作系统或硬件相关的本地机器代码。这使得Java应用程序具有跨平台性，可以在支持Java的不同操作系统上运行，只要这些系统上安装了相应的JVM。这大大简化了跨平台开发和部署。\n\n2. 安全性：JVM提供了各种安全特性，包括字节码验证和安全沙箱，以确保Java应用程序在运行时不会执行危险的操作或访问系统资源。这有助于防止恶意代码的执行和对系统的潜在损害。\n\n3. 内存管理：JVM负责Java应用程序的内存管理，包括垃圾回收。这减轻了开发人员的负担，因为他们不必手动分配和释放内存，而是依赖JVM来自动处理内存管理。\n\n4. 性能优化：JVM具有即时编译器和其他优化技术，可以在运行时提高Java应用程序的性能。它可以根据应用程序的行为动态进行性能调整，以提供更高的执行效率。\n\n5. 多线程支持：JVM提供了多线程支持，允许Java应用程序轻松地创建和管理多个线程，以实现并行执行和并发操作。\n\n6. 异常处理：JVM提供了强大的异常处理机制，使开发人员能够更容易地检测和处理错误条件，从而增加应用程序的可靠性。\n\n#### python 解释器\n\nPython也使用了虚拟机的概念，具有跨平台性质。Python代码通常由Python解释器执行，这个**解释器充当了Python虚拟机的角色**。Python解释器负责将Python源代码转换为字节码，然后在Python虚拟机上执行这些字节码。\n\n#### Java 环境管理\n\n构建工具(Apache Meaven \\ Gradle):\n\n1. **项目构建自动化**。构建工具可以自动化构建过程，包括编译 Java 源代码、打包 JAR 文件、运行单元测试、生成文档等。这大大减少了开发人员手动操作的负担。\n\n2. **依赖管理**。构建工具可以管理项目的依赖关系，包括第三方库、框架和插件。\n\n3. 多模块项目支持：构建工具允许你将项目分解为多个模块，每个模块可以有自己的构建配置。这有助于组织大型项目并提高代码的模块化性。\n\n依赖管理：\n\n1. 引入第三方库：Java项目通常依赖于各种第三方库和框架，如数据库驱动程序、HTTP客户端库、日志库等。通过在项目配置文件中定义这些依赖关系，你可以告诉构建工具从中央仓库或其他位置下载这些库，然后将它们添加到你的项目中。\n\n2. 版本控制：依赖管理工具允许你指定依赖库的版本号，确保你使用的是特定版本，避免不同版本之间的冲突。\n\n3. 自动下载和更新：一旦依赖关系被定义，构建工具可以自动下载和更新这些依赖项，从而简化了维护过程。\n\n4. 可重用性：依赖管理使你的项目可以更容易地与其他项目共享，因为其他项目可以使用相同的依赖定义。\n\n#### vector 赋值\n\n1. 使用赋值操作符\n\n```\nstd::vector<int> source = {1, 2, 3, 4, 5};\nstd::vector<int> destination;\ndestination = source; // 使用赋值操作符\n```\n\n2. 使用拷贝构造函数\n\n```\nstd::vector<int> source = {1, 2, 3, 4, 5};\nstd::vector<int> destination(source); // 使用拷贝构造函数\n```\n\n3. 使用 `assign` 函数\n\n```\nstd::vector<int> source = {1, 2, 3, 4, 5};\nstd::vector<int> destination;\ndestination.assign(source.begin(), source.end()); // 使用 assign 函数\n```\n\n4. 使用范围初始化 / 范围构造函数\n\n```\nstd::vector<int> source = {1, 2, 3, 4, 5};\nstd::vector<int> destination(source.begin(), source.end()); // 范围初始化\n```\n\n#### vector 构造\n\n1. 默认构造函数\n   其实也就是直接声明\n\n```\nstd::vector<int> myVector; // 创建一个空的整数向量\n```\n\n2. 指定大小的构造函数\n\n```\nstd::vector<int> myVector(5); // 创建一个包含5个默认构造的整数的向量\n```\n\n默认值为 0\n\n3. 指定大小和初值的构造函数\n\n```\nstd::vector<int> myVector(5, 42); // 创建一个包含5个值为42的整数的向量\n```\n\n4. 拷贝构造\n   有两种，一种是范围的拷贝构造，另一种是直接写另一个 vector 的拷贝构造\n\n```\nstd::vector<int> myVector(myIteratorBegin, myIteratorEnd); // 用迭代器范围初始化向量\n\nstd::vector<int> myVector(otherVector); // 使用另一个向量初始化新向量\n```s","source":"_posts/杂记2.md","raw":"---\ntitle: 杂记2\ndate: 2023-11-12 18:19:52\ntags:\ndescription: the key record of something important.\n---\n#### apt\n\nUbuntu 主要使用 apt(Advanced Package Tool)作为包管理工具。APT 是一套工具集，用于安装、更新、卸载和管理软件包。\n\n下面是一些常见的 apt 指令：\nsudo apt update: 用于更新本地包信息的命令，以确保系统知道可用的软件包和更新。\nsudo apt upgrade: 用于升级已安装软件包的命令。\nsudo apt install package_name: 用于安装特定软件包的命令。\nsudo apt remove package_name: 用于卸载已安装的软件包。\nsudo apt search search_term: 用于在存储库中搜索软件包的命令。\nsudo apt list: 用于列出可用的软件包。\n\nUbuntu的软件存储库包含大量的开源软件包，而APT使得管理和安装这些软件包变得非常方便。APT还支持依赖解决，确保软件包安装时满足其所需的依赖项。\n\n虽然 Ubuntu 使用 apt，但是我们也可以在 Ubuntu 上面安装其他的包管理工具。\n\n#### Arch Linux\n\nArch Linux是一种面向Linux发烧友和高级用户的Linux发行版，以其**极简的设计和强大的定制性**而闻名。\n\nArch Linux采用滚动发布模型，这意味着它不会按照固定的版本发布，而是持续更新软件包以提供最新的功能和安全性修复。\n\nArch Linux的包管理系统使用称为\"pacman\"的工具，它允许用户轻松地安装、更新和删除软件包。用户可以通过Arch User Repository（AUR）来访问大量社区维护的软件包，这些软件包不包含在官方仓库中，从而增加了软件可用性。\n\n由于Arch Linux的定制性，用户必须亲自配置和设置系统，包括桌面环境、窗口管理器和其他系统组件。这使得Arch Linux适合那些喜欢自定义自己的Linux系统的用户，但也可能对新手来说有一定的学习曲线。\n\n#### 数据库结构\n\n一般数据库中有着不同的用户，不同用户下有着不同是数据库，并且不同数据库下有着不同的表格。\n\n这是数据库管理的一种基本安全和隔离策略，有助于确保数据的完整性、安全性和隔离。\n\n下面是一些应用情况：\n\n1. **不同用户访问不同的数据库**：不同用户可以被授予访问不同数据库的权限。这意味着用户A可以访问数据库A，而用户B可以访问数据库B，但它们无法相互访问对方的数据库。\n\n2. **不同用户访问相同数据库的不同表格**：即使多个用户可以访问相同的数据库，也可以根据其权限来访问和操作不同的表格。例如，用户A可能只能访问表格X，而用户B可以访问表格Y。\n\n3. **权限级别不同**：用户的权限级别可以不同，例如只读用户、读写用户、管理员等。这决定了用户可以执行的操作和管理的范围。\n\n#### GIS 系统\n\n\n#### os.path.join 函数\n\n`os.path.join` 函数用于构建文件和目录路径。\n它可以接受任意数量的字符串参数，然后根据操作系统的规则构建有效的路径字符串。\n**这对于创建跨平台的路径非常有用**，因为不同操作系统使用不同的路径分隔符（例如，在Unix和Linux系统上是/，在Windows系统上是\\）。\n\n#### os.listdir() 函数\n\n`os.listdir()` 函数用于列出指定目录中的文件和子目录。\n\n#### Dos 命令\n\n#### 低代码平台\n\n低代码平台(Low-Code Platform)是一种用于应用程序开发的软件开发工具或平台，它旨在简化和加速应用程序开发过程。这种平台允许开发人员使用图形用户界面、拖放式元素和少量的编程代码来创建应用程序，而不需要从头开始编写大量的传统编程代码。\n\n#### JDK 和 JRE\n\n1. Java开发工具包 (JDK): JDK 是用于开发Java应用程序的核心工具集。它包括Java编译器 (javac)、Java虚拟机 (JVM)、标准类库和各种开发工具。JDK是开发Java应用程序的必备组件，你需要安装它才能开始编写和运行Java代码。\n\n2. Java运行时环境 (JRE): JRE 包含Java应用程序的运行时组件，包括Java虚拟机 (JVM) 和标准类库。如果你只需要运行Java应用程序而不是开发它们，你可以安装JRE而不是完整的JDK。\n\n它们的简写是：\nJDK: Java Development Kit（Java开发工具包）\nJRE: Java Runtime Environment（Java运行时环境）\n\njavac 是 Java 编程语言中的编译器。它用于将 Java 源代码文件（以 .java 为扩展名）转换成 Java 字节码文件（以 .class 为扩展名），这些字节码文件可以由 Java 虚拟机（JVM）执行。编译器负责将源代码翻译成计算机可以理解的字节码，以便在运行时执行。\n\n使用 javac 命令，你可以编译你的 Java 源代码文件，检查代码中是否有语法错误，以及生成可执行的字节码文件。\n\n#### 使用 JVM 执行\n\n使用 JVM 执行编译后的 java 代码，有很多重要作用。\n\n1. 跨平台性：Java程序编译成字节码，而不是与特定操作系统或硬件相关的本地机器代码。这使得Java应用程序具有跨平台性，可以在支持Java的不同操作系统上运行，只要这些系统上安装了相应的JVM。这大大简化了跨平台开发和部署。\n\n2. 安全性：JVM提供了各种安全特性，包括字节码验证和安全沙箱，以确保Java应用程序在运行时不会执行危险的操作或访问系统资源。这有助于防止恶意代码的执行和对系统的潜在损害。\n\n3. 内存管理：JVM负责Java应用程序的内存管理，包括垃圾回收。这减轻了开发人员的负担，因为他们不必手动分配和释放内存，而是依赖JVM来自动处理内存管理。\n\n4. 性能优化：JVM具有即时编译器和其他优化技术，可以在运行时提高Java应用程序的性能。它可以根据应用程序的行为动态进行性能调整，以提供更高的执行效率。\n\n5. 多线程支持：JVM提供了多线程支持，允许Java应用程序轻松地创建和管理多个线程，以实现并行执行和并发操作。\n\n6. 异常处理：JVM提供了强大的异常处理机制，使开发人员能够更容易地检测和处理错误条件，从而增加应用程序的可靠性。\n\n#### python 解释器\n\nPython也使用了虚拟机的概念，具有跨平台性质。Python代码通常由Python解释器执行，这个**解释器充当了Python虚拟机的角色**。Python解释器负责将Python源代码转换为字节码，然后在Python虚拟机上执行这些字节码。\n\n#### Java 环境管理\n\n构建工具(Apache Meaven \\ Gradle):\n\n1. **项目构建自动化**。构建工具可以自动化构建过程，包括编译 Java 源代码、打包 JAR 文件、运行单元测试、生成文档等。这大大减少了开发人员手动操作的负担。\n\n2. **依赖管理**。构建工具可以管理项目的依赖关系，包括第三方库、框架和插件。\n\n3. 多模块项目支持：构建工具允许你将项目分解为多个模块，每个模块可以有自己的构建配置。这有助于组织大型项目并提高代码的模块化性。\n\n依赖管理：\n\n1. 引入第三方库：Java项目通常依赖于各种第三方库和框架，如数据库驱动程序、HTTP客户端库、日志库等。通过在项目配置文件中定义这些依赖关系，你可以告诉构建工具从中央仓库或其他位置下载这些库，然后将它们添加到你的项目中。\n\n2. 版本控制：依赖管理工具允许你指定依赖库的版本号，确保你使用的是特定版本，避免不同版本之间的冲突。\n\n3. 自动下载和更新：一旦依赖关系被定义，构建工具可以自动下载和更新这些依赖项，从而简化了维护过程。\n\n4. 可重用性：依赖管理使你的项目可以更容易地与其他项目共享，因为其他项目可以使用相同的依赖定义。\n\n#### vector 赋值\n\n1. 使用赋值操作符\n\n```\nstd::vector<int> source = {1, 2, 3, 4, 5};\nstd::vector<int> destination;\ndestination = source; // 使用赋值操作符\n```\n\n2. 使用拷贝构造函数\n\n```\nstd::vector<int> source = {1, 2, 3, 4, 5};\nstd::vector<int> destination(source); // 使用拷贝构造函数\n```\n\n3. 使用 `assign` 函数\n\n```\nstd::vector<int> source = {1, 2, 3, 4, 5};\nstd::vector<int> destination;\ndestination.assign(source.begin(), source.end()); // 使用 assign 函数\n```\n\n4. 使用范围初始化 / 范围构造函数\n\n```\nstd::vector<int> source = {1, 2, 3, 4, 5};\nstd::vector<int> destination(source.begin(), source.end()); // 范围初始化\n```\n\n#### vector 构造\n\n1. 默认构造函数\n   其实也就是直接声明\n\n```\nstd::vector<int> myVector; // 创建一个空的整数向量\n```\n\n2. 指定大小的构造函数\n\n```\nstd::vector<int> myVector(5); // 创建一个包含5个默认构造的整数的向量\n```\n\n默认值为 0\n\n3. 指定大小和初值的构造函数\n\n```\nstd::vector<int> myVector(5, 42); // 创建一个包含5个值为42的整数的向量\n```\n\n4. 拷贝构造\n   有两种，一种是范围的拷贝构造，另一种是直接写另一个 vector 的拷贝构造\n\n```\nstd::vector<int> myVector(myIteratorBegin, myIteratorEnd); // 用迭代器范围初始化向量\n\nstd::vector<int> myVector(otherVector); // 使用另一个向量初始化新向量\n```s","slug":"杂记2","published":1,"updated":"2023-11-12T10:20:38.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clovbt8sz00009spc30iy888n","content":"<h4 id=\"apt\"><a href=\"#apt\" class=\"headerlink\" title=\"apt\"></a>apt</h4><p>Ubuntu 主要使用 apt(Advanced Package Tool)作为包管理工具。APT 是一套工具集，用于安装、更新、卸载和管理软件包。</p>\n<p>下面是一些常见的 apt 指令：<br>sudo apt update: 用于更新本地包信息的命令，以确保系统知道可用的软件包和更新。<br>sudo apt upgrade: 用于升级已安装软件包的命令。<br>sudo apt install package_name: 用于安装特定软件包的命令。<br>sudo apt remove package_name: 用于卸载已安装的软件包。<br>sudo apt search search_term: 用于在存储库中搜索软件包的命令。<br>sudo apt list: 用于列出可用的软件包。</p>\n<p>Ubuntu的软件存储库包含大量的开源软件包，而APT使得管理和安装这些软件包变得非常方便。APT还支持依赖解决，确保软件包安装时满足其所需的依赖项。</p>\n<p>虽然 Ubuntu 使用 apt，但是我们也可以在 Ubuntu 上面安装其他的包管理工具。</p>\n<h4 id=\"Arch-Linux\"><a href=\"#Arch-Linux\" class=\"headerlink\" title=\"Arch Linux\"></a>Arch Linux</h4><p>Arch Linux是一种面向Linux发烧友和高级用户的Linux发行版，以其<strong>极简的设计和强大的定制性</strong>而闻名。</p>\n<p>Arch Linux采用滚动发布模型，这意味着它不会按照固定的版本发布，而是持续更新软件包以提供最新的功能和安全性修复。</p>\n<p>Arch Linux的包管理系统使用称为”pacman”的工具，它允许用户轻松地安装、更新和删除软件包。用户可以通过Arch User Repository（AUR）来访问大量社区维护的软件包，这些软件包不包含在官方仓库中，从而增加了软件可用性。</p>\n<p>由于Arch Linux的定制性，用户必须亲自配置和设置系统，包括桌面环境、窗口管理器和其他系统组件。这使得Arch Linux适合那些喜欢自定义自己的Linux系统的用户，但也可能对新手来说有一定的学习曲线。</p>\n<h4 id=\"数据库结构\"><a href=\"#数据库结构\" class=\"headerlink\" title=\"数据库结构\"></a>数据库结构</h4><p>一般数据库中有着不同的用户，不同用户下有着不同是数据库，并且不同数据库下有着不同的表格。</p>\n<p>这是数据库管理的一种基本安全和隔离策略，有助于确保数据的完整性、安全性和隔离。</p>\n<p>下面是一些应用情况：</p>\n<ol>\n<li><p><strong>不同用户访问不同的数据库</strong>：不同用户可以被授予访问不同数据库的权限。这意味着用户A可以访问数据库A，而用户B可以访问数据库B，但它们无法相互访问对方的数据库。</p>\n</li>\n<li><p><strong>不同用户访问相同数据库的不同表格</strong>：即使多个用户可以访问相同的数据库，也可以根据其权限来访问和操作不同的表格。例如，用户A可能只能访问表格X，而用户B可以访问表格Y。</p>\n</li>\n<li><p><strong>权限级别不同</strong>：用户的权限级别可以不同，例如只读用户、读写用户、管理员等。这决定了用户可以执行的操作和管理的范围。</p>\n</li>\n</ol>\n<h4 id=\"GIS-系统\"><a href=\"#GIS-系统\" class=\"headerlink\" title=\"GIS 系统\"></a>GIS 系统</h4><h4 id=\"os-path-join-函数\"><a href=\"#os-path-join-函数\" class=\"headerlink\" title=\"os.path.join 函数\"></a>os.path.join 函数</h4><p><code>os.path.join</code> 函数用于构建文件和目录路径。<br>它可以接受任意数量的字符串参数，然后根据操作系统的规则构建有效的路径字符串。<br><strong>这对于创建跨平台的路径非常有用</strong>，因为不同操作系统使用不同的路径分隔符（例如，在Unix和Linux系统上是/，在Windows系统上是\\）。</p>\n<h4 id=\"os-listdir-函数\"><a href=\"#os-listdir-函数\" class=\"headerlink\" title=\"os.listdir() 函数\"></a>os.listdir() 函数</h4><p><code>os.listdir()</code> 函数用于列出指定目录中的文件和子目录。</p>\n<h4 id=\"Dos-命令\"><a href=\"#Dos-命令\" class=\"headerlink\" title=\"Dos 命令\"></a>Dos 命令</h4><h4 id=\"低代码平台\"><a href=\"#低代码平台\" class=\"headerlink\" title=\"低代码平台\"></a>低代码平台</h4><p>低代码平台(Low-Code Platform)是一种用于应用程序开发的软件开发工具或平台，它旨在简化和加速应用程序开发过程。这种平台允许开发人员使用图形用户界面、拖放式元素和少量的编程代码来创建应用程序，而不需要从头开始编写大量的传统编程代码。</p>\n<h4 id=\"JDK-和-JRE\"><a href=\"#JDK-和-JRE\" class=\"headerlink\" title=\"JDK 和 JRE\"></a>JDK 和 JRE</h4><ol>\n<li><p>Java开发工具包 (JDK): JDK 是用于开发Java应用程序的核心工具集。它包括Java编译器 (javac)、Java虚拟机 (JVM)、标准类库和各种开发工具。JDK是开发Java应用程序的必备组件，你需要安装它才能开始编写和运行Java代码。</p>\n</li>\n<li><p>Java运行时环境 (JRE): JRE 包含Java应用程序的运行时组件，包括Java虚拟机 (JVM) 和标准类库。如果你只需要运行Java应用程序而不是开发它们，你可以安装JRE而不是完整的JDK。</p>\n</li>\n</ol>\n<p>它们的简写是：<br>JDK: Java Development Kit（Java开发工具包）<br>JRE: Java Runtime Environment（Java运行时环境）</p>\n<p>javac 是 Java 编程语言中的编译器。它用于将 Java 源代码文件（以 .java 为扩展名）转换成 Java 字节码文件（以 .class 为扩展名），这些字节码文件可以由 Java 虚拟机（JVM）执行。编译器负责将源代码翻译成计算机可以理解的字节码，以便在运行时执行。</p>\n<p>使用 javac 命令，你可以编译你的 Java 源代码文件，检查代码中是否有语法错误，以及生成可执行的字节码文件。</p>\n<h4 id=\"使用-JVM-执行\"><a href=\"#使用-JVM-执行\" class=\"headerlink\" title=\"使用 JVM 执行\"></a>使用 JVM 执行</h4><p>使用 JVM 执行编译后的 java 代码，有很多重要作用。</p>\n<ol>\n<li><p>跨平台性：Java程序编译成字节码，而不是与特定操作系统或硬件相关的本地机器代码。这使得Java应用程序具有跨平台性，可以在支持Java的不同操作系统上运行，只要这些系统上安装了相应的JVM。这大大简化了跨平台开发和部署。</p>\n</li>\n<li><p>安全性：JVM提供了各种安全特性，包括字节码验证和安全沙箱，以确保Java应用程序在运行时不会执行危险的操作或访问系统资源。这有助于防止恶意代码的执行和对系统的潜在损害。</p>\n</li>\n<li><p>内存管理：JVM负责Java应用程序的内存管理，包括垃圾回收。这减轻了开发人员的负担，因为他们不必手动分配和释放内存，而是依赖JVM来自动处理内存管理。</p>\n</li>\n<li><p>性能优化：JVM具有即时编译器和其他优化技术，可以在运行时提高Java应用程序的性能。它可以根据应用程序的行为动态进行性能调整，以提供更高的执行效率。</p>\n</li>\n<li><p>多线程支持：JVM提供了多线程支持，允许Java应用程序轻松地创建和管理多个线程，以实现并行执行和并发操作。</p>\n</li>\n<li><p>异常处理：JVM提供了强大的异常处理机制，使开发人员能够更容易地检测和处理错误条件，从而增加应用程序的可靠性。</p>\n</li>\n</ol>\n<h4 id=\"python-解释器\"><a href=\"#python-解释器\" class=\"headerlink\" title=\"python 解释器\"></a>python 解释器</h4><p>Python也使用了虚拟机的概念，具有跨平台性质。Python代码通常由Python解释器执行，这个<strong>解释器充当了Python虚拟机的角色</strong>。Python解释器负责将Python源代码转换为字节码，然后在Python虚拟机上执行这些字节码。</p>\n<h4 id=\"Java-环境管理\"><a href=\"#Java-环境管理\" class=\"headerlink\" title=\"Java 环境管理\"></a>Java 环境管理</h4><p>构建工具(Apache Meaven \\ Gradle):</p>\n<ol>\n<li><p><strong>项目构建自动化</strong>。构建工具可以自动化构建过程，包括编译 Java 源代码、打包 JAR 文件、运行单元测试、生成文档等。这大大减少了开发人员手动操作的负担。</p>\n</li>\n<li><p><strong>依赖管理</strong>。构建工具可以管理项目的依赖关系，包括第三方库、框架和插件。</p>\n</li>\n<li><p>多模块项目支持：构建工具允许你将项目分解为多个模块，每个模块可以有自己的构建配置。这有助于组织大型项目并提高代码的模块化性。</p>\n</li>\n</ol>\n<p>依赖管理：</p>\n<ol>\n<li><p>引入第三方库：Java项目通常依赖于各种第三方库和框架，如数据库驱动程序、HTTP客户端库、日志库等。通过在项目配置文件中定义这些依赖关系，你可以告诉构建工具从中央仓库或其他位置下载这些库，然后将它们添加到你的项目中。</p>\n</li>\n<li><p>版本控制：依赖管理工具允许你指定依赖库的版本号，确保你使用的是特定版本，避免不同版本之间的冲突。</p>\n</li>\n<li><p>自动下载和更新：一旦依赖关系被定义，构建工具可以自动下载和更新这些依赖项，从而简化了维护过程。</p>\n</li>\n<li><p>可重用性：依赖管理使你的项目可以更容易地与其他项目共享，因为其他项目可以使用相同的依赖定义。</p>\n</li>\n</ol>\n<h4 id=\"vector-赋值\"><a href=\"#vector-赋值\" class=\"headerlink\" title=\"vector 赋值\"></a>vector 赋值</h4><ol>\n<li>使用赋值操作符</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::vector&lt;int&gt; source = &#123;1, 2, 3, 4, 5&#125;;</span><br><span class=\"line\">std::vector&lt;int&gt; destination;</span><br><span class=\"line\">destination = source; // 使用赋值操作符</span><br></pre></td></tr></table></figure>\n<ol>\n<li>使用拷贝构造函数</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::vector&lt;int&gt; source = &#123;1, 2, 3, 4, 5&#125;;</span><br><span class=\"line\">std::vector&lt;int&gt; destination(source); // 使用拷贝构造函数</span><br></pre></td></tr></table></figure>\n<ol>\n<li>使用 <code>assign</code> 函数</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::vector&lt;int&gt; source = &#123;1, 2, 3, 4, 5&#125;;</span><br><span class=\"line\">std::vector&lt;int&gt; destination;</span><br><span class=\"line\">destination.assign(source.begin(), source.end()); // 使用 assign 函数</span><br></pre></td></tr></table></figure>\n<ol>\n<li>使用范围初始化 / 范围构造函数</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::vector&lt;int&gt; source = &#123;1, 2, 3, 4, 5&#125;;</span><br><span class=\"line\">std::vector&lt;int&gt; destination(source.begin(), source.end()); // 范围初始化</span><br></pre></td></tr></table></figure>\n<h4 id=\"vector-构造\"><a href=\"#vector-构造\" class=\"headerlink\" title=\"vector 构造\"></a>vector 构造</h4><ol>\n<li>默认构造函数<br>其实也就是直接声明</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::vector&lt;int&gt; myVector; // 创建一个空的整数向量</span><br></pre></td></tr></table></figure>\n<ol>\n<li>指定大小的构造函数</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::vector&lt;int&gt; myVector(5); // 创建一个包含5个默认构造的整数的向量</span><br></pre></td></tr></table></figure>\n<p>默认值为 0</p>\n<ol>\n<li>指定大小和初值的构造函数</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::vector&lt;int&gt; myVector(5, 42); // 创建一个包含5个值为42的整数的向量</span><br></pre></td></tr></table></figure>\n<ol>\n<li>拷贝构造<br>有两种，一种是范围的拷贝构造，另一种是直接写另一个 vector 的拷贝构造</li>\n</ol>\n<p>```<br>std::vector<int> myVector(myIteratorBegin, myIteratorEnd); // 用迭代器范围初始化向量</int></p>\n<p>std::vector<int> myVector(otherVector); // 使用另一个向量初始化新向量<br>```s</int></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"apt\"><a href=\"#apt\" class=\"headerlink\" title=\"apt\"></a>apt</h4><p>Ubuntu 主要使用 apt(Advanced Package Tool)作为包管理工具。APT 是一套工具集，用于安装、更新、卸载和管理软件包。</p>\n<p>下面是一些常见的 apt 指令：<br>sudo apt update: 用于更新本地包信息的命令，以确保系统知道可用的软件包和更新。<br>sudo apt upgrade: 用于升级已安装软件包的命令。<br>sudo apt install package_name: 用于安装特定软件包的命令。<br>sudo apt remove package_name: 用于卸载已安装的软件包。<br>sudo apt search search_term: 用于在存储库中搜索软件包的命令。<br>sudo apt list: 用于列出可用的软件包。</p>\n<p>Ubuntu的软件存储库包含大量的开源软件包，而APT使得管理和安装这些软件包变得非常方便。APT还支持依赖解决，确保软件包安装时满足其所需的依赖项。</p>\n<p>虽然 Ubuntu 使用 apt，但是我们也可以在 Ubuntu 上面安装其他的包管理工具。</p>\n<h4 id=\"Arch-Linux\"><a href=\"#Arch-Linux\" class=\"headerlink\" title=\"Arch Linux\"></a>Arch Linux</h4><p>Arch Linux是一种面向Linux发烧友和高级用户的Linux发行版，以其<strong>极简的设计和强大的定制性</strong>而闻名。</p>\n<p>Arch Linux采用滚动发布模型，这意味着它不会按照固定的版本发布，而是持续更新软件包以提供最新的功能和安全性修复。</p>\n<p>Arch Linux的包管理系统使用称为”pacman”的工具，它允许用户轻松地安装、更新和删除软件包。用户可以通过Arch User Repository（AUR）来访问大量社区维护的软件包，这些软件包不包含在官方仓库中，从而增加了软件可用性。</p>\n<p>由于Arch Linux的定制性，用户必须亲自配置和设置系统，包括桌面环境、窗口管理器和其他系统组件。这使得Arch Linux适合那些喜欢自定义自己的Linux系统的用户，但也可能对新手来说有一定的学习曲线。</p>\n<h4 id=\"数据库结构\"><a href=\"#数据库结构\" class=\"headerlink\" title=\"数据库结构\"></a>数据库结构</h4><p>一般数据库中有着不同的用户，不同用户下有着不同是数据库，并且不同数据库下有着不同的表格。</p>\n<p>这是数据库管理的一种基本安全和隔离策略，有助于确保数据的完整性、安全性和隔离。</p>\n<p>下面是一些应用情况：</p>\n<ol>\n<li><p><strong>不同用户访问不同的数据库</strong>：不同用户可以被授予访问不同数据库的权限。这意味着用户A可以访问数据库A，而用户B可以访问数据库B，但它们无法相互访问对方的数据库。</p>\n</li>\n<li><p><strong>不同用户访问相同数据库的不同表格</strong>：即使多个用户可以访问相同的数据库，也可以根据其权限来访问和操作不同的表格。例如，用户A可能只能访问表格X，而用户B可以访问表格Y。</p>\n</li>\n<li><p><strong>权限级别不同</strong>：用户的权限级别可以不同，例如只读用户、读写用户、管理员等。这决定了用户可以执行的操作和管理的范围。</p>\n</li>\n</ol>\n<h4 id=\"GIS-系统\"><a href=\"#GIS-系统\" class=\"headerlink\" title=\"GIS 系统\"></a>GIS 系统</h4><h4 id=\"os-path-join-函数\"><a href=\"#os-path-join-函数\" class=\"headerlink\" title=\"os.path.join 函数\"></a>os.path.join 函数</h4><p><code>os.path.join</code> 函数用于构建文件和目录路径。<br>它可以接受任意数量的字符串参数，然后根据操作系统的规则构建有效的路径字符串。<br><strong>这对于创建跨平台的路径非常有用</strong>，因为不同操作系统使用不同的路径分隔符（例如，在Unix和Linux系统上是/，在Windows系统上是\\）。</p>\n<h4 id=\"os-listdir-函数\"><a href=\"#os-listdir-函数\" class=\"headerlink\" title=\"os.listdir() 函数\"></a>os.listdir() 函数</h4><p><code>os.listdir()</code> 函数用于列出指定目录中的文件和子目录。</p>\n<h4 id=\"Dos-命令\"><a href=\"#Dos-命令\" class=\"headerlink\" title=\"Dos 命令\"></a>Dos 命令</h4><h4 id=\"低代码平台\"><a href=\"#低代码平台\" class=\"headerlink\" title=\"低代码平台\"></a>低代码平台</h4><p>低代码平台(Low-Code Platform)是一种用于应用程序开发的软件开发工具或平台，它旨在简化和加速应用程序开发过程。这种平台允许开发人员使用图形用户界面、拖放式元素和少量的编程代码来创建应用程序，而不需要从头开始编写大量的传统编程代码。</p>\n<h4 id=\"JDK-和-JRE\"><a href=\"#JDK-和-JRE\" class=\"headerlink\" title=\"JDK 和 JRE\"></a>JDK 和 JRE</h4><ol>\n<li><p>Java开发工具包 (JDK): JDK 是用于开发Java应用程序的核心工具集。它包括Java编译器 (javac)、Java虚拟机 (JVM)、标准类库和各种开发工具。JDK是开发Java应用程序的必备组件，你需要安装它才能开始编写和运行Java代码。</p>\n</li>\n<li><p>Java运行时环境 (JRE): JRE 包含Java应用程序的运行时组件，包括Java虚拟机 (JVM) 和标准类库。如果你只需要运行Java应用程序而不是开发它们，你可以安装JRE而不是完整的JDK。</p>\n</li>\n</ol>\n<p>它们的简写是：<br>JDK: Java Development Kit（Java开发工具包）<br>JRE: Java Runtime Environment（Java运行时环境）</p>\n<p>javac 是 Java 编程语言中的编译器。它用于将 Java 源代码文件（以 .java 为扩展名）转换成 Java 字节码文件（以 .class 为扩展名），这些字节码文件可以由 Java 虚拟机（JVM）执行。编译器负责将源代码翻译成计算机可以理解的字节码，以便在运行时执行。</p>\n<p>使用 javac 命令，你可以编译你的 Java 源代码文件，检查代码中是否有语法错误，以及生成可执行的字节码文件。</p>\n<h4 id=\"使用-JVM-执行\"><a href=\"#使用-JVM-执行\" class=\"headerlink\" title=\"使用 JVM 执行\"></a>使用 JVM 执行</h4><p>使用 JVM 执行编译后的 java 代码，有很多重要作用。</p>\n<ol>\n<li><p>跨平台性：Java程序编译成字节码，而不是与特定操作系统或硬件相关的本地机器代码。这使得Java应用程序具有跨平台性，可以在支持Java的不同操作系统上运行，只要这些系统上安装了相应的JVM。这大大简化了跨平台开发和部署。</p>\n</li>\n<li><p>安全性：JVM提供了各种安全特性，包括字节码验证和安全沙箱，以确保Java应用程序在运行时不会执行危险的操作或访问系统资源。这有助于防止恶意代码的执行和对系统的潜在损害。</p>\n</li>\n<li><p>内存管理：JVM负责Java应用程序的内存管理，包括垃圾回收。这减轻了开发人员的负担，因为他们不必手动分配和释放内存，而是依赖JVM来自动处理内存管理。</p>\n</li>\n<li><p>性能优化：JVM具有即时编译器和其他优化技术，可以在运行时提高Java应用程序的性能。它可以根据应用程序的行为动态进行性能调整，以提供更高的执行效率。</p>\n</li>\n<li><p>多线程支持：JVM提供了多线程支持，允许Java应用程序轻松地创建和管理多个线程，以实现并行执行和并发操作。</p>\n</li>\n<li><p>异常处理：JVM提供了强大的异常处理机制，使开发人员能够更容易地检测和处理错误条件，从而增加应用程序的可靠性。</p>\n</li>\n</ol>\n<h4 id=\"python-解释器\"><a href=\"#python-解释器\" class=\"headerlink\" title=\"python 解释器\"></a>python 解释器</h4><p>Python也使用了虚拟机的概念，具有跨平台性质。Python代码通常由Python解释器执行，这个<strong>解释器充当了Python虚拟机的角色</strong>。Python解释器负责将Python源代码转换为字节码，然后在Python虚拟机上执行这些字节码。</p>\n<h4 id=\"Java-环境管理\"><a href=\"#Java-环境管理\" class=\"headerlink\" title=\"Java 环境管理\"></a>Java 环境管理</h4><p>构建工具(Apache Meaven \\ Gradle):</p>\n<ol>\n<li><p><strong>项目构建自动化</strong>。构建工具可以自动化构建过程，包括编译 Java 源代码、打包 JAR 文件、运行单元测试、生成文档等。这大大减少了开发人员手动操作的负担。</p>\n</li>\n<li><p><strong>依赖管理</strong>。构建工具可以管理项目的依赖关系，包括第三方库、框架和插件。</p>\n</li>\n<li><p>多模块项目支持：构建工具允许你将项目分解为多个模块，每个模块可以有自己的构建配置。这有助于组织大型项目并提高代码的模块化性。</p>\n</li>\n</ol>\n<p>依赖管理：</p>\n<ol>\n<li><p>引入第三方库：Java项目通常依赖于各种第三方库和框架，如数据库驱动程序、HTTP客户端库、日志库等。通过在项目配置文件中定义这些依赖关系，你可以告诉构建工具从中央仓库或其他位置下载这些库，然后将它们添加到你的项目中。</p>\n</li>\n<li><p>版本控制：依赖管理工具允许你指定依赖库的版本号，确保你使用的是特定版本，避免不同版本之间的冲突。</p>\n</li>\n<li><p>自动下载和更新：一旦依赖关系被定义，构建工具可以自动下载和更新这些依赖项，从而简化了维护过程。</p>\n</li>\n<li><p>可重用性：依赖管理使你的项目可以更容易地与其他项目共享，因为其他项目可以使用相同的依赖定义。</p>\n</li>\n</ol>\n<h4 id=\"vector-赋值\"><a href=\"#vector-赋值\" class=\"headerlink\" title=\"vector 赋值\"></a>vector 赋值</h4><ol>\n<li>使用赋值操作符</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::vector&lt;int&gt; source = &#123;1, 2, 3, 4, 5&#125;;</span><br><span class=\"line\">std::vector&lt;int&gt; destination;</span><br><span class=\"line\">destination = source; // 使用赋值操作符</span><br></pre></td></tr></table></figure>\n<ol>\n<li>使用拷贝构造函数</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::vector&lt;int&gt; source = &#123;1, 2, 3, 4, 5&#125;;</span><br><span class=\"line\">std::vector&lt;int&gt; destination(source); // 使用拷贝构造函数</span><br></pre></td></tr></table></figure>\n<ol>\n<li>使用 <code>assign</code> 函数</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::vector&lt;int&gt; source = &#123;1, 2, 3, 4, 5&#125;;</span><br><span class=\"line\">std::vector&lt;int&gt; destination;</span><br><span class=\"line\">destination.assign(source.begin(), source.end()); // 使用 assign 函数</span><br></pre></td></tr></table></figure>\n<ol>\n<li>使用范围初始化 / 范围构造函数</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::vector&lt;int&gt; source = &#123;1, 2, 3, 4, 5&#125;;</span><br><span class=\"line\">std::vector&lt;int&gt; destination(source.begin(), source.end()); // 范围初始化</span><br></pre></td></tr></table></figure>\n<h4 id=\"vector-构造\"><a href=\"#vector-构造\" class=\"headerlink\" title=\"vector 构造\"></a>vector 构造</h4><ol>\n<li>默认构造函数<br>其实也就是直接声明</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::vector&lt;int&gt; myVector; // 创建一个空的整数向量</span><br></pre></td></tr></table></figure>\n<ol>\n<li>指定大小的构造函数</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::vector&lt;int&gt; myVector(5); // 创建一个包含5个默认构造的整数的向量</span><br></pre></td></tr></table></figure>\n<p>默认值为 0</p>\n<ol>\n<li>指定大小和初值的构造函数</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::vector&lt;int&gt; myVector(5, 42); // 创建一个包含5个值为42的整数的向量</span><br></pre></td></tr></table></figure>\n<ol>\n<li>拷贝构造<br>有两种，一种是范围的拷贝构造，另一种是直接写另一个 vector 的拷贝构造</li>\n</ol>\n<p>```<br>std::vector<int> myVector(myIteratorBegin, myIteratorEnd); // 用迭代器范围初始化向量</int></p>\n<p>std::vector<int> myVector(otherVector); // 使用另一个向量初始化新向量<br>```s</int></p>\n"}],"PostAsset":[{"_id":"source/_posts/CSS记录/像素.png","slug":"像素.png","post":"clov7sznz00015oog5kvx0c9e","modified":0,"renderable":0},{"_id":"source/_posts/CSS记录/分区.png","slug":"分区.png","post":"clov7sznz00015oog5kvx0c9e","modified":0,"renderable":0},{"_id":"source/_posts/CSS记录/各元素显示模式.png","slug":"各元素显示模式.png","post":"clov7sznz00015oog5kvx0c9e","modified":0,"renderable":0},{"_id":"source/_posts/CSS记录/布局技巧.png","slug":"布局技巧.png","post":"clov7sznz00015oog5kvx0c9e","modified":0,"renderable":0},{"_id":"source/_posts/CSS记录/常见布局名词.png","slug":"常见布局名词.png","post":"clov7sznz00015oog5kvx0c9e","modified":0,"renderable":0},{"_id":"source/_posts/CSS记录/开发者模式.png","slug":"开发者模式.png","post":"clov7sznz00015oog5kvx0c9e","modified":0,"renderable":0},{"_id":"source/_posts/CSS记录/练习1.png","slug":"练习1.png","post":"clov7sznz00015oog5kvx0c9e","modified":0,"renderable":0},{"_id":"source/_posts/CSS记录/色相环.png","slug":"色相环.png","post":"clov7sznz00015oog5kvx0c9e","modified":0,"renderable":0},{"_id":"source/_posts/JavaScript基础/bom对象.png","slug":"bom对象.png","post":"clov7szo100045oog03q2blxi","modified":0,"renderable":0},{"_id":"source/_posts/JavaScript基础/childnodes缺陷.png","slug":"childnodes缺陷.png","post":"clov7szo100045oog03q2blxi","modified":0,"renderable":0},{"_id":"source/_posts/JavaScript基础/document和window.png","slug":"document和window.png","post":"clov7szo100045oog03q2blxi","modified":0,"renderable":0},{"_id":"source/_posts/JavaScript基础/对象.png","slug":"对象.png","post":"clov7szo100045oog03q2blxi","modified":0,"renderable":0},{"_id":"source/_posts/JavaScript基础/执行顺序.png","slug":"执行顺序.png","post":"clov7szo100045oog03q2blxi","modified":0,"renderable":0},{"_id":"source/_posts/JavaScript基础/查找子节点.png","slug":"查找子节点.png","post":"clov7szo100045oog03q2blxi","modified":0,"renderable":0},{"_id":"source/_posts/JavaScript基础/自结束标签.png","slug":"自结束标签.png","post":"clov7szo100045oog03q2blxi","modified":0,"renderable":0},{"_id":"source/_posts/JavaScript基础/节点.png","slug":"节点.png","post":"clov7szo100045oog03q2blxi","modified":0,"renderable":0},{"_id":"source/_posts/JavaScript基础/节点的属性.png","slug":"节点的属性.png","post":"clov7szo100045oog03q2blxi","modified":0,"renderable":0},{"_id":"source/_posts/JavaScript基础/获取元素节点.png","slug":"获取元素节点.png","post":"clov7szo100045oog03q2blxi","modified":0,"renderable":0},{"_id":"source/_posts/JavaScript基础/获取兄弟节点.png","slug":"获取兄弟节点.png","post":"clov7szo100045oog03q2blxi","modified":0,"renderable":0},{"_id":"source/_posts/JavaScript进阶/原型.png","slug":"原型.png","post":"clov7szo200055oogc8pv0wep","modified":0,"renderable":0},{"_id":"source/_posts/JavaScript进阶/原型链.png","slug":"原型链.png","post":"clov7szo200055oogc8pv0wep","modified":0,"renderable":0},{"_id":"source/_posts/matlab记录/matlab点乘点除.png","slug":"matlab点乘点除.png","post":"clov7szo300095oogb5wn64eh","modified":0,"renderable":0},{"_id":"source/_posts/matlab记录/meshgrid生成网格.png","slug":"meshgrid生成网格.png","post":"clov7szo300095oogb5wn64eh","modified":0,"renderable":0},{"_id":"source/_posts/matlab记录/subs函数.png","slug":"subs函数.png","post":"clov7szo300095oogb5wn64eh","modified":0,"renderable":0},{"_id":"source/_posts/matlab记录/灰度图.png","slug":"灰度图.png","post":"clov7szo300095oogb5wn64eh","modified":0,"renderable":0},{"_id":"source/_posts/matlab记录/矩阵操作.jpg","slug":"矩阵操作.jpg","post":"clov7szo300095oogb5wn64eh","modified":0,"renderable":0},{"_id":"source/_posts/python-数学建模与实验/join函数.png","slug":"join函数.png","post":"clov7szo4000a5oog9l8x4n5u","modified":0,"renderable":0},{"_id":"source/_posts/python-数学建模与实验/一般索引.png","slug":"一般索引.png","post":"clov7szo4000a5oog9l8x4n5u","modified":0,"renderable":0},{"_id":"source/_posts/python-数学建模与实验/二进制文件读取.png","slug":"二进制文件读取.png","post":"clov7szo4000a5oog9l8x4n5u","modified":0,"renderable":0},{"_id":"source/_posts/python-数学建模与实验/常见样式颜色.png","slug":"常见样式颜色.png","post":"clov7szo4000a5oog9l8x4n5u","modified":0,"renderable":0},{"_id":"source/_posts/python-数学建模与实验/数组创建.png","slug":"数组创建.png","post":"clov7szo4000a5oog9l8x4n5u","modified":0,"renderable":0},{"_id":"source/_posts/python-数学建模与实验/文件操作方式.png","slug":"文件操作方式.png","post":"clov7szo4000a5oog9l8x4n5u","modified":0,"renderable":0},{"_id":"source/_posts/python-数学建模与实验/文本读取.png","slug":"文本读取.png","post":"clov7szo4000a5oog9l8x4n5u","modified":0,"renderable":0},{"_id":"source/_posts/python爬虫/cookie存储信息.png","slug":"cookie存储信息.png","post":"clov7szo7000i5ooghahue5t0","modified":0,"renderable":0},{"_id":"source/_posts/python爬虫/html代码.png","slug":"html代码.png","post":"clov7szo7000i5ooghahue5t0","modified":0,"renderable":0},{"_id":"source/_posts/python爬虫/os模块.png","slug":"os模块.png","post":"clov7szo7000i5ooghahue5t0","modified":0,"renderable":0},{"_id":"source/_posts/python爬虫/selenium定位元素.png","slug":"selenium定位元素.png","post":"clov7szo7000i5ooghahue5t0","modified":0,"renderable":0},{"_id":"source/_posts/python爬虫/xpath.png","slug":"xpath.png","post":"clov7szo7000i5ooghahue5t0","modified":0,"renderable":0},{"_id":"source/_posts/python爬虫/常用文件操作.png","slug":"常用文件操作.png","post":"clov7szo7000i5ooghahue5t0","modified":0,"renderable":0},{"_id":"source/_posts/python爬虫/未知节点.png","slug":"未知节点.png","post":"clov7szo7000i5ooghahue5t0","modified":0,"renderable":0},{"_id":"source/_posts/python爬虫/读取操作类型.png","slug":"读取操作类型.png","post":"clov7szo7000i5ooghahue5t0","modified":0,"renderable":0},{"_id":"source/_posts/python爬虫/转义字符.png","slug":"转义字符.png","post":"clov7szo7000i5ooghahue5t0","modified":0,"renderable":0},{"_id":"source/_posts/python爬虫/量词.png","slug":"量词.png","post":"clov7szo7000i5ooghahue5t0","modified":0,"renderable":0},{"_id":"source/_posts/python爬虫/键盘操作.png","slug":"键盘操作.png","post":"clov7szo7000i5ooghahue5t0","modified":0,"renderable":0},{"_id":"source/_posts/python爬虫/鼠标操作.png","slug":"鼠标操作.png","post":"clov7szo7000i5ooghahue5t0","modified":0,"renderable":0},{"_id":"source/_posts/二项式反演/引理.png","slug":"引理.png","post":"clov7szo7000g5oog7ik0bhpx","modified":0,"renderable":0},{"_id":"source/_posts/test/machine_learning.jpg","slug":"machine_learning.jpg","post":"clov7szo8000k5oogg68318sx","modified":0,"renderable":0},{"_id":"source/_posts/博弈论及其应用/非合作博弈划分.png","slug":"非合作博弈划分.png","post":"clov7szo9000q5oogfkjkhwyg","modified":0,"renderable":0},{"_id":"source/_posts/回归分析与时间序列方法/显著性检验.png","slug":"显著性检验.png","post":"clov7szo9000r5oog41w14ux6","modified":0,"renderable":0},{"_id":"source/_posts/插值与拟合建模/拉格朗日插值公式.png","slug":"拉格朗日插值公式.png","post":"clov7szoa000v5ooga28yamyl","modified":0,"renderable":0},{"_id":"source/_posts/插值与拟合建模/插值条件非齐次方程组.jpg","slug":"插值条件非齐次方程组.jpg","post":"clov7szoa000v5ooga28yamyl","modified":0,"renderable":0},{"_id":"source/_posts/插值与拟合建模/插值条件非齐次方程组.png","slug":"插值条件非齐次方程组.png","post":"clov7szoa000v5ooga28yamyl","modified":0,"renderable":0},{"_id":"source/_posts/微分方程模型/liuliangxishu.jpg","slug":"liuliangxishu.jpg","post":"clov7szob000x5oogeyep3lv0","modified":0,"renderable":0},{"_id":"source/_posts/抢课脚本/fiddler.png","slug":"fiddler.png","post":"clov7szob000z5oog1zlh07hg","modified":0,"renderable":0},{"_id":"source/_posts/抢课脚本/selectCourseInfo.png","slug":"selectCourseInfo.png","post":"clov7szob000z5oog1zlh07hg","modified":0,"renderable":0},{"_id":"source/_posts/数据结构关键记录/入环点.png","slug":"入环点.png","post":"clov7szoc00135oog9km45ios","modified":0,"renderable":0},{"_id":"source/_posts/数据结构关键记录/分治时间复杂度.png","slug":"分治时间复杂度.png","post":"clov7szoc00135oog9km45ios","modified":0,"renderable":0},{"_id":"source/_posts/数据结构关键记录/分治法极大点.png","slug":"分治法极大点.png","post":"clov7szoc00135oog9km45ios","modified":0,"renderable":0},{"_id":"source/_posts/数据结构关键记录/归并排序时间复杂度.png","slug":"归并排序时间复杂度.png","post":"clov7szoc00135oog9km45ios","modified":0,"renderable":0},{"_id":"source/_posts/数据结构关键记录/快速排序平均时间复杂度.png","slug":"快速排序平均时间复杂度.png","post":"clov7szoc00135oog9km45ios","modified":0,"renderable":0},{"_id":"source/_posts/数据结构关键记录/快速排序时间复杂度.png","slug":"快速排序时间复杂度.png","post":"clov7szoc00135oog9km45ios","modified":0,"renderable":0},{"_id":"source/_posts/数据结构关键记录/快速排序算法.png","slug":"快速排序算法.png","post":"clov7szoc00135oog9km45ios","modified":0,"renderable":0},{"_id":"source/_posts/数据结构关键记录/排序法极大点.png","slug":"排序法极大点.png","post":"clov7szoc00135oog9km45ios","modified":0,"renderable":0},{"_id":"source/_posts/数据结构关键记录/线索二叉树.png","slug":"线索二叉树.png","post":"clov7szoc00135oog9km45ios","modified":0,"renderable":0},{"_id":"source/_posts/矩阵求导/矩阵变元求导公式.png","slug":"矩阵变元求导公式.png","post":"clov7szoh001r5ooge6ex7xzo","modified":0,"renderable":0},{"_id":"source/_posts/矩阵求导/矩阵求导.png","slug":"矩阵求导.png","post":"clov7szoh001r5ooge6ex7xzo","modified":0,"renderable":0},{"_id":"source/_posts/组合优化与随机性模型/报童问题.png","slug":"报童问题.png","post":"clov7szoi001v5oog77oj92nu","modified":0,"renderable":0},{"_id":"source/_posts/规划论模型/linprog.png","slug":"linprog.png","post":"clov7szoj00215oog1oze7n4g","modified":0,"renderable":0},{"_id":"source/_posts/规划论模型/problem1.jpg","slug":"problem1.jpg","post":"clov7szoj00215oog1oze7n4g","modified":0,"renderable":0},{"_id":"source/_posts/规划论模型/指派问题.png","slug":"指派问题.png","post":"clov7szoj00215oog1oze7n4g","modified":0,"renderable":0},{"_id":"source/_posts/规划论模型/整数规划.png","slug":"整数规划.png","post":"clov7szoj00215oog1oze7n4g","modified":0,"renderable":0},{"_id":"source/_posts/规划论模型/模型.png","slug":"模型.png","post":"clov7szoj00215oog1oze7n4g","modified":0,"renderable":0},{"_id":"source/_posts/规划论模型/等式.png","slug":"等式.png","post":"clov7szoj00215oog1oze7n4g","modified":0,"renderable":0},{"_id":"source/_posts/规划论模型/股票.png","slug":"股票.png","post":"clov7szoj00215oog1oze7n4g","modified":0,"renderable":0},{"_id":"source/_posts/计算机组成原理/主机架构.png","slug":"主机架构.png","post":"clov7szok00265oogdnxacksx","modified":0,"renderable":0},{"_id":"source/_posts/计算机组成原理/乘法操作.png","slug":"乘法操作.png","post":"clov7szok00265oogdnxacksx","modified":0,"renderable":0},{"_id":"source/_posts/计算机组成原理/以存储器为中心的总线结构.png","slug":"以存储器为中心的总线结构.png","post":"clov7szok00265oogdnxacksx","modified":0,"renderable":0},{"_id":"source/_posts/计算机组成原理/位扩展.png","slug":"位扩展.png","post":"clov7szok00265oogdnxacksx","modified":0,"renderable":0},{"_id":"source/_posts/计算机组成原理/冯诺伊曼计算机硬件框架.png","slug":"冯诺伊曼计算机硬件框架.png","post":"clov7szok00265oogdnxacksx","modified":0,"renderable":0},{"_id":"source/_posts/计算机组成原理/动态RAM和静态RAM比较.png","slug":"动态RAM和静态RAM比较.png","post":"clov7szok00265oogdnxacksx","modified":0,"renderable":0},{"_id":"source/_posts/计算机组成原理/单总线结构.png","slug":"单总线结构.png","post":"clov7szok00265oogdnxacksx","modified":0,"renderable":0},{"_id":"source/_posts/计算机组成原理/取数操作.png","slug":"取数操作.png","post":"clov7szok00265oogdnxacksx","modified":0,"renderable":0},{"_id":"source/_posts/计算机组成原理/字和位扩展.png","slug":"字和位扩展.png","post":"clov7szok00265oogdnxacksx","modified":0,"renderable":0},{"_id":"source/_posts/计算机组成原理/字扩展.png","slug":"字扩展.png","post":"clov7szok00265oogdnxacksx","modified":0,"renderable":0},{"_id":"source/_posts/计算机组成原理/存储器层次.png","slug":"存储器层次.png","post":"clov7szok00265oogdnxacksx","modified":0,"renderable":0},{"_id":"source/_posts/计算机组成原理/存储器组成.png","slug":"存储器组成.png","post":"clov7szok00265oogdnxacksx","modified":0,"renderable":0},{"_id":"source/_posts/计算机组成原理/总线特性.png","slug":"总线特性.png","post":"clov7szok00265oogdnxacksx","modified":0,"renderable":0},{"_id":"source/_posts/计算机组成原理/控制器结构.png","slug":"控制器结构.png","post":"clov7szok00265oogdnxacksx","modified":0,"renderable":0},{"_id":"source/_posts/计算机组成原理/计算机的多样性.png","slug":"计算机的多样性.png","post":"clov7szok00265oogdnxacksx","modified":0,"renderable":0},{"_id":"source/_posts/计算机组成原理/语言发展.png","slug":"语言发展.png","post":"clov7szok00265oogdnxacksx","modified":0,"renderable":0},{"_id":"source/_posts/计算机组成原理/运算器基本组成及操作.png","slug":"运算器基本组成及操作.png","post":"clov7szok00265oogdnxacksx","modified":0,"renderable":0},{"_id":"source/_posts/计算机组成原理/除法操作.png","slug":"除法操作.png","post":"clov7szok00265oogdnxacksx","modified":0,"renderable":0},{"_id":"source/_posts/计算机组成原理/面向CPU的总线结构.png","slug":"面向CPU的总线结构.png","post":"clov7szok00265oogdnxacksx","modified":0,"renderable":0},{"_id":"source/_posts/杂记/endl与n.png","slug":"endl与n.png","post":"clov7szol002a5oog6bb1hydc","modified":0,"renderable":0},{"_id":"source/_posts/杂记/FTP工作流程.png","slug":"FTP工作流程.png","post":"clov7szol002a5oog6bb1hydc","modified":0,"renderable":0},{"_id":"source/_posts/杂记/http和tcp关系.png","slug":"http和tcp关系.png","post":"clov7szol002a5oog6bb1hydc","modified":0,"renderable":0},{"_id":"source/_posts/杂记/h和hpp.png","slug":"h和hpp.png","post":"clov7szol002a5oog6bb1hydc","modified":0,"renderable":0},{"_id":"source/_posts/杂记/lambda表达式.png","slug":"lambda表达式.png","post":"clov7szol002a5oog6bb1hydc","modified":0,"renderable":0},{"_id":"source/_posts/杂记/new构造.png","slug":"new构造.png","post":"clov7szol002a5oog6bb1hydc","modified":0,"renderable":0},{"_id":"source/_posts/杂记/OSI与TCPIP关联.png","slug":"OSI与TCPIP关联.png","post":"clov7szol002a5oog6bb1hydc","modified":0,"renderable":0},{"_id":"source/_posts/杂记/OSI模型.png","slug":"OSI模型.png","post":"clov7szol002a5oog6bb1hydc","modified":0,"renderable":0},{"_id":"source/_posts/杂记/strcpy和strdup.png","slug":"strcpy和strdup.png","post":"clov7szol002a5oog6bb1hydc","modified":0,"renderable":0},{"_id":"source/_posts/杂记/strdup使用.png","slug":"strdup使用.png","post":"clov7szol002a5oog6bb1hydc","modified":0,"renderable":0},{"_id":"source/_posts/杂记/字符串面值的赋值.png","slug":"字符串面值的赋值.png","post":"clov7szol002a5oog6bb1hydc","modified":0,"renderable":0},{"_id":"source/_posts/杂记/实体字符.png","slug":"实体字符.png","post":"clov7szol002a5oog6bb1hydc","modified":0,"renderable":0},{"_id":"source/_posts/杂记/非递归扩展欧几里得.png","slug":"非递归扩展欧几里得.png","post":"clov7szol002a5oog6bb1hydc","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"clov7sznz00015oog5kvx0c9e","tag_id":"clov7szo100035oogadzd74yd","_id":"clov7szo300085oog0cfc0r6o"},{"post_id":"clov7szo100045oog03q2blxi","tag_id":"clov7szo300075oogghyw4ny3","_id":"clov7szo6000d5oog40nbaize"},{"post_id":"clov7szo200055oogc8pv0wep","tag_id":"clov7szo300075oogghyw4ny3","_id":"clov7szo7000h5oogfuddfsci"},{"post_id":"clov7szo300095oogb5wn64eh","tag_id":"clov7szo6000f5oog9kg48j4e","_id":"clov7szo8000l5oog4iu93dhm"},{"post_id":"clov7szo4000a5oog9l8x4n5u","tag_id":"clov7szo8000j5oogc2b5akpj","_id":"clov7szo9000p5oog7rphh9x3"},{"post_id":"clov7szo7000g5oog7ik0bhpx","tag_id":"clov7szoa000s5oog8b1wecyh","_id":"clov7szob000y5oog6b7f1lqg"},{"post_id":"clov7szo7000i5ooghahue5t0","tag_id":"clov7szo8000j5oogc2b5akpj","_id":"clov7szoc00125oogdvud6162"},{"post_id":"clov7szo9000q5oogfkjkhwyg","tag_id":"clov7szoc00105oogelro3gww","_id":"clov7szod00165oog3oxm4g5q"},{"post_id":"clov7szo9000r5oog41w14ux6","tag_id":"clov7szoc00145oogdj1af0hp","_id":"clov7szoe001a5oogats9bxsq"},{"post_id":"clov7szod00175oog15dh58oy","tag_id":"clov7szoc00145oogdj1af0hp","_id":"clov7szoe001b5oogbs670284"},{"post_id":"clov7szoa000v5ooga28yamyl","tag_id":"clov7szoc00145oogdj1af0hp","_id":"clov7szoe001d5oogc8q9bbt7"},{"post_id":"clov7szob000x5oogeyep3lv0","tag_id":"clov7szoc00145oogdj1af0hp","_id":"clov7szoe001f5oogc7d57lmh"},{"post_id":"clov7szob000z5oog1zlh07hg","tag_id":"clov7szoe001e5oog7r003yt5","_id":"clov7szoe001h5ooggd1715t9"},{"post_id":"clov7szoc00115oogaazq0jfu","tag_id":"clov7szoc00145oogdj1af0hp","_id":"clov7szof001j5ooggu9sdaup"},{"post_id":"clov7szoc00135oog9km45ios","tag_id":"clov7szoe001i5oogdr8k1wqg","_id":"clov7szof001l5oog372ves0f"},{"post_id":"clov7szod00155oogb5qua40k","tag_id":"clov7szof001k5oog1gu144hu","_id":"clov7szof001m5oog0lq6fo8f"},{"post_id":"clov7szog001o5oog7fq12xn6","tag_id":"clov7szoc00145oogdj1af0hp","_id":"clov7szoh001q5oog7u484zj8"},{"post_id":"clov7szoh001r5ooge6ex7xzo","tag_id":"clov7szoc00145oogdj1af0hp","_id":"clov7szoi001u5oog3w9dgl9d"},{"post_id":"clov7szoi001t5oog3laq8gyq","tag_id":"clov7szoc00145oogdj1af0hp","_id":"clov7szoi001w5oog08w91e6o"},{"post_id":"clov7szoi001v5oog77oj92nu","tag_id":"clov7szoc00145oogdj1af0hp","_id":"clov7szoj001y5oog52pu7qy7"},{"post_id":"clov7szoh001p5oogdnjbefvw","tag_id":"clov7szoh001s5oog59pi0o66","_id":"clov7szoj00205oogbawrc5c3"},{"post_id":"clov7szoj00215oog1oze7n4g","tag_id":"clov7szoc00145oogdj1af0hp","_id":"clov7szok00235oogdmg43qkv"},{"post_id":"clov7szol00295oogg2a5f9fr","tag_id":"clov7szoc00145oogdj1af0hp","_id":"clov7szom002b5oog44n6hjhf"},{"post_id":"clov7szok00265oogdnxacksx","tag_id":"clov7szol00285oog7t6lguzu","_id":"clov7szom002d5oogbryo1h8y"},{"post_id":"clov7szol00275oogdrc84ngd","tag_id":"clov7szom002c5oog8xg9gs4t","_id":"clov7szom002f5oog0isp31yj"},{"post_id":"clov7szol002a5oog6bb1hydc","tag_id":"clov7szom002e5oogeg2vhyfk","_id":"clov7szom002g5oogcp0d1giy"},{"post_id":"clov7szog001n5ooga14m9cr6","tag_id":"clov7szof001k5oog1gu144hu","_id":"clovcr6fz0000l8pccofa8dc7"},{"post_id":"clov7szoj00225oogbb13cpjz","tag_id":"clov7szof001k5oog1gu144hu","_id":"clovcsb590000xspcfdzz0bik"},{"post_id":"clov7szoa000u5ooggdpg2n18","tag_id":"clov7szof001k5oog1gu144hu","_id":"clovcvwc10001xspc0e78e1ap"}],"Tag":[{"name":"CSS, WEB","_id":"clov7szo100035oogadzd74yd"},{"name":"JavaScript, WEB","_id":"clov7szo300075oogghyw4ny3"},{"name":"matlab","_id":"clov7szo6000f5oog9kg48j4e"},{"name":"python","_id":"clov7szo8000j5oogc2b5akpj"},{"name":"Just record some learning experiences.","_id":"clov7szo9000n5ooggbki9gi8"},{"name":"Math Algorithm","_id":"clov7szoa000s5oog8b1wecyh"},{"name":"GameTheory","_id":"clov7szoc00105oogelro3gww"},{"name":"Mathematic","_id":"clov7szoc00145oogdj1af0hp"},{"name":"JavaScript","_id":"clov7szoe001e5oog7r003yt5"},{"name":"DataStructure","_id":"clov7szoe001i5oogdr8k1wqg"},{"name":"Data Structure","_id":"clov7szof001k5oog1gu144hu"},{"name":"web","_id":"clov7szoh001s5oog59pi0o66"},{"name":"ComputerScience","_id":"clov7szol00285oog7t6lguzu"},{"name":"machine learning","_id":"clov7szom002c5oog8xg9gs4t"},{"name":"Miscellaneous","_id":"clov7szom002e5oogeg2vhyfk"}]}}